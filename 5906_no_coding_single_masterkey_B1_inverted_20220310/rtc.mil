_form_num:
  begin
//rtc.c,13 :: 		ByteToStr(num, tnum) ;
	FARG_ByteToStr+0 <- FARG_form_num+0
	FARG_ByteToStr+1 <- 0
	CALL _ByteToStr
//rtc.c,14 :: 		if (tnum[0] == ' ')  tnum[0] = '0';
	if ( _tnum != 32) then goto L_form_num_0
	_tnum <- 48
L_form_num_0:
//rtc.c,15 :: 		if (tnum[1] == ' ')  tnum[1] = '0';
	if ( _tnum+1 != 32) then goto L_form_num_1
	_tnum+1 <- 48
L_form_num_1:
//rtc.c,16 :: 		tnum[3] = '\0';
	_tnum+3 <- 0
  end

_Read_Time:
  begin
//rtc.c,24 :: 		I2C_Init(100000);         // initialize I2C
	asm: MOVLW	62
	asm: MOVWF	SSPADD
	CALL _I2C_Init
//rtc.c,25 :: 		I2C_Start();
	CALL _I2C_Start
//rtc.c,26 :: 		I2C_Wr(0xD0);                 // Slave address DS1338, write to RTC
	FARG_I2C_Wr+0 <- 208
	CALL _I2C_Wr
//rtc.c,27 :: 		I2C_Wr(0x00);                 // Byte adress
	FARG_I2C_Wr+0 <- 0
	CALL _I2C_Wr
//rtc.c,28 :: 		I2C_Repeated_Start();
	CALL _I2C_Repeated_Start
//rtc.c,29 :: 		I2C_Wr(0xD1);                 // Slave address DS1338, read from RTC
	FARG_I2C_Wr+0 <- 209
	CALL _I2C_Wr
//rtc.c,30 :: 		tsecond =I2C_Rd(1);
	FARG_I2C_Rd+0 <- 1
	CALL _I2C_Rd
	Read_Time_tsecond_L0 <- STACK_0
//rtc.c,31 :: 		tminute =I2C_Rd(1);
	FARG_I2C_Rd+0 <- 1
	CALL _I2C_Rd
	Read_Time_tminute_L0 <- STACK_0
//rtc.c,32 :: 		thour =I2C_Rd(1);
	FARG_I2C_Rd+0 <- 1
	CALL _I2C_Rd
	Read_Time_thour_L0 <- STACK_0
//rtc.c,33 :: 		tday =I2C_Rd(1);
	FARG_I2C_Rd+0 <- 1
	CALL _I2C_Rd
//rtc.c,34 :: 		tdate =I2C_Rd(1);
	FARG_I2C_Rd+0 <- 1
	CALL _I2C_Rd
	Read_Time_tdate_L0 <- STACK_0
//rtc.c,35 :: 		tmonth =I2C_Rd(1);
	FARG_I2C_Rd+0 <- 1
	CALL _I2C_Rd
	Read_Time_tmonth_L0 <- STACK_0
//rtc.c,36 :: 		tyear =I2C_Rd(0);              // LAST DATA BYTE IS FOLLOWED BY A NACK
	FARG_I2C_Rd+0 <- 0
	CALL _I2C_Rd
	Read_Time_tyear_L0 <- STACK_0
//rtc.c,37 :: 		I2C_Stop();
	CALL _I2C_Stop
//rtc.c,39 :: 		second  =  ((tsecond & 0xF0) >> 4)*10 + (tsecond & 0x0F);
	_second <-  Read_Time_tsecond_L0 & 240
	STACK_0 <- 4
	_second <-  _second shr STACK_0
	_second <-  _second * 10  [Optimized To Dest]
	STACK_0 <-  Read_Time_tsecond_L0 & 15
	_second <-  _second + STACK_0  [Optimized To Dest]
	_second <- _second
//rtc.c,40 :: 		minute  =  ((tminute & 0xF0) >> 4)*10 + (tminute & 0x0F);
	_minute <-  Read_Time_tminute_L0 & 240
	STACK_0 <- 4
	_minute <-  _minute shr STACK_0
	_minute <-  _minute * 10  [Optimized To Dest]
	STACK_0 <-  Read_Time_tminute_L0 & 15
	_minute <-  _minute + STACK_0  [Optimized To Dest]
	_minute <- _minute
//rtc.c,41 :: 		hour    =  ((thour & 0xF0) >> 4)*10 + (thour & 0x0F);
	_hour <-  Read_Time_thour_L0 & 240
	STACK_0 <- 4
	_hour <-  _hour shr STACK_0
	_hour <-  _hour * 10  [Optimized To Dest]
	STACK_0 <-  Read_Time_thour_L0 & 15
	_hour <-  _hour + STACK_0  [Optimized To Dest]
	_hour <- _hour
//rtc.c,42 :: 		date    =  ((tdate & 0xF0) >> 4)*10 + (tdate & 0x0F);
	_date <-  Read_Time_tdate_L0 & 240
	STACK_0 <- 4
	_date <-  _date shr STACK_0
	_date <-  _date * 10  [Optimized To Dest]
	STACK_0 <-  Read_Time_tdate_L0 & 15
	_date <-  _date + STACK_0  [Optimized To Dest]
	_date <- _date
//rtc.c,43 :: 		month   =  ((tmonth & 0xF0) >> 4)*10 + (tmonth & 0x0F);
	_month <-  Read_Time_tmonth_L0 & 240
	STACK_0 <- 4
	_month <-  _month shr STACK_0
	_month <-  _month * 10  [Optimized To Dest]
	STACK_0 <-  Read_Time_tmonth_L0 & 15
	_month <-  _month + STACK_0  [Optimized To Dest]
	_month <- _month
//rtc.c,44 :: 		year    =  ((tyear & 0xF0) >> 4)*10 + (tyear & 0x0F);
	_year <-  Read_Time_tyear_L0 & 240
	STACK_0 <- 4
	_year <-  _year shr STACK_0
	_year <-  _year * 10  [Optimized To Dest]
	STACK_0 <-  Read_Time_tyear_L0 & 15
	_year <-  _year + STACK_0  [Optimized To Dest]
	_year <- _year
  end

_Display_Time:
  begin
//rtc.c,51 :: 		dyna[0] = '\0';
	_dyna <- 0
//rtc.c,52 :: 		form_num (date);   //запись в строку  tnum числа  day
	FARG_form_num+0 <- _date
	CALL _form_num
//rtc.c,53 :: 		strncat (dyna, tnum, 3);
	FARG_strncat+0 <- 0
	FARG_strncat+2 <- 0
	FARG_strncat+4 <- 3
	CALL _strncat
//rtc.c,54 :: 		form_num (month);
	FARG_form_num+0 <- _month
	CALL _form_num
//rtc.c,55 :: 		strncat (dyna, tnum, 3);
	FARG_strncat+0 <- 0
	FARG_strncat+2 <- 0
	FARG_strncat+4 <- 3
	CALL _strncat
//rtc.c,56 :: 		form_num (year);
	FARG_form_num+0 <- _year
	CALL _form_num
//rtc.c,57 :: 		strncat (dyna, tnum, 3);
	FARG_strncat+0 <- 0
	FARG_strncat+2 <- 0
	FARG_strncat+4 <- 3
	CALL _strncat
//rtc.c,59 :: 		form_num (hour);   //запись в строку  tnum числа  hr
	FARG_form_num+0 <- _hour
	CALL _form_num
//rtc.c,60 :: 		strncat (dyna, tnum, 3);
	FARG_strncat+0 <- 0
	FARG_strncat+2 <- 0
	FARG_strncat+4 <- 3
	CALL _strncat
//rtc.c,61 :: 		form_num (minute);
	FARG_form_num+0 <- _minute
	CALL _form_num
//rtc.c,62 :: 		strncat (dyna, tnum, 3);
	FARG_strncat+0 <- 0
	FARG_strncat+2 <- 0
	FARG_strncat+4 <- 3
	CALL _strncat
//rtc.c,63 :: 		form_num (second);
	FARG_form_num+0 <- _second
	CALL _form_num
//rtc.c,64 :: 		strncat (dyna, tnum, 3);
	FARG_strncat+0 <- 0
	FARG_strncat+2 <- 0
	FARG_strncat+4 <- 3
	CALL _strncat
//rtc.c,65 :: 		dyna[0] = '_';
	_dyna <- 95
//rtc.c,66 :: 		dyna[3] = '/';
	_dyna+3 <- 47
//rtc.c,67 :: 		dyna[6] = '/';
	_dyna+6 <- 47
//rtc.c,68 :: 		dyna[9] = '_';
	_dyna+9 <- 95
//rtc.c,69 :: 		dyna[12] = ':';
	_dyna+12 <- 58
//rtc.c,70 :: 		dyna[15] = ':';
	_dyna+15 <- 58
  end

_rtc_read:
  begin
//rtc.c,78 :: 		Read_Time();      // чтение часов
	CALL _Read_Time
//rtc.c,79 :: 		Display_Time();    // вывод в ETHERNET
	CALL _Display_Time
  end

_rtc_set:
  begin
//rtc.c,88 :: 		I2C_Init(100000);      // initialize full master mode
	asm: MOVLW	62
	asm: MOVWF	SSPADD
	CALL _I2C_Init
//rtc.c,89 :: 		I2C_Start();          // issue start signal
	CALL _I2C_Start
//rtc.c,90 :: 		I2C_Wr(0xD0);                 // Slave address DS1338, write to RTC
	FARG_I2C_Wr+0 <- 208
	CALL _I2C_Wr
//rtc.c,91 :: 		I2C_Wr(0x00);                 // Byte adress
	FARG_I2C_Wr+0 <- 0
	CALL _I2C_Wr
//rtc.c,93 :: 		I2C_Wr(((second/10)<<4)+(second%10));            // write 0 to seconds word
	STACK_0 <-  _second / 10
	STACK_1 <- 4
	FARG_I2C_Wr+0 <-  STACK_0 shl STACK_1  [Optimized To Dest]
	STACK_0 <-  _second mod 10
	FARG_I2C_Wr+0 <-  FARG_I2C_Wr+0 + STACK_0  [Optimized To Dest]
	FARG_I2C_Wr+0 <- FARG_I2C_Wr+0
	CALL _I2C_Wr
//rtc.c,94 :: 		I2C_Wr(((minute/10)<<4)+(minute%10));         // write  to minutes word
	STACK_0 <-  _minute / 10
	STACK_1 <- 4
	FARG_I2C_Wr+0 <-  STACK_0 shl STACK_1  [Optimized To Dest]
	STACK_0 <-  _minute mod 10
	FARG_I2C_Wr+0 <-  FARG_I2C_Wr+0 + STACK_0  [Optimized To Dest]
	FARG_I2C_Wr+0 <- FARG_I2C_Wr+0
	CALL _I2C_Wr
//rtc.c,95 :: 		I2C_Wr(((hour/10)<<4)+(hour%10));         // write  to hours word
	STACK_0 <-  _hour / 10
	STACK_1 <- 4
	FARG_I2C_Wr+0 <-  STACK_0 shl STACK_1  [Optimized To Dest]
	STACK_0 <-  _hour mod 10
	FARG_I2C_Wr+0 <-  FARG_I2C_Wr+0 + STACK_0  [Optimized To Dest]
	FARG_I2C_Wr+0 <- FARG_I2C_Wr+0
	CALL _I2C_Wr
//rtc.c,96 :: 		I2C_Wr(0x07);         // write  to day word
	FARG_I2C_Wr+0 <- 7
	CALL _I2C_Wr
//rtc.c,97 :: 		I2C_Wr(((date/10)<<4)+(date%10));         // write  to date
	STACK_0 <-  _date / 10
	STACK_1 <- 4
	FARG_I2C_Wr+0 <-  STACK_0 shl STACK_1  [Optimized To Dest]
	STACK_0 <-  _date mod 10
	FARG_I2C_Wr+0 <-  FARG_I2C_Wr+0 + STACK_0  [Optimized To Dest]
	FARG_I2C_Wr+0 <- FARG_I2C_Wr+0
	CALL _I2C_Wr
//rtc.c,98 :: 		I2C_Wr(((month/10)<<4)+(month%10));         // write  to month
	STACK_0 <-  _month / 10
	STACK_1 <- 4
	FARG_I2C_Wr+0 <-  STACK_0 shl STACK_1  [Optimized To Dest]
	STACK_0 <-  _month mod 10
	FARG_I2C_Wr+0 <-  FARG_I2C_Wr+0 + STACK_0  [Optimized To Dest]
	FARG_I2C_Wr+0 <- FARG_I2C_Wr+0
	CALL _I2C_Wr
//rtc.c,99 :: 		I2C_Wr(((year/10)<<4)+(year%10));         // write  to year
	STACK_0 <-  _year / 10
	STACK_1 <- 4
	FARG_I2C_Wr+0 <-  STACK_0 shl STACK_1  [Optimized To Dest]
	STACK_0 <-  _year mod 10
	FARG_I2C_Wr+0 <-  FARG_I2C_Wr+0 + STACK_0  [Optimized To Dest]
	FARG_I2C_Wr+0 <- FARG_I2C_Wr+0
	CALL _I2C_Wr
//rtc.c,100 :: 		I2C_Wr(0x00);         // write  to control
	FARG_I2C_Wr+0 <- 0
	CALL _I2C_Wr
//rtc.c,101 :: 		I2C_Stop();           // issue stop signal
	CALL _I2C_Stop
  end

