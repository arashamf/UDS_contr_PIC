;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 01.04.2022 15:50:03
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$EF5A	F066			GOTO	_main
$0008	$	_Interrupt:
$0008	$C001	F90E			MOVFF	STACK_1, STSAVED_1
$000C	$C000	F90D			MOVFF	STACK_0, STSAVED_0
$0010	$CFE9	F5D0			MOVFF	FSR0L, ?saveFSR0
$0014	$CFEA	F5D1			MOVFF	FSR0H, ?saveFSR0+1
$0018	$CFE1	F5D2			MOVFF	FSR1L, ?saveFSR1
$001C	$CFE2	F5D3			MOVFF	FSR1H, ?saveFSR1+1
;USART.c,103 :: 			void Interrupt(void)
;USART.c,107 :: 			if(PIR1.RC1IF) {           // прерывание по приему байта по USART
$0020	$AA9E	    			BTFSS	PIR1, 5, 0
$0022	$D01F	    			BRA	L_Interrupt_16
;USART.c,108 :: 			PIR1.RC1IF = 0;
$0024	$9A9E	    			BCF	PIR1, 5, 0
;USART.c,110 :: 			tmp = RCREG1;
$0026	$CFAE	F5CF			MOVFF	RCREG1, Interrupt_tmp_L0
;USART.c,111 :: 			if (tmp==0x03) {          // 0x03 - признак начала посылки
$002A	$50AE	    			MOVF	RCREG1, 0, 0
$002C	$0A03	    			XORLW	3
$002E	$E102	    			BNZ	L_Interrupt_17
;USART.c,112 :: 			rxCounter = 1;
$0030	$0E01	    			MOVLW	1
$0032	$6E15	    			MOVWF	_rxCounter, 0
;USART.c,113 :: 			}
$0034	$	L_Interrupt_17:
;USART.c,114 :: 			if (rxCounter!=0) {
$0034	$5015	    			MOVF	_rxCounter, 0, 0
$0036	$0A00	    			XORLW	0
$0038	$E014	    			BZ	L_Interrupt_18
;USART.c,115 :: 			rxBuf[rxCounter-1] = tmp;
$003A	$0415	    			DECF	_rxCounter, 0, 0
$003C	$6E00	    			MOVWF	STACK_0, 0
$003E	$6A01	    			CLRF	STACK_0+1, 0
$0040	$0E00	    			MOVLW	0
$0042	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$0044	$0E16	    			MOVLW	_rxBuf
$0046	$2400	    			ADDWF	STACK_0, 0, 0
$0048	$6EE1	    			MOVWF	FSR1L, 0
$004A	$0E00	    			MOVLW	@_rxBuf
$004C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$004E	$6EE2	    			MOVWF	FSR1L+1, 0
$0050	$C5CF	FFE6			MOVFF	Interrupt_tmp_L0, POSTINC1
;USART.c,116 :: 			rxCounter++;
$0054	$2A15	    			INCF	_rxCounter, 1, 0
;USART.c,117 :: 			if(rxCounter>=7) {       // если вся посылка уже получена (6 байт),
$0056	$0E07	    			MOVLW	7
$0058	$5C15	    			SUBWF	_rxCounter, 0, 0
$005A	$E303	    			BNC	L_Interrupt_19
;USART.c,118 :: 			rxCounter = 0;          // обнуляем счетчик
$005C	$6A15	    			CLRF	_rxCounter, 0
;USART.c,119 :: 			rxReadyFlag = 1;        // ставим флаг готовности
$005E	$0E01	    			MOVLW	1
$0060	$6E20	    			MOVWF	_rxReadyFlag, 0
;USART.c,120 :: 			}
$0062	$	L_Interrupt_19:
;USART.c,121 :: 			}
$0062	$	L_Interrupt_18:
;USART.c,122 :: 			}
$0062	$	L_Interrupt_16:
;USART.c,123 :: 			if (PIR1.F0) {             // Произошло прерывание от TMR1
$0062	$A09E	    			BTFSS	PIR1, 0, 0
$0064	$D004	    			BRA	L_Interrupt_20
;USART.c,124 :: 			PIR1.F0=0;
$0066	$909E	    			BCF	PIR1, 0, 0
;USART.c,125 :: 			T1CON=0;
$0068	$6ACD	    			CLRF	T1CON, 0
;USART.c,126 :: 			timer1Flag = 1;           // время вышло
$006A	$0E01	    			MOVLW	1
$006C	$6E21	    			MOVWF	_timer1Flag, 0
;USART.c,127 :: 			}
$006E	$	L_Interrupt_20:
;USART.c,128 :: 			}
$006E	$	L_Interrupt_end:
$006E	$C5D0	FFE9			MOVFF	?saveFSR0, FSR0L
$0072	$C5D1	FFEA			MOVFF	?saveFSR0+1, FSR0H
$0076	$C5D2	FFE1			MOVFF	?saveFSR1, FSR1L
$007A	$C5D3	FFE2			MOVFF	?saveFSR1+1, FSR1H
$007E	$C90E	F001			MOVFF	STSAVED_1, STACK_1
$0082	$C90D	F000			MOVFF	STSAVED_0, STACK_0
$0086	$0011	    			RETFIE
$0088	$	_Delay_1us:
;Delays.c,7 :: 			void Delay_1us() {
;Delays.c,8 :: 			Delay_us(1);
$0088	$0E01	    			MOVLW	1
$008A	$6E0A	    			MOVWF	STACK_10, 0
$008C	$2E0A	    			DECFSZ	STACK_10, F, 0
$008E	$D7FE	    			BRA	$-1
$0090	$0000	    			NOP
$0092	$0000	    			NOP
;Delays.c,9 :: 			}
$0094	$0012	    			RETURN
$0096	$	_Cf_Set_Reg_Adr:
$0096	$C022	FFE1			MOVFF	compact_C_F_ctrl_address, FSR1L
$009A	$C023	FFE2			MOVFF	compact_C_F_ctrl_address+1, FSR1H
$009E	$0EF8	    			MOVLW	248
$00A0	$14E7	    			ANDWF	INDF1, 0, 0
$00A2	$6E00	    			MOVWF	STACK_0, 0
$00A4	$0109	    			MOVLB	9
$00A6	$510C	    			MOVF	FARG_Cf_Set_Reg_Adr+0, 0, 1
$00A8	$1000	    			IORWF	STACK_0, 0, 0
$00AA	$6EE7	    			MOVWF	INDF1, 0
$00AC	$0012	    			RETURN
$00AE	$	_Cf_Write_Byte:
$00AE	$C024	FFE1			MOVFF	compact_C_F_cf_data_address, FSR1L
$00B2	$C025	FFE2			MOVFF	compact_C_F_cf_data_address+1, FSR1H
$00B6	$C90C	FFE7			MOVFF	FARG_Cf_Write_Byte+0, INDF1
$00BA	$C022	FFE1			MOVFF	compact_C_F_ctrl_address, FSR1L
$00BE	$C023	FFE2			MOVFF	compact_C_F_ctrl_address+1, FSR1H
$00C2	$	L_Cf_Write_Byte_1:
$00C2	$6A01	    			CLRF	STACK_1, 0
$00C4	$BEE7	    			BTFSC	INDF1, 7, 0
$00C6	$2A01	    			INCF	STACK_1, 1, 0
$00C8	$5001	    			MOVF	STACK_1, 0, 0
$00CA	$0A00	    			XORLW	0
$00CC	$E0FA	    			BZ	L_Cf_Write_Byte_1
$00CE	$	L_Cf_Write_Byte_2:
$00CE	$EC44	F000			CALL	_Delay_1us
$00D2	$9CE7	    			BCF	INDF1, 6, 0
$00D4	$EC44	F000			CALL	_Delay_1us
$00D8	$8CE7	    			BSF	INDF1, 6, 0
$00DA	$EC44	F000			CALL	_Delay_1us
$00DE	$0012	    			RETURN
$00E0	$	_Cf_Read_Init:
$00E0	$0E0F	    			MOVLW	15
$00E2	$0109	    			MOVLB	9
$00E4	$150A	    			ANDWF	FARG_Cf_Read_Init+3, 0, 1
$00E6	$6E00	    			MOVWF	STACK_0, 0
$00E8	$C000	F900			MOVFF	STACK_0, Cf_Read_Init_temp_L0
$00EC	$0EE0	    			MOVLW	224
$00EE	$1000	    			IORWF	STACK_0, 0, 0
$00F0	$6F00	    			MOVWF	Cf_Read_Init_temp_L0, 1
$00F2	$0E06	    			MOVLW	6
$00F4	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$00F6	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$00FA	$C900	F90C			MOVFF	Cf_Read_Init_temp_L0, FARG_Cf_Write_Byte+0
$00FE	$EC57	F000			CALL	_Cf_Write_Byte
$0102	$C909	F900			MOVFF	FARG_Cf_Read_Init+2, Cf_Read_Init_temp_L0
$0106	$0E05	    			MOVLW	5
$0108	$0109	    			MOVLB	9
$010A	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$010C	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$0110	$C900	F90C			MOVFF	Cf_Read_Init_temp_L0, FARG_Cf_Write_Byte+0
$0114	$EC57	F000			CALL	_Cf_Write_Byte
$0118	$C908	F900			MOVFF	FARG_Cf_Read_Init+1, Cf_Read_Init_temp_L0
$011C	$0E04	    			MOVLW	4
$011E	$0109	    			MOVLB	9
$0120	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$0122	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$0126	$C900	F90C			MOVFF	Cf_Read_Init_temp_L0, FARG_Cf_Write_Byte+0
$012A	$EC57	F000			CALL	_Cf_Write_Byte
$012E	$C907	F900			MOVFF	FARG_Cf_Read_Init+0, Cf_Read_Init_temp_L0
$0132	$0E03	    			MOVLW	3
$0134	$0109	    			MOVLB	9
$0136	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$0138	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$013C	$C900	F90C			MOVFF	Cf_Read_Init_temp_L0, FARG_Cf_Write_Byte+0
$0140	$EC57	F000			CALL	_Cf_Write_Byte
$0144	$0E02	    			MOVLW	2
$0146	$0109	    			MOVLB	9
$0148	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$014A	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$014E	$C90B	F90C			MOVFF	FARG_Cf_Read_Init+4, FARG_Cf_Write_Byte+0
$0152	$EC57	F000			CALL	_Cf_Write_Byte
$0156	$0E07	    			MOVLW	7
$0158	$0109	    			MOVLB	9
$015A	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$015C	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$0160	$0E20	    			MOVLW	32
$0162	$6F0C	    			MOVWF	FARG_Cf_Write_Byte+0, 1
$0164	$EC57	F000			CALL	_Cf_Write_Byte
$0168	$0109	    			MOVLB	9
$016A	$6B0C	    			CLRF	FARG_Cf_Set_Reg_Adr+0, 1
$016C	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$0170	$0012	    			RETURN
$0172	$	_Cf_Read_Byte:
$0172	$0E12	    			MOVLW	18
$0174	$2424	    			ADDWF	compact_C_F_cf_data_address, 0, 0
$0176	$6EE1	    			MOVWF	FSR1L, 0
$0178	$C025	FFE2			MOVFF	compact_C_F_cf_data_address+1, FSR1H
$017C	$0EFF	    			MOVLW	255
$017E	$6EE7	    			MOVWF	INDF1, 0
$0180	$EC44	F000			CALL	_Delay_1us
$0184	$C022	FFE1			MOVFF	compact_C_F_ctrl_address, FSR1L
$0188	$C023	FFE2			MOVFF	compact_C_F_ctrl_address+1, FSR1H
$018C	$	L_Cf_Read_Byte_3:
$018C	$AEE7	    			BTFSS	INDF1, 7, 0
$018E	$D7FE	    			BRA	L_Cf_Read_Byte_3
$0190	$	L_Cf_Read_Byte_4:
$0190	$EC44	F000			CALL	_Delay_1us
$0194	$9AE7	    			BCF	INDF1, 5, 0
$0196	$EC44	F000			CALL	_Delay_1us
$019A	$C024	FFE1			MOVFF	compact_C_F_cf_data_address, FSR1L
$019E	$C025	FFE2			MOVFF	compact_C_F_cf_data_address+1, FSR1H
$01A2	$CFE7	F900			MOVFF	INDF1, Cf_Read_Byte_rslt_L0
$01A6	$EC44	F000			CALL	_Delay_1us
$01AA	$C022	FFE1			MOVFF	compact_C_F_ctrl_address, FSR1L
$01AE	$C023	FFE2			MOVFF	compact_C_F_ctrl_address+1, FSR1H
$01B2	$8AE7	    			BSF	INDF1, 5, 0
$01B4	$EC44	F000			CALL	_Delay_1us
$01B8	$0E12	    			MOVLW	18
$01BA	$2424	    			ADDWF	compact_C_F_cf_data_address, 0, 0
$01BC	$6EE1	    			MOVWF	FSR1L, 0
$01BE	$C025	FFE2			MOVFF	compact_C_F_cf_data_address+1, FSR1H
$01C2	$6AE7	    			CLRF	INDF1, 0
$01C4	$C900	F000			MOVFF	Cf_Read_Byte_rslt_L0, STACK_0
$01C8	$0012	    			RETURN
$01CA	$	_Cf_Write_Init:
$01CA	$0E0F	    			MOVLW	15
$01CC	$0109	    			MOVLB	9
$01CE	$150A	    			ANDWF	FARG_Cf_Write_Init+3, 0, 1
$01D0	$6E00	    			MOVWF	STACK_0, 0
$01D2	$C000	F900			MOVFF	STACK_0, Cf_Write_Init_temp_L0
$01D6	$0EE0	    			MOVLW	224
$01D8	$1000	    			IORWF	STACK_0, 0, 0
$01DA	$6F00	    			MOVWF	Cf_Write_Init_temp_L0, 1
$01DC	$0E06	    			MOVLW	6
$01DE	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$01E0	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$01E4	$C900	F90C			MOVFF	Cf_Write_Init_temp_L0, FARG_Cf_Write_Byte+0
$01E8	$EC57	F000			CALL	_Cf_Write_Byte
$01EC	$C909	F900			MOVFF	FARG_Cf_Write_Init+2, Cf_Write_Init_temp_L0
$01F0	$0E05	    			MOVLW	5
$01F2	$0109	    			MOVLB	9
$01F4	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$01F6	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$01FA	$C900	F90C			MOVFF	Cf_Write_Init_temp_L0, FARG_Cf_Write_Byte+0
$01FE	$EC57	F000			CALL	_Cf_Write_Byte
$0202	$C908	F900			MOVFF	FARG_Cf_Write_Init+1, Cf_Write_Init_temp_L0
$0206	$0E04	    			MOVLW	4
$0208	$0109	    			MOVLB	9
$020A	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$020C	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$0210	$C900	F90C			MOVFF	Cf_Write_Init_temp_L0, FARG_Cf_Write_Byte+0
$0214	$EC57	F000			CALL	_Cf_Write_Byte
$0218	$C907	F900			MOVFF	FARG_Cf_Write_Init+0, Cf_Write_Init_temp_L0
$021C	$0E03	    			MOVLW	3
$021E	$0109	    			MOVLB	9
$0220	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$0222	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$0226	$C900	F90C			MOVFF	Cf_Write_Init_temp_L0, FARG_Cf_Write_Byte+0
$022A	$EC57	F000			CALL	_Cf_Write_Byte
$022E	$0E02	    			MOVLW	2
$0230	$0109	    			MOVLB	9
$0232	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$0234	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$0238	$C90B	F90C			MOVFF	FARG_Cf_Write_Init+4, FARG_Cf_Write_Byte+0
$023C	$EC57	F000			CALL	_Cf_Write_Byte
$0240	$0E07	    			MOVLW	7
$0242	$0109	    			MOVLB	9
$0244	$6F0C	    			MOVWF	FARG_Cf_Set_Reg_Adr+0, 1
$0246	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$024A	$0E30	    			MOVLW	48
$024C	$6F0C	    			MOVWF	FARG_Cf_Write_Byte+0, 1
$024E	$EC57	F000			CALL	_Cf_Write_Byte
$0252	$0109	    			MOVLB	9
$0254	$6B0C	    			CLRF	FARG_Cf_Set_Reg_Adr+0, 1
$0256	$EC4B	F000			CALL	_Cf_Set_Reg_Adr
$025A	$0012	    			RETURN
$025C	$	_Mul_32x32_U:
$025C	$0100	    			MOVLB	0
$025E	$0E22	    			MOVLW	34
$0260	$6E0C	    			MOVWF	STACK_12, 0
$0262	$6A08	    			CLRF	STACK_8, 0
$0264	$6A09	    			CLRF	STACK_9, 0
$0266	$6A0A	    			CLRF	STACK_10, 0
$0268	$6A0B	    			CLRF	STACK_11, 0
$026A	$	_NEXT:
$026A	$060C	    			DECF	STACK_12, F, 0
$026C	$B4D8	    			BTFSC	STATUS, Z, 0
$026E	$EF5B	F001			GOTO	_EXIT2
$0272	$90D8	    			BCF	STATUS, C, 0
$0274	$	_LOOP:
$0274	$320B	    			RRCF	STACK_11, F, 0
$0276	$320A	    			RRCF	STACK_10, F, 0
$0278	$3209	    			RRCF	STACK_9, F, 0
$027A	$3208	    			RRCF	STACK_8, F, 0
$027C	$3203	    			RRCF	STACK_3, F, 0
$027E	$3202	    			RRCF	STACK_2, F, 0
$0280	$3201	    			RRCF	STACK_1, F, 0
$0282	$3200	    			RRCF	STACK_0, F, 0
$0284	$A0D8	    			BTFSS	STATUS, C, 0
$0286	$EF35	F001			GOTO	_NEXT
$028A	$060C	    			DECF	STACK_12, F, 0
$028C	$B4D8	    			BTFSC	STATUS, Z, 0
$028E	$EF53	F001			GOTO	_EXIT1
$0292	$5004	    			MOVF	STACK_4, W, 0
$0294	$2608	    			ADDWF	STACK_8, F, 0
$0296	$5005	    			MOVF	STACK_5, W, 0
$0298	$2209	    			ADDWFC	STACK_9, F, 0
$029A	$5006	    			MOVF	STACK_6, W, 0
$029C	$220A	    			ADDWFC	STACK_10, F, 0
$029E	$5007	    			MOVF	STACK_7, W, 0
$02A0	$220B	    			ADDWFC	STACK_11, F, 0
$02A2	$EF3A	F001			GOTO	_LOOP
$02A6	$	_EXIT1:
$02A6	$5004	    			MOVF	STACK_4, W, 0
$02A8	$2608	    			ADDWF	STACK_8, F, 0
$02AA	$5005	    			MOVF	STACK_5, W, 0
$02AC	$2209	    			ADDWFC	STACK_9, F, 0
$02AE	$5006	    			MOVF	STACK_6, W, 0
$02B0	$220A	    			ADDWFC	STACK_10, F, 0
$02B2	$5007	    			MOVF	STACK_7, W, 0
$02B4	$220B	    			ADDWFC	STACK_11, F, 0
$02B6	$	_EXIT2:
$02B6	$0012	    			RETURN
$02B8	$	_Cf_Read_Sector:
$02B8	$C901	F907			MOVFF	FARG_Cf_Read_Sector+0, FARG_Cf_Read_Init+0
$02BC	$C902	F908			MOVFF	FARG_Cf_Read_Sector+1, FARG_Cf_Read_Init+1
$02C0	$C903	F909			MOVFF	FARG_Cf_Read_Sector+2, FARG_Cf_Read_Init+2
$02C4	$C904	F90A			MOVFF	FARG_Cf_Read_Sector+3, FARG_Cf_Read_Init+3
$02C8	$0E01	    			MOVLW	1
$02CA	$0109	    			MOVLB	9
$02CC	$6F0B	    			MOVWF	FARG_Cf_Read_Init+4, 1
$02CE	$EC70	F000			CALL	_Cf_Read_Init
$02D2	$0108	    			MOVLB	8
$02D4	$6BFC	    			CLRF	Cf_Read_Sector_i_L0, 1
$02D6	$6BFD	    			CLRF	Cf_Read_Sector_i_L0+1, 1
$02D8	$	L_Cf_Read_Sector_9:
$02D8	$51FD	    			MOVF	Cf_Read_Sector_i_L0+1, 0, 1
$02DA	$0801	    			SUBLW	1
$02DC	$E102	    			BNZ	L_Cf_Read_Sector_17
$02DE	$51FC	    			MOVF	Cf_Read_Sector_i_L0, 0, 1
$02E0	$08FF	    			SUBLW	255
$02E2	$	L_Cf_Read_Sector_17:
$02E2	$E316	    			BNC	L_Cf_Read_Sector_10
$02E4	$ECB9	F000			CALL	_Cf_Read_Byte
$02E8	$C000	F8FE			MOVFF	STACK_0, Cf_Read_Sector_temp_L0
$02EC	$0E00	    			MOVLW	0
$02EE	$0108	    			MOVLB	8
$02F0	$6FFF	    			MOVWF	Cf_Read_Sector_temp_L0+1, 1
$02F2	$51FC	    			MOVF	Cf_Read_Sector_i_L0, 0, 1
$02F4	$0109	    			MOVLB	9
$02F6	$2505	    			ADDWF	FARG_Cf_Read_Sector+4, 0, 1
$02F8	$6EE1	    			MOVWF	FSR1L, 0
$02FA	$0108	    			MOVLB	8
$02FC	$51FD	    			MOVF	Cf_Read_Sector_i_L0+1, 0, 1
$02FE	$0109	    			MOVLB	9
$0300	$2106	    			ADDWFC	FARG_Cf_Read_Sector+5, 0, 1
$0302	$6EE2	    			MOVWF	FSR1L+1, 0
$0304	$C8FE	FFE6			MOVFF	Cf_Read_Sector_temp_L0, POSTINC1
$0308	$	L_Cf_Read_Sector_11:
$0308	$0108	    			MOVLB	8
$030A	$4BFC	    			INFSNZ	Cf_Read_Sector_i_L0, 1, 1
$030C	$2BFD	    			INCF	Cf_Read_Sector_i_L0+1, 1, 1
$030E	$D7E4	    			BRA	L_Cf_Read_Sector_9
$0310	$	L_Cf_Read_Sector_10:
$0310	$0012	    			RETURN
$0312	$	_Cf_Write_Sector:
$0312	$C901	F907			MOVFF	FARG_Cf_Write_Sector+0, FARG_Cf_Write_Init+0
$0316	$C902	F908			MOVFF	FARG_Cf_Write_Sector+1, FARG_Cf_Write_Init+1
$031A	$C903	F909			MOVFF	FARG_Cf_Write_Sector+2, FARG_Cf_Write_Init+2
$031E	$C904	F90A			MOVFF	FARG_Cf_Write_Sector+3, FARG_Cf_Write_Init+3
$0322	$0E01	    			MOVLW	1
$0324	$0109	    			MOVLB	9
$0326	$6F0B	    			MOVWF	FARG_Cf_Write_Init+4, 1
$0328	$ECE5	F000			CALL	_Cf_Write_Init
$032C	$0108	    			MOVLB	8
$032E	$6BFC	    			CLRF	Cf_Write_Sector_i_L0, 1
$0330	$6BFD	    			CLRF	Cf_Write_Sector_i_L0+1, 1
$0332	$	L_Cf_Write_Sector_12:
$0332	$51FD	    			MOVF	Cf_Write_Sector_i_L0+1, 0, 1
$0334	$0801	    			SUBLW	1
$0336	$E102	    			BNZ	L_Cf_Write_Sector_18
$0338	$51FC	    			MOVF	Cf_Write_Sector_i_L0, 0, 1
$033A	$08FF	    			SUBLW	255
$033C	$	L_Cf_Write_Sector_18:
$033C	$E311	    			BNC	L_Cf_Write_Sector_13
$033E	$51FC	    			MOVF	Cf_Write_Sector_i_L0, 0, 1
$0340	$0109	    			MOVLB	9
$0342	$2505	    			ADDWF	FARG_Cf_Write_Sector+4, 0, 1
$0344	$6EE9	    			MOVWF	FSR0L, 0
$0346	$0108	    			MOVLB	8
$0348	$51FD	    			MOVF	Cf_Write_Sector_i_L0+1, 0, 1
$034A	$0109	    			MOVLB	9
$034C	$2106	    			ADDWFC	FARG_Cf_Write_Sector+5, 0, 1
$034E	$6EEA	    			MOVWF	FSR0L+1, 0
$0350	$CFEE	F90C			MOVFF	POSTINC0, FARG_Cf_Write_Byte+0
$0354	$EC57	F000			CALL	_Cf_Write_Byte
$0358	$	L_Cf_Write_Sector_14:
$0358	$0108	    			MOVLB	8
$035A	$4BFC	    			INFSNZ	Cf_Write_Sector_i_L0, 1, 1
$035C	$2BFD	    			INCF	Cf_Write_Sector_i_L0+1, 1, 1
$035E	$D7E9	    			BRA	L_Cf_Write_Sector_12
$0360	$	L_Cf_Write_Sector_13:
$0360	$0012	    			RETURN
$0362	$	_Mul_16x16_U:
$0362	$0100	    			MOVLB	0
$0364	$6A0B	    			CLRF	STACK_11, 0
$0366	$6A0A	    			CLRF	STACK_10, 0
$0368	$6A09	    			CLRF	STACK_9, 0
$036A	$5000	    			MOVF	STACK_0, W, 0
$036C	$0204	    			MULWF	STACK_4, 0
$036E	$CFF4	F009			MOVFF	PRODH, STACK_9
$0372	$CFF3	F008			MOVFF	PRODL, STACK_8
$0376	$5001	    			MOVF	STACK_1, W, 0
$0378	$0205	    			MULWF	STACK_5, 0
$037A	$CFF4	F00B			MOVFF	PRODH, STACK_11
$037E	$CFF3	F00A			MOVFF	PRODL, STACK_10
$0382	$5000	    			MOVF	STACK_0, W, 0
$0384	$0205	    			MULWF	STACK_5, 0
$0386	$50F3	    			MOVF	PRODL, W, 0
$0388	$2609	    			ADDWF	STACK_9, F, 0
$038A	$50F4	    			MOVF	PRODH, W, 0
$038C	$220A	    			ADDWFC	STACK_10, F, 0
$038E	$6AE8	    			CLRF	WREG, 0
$0390	$220B	    			ADDWFC	STACK_11, F, 0
$0392	$5001	    			MOVF	STACK_1, W, 0
$0394	$0204	    			MULWF	STACK_4, 0
$0396	$50F3	    			MOVF	PRODL, W, 0
$0398	$2609	    			ADDWF	STACK_9, F, 0
$039A	$50F4	    			MOVF	PRODH, W, 0
$039C	$220A	    			ADDWFC	STACK_10, F, 0
$039E	$6AE8	    			CLRF	WREG, 0
$03A0	$220B	    			ADDWFC	STACK_11, F, 0
$03A2	$C008	F000			MOVFF	STACK_8, STACK_0
$03A6	$C009	F001			MOVFF	STACK_9, STACK_1
$03AA	$C00A	F002			MOVFF	STACK_10, STACK_2
$03AE	$C00B	F003			MOVFF	STACK_11, STACK_3
$03B2	$0012	    			RETURN
$03B4	$	_Mul_32x32_S:
$03B4	$0100	    			MOVLB	0
$03B6	$6A0D	    			CLRF	STACK_13, 0
$03B8	$	_IF_FIRST:
$03B8	$AE03	    			BTFSS	STACK_3, 7, 0
$03BA	$EFEA	F001			GOTO	_IF_SECOND
$03BE	$	_INVERCE_FIRST:
$03BE	$1E00	    			COMF	STACK_0, F, 0
$03C0	$1E01	    			COMF	STACK_1, F, 0
$03C2	$1E02	    			COMF	STACK_2, F, 0
$03C4	$1E03	    			COMF	STACK_3, F, 0
$03C6	$0E00	    			MOVLW	0
$03C8	$2A00	    			INCF	STACK_0, F, 0
$03CA	$2201	    			ADDWFC	STACK_1, F, 0
$03CC	$2202	    			ADDWFC	STACK_2, F, 0
$03CE	$2203	    			ADDWFC	STACK_3, F, 0
$03D0	$0E81	    			MOVLW	129
$03D2	$260D	    			ADDWF	STACK_13, F, 0
$03D4	$	_IF_SECOND:
$03D4	$AE07	    			BTFSS	STACK_7, 7, 0
$03D6	$EFF7	F001			GOTO	_MULT
$03DA	$	_INBERSE_SECOND:
$03DA	$1E04	    			COMF	STACK_4, F, 0
$03DC	$1E05	    			COMF	STACK_5, F, 0
$03DE	$1E06	    			COMF	STACK_6, F, 0
$03E0	$1E07	    			COMF	STACK_7, F, 0
$03E2	$0E00	    			MOVLW	0
$03E4	$2A04	    			INCF	STACK_4, F, 0
$03E6	$2205	    			ADDWFC	STACK_5, F, 0
$03E8	$2206	    			ADDWFC	STACK_6, F, 0
$03EA	$2207	    			ADDWFC	STACK_7, F, 0
$03EC	$2A0D	    			INCF	STACK_13, F, 0
$03EE	$	_MULT:
$03EE	$EC2E	F001			CALL	_Mul_32x32_U
$03F2	$A00D	    			BTFSS	STACK_13, 0, 0
$03F4	$EF0D	F002			GOTO	_EXIT
$03F8	$1E00	    			COMF	STACK_0, F, 0
$03FA	$1E01	    			COMF	STACK_1, F, 0
$03FC	$1E02	    			COMF	STACK_2, F, 0
$03FE	$1E03	    			COMF	STACK_3, F, 0
$0400	$1E08	    			COMF	STACK_8, F, 0
$0402	$1E09	    			COMF	STACK_9, F, 0
$0404	$1E0A	    			COMF	STACK_10, F, 0
$0406	$1E0B	    			COMF	STACK_11, F, 0
$0408	$0E00	    			MOVLW	0
$040A	$2A00	    			INCF	STACK_0, F, 0
$040C	$2201	    			ADDWFC	STACK_1, F, 0
$040E	$2202	    			ADDWFC	STACK_2, F, 0
$0410	$2203	    			ADDWFC	STACK_3, F, 0
$0412	$2208	    			ADDWFC	STACK_8, F, 0
$0414	$2209	    			ADDWFC	STACK_9, F, 0
$0416	$220A	    			ADDWFC	STACK_10, F, 0
$0418	$220B	    			ADDWFC	STACK_11, F, 0
$041A	$	_EXIT:
$041A	$0012	    			RETURN
$041C	$	_Div_16x16_S_L:
$041C	$0100	    			MOVLB	0
$041E	$3401	    			RLCF	STACK_1, W, 0
$0420	$3608	    			RLCF	STACK_8, F, 0
$0422	$3609	    			RLCF	STACK_9, F, 0
$0424	$5004	    			MOVF	STACK_4, W, 0
$0426	$5E08	    			SUBWF	STACK_8, F, 0
$0428	$5005	    			MOVF	STACK_5, W, 0
$042A	$A0D8	    			BTFSS	STATUS, C, 0
$042C	$3C05	    			INCFSZ	STACK_5, W, 0
$042E	$5E09	    			SUBWF	STACK_9, F, 0
$0430	$3600	    			RLCF	STACK_0, F, 0
$0432	$3601	    			RLCF	STACK_1, F, 0
$0434	$0E0F	    			MOVLW	15
$0436	$6E0C	    			MOVWF	STACK_12, 0
$0438	$3401	    			RLCF	STACK_1, W, 0
$043A	$3608	    			RLCF	STACK_8, F, 0
$043C	$3609	    			RLCF	STACK_9, F, 0
$043E	$5004	    			MOVF	STACK_4, W, 0
$0440	$A000	    			BTFSS	STACK_0, 0, 0
$0442	$EF2A	F002			GOTO	$+7
$0446	$5E08	    			SUBWF	STACK_8, F, 0
$0448	$5005	    			MOVF	STACK_5, W, 0
$044A	$A0D8	    			BTFSS	STATUS, C, 0
$044C	$3C05	    			INCFSZ	STACK_5, W, 0
$044E	$5E09	    			SUBWF	STACK_9, F, 0
$0450	$EF2F	F002			GOTO	$+6
$0454	$2608	    			ADDWF	STACK_8, F, 0
$0456	$5005	    			MOVF	STACK_5, W, 0
$0458	$B0D8	    			BTFSC	STATUS, C, 0
$045A	$3C05	    			INCFSZ	STACK_5, W, 0
$045C	$2609	    			ADDWF	STACK_9, F, 0
$045E	$3600	    			RLCF	STACK_0, F, 0
$0460	$3601	    			RLCF	STACK_1, F, 0
$0462	$2E0C	    			DECFSZ	STACK_12, F, 0
$0464	$EF1C	F002			GOTO	$-20
$0468	$B000	    			BTFSC	STACK_0, 0, 0
$046A	$EF3D	F002			GOTO	$+7
$046E	$5004	    			MOVF	STACK_4, W, 0
$0470	$2608	    			ADDWF	STACK_8, F, 0
$0472	$5005	    			MOVF	STACK_5, W, 0
$0474	$B0D8	    			BTFSC	STATUS, C, 0
$0476	$3C05	    			INCFSZ	STACK_5, W, 0
$0478	$2609	    			ADDWF	STACK_9, F, 0
$047A	$0000	    			NOP
$047C	$0012	    			RETURN
$047E	$	_SETFUN32:
$047E	$0100	    			MOVLB	0
$0480	$840B	    			BSF	STACK_11, 2, 0
$0482	$AE0B	    			BTFSS	STACK_11, 7, 0
$0484	$EF4B	F002			GOTO	SETFUN32EEE
$0488	$0E01	    			MOVLW	0x01
$048A	$6E03	    			MOVWF	STACK_3, 0
$048C	$6A02	    			CLRF	STACK_2, 0
$048E	$6A01	    			CLRF	STACK_1, 0
$0490	$6A00	    			CLRF	STACK_0, 0
$0492	$360A	    			RLCF	STACK_10, F, 0
$0494	$3202	    			RRCF	STACK_2, F, 0
$0496	$	SETFUN32EEE:
$0496	$0EFF	    			MOVLW	0xFF
$0498	$0012	    			RETURN
$049A	$	_FIXSIGN32:
$049A	$0100	    			MOVLB	0
$049C	$AE0A	    			BTFSS	STACK_10, 7, 0
$049E	$9E02	    			BCF	STACK_2, 7, 0
$04A0	$0E00	    			MOVLW	0
$04A2	$0012	    			RETURN
$04A4	$	_SETFOV32:
$04A4	$0100	    			MOVLB	0
$04A6	$820B	    			BSF	STACK_11, 1, 0
$04A8	$AE0B	    			BTFSS	STACK_11, 7, 0
$04AA	$EF5D	F002			GOTO	SETFOV32EEE
$04AE	$6803	    			SETF	STACK_3, 0
$04B0	$6802	    			SETF	STACK_2, 0
$04B2	$6801	    			SETF	STACK_1, 0
$04B4	$6800	    			SETF	STACK_0, 0
$04B6	$360A	    			RLCF	STACK_10, F, 0
$04B8	$3202	    			RRCF	STACK_2, F, 0
$04BA	$	SETFOV32EEE:
$04BA	$0EFF	    			MOVLW	0xFF
$04BC	$0012	    			RETURN
$04BE	$	_RES032:
$04BE	$0100	    			MOVLB	0
$04C0	$6A02	    			CLRF	STACK_2, 0
$04C2	$6A01	    			CLRF	STACK_1, 0
$04C4	$6A00	    			CLRF	STACK_0, 0
$04C6	$6A08	    			CLRF	STACK_8, 0
$04C8	$6A03	    			CLRF	STACK_3, 0
$04CA	$0E00	    			MOVLW	0
$04CC	$0012	    			RETURN
$04CE	$	_Ethernet_writeAddr2:
$04CE	$C8F8	FFE1			MOVFF	FARG_Ethernet_writeAddr2+0, FSR1L
$04D2	$C8F9	FFE2			MOVFF	FARG_Ethernet_writeAddr2+1, FSR1H
$04D6	$C8FA	FFE6			MOVFF	FARG_Ethernet_writeAddr2+2, POSTINC1
$04DA	$C8FB	FFE6			MOVFF	FARG_Ethernet_writeAddr2+3, POSTINC1
$04DE	$0012	    			RETURN
$04E0	$	_I2C_Is_Idle:
$04E0	$6A01	    			CLRF	STACK_1, 0
$04E2	$B4C7	    			BTFSC	SSP1STAT, 2, 0
$04E4	$2A01	    			INCF	STACK_1, 1, 0
$04E6	$5001	    			MOVF	STACK_1, 0, 0
$04E8	$0A00	    			XORLW	0
$04EA	$E109	    			BNZ	L_I2C_Is_Idle_0
$04EC	$0E1F	    			MOVLW	31
$04EE	$14C5	    			ANDWF	SSP1CON2, 0, 0
$04F0	$6E01	    			MOVWF	STACK_1, 0
$04F2	$5001	    			MOVF	STACK_1, 0, 0
$04F4	$0A00	    			XORLW	0
$04F6	$E103	    			BNZ	L_I2C_Is_Idle_1
$04F8	$0E01	    			MOVLW	1
$04FA	$6E00	    			MOVWF	STACK_0, 0
$04FC	$0012	    			RETURN
$04FE	$	L_I2C_Is_Idle_1:
$04FE	$	L_I2C_Is_Idle_0:
$04FE	$6A00	    			CLRF	STACK_0, 0
$0500	$0012	    			RETURN
$0502	$	_SDIV3232L:
$0502	$0100	    			MOVLB	0
$0504	$5004	    			MOVF	STACK_4, W, 0
$0506	$5E08	    			SUBWF	STACK_8, F, 0
$0508	$5005	    			MOVF	STACK_5, W, 0
$050A	$A0D8	    			BTFSS	STATUS, C, 0
$050C	$3C05	    			INCFSZ	STACK_5, W, 0
$050E	$5E09	    			SUBWF	STACK_9, F, 0
$0510	$5006	    			MOVF	STACK_6, W, 0
$0512	$A0D8	    			BTFSS	STATUS, C, 0
$0514	$3C06	    			INCFSZ	STACK_6, W, 0
$0516	$5E0A	    			SUBWF	STACK_10, F, 0
$0518	$5007	    			MOVF	STACK_7, W, 0
$051A	$A0D8	    			BTFSS	STATUS, C, 0
$051C	$3C07	    			INCFSZ	STACK_7, W, 0
$051E	$5E0B	    			SUBWF	STACK_11, F, 0
$0520	$3603	    			RLCF	STACK_3, F, 0
$0522	$0E07	    			MOVLW	7
$0524	$6E0C	    			MOVWF	STACK_12, 0
$0526	$	LOOPS3232A:
$0526	$3403	    			RLCF	STACK_3, W, 0
$0528	$3608	    			RLCF	STACK_8, F, 0
$052A	$3609	    			RLCF	STACK_9, F, 0
$052C	$360A	    			RLCF	STACK_10, F, 0
$052E	$360B	    			RLCF	STACK_11, F, 0
$0530	$5004	    			MOVF	STACK_4, W, 0
$0532	$A003	    			BTFSS	STACK_3, 0, 0
$0534	$EFAB	F002			GOTO	SADD22LA
$0538	$5E08	    			SUBWF	STACK_8, F, 0
$053A	$5005	    			MOVF	STACK_5, W, 0
$053C	$A0D8	    			BTFSS	STATUS, C, 0
$053E	$3C05	    			INCFSZ	STACK_5, W, 0
$0540	$5E09	    			SUBWF	STACK_9, F, 0
$0542	$5006	    			MOVF	STACK_6, W, 0
$0544	$A0D8	    			BTFSS	STATUS, C, 0
$0546	$3C06	    			INCFSZ	STACK_6, W, 0
$0548	$5E0A	    			SUBWF	STACK_10, F, 0
$054A	$5007	    			MOVF	STACK_7, W, 0
$054C	$A0D8	    			BTFSS	STATUS, C, 0
$054E	$3C07	    			INCFSZ	STACK_7, W, 0
$0550	$5E0B	    			SUBWF	STACK_11, F, 0
$0552	$EFB8	F002			GOTO	SOK22LA
$0556	$	SADD22LA:
$0556	$2608	    			ADDWF	STACK_8, F, 0
$0558	$5005	    			MOVF	STACK_5, W, 0
$055A	$B0D8	    			BTFSC	STATUS, C, 0
$055C	$3C05	    			INCFSZ	STACK_5, W, 0
$055E	$2609	    			ADDWF	STACK_9, F, 0
$0560	$5006	    			MOVF	STACK_6, W, 0
$0562	$B0D8	    			BTFSC	STATUS, C, 0
$0564	$3C06	    			INCFSZ	STACK_6, W, 0
$0566	$260A	    			ADDWF	STACK_10, F, 0
$0568	$5007	    			MOVF	STACK_7, W, 0
$056A	$B0D8	    			BTFSC	STATUS, C, 0
$056C	$3C07	    			INCFSZ	STACK_7, W, 0
$056E	$260B	    			ADDWF	STACK_11, F, 0
$0570	$	SOK22LA:
$0570	$3603	    			RLCF	STACK_3, F, 0
$0572	$2E0C	    			DECFSZ	STACK_12, F, 0
$0574	$EF93	F002			GOTO	LOOPS3232A
$0578	$3402	    			RLCF	STACK_2, W, 0
$057A	$3608	    			RLCF	STACK_8, F, 0
$057C	$3609	    			RLCF	STACK_9, F, 0
$057E	$360A	    			RLCF	STACK_10, F, 0
$0580	$360B	    			RLCF	STACK_11, F, 0
$0582	$5004	    			MOVF	STACK_4, W, 0
$0584	$A003	    			BTFSS	STACK_3, 0, 0
$0586	$EFD4	F002			GOTO	SADD22L8
$058A	$5E08	    			SUBWF	STACK_8, F, 0
$058C	$5005	    			MOVF	STACK_5, W, 0
$058E	$A0D8	    			BTFSS	STATUS, C, 0
$0590	$3C05	    			INCFSZ	STACK_5, W, 0
$0592	$5E09	    			SUBWF	STACK_9, F, 0
$0594	$5006	    			MOVF	STACK_6, W, 0
$0596	$A0D8	    			BTFSS	STATUS, C, 0
$0598	$3C06	    			INCFSZ	STACK_6, W, 0
$059A	$5E0A	    			SUBWF	STACK_10, F, 0
$059C	$5007	    			MOVF	STACK_7, W, 0
$059E	$A0D8	    			BTFSS	STATUS, C, 0
$05A0	$3C07	    			INCFSZ	STACK_7, W, 0
$05A2	$5E0B	    			SUBWF	STACK_11, F, 0
$05A4	$EFE1	F002			GOTO	SOK22L8
$05A8	$	SADD22L8:
$05A8	$2608	    			ADDWF	STACK_8, F, 0
$05AA	$5005	    			MOVF	STACK_5, W, 0
$05AC	$B0D8	    			BTFSC	STATUS, C, 0
$05AE	$3C05	    			INCFSZ	STACK_5, W, 0
$05B0	$2609	    			ADDWF	STACK_9, F, 0
$05B2	$5006	    			MOVF	STACK_6, W, 0
$05B4	$B0D8	    			BTFSC	STATUS, C, 0
$05B6	$3C06	    			INCFSZ	STACK_6, W, 0
$05B8	$260A	    			ADDWF	STACK_10, F, 0
$05BA	$5007	    			MOVF	STACK_7, W, 0
$05BC	$B0D8	    			BTFSC	STATUS, C, 0
$05BE	$3C07	    			INCFSZ	STACK_7, W, 0
$05C0	$260B	    			ADDWF	STACK_11, F, 0
$05C2	$	SOK22L8:
$05C2	$3602	    			RLCF	STACK_2, F, 0
$05C4	$0E07	    			MOVLW	7
$05C6	$6E0C	    			MOVWF	STACK_12, 0
$05C8	$	LOOPS3232B:
$05C8	$3402	    			RLCF	STACK_2, W, 0
$05CA	$3608	    			RLCF	STACK_8, F, 0
$05CC	$3609	    			RLCF	STACK_9, F, 0
$05CE	$360A	    			RLCF	STACK_10, F, 0
$05D0	$360B	    			RLCF	STACK_11, F, 0
$05D2	$5004	    			MOVF	STACK_4, W, 0
$05D4	$A002	    			BTFSS	STACK_2, 0, 0
$05D6	$EFFC	F002			GOTO	SADD22LB
$05DA	$5E08	    			SUBWF	STACK_8, F, 0
$05DC	$5005	    			MOVF	STACK_5, W, 0
$05DE	$A0D8	    			BTFSS	STATUS, C, 0
$05E0	$3C05	    			INCFSZ	STACK_5, W, 0
$05E2	$5E09	    			SUBWF	STACK_9, F, 0
$05E4	$5006	    			MOVF	STACK_6, W, 0
$05E6	$A0D8	    			BTFSS	STATUS, C, 0
$05E8	$3C06	    			INCFSZ	STACK_6, W, 0
$05EA	$5E0A	    			SUBWF	STACK_10, F, 0
$05EC	$5007	    			MOVF	STACK_7, W, 0
$05EE	$A0D8	    			BTFSS	STATUS, C, 0
$05F0	$3C07	    			INCFSZ	STACK_7, W, 0
$05F2	$5E0B	    			SUBWF	STACK_11, F, 0
$05F4	$EF09	F003			GOTO	SOK22LB
$05F8	$	SADD22LB:
$05F8	$2608	    			ADDWF	STACK_8, F, 0
$05FA	$5005	    			MOVF	STACK_5, W, 0
$05FC	$B0D8	    			BTFSC	STATUS, C, 0
$05FE	$3C05	    			INCFSZ	STACK_5, W, 0
$0600	$2609	    			ADDWF	STACK_9, F, 0
$0602	$5006	    			MOVF	STACK_6, W, 0
$0604	$B0D8	    			BTFSC	STATUS, C, 0
$0606	$3C06	    			INCFSZ	STACK_6, W, 0
$0608	$260A	    			ADDWF	STACK_10, F, 0
$060A	$5007	    			MOVF	STACK_7, W, 0
$060C	$B0D8	    			BTFSC	STATUS, C, 0
$060E	$3C07	    			INCFSZ	STACK_7, W, 0
$0610	$260B	    			ADDWF	STACK_11, F, 0
$0612	$	SOK22LB:
$0612	$3602	    			RLCF	STACK_2, F, 0
$0614	$2E0C	    			DECFSZ	STACK_12, F, 0
$0616	$EFE4	F002			GOTO	LOOPS3232B
$061A	$3401	    			RLCF	STACK_1, W, 0
$061C	$3608	    			RLCF	STACK_8, F, 0
$061E	$3609	    			RLCF	STACK_9, F, 0
$0620	$360A	    			RLCF	STACK_10, F, 0
$0622	$360B	    			RLCF	STACK_11, F, 0
$0624	$5004	    			MOVF	STACK_4, W, 0
$0626	$A002	    			BTFSS	STACK_2, 0, 0
$0628	$EF25	F003			GOTO	SADD22L16
$062C	$5E08	    			SUBWF	STACK_8, F, 0
$062E	$5005	    			MOVF	STACK_5, W, 0
$0630	$A0D8	    			BTFSS	STATUS, C, 0
$0632	$3C05	    			INCFSZ	STACK_5, W, 0
$0634	$5E09	    			SUBWF	STACK_9, F, 0
$0636	$5006	    			MOVF	STACK_6, W, 0
$0638	$A0D8	    			BTFSS	STATUS, C, 0
$063A	$3C06	    			INCFSZ	STACK_6, W, 0
$063C	$5E0A	    			SUBWF	STACK_10, F, 0
$063E	$5007	    			MOVF	STACK_7, W, 0
$0640	$A0D8	    			BTFSS	STATUS, C, 0
$0642	$3C07	    			INCFSZ	STACK_7, W, 0
$0644	$5E0B	    			SUBWF	STACK_11, F, 0
$0646	$EF32	F003			GOTO	SOK22L16
$064A	$	SADD22L16:
$064A	$2608	    			ADDWF	STACK_8, F, 0
$064C	$5005	    			MOVF	STACK_5, W, 0
$064E	$B0D8	    			BTFSC	STATUS, C, 0
$0650	$3C05	    			INCFSZ	STACK_5, W, 0
$0652	$2609	    			ADDWF	STACK_9, F, 0
$0654	$5006	    			MOVF	STACK_6, W, 0
$0656	$B0D8	    			BTFSC	STATUS, C, 0
$0658	$3C06	    			INCFSZ	STACK_6, W, 0
$065A	$260A	    			ADDWF	STACK_10, F, 0
$065C	$5007	    			MOVF	STACK_7, W, 0
$065E	$B0D8	    			BTFSC	STATUS, C, 0
$0660	$3C07	    			INCFSZ	STACK_7, W, 0
$0662	$260B	    			ADDWF	STACK_11, F, 0
$0664	$	SOK22L16:
$0664	$3601	    			RLCF	STACK_1, F, 0
$0666	$0E07	    			MOVLW	7
$0668	$6E0C	    			MOVWF	STACK_12, 0
$066A	$	LOOPS3232C:
$066A	$3401	    			RLCF	STACK_1, W, 0
$066C	$3608	    			RLCF	STACK_8, F, 0
$066E	$3609	    			RLCF	STACK_9, F, 0
$0670	$360A	    			RLCF	STACK_10, F, 0
$0672	$360B	    			RLCF	STACK_11, F, 0
$0674	$5004	    			MOVF	STACK_4, W, 0
$0676	$A001	    			BTFSS	STACK_1, 0, 0
$0678	$EF4D	F003			GOTO	SADD22LC
$067C	$5E08	    			SUBWF	STACK_8, F, 0
$067E	$5005	    			MOVF	STACK_5, W, 0
$0680	$A0D8	    			BTFSS	STATUS, C, 0
$0682	$3C05	    			INCFSZ	STACK_5, W, 0
$0684	$5E09	    			SUBWF	STACK_9, F, 0
$0686	$5006	    			MOVF	STACK_6, W, 0
$0688	$A0D8	    			BTFSS	STATUS, C, 0
$068A	$3C06	    			INCFSZ	STACK_6, W, 0
$068C	$5E0A	    			SUBWF	STACK_10, F, 0
$068E	$5007	    			MOVF	STACK_7, W, 0
$0690	$A0D8	    			BTFSS	STATUS, C, 0
$0692	$3C07	    			INCFSZ	STACK_7, W, 0
$0694	$5E0B	    			SUBWF	STACK_11, F, 0
$0696	$EF5A	F003			GOTO	SOK22LC
$069A	$	SADD22LC:
$069A	$2608	    			ADDWF	STACK_8, F, 0
$069C	$5005	    			MOVF	STACK_5, W, 0
$069E	$B0D8	    			BTFSC	STATUS, C, 0
$06A0	$3C05	    			INCFSZ	STACK_5, W, 0
$06A2	$2609	    			ADDWF	STACK_9, F, 0
$06A4	$5006	    			MOVF	STACK_6, W, 0
$06A6	$B0D8	    			BTFSC	STATUS, C, 0
$06A8	$3C06	    			INCFSZ	STACK_6, W, 0
$06AA	$260A	    			ADDWF	STACK_10, F, 0
$06AC	$5007	    			MOVF	STACK_7, W, 0
$06AE	$B0D8	    			BTFSC	STATUS, C, 0
$06B0	$3C07	    			INCFSZ	STACK_7, W, 0
$06B2	$260B	    			ADDWF	STACK_11, F, 0
$06B4	$	SOK22LC:
$06B4	$3601	    			RLCF	STACK_1, F, 0
$06B6	$2E0C	    			DECFSZ	STACK_12, F, 0
$06B8	$EF35	F003			GOTO	LOOPS3232C
$06BC	$3400	    			RLCF	STACK_0, W, 0
$06BE	$3608	    			RLCF	STACK_8, F, 0
$06C0	$3609	    			RLCF	STACK_9, F, 0
$06C2	$360A	    			RLCF	STACK_10, F, 0
$06C4	$360B	    			RLCF	STACK_11, F, 0
$06C6	$5004	    			MOVF	STACK_4, W, 0
$06C8	$A001	    			BTFSS	STACK_1, 0, 0
$06CA	$EF76	F003			GOTO	SADD22L24
$06CE	$5E08	    			SUBWF	STACK_8, F, 0
$06D0	$5005	    			MOVF	STACK_5, W, 0
$06D2	$A0D8	    			BTFSS	STATUS, C, 0
$06D4	$3C05	    			INCFSZ	STACK_5, W, 0
$06D6	$5E09	    			SUBWF	STACK_9, F, 0
$06D8	$5006	    			MOVF	STACK_6, W, 0
$06DA	$A0D8	    			BTFSS	STATUS, C, 0
$06DC	$3C06	    			INCFSZ	STACK_6, W, 0
$06DE	$5E0A	    			SUBWF	STACK_10, F, 0
$06E0	$5007	    			MOVF	STACK_7, W, 0
$06E2	$A0D8	    			BTFSS	STATUS, C, 0
$06E4	$3C07	    			INCFSZ	STACK_7, W, 0
$06E6	$5E0B	    			SUBWF	STACK_11, F, 0
$06E8	$EF83	F003			GOTO	SOK22L24
$06EC	$	SADD22L24:
$06EC	$2608	    			ADDWF	STACK_8, F, 0
$06EE	$5005	    			MOVF	STACK_5, W, 0
$06F0	$B0D8	    			BTFSC	STATUS, C, 0
$06F2	$3C05	    			INCFSZ	STACK_5, W, 0
$06F4	$2609	    			ADDWF	STACK_9, F, 0
$06F6	$5006	    			MOVF	STACK_6, W, 0
$06F8	$B0D8	    			BTFSC	STATUS, C, 0
$06FA	$3C06	    			INCFSZ	STACK_6, W, 0
$06FC	$260A	    			ADDWF	STACK_10, F, 0
$06FE	$5007	    			MOVF	STACK_7, W, 0
$0700	$B0D8	    			BTFSC	STATUS, C, 0
$0702	$3C07	    			INCFSZ	STACK_7, W, 0
$0704	$260B	    			ADDWF	STACK_11, F, 0
$0706	$	SOK22L24:
$0706	$3600	    			RLCF	STACK_0, F, 0
$0708	$0E07	    			MOVLW	7
$070A	$6E0C	    			MOVWF	STACK_12, 0
$070C	$	LOOPS3232D:
$070C	$3400	    			RLCF	STACK_0, W, 0
$070E	$3608	    			RLCF	STACK_8, F, 0
$0710	$3609	    			RLCF	STACK_9, F, 0
$0712	$360A	    			RLCF	STACK_10, F, 0
$0714	$360B	    			RLCF	STACK_11, F, 0
$0716	$5004	    			MOVF	STACK_4, W, 0
$0718	$A000	    			BTFSS	STACK_0, 0, 0
$071A	$EF9E	F003			GOTO	SADD22LD
$071E	$5E08	    			SUBWF	STACK_8, F, 0
$0720	$5005	    			MOVF	STACK_5, W, 0
$0722	$A0D8	    			BTFSS	STATUS, C, 0
$0724	$3C05	    			INCFSZ	STACK_5, W, 0
$0726	$5E09	    			SUBWF	STACK_9, F, 0
$0728	$5006	    			MOVF	STACK_6, W, 0
$072A	$A0D8	    			BTFSS	STATUS, C, 0
$072C	$3C06	    			INCFSZ	STACK_6, W, 0
$072E	$5E0A	    			SUBWF	STACK_10, F, 0
$0730	$5007	    			MOVF	STACK_7, W, 0
$0732	$A0D8	    			BTFSS	STATUS, C, 0
$0734	$3C07	    			INCFSZ	STACK_7, W, 0
$0736	$5E0B	    			SUBWF	STACK_11, F, 0
$0738	$EFAB	F003			GOTO	SOK22LD
$073C	$	SADD22LD:
$073C	$2608	    			ADDWF	STACK_8, F, 0
$073E	$5005	    			MOVF	STACK_5, W, 0
$0740	$B0D8	    			BTFSC	STATUS, C, 0
$0742	$3C05	    			INCFSZ	STACK_5, W, 0
$0744	$2609	    			ADDWF	STACK_9, F, 0
$0746	$5006	    			MOVF	STACK_6, W, 0
$0748	$B0D8	    			BTFSC	STATUS, C, 0
$074A	$3C06	    			INCFSZ	STACK_6, W, 0
$074C	$260A	    			ADDWF	STACK_10, F, 0
$074E	$5007	    			MOVF	STACK_7, W, 0
$0750	$B0D8	    			BTFSC	STATUS, C, 0
$0752	$3C07	    			INCFSZ	STACK_7, W, 0
$0754	$260B	    			ADDWF	STACK_11, F, 0
$0756	$	SOK22LD:
$0756	$3600	    			RLCF	STACK_0, F, 0
$0758	$2E0C	    			DECFSZ	STACK_12, F, 0
$075A	$EF86	F003			GOTO	LOOPS3232D
$075E	$B000	    			BTFSC	STACK_0, 0, 0
$0760	$EFC0	F003			GOTO	SOK22L
$0764	$5004	    			MOVF	STACK_4, W, 0
$0766	$2608	    			ADDWF	STACK_8, F, 0
$0768	$5005	    			MOVF	STACK_5, W, 0
$076A	$B0D8	    			BTFSC	STATUS, C, 0
$076C	$3C05	    			INCFSZ	STACK_5, W, 0
$076E	$2609	    			ADDWF	STACK_9, F, 0
$0770	$5006	    			MOVF	STACK_6, W, 0
$0772	$B0D8	    			BTFSC	STATUS, C, 0
$0774	$3C06	    			INCFSZ	STACK_6, W, 0
$0776	$260A	    			ADDWF	STACK_10, F, 0
$0778	$5007	    			MOVF	STACK_7, W, 0
$077A	$B0D8	    			BTFSC	STATUS, C, 0
$077C	$3C07	    			INCFSZ	STACK_7, W, 0
$077E	$260B	    			ADDWF	STACK_11, F, 0
$0780	$	SOK22L:
$0780	$0012	    			RETURN
$0782	$	_COMFREM:
$0782	$0100	    			MOVLB	0
$0784	$1E0B	    			COMF	STACK_11, F, 0
$0786	$1E0A	    			COMF	STACK_10, F, 0
$0788	$1E09	    			COMF	STACK_9, F, 0
$078A	$1E08	    			COMF	STACK_8, F, 0
$078C	$2A08	    			INCF	STACK_8, F, 0
$078E	$B4D8	    			BTFSC	STATUS, Z, 0
$0790	$2A09	    			INCF	STACK_9, F, 0
$0792	$B4D8	    			BTFSC	STATUS, Z, 0
$0794	$2A0A	    			INCF	STACK_10, F, 0
$0796	$B4D8	    			BTFSC	STATUS, Z, 0
$0798	$2A0B	    			INCF	STACK_11, F, 0
$079A	$0012	    			RETURN
$079C	$	_Div_32x32_U:
$079C	$0100	    			MOVLB	0
$079E	$6A0B	    			CLRF	STACK_11, 0
$07A0	$6A0A	    			CLRF	STACK_10, 0
$07A2	$6A09	    			CLRF	STACK_9, 0
$07A4	$6A08	    			CLRF	STACK_8, 0
$07A6	$6A0E	    			CLRF	STACK_14, 0
$07A8	$3403	    			RLCF	STACK_3, W, 0
$07AA	$3608	    			RLCF	STACK_8, F, 0
$07AC	$5004	    			MOVF	STACK_4, W, 0
$07AE	$5E08	    			SUBWF	STACK_8, F, 0
$07B0	$5005	    			MOVF	STACK_5, W, 0
$07B2	$A0D8	    			BTFSS	STATUS, C, 0
$07B4	$3C05	    			INCFSZ	STACK_5, W, 0
$07B6	$5E09	    			SUBWF	STACK_9, F, 0
$07B8	$5006	    			MOVF	STACK_6, W, 0
$07BA	$A0D8	    			BTFSS	STATUS, C, 0
$07BC	$3C06	    			INCFSZ	STACK_6, W, 0
$07BE	$5E0A	    			SUBWF	STACK_10, F, 0
$07C0	$5007	    			MOVF	STACK_7, W, 0
$07C2	$A0D8	    			BTFSS	STATUS, C, 0
$07C4	$3C07	    			INCFSZ	STACK_7, W, 0
$07C6	$5E0B	    			SUBWF	STACK_11, F, 0
$07C8	$6AE8	    			CLRF	WREG, 0
$07CA	$A0D8	    			BTFSS	STATUS, C, 0
$07CC	$0E01	    			MOVLW	1
$07CE	$5E0E	    			SUBWF	STACK_14, F, 0
$07D0	$3603	    			RLCF	STACK_3, F, 0
$07D2	$0E07	    			MOVLW	7
$07D4	$6E0C	    			MOVWF	STACK_12, 0
$07D6	$	LOOPU3232A:
$07D6	$3403	    			RLCF	STACK_3, W, 0
$07D8	$3608	    			RLCF	STACK_8, F, 0
$07DA	$3609	    			RLCF	STACK_9, F, 0
$07DC	$360A	    			RLCF	STACK_10, F, 0
$07DE	$360B	    			RLCF	STACK_11, F, 0
$07E0	$360E	    			RLCF	STACK_14, F, 0
$07E2	$5004	    			MOVF	STACK_4, W, 0
$07E4	$A003	    			BTFSS	STACK_3, 0, 0
$07E6	$EF08	F004			GOTO	UADD22LA
$07EA	$5E08	    			SUBWF	STACK_8, F, 0
$07EC	$5005	    			MOVF	STACK_5, W, 0
$07EE	$A0D8	    			BTFSS	STATUS, C, 0
$07F0	$3C05	    			INCFSZ	STACK_5, W, 0
$07F2	$5E09	    			SUBWF	STACK_9, F, 0
$07F4	$5006	    			MOVF	STACK_6, W, 0
$07F6	$A0D8	    			BTFSS	STATUS, C, 0
$07F8	$3C06	    			INCFSZ	STACK_6, W, 0
$07FA	$5E0A	    			SUBWF	STACK_10, F, 0
$07FC	$5007	    			MOVF	STACK_7, W, 0
$07FE	$A0D8	    			BTFSS	STATUS, C, 0
$0800	$3C07	    			INCFSZ	STACK_7, W, 0
$0802	$5E0B	    			SUBWF	STACK_11, F, 0
$0804	$6AE8	    			CLRF	WREG, 0
$0806	$A0D8	    			BTFSS	STATUS, C, 0
$0808	$0E01	    			MOVLW	1
$080A	$5E0E	    			SUBWF	STACK_14, F, 0
$080C	$EF19	F004			GOTO	UOK22LA
$0810	$	UADD22LA:
$0810	$2608	    			ADDWF	STACK_8, F, 0
$0812	$5005	    			MOVF	STACK_5, W, 0
$0814	$B0D8	    			BTFSC	STATUS, C, 0
$0816	$3C05	    			INCFSZ	STACK_5, W, 0
$0818	$2609	    			ADDWF	STACK_9, F, 0
$081A	$5006	    			MOVF	STACK_6, W, 0
$081C	$B0D8	    			BTFSC	STATUS, C, 0
$081E	$3C06	    			INCFSZ	STACK_6, W, 0
$0820	$260A	    			ADDWF	STACK_10, F, 0
$0822	$5007	    			MOVF	STACK_7, W, 0
$0824	$B0D8	    			BTFSC	STATUS, C, 0
$0826	$3C07	    			INCFSZ	STACK_7, W, 0
$0828	$260B	    			ADDWF	STACK_11, F, 0
$082A	$6AE8	    			CLRF	WREG, 0
$082C	$B0D8	    			BTFSC	STATUS, C, 0
$082E	$0E01	    			MOVLW	1
$0830	$260E	    			ADDWF	STACK_14, F, 0
$0832	$	UOK22LA:
$0832	$3603	    			RLCF	STACK_3, F, 0
$0834	$2E0C	    			DECFSZ	STACK_12, F, 0
$0836	$EFEB	F003			GOTO	LOOPU3232A
$083A	$3402	    			RLCF	STACK_2, W, 0
$083C	$3608	    			RLCF	STACK_8, F, 0
$083E	$3609	    			RLCF	STACK_9, F, 0
$0840	$360A	    			RLCF	STACK_10, F, 0
$0842	$360B	    			RLCF	STACK_11, F, 0
$0844	$360E	    			RLCF	STACK_14, F, 0
$0846	$5004	    			MOVF	STACK_4, W, 0
$0848	$A003	    			BTFSS	STACK_3, 0, 0
$084A	$EF3A	F004			GOTO	UADD22L8
$084E	$5E08	    			SUBWF	STACK_8, F, 0
$0850	$5005	    			MOVF	STACK_5, W, 0
$0852	$A0D8	    			BTFSS	STATUS, C, 0
$0854	$3C05	    			INCFSZ	STACK_5, W, 0
$0856	$5E09	    			SUBWF	STACK_9, F, 0
$0858	$5006	    			MOVF	STACK_6, W, 0
$085A	$A0D8	    			BTFSS	STATUS, C, 0
$085C	$3C06	    			INCFSZ	STACK_6, W, 0
$085E	$5E0A	    			SUBWF	STACK_10, F, 0
$0860	$5007	    			MOVF	STACK_7, W, 0
$0862	$A0D8	    			BTFSS	STATUS, C, 0
$0864	$3C07	    			INCFSZ	STACK_7, W, 0
$0866	$5E0B	    			SUBWF	STACK_11, F, 0
$0868	$6AE8	    			CLRF	WREG, 0
$086A	$A0D8	    			BTFSS	STATUS, C, 0
$086C	$0E01	    			MOVLW	1
$086E	$5E0E	    			SUBWF	STACK_14, F, 0
$0870	$EF4B	F004			GOTO	UOK22L8
$0874	$	UADD22L8:
$0874	$2608	    			ADDWF	STACK_8, F, 0
$0876	$5005	    			MOVF	STACK_5, W, 0
$0878	$B0D8	    			BTFSC	STATUS, C, 0
$087A	$3C05	    			INCFSZ	STACK_5, W, 0
$087C	$2609	    			ADDWF	STACK_9, F, 0
$087E	$5006	    			MOVF	STACK_6, W, 0
$0880	$B0D8	    			BTFSC	STATUS, C, 0
$0882	$3C06	    			INCFSZ	STACK_6, W, 0
$0884	$260A	    			ADDWF	STACK_10, F, 0
$0886	$5007	    			MOVF	STACK_7, W, 0
$0888	$B0D8	    			BTFSC	STATUS, C, 0
$088A	$3C07	    			INCFSZ	STACK_7, W, 0
$088C	$260B	    			ADDWF	STACK_11, F, 0
$088E	$6AE8	    			CLRF	WREG, 0
$0890	$B0D8	    			BTFSC	STATUS, C, 0
$0892	$0E01	    			MOVLW	1
$0894	$260E	    			ADDWF	STACK_14, F, 0
$0896	$	UOK22L8:
$0896	$3602	    			RLCF	STACK_2, F, 0
$0898	$0E07	    			MOVLW	7
$089A	$6E0C	    			MOVWF	STACK_12, 0
$089C	$	LOOPU3232B:
$089C	$3402	    			RLCF	STACK_2, W, 0
$089E	$3608	    			RLCF	STACK_8, F, 0
$08A0	$3609	    			RLCF	STACK_9, F, 0
$08A2	$360A	    			RLCF	STACK_10, F, 0
$08A4	$360B	    			RLCF	STACK_11, F, 0
$08A6	$360E	    			RLCF	STACK_14, F, 0
$08A8	$5004	    			MOVF	STACK_4, W, 0
$08AA	$A002	    			BTFSS	STACK_2, 0, 0
$08AC	$EF6B	F004			GOTO	UADD22LB
$08B0	$5E08	    			SUBWF	STACK_8, F, 0
$08B2	$5005	    			MOVF	STACK_5, W, 0
$08B4	$A0D8	    			BTFSS	STATUS, C, 0
$08B6	$3C05	    			INCFSZ	STACK_5, W, 0
$08B8	$5E09	    			SUBWF	STACK_9, F, 0
$08BA	$5006	    			MOVF	STACK_6, W, 0
$08BC	$A0D8	    			BTFSS	STATUS, C, 0
$08BE	$3C06	    			INCFSZ	STACK_6, W, 0
$08C0	$5E0A	    			SUBWF	STACK_10, F, 0
$08C2	$5007	    			MOVF	STACK_7, W, 0
$08C4	$A0D8	    			BTFSS	STATUS, C, 0
$08C6	$3C07	    			INCFSZ	STACK_7, W, 0
$08C8	$5E0B	    			SUBWF	STACK_11, F, 0
$08CA	$6AE8	    			CLRF	WREG, 0
$08CC	$A0D8	    			BTFSS	STATUS, C, 0
$08CE	$0E01	    			MOVLW	1
$08D0	$5E0E	    			SUBWF	STACK_14, F, 0
$08D2	$EF7C	F004			GOTO	UOK22LB
$08D6	$	UADD22LB:
$08D6	$2608	    			ADDWF	STACK_8, F, 0
$08D8	$5005	    			MOVF	STACK_5, W, 0
$08DA	$B0D8	    			BTFSC	STATUS, C, 0
$08DC	$3C05	    			INCFSZ	STACK_5, W, 0
$08DE	$2609	    			ADDWF	STACK_9, F, 0
$08E0	$5006	    			MOVF	STACK_6, W, 0
$08E2	$B0D8	    			BTFSC	STATUS, C, 0
$08E4	$3C06	    			INCFSZ	STACK_6, W, 0
$08E6	$260A	    			ADDWF	STACK_10, F, 0
$08E8	$5007	    			MOVF	STACK_7, W, 0
$08EA	$B0D8	    			BTFSC	STATUS, C, 0
$08EC	$3C07	    			INCFSZ	STACK_7, W, 0
$08EE	$260B	    			ADDWF	STACK_11, F, 0
$08F0	$6AE8	    			CLRF	WREG, 0
$08F2	$B0D8	    			BTFSC	STATUS, C, 0
$08F4	$0E01	    			MOVLW	1
$08F6	$260E	    			ADDWF	STACK_14, F, 0
$08F8	$	UOK22LB:
$08F8	$3602	    			RLCF	STACK_2, F, 0
$08FA	$2E0C	    			DECFSZ	STACK_12, F, 0
$08FC	$EF4E	F004			GOTO	LOOPU3232B
$0900	$3401	    			RLCF	STACK_1, W, 0
$0902	$3608	    			RLCF	STACK_8, F, 0
$0904	$3609	    			RLCF	STACK_9, F, 0
$0906	$360A	    			RLCF	STACK_10, F, 0
$0908	$360B	    			RLCF	STACK_11, F, 0
$090A	$360E	    			RLCF	STACK_14, F, 0
$090C	$5004	    			MOVF	STACK_4, W, 0
$090E	$A002	    			BTFSS	STACK_2, 0, 0
$0910	$EF9D	F004			GOTO	UADD22L16
$0914	$5E08	    			SUBWF	STACK_8, F, 0
$0916	$5005	    			MOVF	STACK_5, W, 0
$0918	$A0D8	    			BTFSS	STATUS, C, 0
$091A	$3C05	    			INCFSZ	STACK_5, W, 0
$091C	$5E09	    			SUBWF	STACK_9, F, 0
$091E	$5006	    			MOVF	STACK_6, W, 0
$0920	$A0D8	    			BTFSS	STATUS, C, 0
$0922	$3C06	    			INCFSZ	STACK_6, W, 0
$0924	$5E0A	    			SUBWF	STACK_10, F, 0
$0926	$5007	    			MOVF	STACK_7, W, 0
$0928	$A0D8	    			BTFSS	STATUS, C, 0
$092A	$3C07	    			INCFSZ	STACK_7, W, 0
$092C	$5E0B	    			SUBWF	STACK_11, F, 0
$092E	$6AE8	    			CLRF	WREG, 0
$0930	$A0D8	    			BTFSS	STATUS, C, 0
$0932	$0E01	    			MOVLW	1
$0934	$5E0E	    			SUBWF	STACK_14, F, 0
$0936	$EFAE	F004			GOTO	UOK22L16
$093A	$	UADD22L16:
$093A	$2608	    			ADDWF	STACK_8, F, 0
$093C	$5005	    			MOVF	STACK_5, W, 0
$093E	$B0D8	    			BTFSC	STATUS, C, 0
$0940	$3C05	    			INCFSZ	STACK_5, W, 0
$0942	$2609	    			ADDWF	STACK_9, F, 0
$0944	$5006	    			MOVF	STACK_6, W, 0
$0946	$B0D8	    			BTFSC	STATUS, C, 0
$0948	$3C06	    			INCFSZ	STACK_6, W, 0
$094A	$260A	    			ADDWF	STACK_10, F, 0
$094C	$5007	    			MOVF	STACK_7, W, 0
$094E	$B0D8	    			BTFSC	STATUS, C, 0
$0950	$3C07	    			INCFSZ	STACK_7, W, 0
$0952	$260B	    			ADDWF	STACK_11, F, 0
$0954	$6AE8	    			CLRF	WREG, 0
$0956	$B0D8	    			BTFSC	STATUS, C, 0
$0958	$0E01	    			MOVLW	1
$095A	$260E	    			ADDWF	STACK_14, F, 0
$095C	$	UOK22L16:
$095C	$3601	    			RLCF	STACK_1, F, 0
$095E	$0E07	    			MOVLW	7
$0960	$6E0C	    			MOVWF	STACK_12, 0
$0962	$	LOOPU3232C:
$0962	$3401	    			RLCF	STACK_1, W, 0
$0964	$3608	    			RLCF	STACK_8, F, 0
$0966	$3609	    			RLCF	STACK_9, F, 0
$0968	$360A	    			RLCF	STACK_10, F, 0
$096A	$360B	    			RLCF	STACK_11, F, 0
$096C	$360E	    			RLCF	STACK_14, F, 0
$096E	$5004	    			MOVF	STACK_4, W, 0
$0970	$A001	    			BTFSS	STACK_1, 0, 0
$0972	$EFCE	F004			GOTO	UADD22LC
$0976	$5E08	    			SUBWF	STACK_8, F, 0
$0978	$5005	    			MOVF	STACK_5, W, 0
$097A	$A0D8	    			BTFSS	STATUS, C, 0
$097C	$3C05	    			INCFSZ	STACK_5, W, 0
$097E	$5E09	    			SUBWF	STACK_9, F, 0
$0980	$5006	    			MOVF	STACK_6, W, 0
$0982	$A0D8	    			BTFSS	STATUS, C, 0
$0984	$3C06	    			INCFSZ	STACK_6, W, 0
$0986	$5E0A	    			SUBWF	STACK_10, F, 0
$0988	$5007	    			MOVF	STACK_7, W, 0
$098A	$A0D8	    			BTFSS	STATUS, C, 0
$098C	$3C07	    			INCFSZ	STACK_7, W, 0
$098E	$5E0B	    			SUBWF	STACK_11, F, 0
$0990	$6AE8	    			CLRF	WREG, 0
$0992	$A0D8	    			BTFSS	STATUS, C, 0
$0994	$0E01	    			MOVLW	1
$0996	$5E0E	    			SUBWF	STACK_14, F, 0
$0998	$EFDF	F004			GOTO	UOK22LC
$099C	$	UADD22LC:
$099C	$2608	    			ADDWF	STACK_8, F, 0
$099E	$5005	    			MOVF	STACK_5, W, 0
$09A0	$B0D8	    			BTFSC	STATUS, C, 0
$09A2	$3C05	    			INCFSZ	STACK_5, W, 0
$09A4	$2609	    			ADDWF	STACK_9, F, 0
$09A6	$5006	    			MOVF	STACK_6, W, 0
$09A8	$B0D8	    			BTFSC	STATUS, C, 0
$09AA	$3C06	    			INCFSZ	STACK_6, W, 0
$09AC	$260A	    			ADDWF	STACK_10, F, 0
$09AE	$5007	    			MOVF	STACK_7, W, 0
$09B0	$B0D8	    			BTFSC	STATUS, C, 0
$09B2	$3C07	    			INCFSZ	STACK_7, W, 0
$09B4	$260B	    			ADDWF	STACK_11, F, 0
$09B6	$6AE8	    			CLRF	WREG, 0
$09B8	$B0D8	    			BTFSC	STATUS, C, 0
$09BA	$0E01	    			MOVLW	1
$09BC	$260E	    			ADDWF	STACK_14, F, 0
$09BE	$	UOK22LC:
$09BE	$3601	    			RLCF	STACK_1, F, 0
$09C0	$2E0C	    			DECFSZ	STACK_12, F, 0
$09C2	$EFB1	F004			GOTO	LOOPU3232C
$09C6	$3400	    			RLCF	STACK_0, W, 0
$09C8	$3608	    			RLCF	STACK_8, F, 0
$09CA	$3609	    			RLCF	STACK_9, F, 0
$09CC	$360A	    			RLCF	STACK_10, F, 0
$09CE	$360B	    			RLCF	STACK_11, F, 0
$09D0	$360E	    			RLCF	STACK_14, F, 0
$09D2	$5004	    			MOVF	STACK_4, W, 0
$09D4	$A001	    			BTFSS	STACK_1, 0, 0
$09D6	$EF00	F005			GOTO	UADD22L24
$09DA	$5E08	    			SUBWF	STACK_8, F, 0
$09DC	$5005	    			MOVF	STACK_5, W, 0
$09DE	$A0D8	    			BTFSS	STATUS, C, 0
$09E0	$3C05	    			INCFSZ	STACK_5, W, 0
$09E2	$5E09	    			SUBWF	STACK_9, F, 0
$09E4	$5006	    			MOVF	STACK_6, W, 0
$09E6	$A0D8	    			BTFSS	STATUS, C, 0
$09E8	$3C06	    			INCFSZ	STACK_6, W, 0
$09EA	$5E0A	    			SUBWF	STACK_10, F, 0
$09EC	$5007	    			MOVF	STACK_7, W, 0
$09EE	$A0D8	    			BTFSS	STATUS, C, 0
$09F0	$3C07	    			INCFSZ	STACK_7, W, 0
$09F2	$5E0B	    			SUBWF	STACK_11, F, 0
$09F4	$6AE8	    			CLRF	WREG, 0
$09F6	$A0D8	    			BTFSS	STATUS, C, 0
$09F8	$0E01	    			MOVLW	1
$09FA	$5E0E	    			SUBWF	STACK_14, F, 0
$09FC	$EF11	F005			GOTO	UOK22L24
$0A00	$	UADD22L24:
$0A00	$2608	    			ADDWF	STACK_8, F, 0
$0A02	$5005	    			MOVF	STACK_5, W, 0
$0A04	$B0D8	    			BTFSC	STATUS, C, 0
$0A06	$3C05	    			INCFSZ	STACK_5, W, 0
$0A08	$2609	    			ADDWF	STACK_9, F, 0
$0A0A	$5006	    			MOVF	STACK_6, W, 0
$0A0C	$B0D8	    			BTFSC	STATUS, C, 0
$0A0E	$3C06	    			INCFSZ	STACK_6, W, 0
$0A10	$260A	    			ADDWF	STACK_10, F, 0
$0A12	$5007	    			MOVF	STACK_7, W, 0
$0A14	$B0D8	    			BTFSC	STATUS, C, 0
$0A16	$3C07	    			INCFSZ	STACK_7, W, 0
$0A18	$260B	    			ADDWF	STACK_11, F, 0
$0A1A	$6AE8	    			CLRF	WREG, 0
$0A1C	$B0D8	    			BTFSC	STATUS, C, 0
$0A1E	$0E01	    			MOVLW	1
$0A20	$260E	    			ADDWF	STACK_14, F, 0
$0A22	$	UOK22L24:
$0A22	$3600	    			RLCF	STACK_0, F, 0
$0A24	$0E07	    			MOVLW	7
$0A26	$6E0C	    			MOVWF	STACK_12, 0
$0A28	$	LOOPU3232D:
$0A28	$3400	    			RLCF	STACK_0, W, 0
$0A2A	$3608	    			RLCF	STACK_8, F, 0
$0A2C	$3609	    			RLCF	STACK_9, F, 0
$0A2E	$360A	    			RLCF	STACK_10, F, 0
$0A30	$360B	    			RLCF	STACK_11, F, 0
$0A32	$360E	    			RLCF	STACK_14, F, 0
$0A34	$5004	    			MOVF	STACK_4, W, 0
$0A36	$A000	    			BTFSS	STACK_0, 0, 0
$0A38	$EF31	F005			GOTO	UADD22LD
$0A3C	$5E08	    			SUBWF	STACK_8, F, 0
$0A3E	$5005	    			MOVF	STACK_5, W, 0
$0A40	$A0D8	    			BTFSS	STATUS, C, 0
$0A42	$3C05	    			INCFSZ	STACK_5, W, 0
$0A44	$5E09	    			SUBWF	STACK_9, F, 0
$0A46	$5006	    			MOVF	STACK_6, W, 0
$0A48	$A0D8	    			BTFSS	STATUS, C, 0
$0A4A	$3C06	    			INCFSZ	STACK_6, W, 0
$0A4C	$5E0A	    			SUBWF	STACK_10, F, 0
$0A4E	$5007	    			MOVF	STACK_7, W, 0
$0A50	$A0D8	    			BTFSS	STATUS, C, 0
$0A52	$3C07	    			INCFSZ	STACK_7, W, 0
$0A54	$5E0B	    			SUBWF	STACK_11, F, 0
$0A56	$6AE8	    			CLRF	WREG, 0
$0A58	$A0D8	    			BTFSS	STATUS, C, 0
$0A5A	$0E01	    			MOVLW	1
$0A5C	$5E0E	    			SUBWF	STACK_14, F, 0
$0A5E	$EF42	F005			GOTO	UOK22LD
$0A62	$	UADD22LD:
$0A62	$2608	    			ADDWF	STACK_8, F, 0
$0A64	$5005	    			MOVF	STACK_5, W, 0
$0A66	$B0D8	    			BTFSC	STATUS, C, 0
$0A68	$3C05	    			INCFSZ	STACK_5, W, 0
$0A6A	$2609	    			ADDWF	STACK_9, F, 0
$0A6C	$5006	    			MOVF	STACK_6, W, 0
$0A6E	$B0D8	    			BTFSC	STATUS, C, 0
$0A70	$3C06	    			INCFSZ	STACK_6, W, 0
$0A72	$260A	    			ADDWF	STACK_10, F, 0
$0A74	$5007	    			MOVF	STACK_7, W, 0
$0A76	$B0D8	    			BTFSC	STATUS, C, 0
$0A78	$3C07	    			INCFSZ	STACK_7, W, 0
$0A7A	$260B	    			ADDWF	STACK_11, F, 0
$0A7C	$6AE8	    			CLRF	WREG, 0
$0A7E	$B0D8	    			BTFSC	STATUS, C, 0
$0A80	$0E01	    			MOVLW	1
$0A82	$260E	    			ADDWF	STACK_14, F, 0
$0A84	$	UOK22LD:
$0A84	$3600	    			RLCF	STACK_0, F, 0
$0A86	$2E0C	    			DECFSZ	STACK_12, F, 0
$0A88	$EF14	F005			GOTO	LOOPU3232D
$0A8C	$B000	    			BTFSC	STACK_0, 0, 0
$0A8E	$EF57	F005			GOTO	UOK22L
$0A92	$5004	    			MOVF	STACK_4, W, 0
$0A94	$2608	    			ADDWF	STACK_8, F, 0
$0A96	$5005	    			MOVF	STACK_5, W, 0
$0A98	$B0D8	    			BTFSC	STATUS, C, 0
$0A9A	$3C05	    			INCFSZ	STACK_5, W, 0
$0A9C	$2609	    			ADDWF	STACK_9, F, 0
$0A9E	$5006	    			MOVF	STACK_6, W, 0
$0AA0	$B0D8	    			BTFSC	STATUS, C, 0
$0AA2	$3C06	    			INCFSZ	STACK_6, W, 0
$0AA4	$260A	    			ADDWF	STACK_10, F, 0
$0AA6	$5007	    			MOVF	STACK_7, W, 0
$0AA8	$B0D8	    			BTFSC	STATUS, C, 0
$0AAA	$3C07	    			INCFSZ	STACK_7, W, 0
$0AAC	$260B	    			ADDWF	STACK_11, F, 0
$0AAE	$	UOK22L:
$0AAE	$0012	    			RETURN
$0AB0	$	cf_fat16_Get_Free_Fat_Entry:
$0AB0	$0108	    			MOVLB	8
$0AB2	$6BF8	    			CLRF	cf_fat16_Get_Free_Fat_Entry_free_entry_L0, 1
$0AB4	$6A26	    			CLRF	cf_fat16_fat_sector_pnt, 0
$0AB6	$6A27	    			CLRF	cf_fat16_fat_sector_pnt+1, 0
$0AB8	$0E04	    			MOVLW	4
$0ABA	$6E28	    			MOVWF	cf_fat16_fat_offset, 0
$0ABC	$0E00	    			MOVLW	0
$0ABE	$6E29	    			MOVWF	cf_fat16_fat_offset+1, 0
$0AC0	$C02A	F901			MOVFF	cf_fat16_FAT_START_SECTOR, FARG_Cf_Read_Sector+0
$0AC4	$C02B	F902			MOVFF	cf_fat16_FAT_START_SECTOR+1, FARG_Cf_Read_Sector+1
$0AC8	$C02C	F903			MOVFF	cf_fat16_FAT_START_SECTOR+2, FARG_Cf_Read_Sector+2
$0ACC	$C02D	F904			MOVFF	cf_fat16_FAT_START_SECTOR+3, FARG_Cf_Read_Sector+3
$0AD0	$0E2E	    			MOVLW	cf_fat16_data
$0AD2	$0109	    			MOVLB	9
$0AD4	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$0AD6	$0E00	    			MOVLW	@cf_fat16_data
$0AD8	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$0ADA	$EC5C	F001			CALL	_Cf_Read_Sector
$0ADE	$	L_cf_fat16_Get_Free_Fat_Entry_0:
$0ADE	$5029	    			MOVF	cf_fat16_fat_offset+1, 0, 0
$0AE0	$0102	    			MOVLB	2
$0AE2	$192F	    			XORWF	cf_fat16_BYTES_PER_SECTOR+1, 0, 1
$0AE4	$E102	    			BNZ	L_Get_Free_Fat_Entry_237
$0AE6	$512E	    			MOVF	cf_fat16_BYTES_PER_SECTOR, 0, 1
$0AE8	$1828	    			XORWF	cf_fat16_fat_offset, 0, 0
$0AEA	$	L_Get_Free_Fat_Entry_237:
$0AEA	$E117	    			BNZ	L_cf_fat16_Get_Free_Fat_Entry_2
$0AEC	$6A28	    			CLRF	cf_fat16_fat_offset, 0
$0AEE	$6A29	    			CLRF	cf_fat16_fat_offset+1, 0
$0AF0	$4A26	    			INFSNZ	cf_fat16_fat_sector_pnt, 1, 0
$0AF2	$2A27	    			INCF	cf_fat16_fat_sector_pnt+1, 1, 0
$0AF4	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$0AF6	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$0AF8	$0109	    			MOVLB	9
$0AFA	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$0AFC	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$0AFE	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$0B00	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$0B02	$0E00	    			MOVLW	0
$0B04	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$0B06	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$0B08	$0E00	    			MOVLW	0
$0B0A	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$0B0C	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$0B0E	$0E2E	    			MOVLW	cf_fat16_data
$0B10	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$0B12	$0E00	    			MOVLW	@cf_fat16_data
$0B14	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$0B16	$EC5C	F001			CALL	_Cf_Read_Sector
$0B1A	$	L_cf_fat16_Get_Free_Fat_Entry_2:
$0B1A	$0E2E	    			MOVLW	cf_fat16_data
$0B1C	$2428	    			ADDWF	cf_fat16_fat_offset, 0, 0
$0B1E	$6EE9	    			MOVWF	FSR0L, 0
$0B20	$0E00	    			MOVLW	@cf_fat16_data
$0B22	$2029	    			ADDWFC	cf_fat16_fat_offset+1, 0, 0
$0B24	$6EEA	    			MOVWF	FSR0L+1, 0
$0B26	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$0B2A	$5002	    			MOVF	STACK_2, 0, 0
$0B2C	$0A00	    			XORLW	0
$0B2E	$E114	    			BNZ	L_cf_fat16_Get_Free_Fat_Entry_5
$0B30	$0E01	    			MOVLW	1
$0B32	$2428	    			ADDWF	cf_fat16_fat_offset, 0, 0
$0B34	$6E00	    			MOVWF	STACK_0, 0
$0B36	$0E00	    			MOVLW	0
$0B38	$2029	    			ADDWFC	cf_fat16_fat_offset+1, 0, 0
$0B3A	$6E01	    			MOVWF	STACK_0+1, 0
$0B3C	$0E2E	    			MOVLW	cf_fat16_data
$0B3E	$2400	    			ADDWF	STACK_0, 0, 0
$0B40	$6EE9	    			MOVWF	FSR0L, 0
$0B42	$0E00	    			MOVLW	@cf_fat16_data
$0B44	$2001	    			ADDWFC	STACK_0+1, 0, 0
$0B46	$6EEA	    			MOVWF	FSR0L+1, 0
$0B48	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$0B4C	$5002	    			MOVF	STACK_2, 0, 0
$0B4E	$0A00	    			XORLW	0
$0B50	$E103	    			BNZ	L_cf_fat16_Get_Free_Fat_Entry_5
$0B52	$	L32_ex_L_cf_fat16_Get_Free_Fat_Entry_5:
$0B52	$0E01	    			MOVLW	1
$0B54	$0108	    			MOVLB	8
$0B56	$6FF8	    			MOVWF	cf_fat16_Get_Free_Fat_Entry_free_entry_L0, 1
$0B58	$	L_cf_fat16_Get_Free_Fat_Entry_5:
$0B58	$0E02	    			MOVLW	2
$0B5A	$2628	    			ADDWF	cf_fat16_fat_offset, 1, 0
$0B5C	$0E00	    			MOVLW	0
$0B5E	$2229	    			ADDWFC	cf_fat16_fat_offset+1, 1, 0
$0B60	$0108	    			MOVLB	8
$0B62	$53F8	    			MOVF	cf_fat16_Get_Free_Fat_Entry_free_entry_L0, 1, 1
$0B64	$E0BC	    			BZ	L_cf_fat16_Get_Free_Fat_Entry_0
$0B66	$	L_cf_fat16_Get_Free_Fat_Entry_1:
$0B66	$0108	    			MOVLB	8
$0B68	$6BF8	    			CLRF	cf_fat16_Get_Free_Fat_Entry_free_entry_L0, 1
$0B6A	$0E02	    			MOVLW	2
$0B6C	$5E28	    			SUBWF	cf_fat16_fat_offset, 1, 0
$0B6E	$0E00	    			MOVLW	0
$0B70	$5A29	    			SUBWFB	cf_fat16_fat_offset+1, 1, 0
$0B72	$0012	    			RETURN
$0B74	$	cf_fat16_Occupy_Current_Fat_Entry:
$0B74	$0E2E	    			MOVLW	cf_fat16_data
$0B76	$2428	    			ADDWF	cf_fat16_fat_offset, 0, 0
$0B78	$6EE1	    			MOVWF	FSR1L, 0
$0B7A	$0E00	    			MOVLW	@cf_fat16_data
$0B7C	$2029	    			ADDWFC	cf_fat16_fat_offset+1, 0, 0
$0B7E	$6EE2	    			MOVWF	FSR1L+1, 0
$0B80	$0EFF	    			MOVLW	255
$0B82	$6EE6	    			MOVWF	POSTINC1, 0
$0B84	$0E01	    			MOVLW	1
$0B86	$2428	    			ADDWF	cf_fat16_fat_offset, 0, 0
$0B88	$6E00	    			MOVWF	STACK_0, 0
$0B8A	$0E00	    			MOVLW	0
$0B8C	$2029	    			ADDWFC	cf_fat16_fat_offset+1, 0, 0
$0B8E	$6E01	    			MOVWF	STACK_0+1, 0
$0B90	$0E2E	    			MOVLW	cf_fat16_data
$0B92	$2400	    			ADDWF	STACK_0, 0, 0
$0B94	$6EE1	    			MOVWF	FSR1L, 0
$0B96	$0E00	    			MOVLW	@cf_fat16_data
$0B98	$2001	    			ADDWFC	STACK_0+1, 0, 0
$0B9A	$6EE2	    			MOVWF	FSR1L+1, 0
$0B9C	$0EFF	    			MOVLW	255
$0B9E	$6EE6	    			MOVWF	POSTINC1, 0
$0BA0	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$0BA2	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$0BA4	$0109	    			MOVLB	9
$0BA6	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$0BA8	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$0BAA	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$0BAC	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$0BAE	$0E00	    			MOVLW	0
$0BB0	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$0BB2	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$0BB4	$0E00	    			MOVLW	0
$0BB6	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$0BB8	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$0BBA	$0E2E	    			MOVLW	cf_fat16_data
$0BBC	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$0BBE	$0E00	    			MOVLW	@cf_fat16_data
$0BC0	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$0BC2	$EC89	F001			CALL	_Cf_Write_Sector
$0BC6	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$0BC8	$0102	    			MOVLB	2
$0BCA	$2530	    			ADDWF	cf_fat16_FAT2_START_SECTOR, 0, 1
$0BCC	$0109	    			MOVLB	9
$0BCE	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$0BD0	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$0BD2	$0102	    			MOVLB	2
$0BD4	$2131	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+1, 0, 1
$0BD6	$0109	    			MOVLB	9
$0BD8	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$0BDA	$0E00	    			MOVLW	0
$0BDC	$0102	    			MOVLB	2
$0BDE	$2132	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+2, 0, 1
$0BE0	$0109	    			MOVLB	9
$0BE2	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$0BE4	$0E00	    			MOVLW	0
$0BE6	$0102	    			MOVLB	2
$0BE8	$2133	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+3, 0, 1
$0BEA	$0109	    			MOVLB	9
$0BEC	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$0BEE	$0E2E	    			MOVLW	cf_fat16_data
$0BF0	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$0BF2	$0E00	    			MOVLW	@cf_fat16_data
$0BF4	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$0BF6	$EC89	F001			CALL	_Cf_Write_Sector
$0BFA	$0012	    			RETURN
$0BFC	$	cf_fat16_Set_File_Write_Cluster:
$0BFC	$C026	F000			MOVFF	cf_fat16_fat_sector_pnt, STACK_0
$0C00	$C027	F001			MOVFF	cf_fat16_fat_sector_pnt+1, STACK_0+1
$0C04	$C236	F004			MOVFF	cf_fat16_CLUSTERS_PER_FAT_SECTOR, STACK_4
$0C08	$C237	F005			MOVFF	cf_fat16_CLUSTERS_PER_FAT_SECTOR+1, STACK_4+1
$0C0C	$ECB1	F001			CALL	_mul_16x16_u
$0C10	$C028	F002			MOVFF	cf_fat16_fat_offset, STACK_2
$0C14	$C029	F003			MOVFF	cf_fat16_fat_offset+1, STACK_2+1
$0C18	$3203	    			RRCF	STACK_2+1, 1, 0
$0C1A	$3202	    			RRCF	STACK_2, 1, 0
$0C1C	$9E03	    			BCF	STACK_2+1, 7, 0
$0C1E	$5002	    			MOVF	STACK_2, 0, 0
$0C20	$2400	    			ADDWF	STACK_0, 0, 0
$0C22	$0102	    			MOVLB	2
$0C24	$6F34	    			MOVWF	cf_fat16_file_write_cluster, 1
$0C26	$5003	    			MOVF	STACK_2+1, 0, 0
$0C28	$2001	    			ADDWFC	STACK_0+1, 0, 0
$0C2A	$6F35	    			MOVWF	cf_fat16_file_write_cluster+1, 1
$0C2C	$0012	    			RETURN
$0C2E	$	cf_fat16_Set_File_Write_Sector:
$0C2E	$0E02	    			MOVLW	2
$0C30	$0102	    			MOVLB	2
$0C32	$5D34	    			SUBWF	cf_fat16_file_write_cluster, 0, 1
$0C34	$6E04	    			MOVWF	STACK_4, 0
$0C36	$0E00	    			MOVLW	0
$0C38	$5935	    			SUBWFB	cf_fat16_file_write_cluster+1, 0, 1
$0C3A	$6E05	    			MOVWF	STACK_4+1, 0
$0C3C	$C23C	F000			MOVFF	cf_fat16_SECTORS_PER_CLUSTER, STACK_0
$0C40	$0E00	    			MOVLW	0
$0C42	$6E01	    			MOVWF	STACK_0+1, 0
$0C44	$6E02	    			MOVWF	STACK_0+2, 0
$0C46	$6E03	    			MOVWF	STACK_0+3, 0
$0C48	$0E00	    			MOVLW	0
$0C4A	$6E06	    			MOVWF	STACK_4+2, 0
$0C4C	$6E07	    			MOVWF	STACK_4+3, 0
$0C4E	$ECDA	F001			CALL	_mul_32x32_s
$0C52	$C000	F238			MOVFF	STACK_0, cf_fat16_file_write_sector
$0C56	$C001	F239			MOVFF	STACK_0+1, cf_fat16_file_write_sector+1
$0C5A	$C002	F23A			MOVFF	STACK_0+2, cf_fat16_file_write_sector+2
$0C5E	$C003	F23B			MOVFF	STACK_0+3, cf_fat16_file_write_sector+3
$0C62	$0102	    			MOVLB	2
$0C64	$513D	    			MOVF	cf_fat16_DATA_START_SECTOR, 0, 1
$0C66	$2400	    			ADDWF	STACK_0, 0, 0
$0C68	$6F38	    			MOVWF	cf_fat16_file_write_sector, 1
$0C6A	$513E	    			MOVF	cf_fat16_DATA_START_SECTOR+1, 0, 1
$0C6C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$0C6E	$6F39	    			MOVWF	cf_fat16_file_write_sector+1, 1
$0C70	$513F	    			MOVF	cf_fat16_DATA_START_SECTOR+2, 0, 1
$0C72	$2002	    			ADDWFC	STACK_0+2, 0, 0
$0C74	$6F3A	    			MOVWF	cf_fat16_file_write_sector+2, 1
$0C76	$5140	    			MOVF	cf_fat16_DATA_START_SECTOR+3, 0, 1
$0C78	$2003	    			ADDWFC	STACK_0+3, 0, 0
$0C7A	$6F3B	    			MOVWF	cf_fat16_file_write_sector+3, 1
$0C7C	$0012	    			RETURN
$0C7E	$	_Div_16x16_U:
$0C7E	$0100	    			MOVLB	0
$0C80	$6A08	    			CLRF	STACK_8, 0
$0C82	$6A09	    			CLRF	STACK_9, 0
$0C84	$0E10	    			MOVLW	16
$0C86	$6E0C	    			MOVWF	STACK_12, 0
$0C88	$3401	    			RLCF	STACK_1, W, 0
$0C8A	$3608	    			RLCF	STACK_8, F, 0
$0C8C	$3609	    			RLCF	STACK_9, F, 0
$0C8E	$5004	    			MOVF	STACK_4, W, 0
$0C90	$5E08	    			SUBWF	STACK_8, F, 0
$0C92	$5005	    			MOVF	STACK_5, W, 0
$0C94	$A0D8	    			BTFSS	STATUS, C, 0
$0C96	$3C05	    			INCFSZ	STACK_5, W, 0
$0C98	$5E09	    			SUBWF	STACK_9, F, 0
$0C9A	$B0D8	    			BTFSC	STATUS, C, 0
$0C9C	$EF57	F006			GOTO	$+8
$0CA0	$5004	    			MOVF	STACK_4, W, 0
$0CA2	$2608	    			ADDWF	STACK_8, F, 0
$0CA4	$5005	    			MOVF	STACK_5, W, 0
$0CA6	$B0D8	    			BTFSC	STATUS, C, 0
$0CA8	$3C05	    			INCFSZ	STACK_5, W, 0
$0CAA	$2609	    			ADDWF	STACK_9, F, 0
$0CAC	$90D8	    			BCF	STATUS, C, 0
$0CAE	$3600	    			RLCF	STACK_0, F, 0
$0CB0	$3601	    			RLCF	STACK_1, F, 0
$0CB2	$2E0C	    			DECFSZ	STACK_12, F, 0
$0CB4	$EF44	F006			GOTO	$-21
$0CB8	$0012	    			RETURN
$0CBA	$	_Div_8x8_U:
$0CBA	$0100	    			MOVLB	0
$0CBC	$6B08	    			CLRF	STACK_8, F
$0CBE	$0E08	    			MOVLW	8
$0CC0	$6E0C	    			MOVWF	STACK_12, 0
$0CC2	$3400	    			RLCF	STACK_0, W, 0
$0CC4	$3608	    			RLCF	STACK_8, F, 0
$0CC6	$5004	    			MOVF	STACK_4, W, 0
$0CC8	$5E08	    			SUBWF	STACK_8, F, 0
$0CCA	$B0D8	    			BTFSC	STATUS, C, 0
$0CCC	$EF6A	F006			GOTO	$+3
$0CD0	$2608	    			ADDWF	STACK_8, F, 0
$0CD2	$90D8	    			BCF	STATUS, C, 0
$0CD4	$3600	    			RLCF	STACK_0, F, 0
$0CD6	$2E0C	    			DECFSZ	STACK_12, F, 0
$0CD8	$EF61	F006			GOTO	$-10
$0CDC	$0012	    			RETURN
$0CDE	$	_Div_16x16_S:
$0CDE	$0100	    			MOVLB	0
$0CE0	$6A0D	    			CLRF	STACK_13, 0
$0CE2	$6A09	    			CLRF	STACK_9, 0
$0CE4	$6A08	    			CLRF	STACK_8, 0
$0CE6	$5001	    			MOVF	STACK_1, W, 0
$0CE8	$1000	    			IORWF	STACK_0, W, 0
$0CEA	$B4D8	    			BTFSC	STATUS, Z, 0
$0CEC	$0C00	    			RETLW	0
$0CEE	$5001	    			MOVF	STACK_1, W, 0
$0CF0	$1805	    			XORWF	STACK_5, W, 0
$0CF2	$6E0A	    			MOVWF	STACK_10, 0
$0CF4	$BE0A	    			BTFSC	STACK_10, 7, 0
$0CF6	$1E0D	    			COMF	STACK_13, F, 0
$0CF8	$6A0B	    			CLRF	STACK_11, 0
$0CFA	$AE05	    			BTFSS	STACK_5, 7, 0
$0CFC	$EF85	F006			GOTO	$+6
$0D00	$1E04	    			COMF	STACK_4, F, 0
$0D02	$1E05	    			COMF	STACK_5, F, 0
$0D04	$2A04	    			INCF	STACK_4, F, 0
$0D06	$B4D8	    			BTFSC	STATUS, Z, 0
$0D08	$2A05	    			INCF	STACK_5, F, 0
$0D0A	$AE01	    			BTFSS	STACK_1, 7, 0
$0D0C	$EF8D	F006			GOTO	$+6
$0D10	$1E00	    			COMF	STACK_0, F, 0
$0D12	$1E01	    			COMF	STACK_1, F, 0
$0D14	$2A00	    			INCF	STACK_0, F, 0
$0D16	$B4D8	    			BTFSC	STATUS, Z, 0
$0D18	$2A01	    			INCF	STACK_1, F, 0
$0D1A	$5001	    			MOVF	STACK_1, W, 0
$0D1C	$1005	    			IORWF	STACK_5, W, 0
$0D1E	$6E0A	    			MOVWF	STACK_10, 0
$0D20	$BE0A	    			BTFSC	STACK_10, 7, 0
$0D22	$EFA5	F006			GOTO	$+17
$0D26	$EC0E	F002			CALL	_Div_16x16_S_L
$0D2A	$B00B	    			BTFSC	STACK_11, 0, 0
$0D2C	$EFBC	F006			GOTO	$+33
$0D30	$AE0D	    			BTFSS	STACK_13, 7, 0
$0D32	$0C00	    			RETLW	0
$0D34	$1E00	    			COMF	STACK_0, F, 0
$0D36	$1E01	    			COMF	STACK_1, F, 0
$0D38	$2A00	    			INCF	STACK_0, F, 0
$0D3A	$B4D8	    			BTFSC	STATUS, Z, 0
$0D3C	$2A01	    			INCF	STACK_1, F, 0
$0D3E	$1E08	    			COMF	STACK_8, F, 0
$0D40	$1E09	    			COMF	STACK_9, F, 0
$0D42	$2A08	    			INCF	STACK_8, F, 0
$0D44	$B4D8	    			BTFSC	STATUS, Z, 0
$0D46	$2A09	    			INCF	STACK_9, F, 0
$0D48	$0C00	    			RETLW	0
$0D4A	$AE05	    			BTFSS	STACK_5, 7, 0
$0D4C	$EFB7	F006			GOTO	$+14
$0D50	$BE01	    			BTFSC	STACK_1, 7, 0
$0D52	$EFB3	F006			GOTO	$+8
$0D56	$5001	    			MOVF	STACK_1, W, 0
$0D58	$6E09	    			MOVWF	STACK_9, 0
$0D5A	$5000	    			MOVF	STACK_0, W, 0
$0D5C	$6E08	    			MOVWF	STACK_8, 0
$0D5E	$6A01	    			CLRF	STACK_1, 0
$0D60	$6A00	    			CLRF	STACK_0, 0
$0D62	$EF98	F006			GOTO	$-23
$0D66	$6A01	    			CLRF	STACK_1, 0
$0D68	$6A00	    			CLRF	STACK_0, 0
$0D6A	$2A00	    			INCF	STACK_0, F, 0
$0D6C	$0C00	    			RETLW	0
$0D6E	$1E01	    			COMF	STACK_1, F, 0
$0D70	$1E00	    			COMF	STACK_0, F, 0
$0D72	$2A0B	    			INCF	STACK_11, F, 0
$0D74	$EF93	F006			GOTO	$-34
$0D78	$2A08	    			INCF	STACK_8, F, 0
$0D7A	$B4D8	    			BTFSC	STATUS, Z, 0
$0D7C	$2A09	    			INCF	STACK_9, F, 0
$0D7E	$5004	    			MOVF	STACK_4, W, 0
$0D80	$5C08	    			SUBWF	STACK_8, W, 0
$0D82	$A4D8	    			BTFSS	STATUS, Z, 0
$0D84	$EF98	F006			GOTO	$-38
$0D88	$5005	    			MOVF	STACK_5, W, 0
$0D8A	$5C09	    			SUBWF	STACK_9, W, 0
$0D8C	$A4D8	    			BTFSS	STATUS, Z, 0
$0D8E	$EF98	F006			GOTO	$-42
$0D92	$6A09	    			CLRF	STACK_9, 0
$0D94	$6A08	    			CLRF	STACK_8, 0
$0D96	$2A00	    			INCF	STACK_0, F, 0
$0D98	$B4D8	    			BTFSC	STATUS, Z, 0
$0D9A	$2A01	    			INCF	STACK_1, F, 0
$0D9C	$AE01	    			BTFSS	STACK_1, 7, 0
$0D9E	$EF98	F006			GOTO	$-49
$0DA2	$0000	    			NOP
$0DA4	$0CFF	    			RETLW	255
$0DA6	$0012	    			RETURN
$0DA8	$	_NRM4032:
$0DA8	$0100	    			MOVLB	0
$0DAA	$B00C	    			BTFSC	STACK_12, 0, 0
$0DAC	$EF17	F007			GOTO	NRMRND4032
$0DB0	$A20C	    			BTFSS	STACK_12, 1, 0
$0DB2	$EFBF	F007			GOTO	NRM40JPSETFOV32
$0DB6	$	NRM4032:
$0DB6	$6A0E	    			CLRF	STACK_14, 0
$0DB8	$0E00	    			MOVLW	0x00
$0DBA	$6402	    			CPFSGT	STACK_2, 0
$0DBC	$EF2E	F007			GOTO	NRM4032A
$0DC0	$	TNIB4032:
$0DC0	$0EF0	    			MOVLW	0xF0
$0DC2	$1402	    			ANDWF	STACK_2, W, 0
$0DC4	$A4D8	    			BTFSS	STATUS, Z, 0
$0DC6	$EFF9	F006			GOTO	NORM4032
$0DCA	$3A02	    			SWAPF	STACK_2, F, 0
$0DCC	$3801	    			SWAPF	STACK_1, W, 0
$0DCE	$0B0F	    			ANDLW	0x0F
$0DD0	$2602	    			ADDWF	STACK_2, F, 0
$0DD2	$3801	    			SWAPF	STACK_1, W, 0
$0DD4	$0BF0	    			ANDLW	0xF0
$0DD6	$6E01	    			MOVWF	STACK_1, 0
$0DD8	$3800	    			SWAPF	STACK_0, W, 0
$0DDA	$0B0F	    			ANDLW	0x0F
$0DDC	$2601	    			ADDWF	STACK_1, F, 0
$0DDE	$3800	    			SWAPF	STACK_0, W, 0
$0DE0	$0BF0	    			ANDLW	0xF0
$0DE2	$6E00	    			MOVWF	STACK_0, 0
$0DE4	$3808	    			SWAPF	STACK_8, W, 0
$0DE6	$0B0F	    			ANDLW	0x0F
$0DE8	$2600	    			ADDWF	STACK_0, F, 0
$0DEA	$3808	    			SWAPF	STACK_8, W, 0
$0DEC	$0BF0	    			ANDLW	0xF0
$0DEE	$6E08	    			MOVWF	STACK_8, 0
$0DF0	$840E	    			BSF	STACK_14, 2, 0
$0DF2	$	NORM4032:
$0DF2	$90D8	    			BCF	STATUS, C, 0
$0DF4	$BE02	    			BTFSC	STACK_2, 7, 0
$0DF6	$EF12	F007			GOTO	TNORMUN4032
$0DFA	$3608	    			RLCF	STACK_8, F, 0
$0DFC	$3600	    			RLCF	STACK_0, F, 0
$0DFE	$3601	    			RLCF	STACK_1, F, 0
$0E00	$3602	    			RLCF	STACK_2, F, 0
$0E02	$2A0E	    			INCF	STACK_14, F, 0
$0E04	$BE02	    			BTFSC	STACK_2, 7, 0
$0E06	$EF12	F007			GOTO	TNORMUN4032
$0E0A	$3608	    			RLCF	STACK_8, F, 0
$0E0C	$3600	    			RLCF	STACK_0, F, 0
$0E0E	$3601	    			RLCF	STACK_1, F, 0
$0E10	$3602	    			RLCF	STACK_2, F, 0
$0E12	$2A0E	    			INCF	STACK_14, F, 0
$0E14	$BE02	    			BTFSC	STACK_2, 7, 0
$0E16	$EF12	F007			GOTO	TNORMUN4032
$0E1A	$3608	    			RLCF	STACK_8, F, 0
$0E1C	$3600	    			RLCF	STACK_0, F, 0
$0E1E	$3601	    			RLCF	STACK_1, F, 0
$0E20	$3602	    			RLCF	STACK_2, F, 0
$0E22	$2A0E	    			INCF	STACK_14, F, 0
$0E24	$	TNORMUN4032:
$0E24	$500E	    			MOVF	STACK_14, W, 0
$0E26	$6403	    			CPFSGT	STACK_3, 0
$0E28	$EFB3	F007			GOTO	NRM40JPSETFUN32
$0E2C	$5E03	    			SUBWF	STACK_3, F, 0
$0E2E	$	NRMRND4032:
$0E2E	$BC0B	    			BTFSC	STACK_11, 6, 0
$0E30	$AE08	    			BTFSS	STACK_8, 7, 0
$0E32	$EFB9	F007			GOTO	NRM40JPFIXSIGN32
$0E36	$80D8	    			BSF	STATUS, C, 0
$0E38	$0E80	    			MOVLW	0x80
$0E3A	$6408	    			CPFSGT	STACK_8, 0
$0E3C	$3000	    			RRCF	STACK_0, W, 0
$0E3E	$0E00	    			MOVLW	0x00
$0E40	$2200	    			ADDWFC	STACK_0, F, 0
$0E42	$2201	    			ADDWFC	STACK_1, F, 0
$0E44	$2202	    			ADDWFC	STACK_2, F, 0
$0E46	$A0D8	    			BTFSS	STATUS, C, 0
$0E48	$EFB9	F007			GOTO	NRM40JPFIXSIGN32
$0E4C	$3202	    			RRCF	STACK_2, F, 0
$0E4E	$3201	    			RRCF	STACK_1, F, 0
$0E50	$3200	    			RRCF	STACK_0, F, 0
$0E52	$4A03	    			INFSNZ	STACK_3, F, 0
$0E54	$EFBF	F007			GOTO	NRM40JPSETFOV32
$0E58	$EFB9	F007			GOTO	NRM40JPFIXSIGN32
$0E5C	$	NRM4032A:
$0E5C	$C001	F002			MOVFF	STACK_1, STACK_2
$0E60	$C000	F001			MOVFF	STACK_0, STACK_1
$0E64	$C008	F000			MOVFF	STACK_8, STACK_0
$0E68	$6A08	    			CLRF	STACK_8, 0
$0E6A	$0E00	    			MOVLW	0x00
$0E6C	$860E	    			BSF	STACK_14, 3, 0
$0E6E	$6402	    			CPFSGT	STACK_2, 0
$0E70	$EF65	F007			GOTO	NRM4032B
$0E74	$	TNIB4032A:
$0E74	$0EF0	    			MOVLW	0xF0
$0E76	$1402	    			ANDWF	STACK_2, W, 0
$0E78	$A4D8	    			BTFSS	STATUS, Z, 0
$0E7A	$EF4D	F007			GOTO	NORM4032A
$0E7E	$3A02	    			SWAPF	STACK_2, F, 0
$0E80	$3801	    			SWAPF	STACK_1, W, 0
$0E82	$0B0F	    			ANDLW	0x0F
$0E84	$2602	    			ADDWF	STACK_2, F, 0
$0E86	$3801	    			SWAPF	STACK_1, W, 0
$0E88	$0BF0	    			ANDLW	0xF0
$0E8A	$6E01	    			MOVWF	STACK_1, 0
$0E8C	$3800	    			SWAPF	STACK_0, W, 0
$0E8E	$0B0F	    			ANDLW	0x0F
$0E90	$2601	    			ADDWF	STACK_1, F, 0
$0E92	$3800	    			SWAPF	STACK_0, W, 0
$0E94	$0BF0	    			ANDLW	0xF0
$0E96	$6E00	    			MOVWF	STACK_0, 0
$0E98	$840E	    			BSF	STACK_14, 2, 0
$0E9A	$	NORM4032A:
$0E9A	$90D8	    			BCF	STATUS, C, 0
$0E9C	$BE02	    			BTFSC	STACK_2, 7, 0
$0E9E	$EF12	F007			GOTO	TNORMUN4032
$0EA2	$3600	    			RLCF	STACK_0, F, 0
$0EA4	$3601	    			RLCF	STACK_1, F, 0
$0EA6	$3602	    			RLCF	STACK_2, F, 0
$0EA8	$2A0E	    			INCF	STACK_14, F, 0
$0EAA	$BE02	    			BTFSC	STACK_2, 7, 0
$0EAC	$EF12	F007			GOTO	TNORMUN4032
$0EB0	$3600	    			RLCF	STACK_0, F, 0
$0EB2	$3601	    			RLCF	STACK_1, F, 0
$0EB4	$3602	    			RLCF	STACK_2, F, 0
$0EB6	$2A0E	    			INCF	STACK_14, F, 0
$0EB8	$BE02	    			BTFSC	STACK_2, 7, 0
$0EBA	$EF12	F007			GOTO	TNORMUN4032
$0EBE	$3600	    			RLCF	STACK_0, F, 0
$0EC0	$3601	    			RLCF	STACK_1, F, 0
$0EC2	$3602	    			RLCF	STACK_2, F, 0
$0EC4	$2A0E	    			INCF	STACK_14, F, 0
$0EC6	$EF12	F007			GOTO	TNORMUN4032
$0ECA	$	NRM4032B:
$0ECA	$C001	F002			MOVFF	STACK_1, STACK_2
$0ECE	$C000	F001			MOVFF	STACK_0, STACK_1
$0ED2	$6A00	    			CLRF	STACK_0, 0
$0ED4	$0E00	    			MOVLW	0x00
$0ED6	$960E	    			BCF	STACK_14, 3, 0
$0ED8	$880E	    			BSF	STACK_14, 4, 0
$0EDA	$6402	    			CPFSGT	STACK_2, 0
$0EDC	$EF92	F007			GOTO	NRM4032C
$0EE0	$	TNIB4032B:
$0EE0	$0EF0	    			MOVLW	0xF0
$0EE2	$1402	    			ANDWF	STACK_2, W, 0
$0EE4	$A4D8	    			BTFSS	STATUS, Z, 0
$0EE6	$EF7D	F007			GOTO	NORM4032B
$0EEA	$3A02	    			SWAPF	STACK_2, F, 0
$0EEC	$3801	    			SWAPF	STACK_1, W, 0
$0EEE	$0B0F	    			ANDLW	0x0F
$0EF0	$2602	    			ADDWF	STACK_2, F, 0
$0EF2	$3801	    			SWAPF	STACK_1, W, 0
$0EF4	$0BF0	    			ANDLW	0xF0
$0EF6	$6E01	    			MOVWF	STACK_1, 0
$0EF8	$840E	    			BSF	STACK_14, 2, 0
$0EFA	$	NORM4032B:
$0EFA	$90D8	    			BCF	STATUS, C, 0
$0EFC	$BE02	    			BTFSC	STACK_2, 7, 0
$0EFE	$EF12	F007			GOTO	TNORMUN4032
$0F02	$3601	    			RLCF	STACK_1, F, 0
$0F04	$3602	    			RLCF	STACK_2, F, 0
$0F06	$2A0E	    			INCF	STACK_14, F, 0
$0F08	$BE02	    			BTFSC	STACK_2, 7, 0
$0F0A	$EF12	F007			GOTO	TNORMUN4032
$0F0E	$3601	    			RLCF	STACK_1, F, 0
$0F10	$3602	    			RLCF	STACK_2, F, 0
$0F12	$2A0E	    			INCF	STACK_14, F, 0
$0F14	$BE02	    			BTFSC	STACK_2, 7, 0
$0F16	$EF12	F007			GOTO	TNORMUN4032
$0F1A	$3601	    			RLCF	STACK_1, F, 0
$0F1C	$3602	    			RLCF	STACK_2, F, 0
$0F1E	$2A0E	    			INCF	STACK_14, F, 0
$0F20	$EF12	F007			GOTO	TNORMUN4032
$0F24	$	NRM4032C:
$0F24	$C001	F002			MOVFF	STACK_1, STACK_2
$0F28	$6A01	    			CLRF	STACK_1, 0
$0F2A	$0E00	    			MOVLW	0x00
$0F2C	$860E	    			BSF	STACK_14, 3, 0
$0F2E	$6402	    			CPFSGT	STACK_2, 0
$0F30	$EFC5	F007			GOTO	NRM40JPRES032
$0F34	$	TNIB4032C:
$0F34	$0EF0	    			MOVLW	0xF0
$0F36	$1402	    			ANDWF	STACK_2, W, 0
$0F38	$A4D8	    			BTFSS	STATUS, Z, 0
$0F3A	$EFA1	F007			GOTO	NORM4032C
$0F3E	$3A02	    			SWAPF	STACK_2, F, 0
$0F40	$840E	    			BSF	STACK_14, 2, 0
$0F42	$	NORM4032C:
$0F42	$90D8	    			BCF	STATUS, C, 0
$0F44	$BE02	    			BTFSC	STACK_2, 7, 0
$0F46	$EF12	F007			GOTO	TNORMUN4032
$0F4A	$3602	    			RLCF	STACK_2, F, 0
$0F4C	$2A0E	    			INCF	STACK_14, F, 0
$0F4E	$BE02	    			BTFSC	STACK_2, 7, 0
$0F50	$EF12	F007			GOTO	TNORMUN4032
$0F54	$3602	    			RLCF	STACK_2, F, 0
$0F56	$2A0E	    			INCF	STACK_14, F, 0
$0F58	$BE02	    			BTFSC	STACK_2, 7, 0
$0F5A	$EF12	F007			GOTO	TNORMUN4032
$0F5E	$3602	    			RLCF	STACK_2, F, 0
$0F60	$2A0E	    			INCF	STACK_14, F, 0
$0F62	$EF12	F007			GOTO	TNORMUN4032
$0F66	$	NRM40JPSETFUN32:
$0F66	$0E01	    			MOVLW	0x01
$0F68	$6E0C	    			MOVWF	STACK_12, 0
$0F6A	$EC3F	F002			CALL	_SETFUN32
$0F6E	$EFC9	F007			GOTO	NRM40EEE
$0F72	$	NRM40JPFIXSIGN32:
$0F72	$0E02	    			MOVLW	0x02
$0F74	$6E0C	    			MOVWF	STACK_12, 0
$0F76	$EC4D	F002			CALL	_FIXSIGN32
$0F7A	$EFC9	F007			GOTO	NRM40EEE
$0F7E	$	NRM40JPSETFOV32:
$0F7E	$0E04	    			MOVLW	0x04
$0F80	$6E0C	    			MOVWF	STACK_12, 0
$0F82	$EC52	F002			CALL	_SETFOV32
$0F86	$EFC9	F007			GOTO	NRM40EEE
$0F8A	$	NRM40JPRES032:
$0F8A	$0E08	    			MOVLW	0x08
$0F8C	$6E0C	    			MOVWF	STACK_12, 0
$0F8E	$EC5F	F002			CALL	_RES032
$0F92	$	NRM40EEE:
$0F92	$0012	    			RETURN
$0F94	$	_Ethernet_readReg2:
$0F94	$C8EB	FFE9			MOVFF	FARG_Ethernet_readReg2+0, FSR0L
$0F98	$C8EC	FFEA			MOVFF	FARG_Ethernet_readReg2+1, FSR0H
$0F9C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$0FA0	$0012	    			RETURN
$0FA2	$	_Ethernet_writeMem:
$0FA2	$0EE2	    			MOVLW	EWRPT
$0FA4	$0108	    			MOVLB	8
$0FA6	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$0FA8	$0E0E	    			MOVLW	@EWRPT
$0FAA	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$0FAC	$C8EB	F8FA			MOVFF	FARG_Ethernet_writeMem+0, FARG_Ethernet_writeAddr2+2
$0FB0	$C8EC	F8FB			MOVFF	FARG_Ethernet_writeMem+1, FARG_Ethernet_writeAddr2+3
$0FB4	$EC67	F002			CALL	_Ethernet_writeAddr2
$0FB8	$C8ED	FF61			MOVFF	FARG_Ethernet_writeMem+2, EDATA
$0FBC	$0012	    			RETURN
$0FBE	$	_Ethernet_putByte:
$0FBE	$C8EB	FF61			MOVFF	FARG_Ethernet_putByte+0, EDATA
$0FC2	$0012	    			RETURN
$0FC4	$	_Ethernet_readMem:
$0FC4	$0E7A	    			MOVLW	ERDPT
$0FC6	$0108	    			MOVLB	8
$0FC8	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$0FCA	$0E0F	    			MOVLW	@ERDPT
$0FCC	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$0FCE	$C8EB	F8FA			MOVFF	FARG_Ethernet_readMem+0, FARG_Ethernet_writeAddr2+2
$0FD2	$C8EC	F8FB			MOVFF	FARG_Ethernet_readMem+1, FARG_Ethernet_writeAddr2+3
$0FD6	$EC67	F002			CALL	_Ethernet_writeAddr2
$0FDA	$CF61	F000			MOVFF	EDATA, STACK_0
$0FDE	$0012	    			RETURN
$0FE0	$	_I2C_Start:
$0FE0	$0108	    			MOVLB	8
$0FE2	$6BEB	    			CLRF	I2C_Start_j_L0, 1
$0FE4	$6BEC	    			CLRF	I2C_Start_j_L0+1, 1
$0FE6	$	L_I2C_Start_2:
$0FE6	$0108	    			MOVLB	8
$0FE8	$51EC	    			MOVF	I2C_Start_j_L0+1, 0, 1
$0FEA	$0812	    			SUBLW	18
$0FEC	$E102	    			BNZ	L_I2C_Start_69
$0FEE	$51EB	    			MOVF	I2C_Start_j_L0, 0, 1
$0FF0	$088E	    			SUBLW	142
$0FF2	$	L_I2C_Start_69:
$0FF2	$E308	    			BNC	L_I2C_Start_3
$0FF4	$EC70	F002			CALL	_I2C_Is_Idle
$0FF8	$5200	    			MOVF	STACK_0, 1, 0
$0FFA	$E104	    			BNZ	L_I2C_Start_3
$0FFC	$	L_I2C_Start_5:
$0FFC	$	L_I2C_Start_4:
$0FFC	$0108	    			MOVLB	8
$0FFE	$4BEB	    			INFSNZ	I2C_Start_j_L0, 1, 1
$1000	$2BEC	    			INCF	I2C_Start_j_L0+1, 1, 1
$1002	$D7F1	    			BRA	L_I2C_Start_2
$1004	$	L_I2C_Start_3:
$1004	$0E12	    			MOVLW	18
$1006	$0108	    			MOVLB	8
$1008	$5DEC	    			SUBWF	I2C_Start_j_L0+1, 0, 1
$100A	$E102	    			BNZ	L_I2C_Start_70
$100C	$0E8F	    			MOVLW	143
$100E	$5DEB	    			SUBWF	I2C_Start_j_L0, 0, 1
$1010	$	L_I2C_Start_70:
$1010	$E303	    			BNC	L_I2C_Start_6
$1012	$0E7B	    			MOVLW	123
$1014	$6E00	    			MOVWF	STACK_0, 0
$1016	$0012	    			RETURN
$1018	$	L_I2C_Start_6:
$1018	$0108	    			MOVLB	8
$101A	$80C5	    			BSF	SSP1CON2, 0, 0
$101C	$	L_I2C_Start_8:
$101C	$0108	    			MOVLB	8
$101E	$A0C5	    			BTFSS	SSP1CON2, 0, 0
$1020	$D002	    			BRA	L_I2C_Start_9
$1022	$0000	    			NOP
$1024	$D7FB	    			BRA	L_I2C_Start_8
$1026	$	L_I2C_Start_9:
$1026	$6A00	    			CLRF	STACK_0, 0
$1028	$0012	    			RETURN
$102A	$	_I2C_Wr:
$102A	$C8EB	FFC9			MOVFF	FARG_I2C_Wr+0, SSP1BUF
$102E	$969E	    			BCF	PIR1, 3, 0
$1030	$	L_I2C_Wr_17:
$1030	$B4C7	    			BTFSC	SSP1STAT, 2, 0
$1032	$D7FE	    			BRA	L_I2C_Wr_17
$1034	$	L_I2C_Wr_18:
$1034	$	L_I2C_Wr_19:
$1034	$A69E	    			BTFSS	PIR1, 3, 0
$1036	$D7FE	    			BRA	L_I2C_Wr_19
$1038	$	L_I2C_Wr_20:
$1038	$6A01	    			CLRF	STACK_1, 0
$103A	$BCC5	    			BTFSC	SSP1CON2, 6, 0
$103C	$2A01	    			INCF	STACK_1, 1, 0
$103E	$5001	    			MOVF	STACK_1, 0, 0
$1040	$0A00	    			XORLW	0
$1042	$E102	    			BNZ	L_I2C_Wr_21
$1044	$6A00	    			CLRF	STACK_0, 0
$1046	$0012	    			RETURN
$1048	$	L_I2C_Wr_21:
$1048	$84C5	    			BSF	SSP1CON2, 2, 0
$104A	$0E02	    			MOVLW	2
$104C	$6E00	    			MOVWF	STACK_0, 0
$104E	$0012	    			RETURN
$1050	$	_I2C_Repeated_Start:
$1050	$82C5	    			BSF	SSP1CON2, 1, 0
$1052	$	L_I2C_Repeated_Start_10:
$1052	$A2C5	    			BTFSS	SSP1CON2, 1, 0
$1054	$D002	    			BRA	L_I2C_Repeated_Start_11
$1056	$0000	    			NOP
$1058	$D7FC	    			BRA	L_I2C_Repeated_Start_10
$105A	$	L_I2C_Repeated_Start_11:
$105A	$0012	    			RETURN
$105C	$	_I2C_Rd:
$105C	$86C5	    			BSF	SSP1CON2, 3, 0
$105E	$969E	    			BCF	PIR1, 3, 0
$1060	$	L_I2C_Rd_12:
$1060	$A69E	    			BTFSS	PIR1, 3, 0
$1062	$D7FE	    			BRA	L_I2C_Rd_12
$1064	$	L_I2C_Rd_13:
$1064	$CFC9	F8EC			MOVFF	SSP1BUF, I2C_Rd_tmp_L0
$1068	$9AC5	    			BCF	SSP1CON2, 5, 0
$106A	$0108	    			MOVLB	8
$106C	$51EB	    			MOVF	FARG_I2C_Rd+0, 0, 1
$106E	$0A00	    			XORLW	0
$1070	$B4D8	    			BTFSC	STATUS, Z, 0
$1072	$8AC5	    			BSF	SSP1CON2, 5, 0
$1074	$	L_I2C_Rd_14:
$1074	$88C5	    			BSF	SSP1CON2, 4, 0
$1076	$969E	    			BCF	PIR1, 3, 0
$1078	$	L_I2C_Rd_15:
$1078	$0108	    			MOVLB	8
$107A	$A69E	    			BTFSS	PIR1, 3, 0
$107C	$D7FD	    			BRA	L_I2C_Rd_15
$107E	$	L_I2C_Rd_16:
$107E	$C8EC	F000			MOVFF	I2C_Rd_tmp_L0, STACK_0
$1082	$0012	    			RETURN
$1084	$	_I2C_Stop:
$1084	$84C5	    			BSF	SSP1CON2, 2, 0
$1086	$0012	    			RETURN
$1088	$	_I2C_Init:
$1088	$9CC7	    			BCF	SSP1STAT, 6, 0
$108A	$9EC7	    			BCF	SSP1STAT, 7, 0
$108C	$8894	    			BSF	TRISC, 4, 0
$108E	$8694	    			BSF	TRISC, 3, 0
$1090	$0E38	    			MOVLW	56
$1092	$6EC6	    			MOVWF	SSP1CON1, 0
$1094	$0012	    			RETURN
$1096	$	_Cf_Init:
$1096	$C8EB	F022			MOVFF	FARG_Cf_Init+0, compact_C_F_ctrl_address
$109A	$C8EC	F023			MOVFF	FARG_Cf_Init+1, compact_C_F_ctrl_address+1
$109E	$C8ED	F024			MOVFF	FARG_Cf_Init+2, compact_C_F_cf_data_address
$10A2	$C8EE	F025			MOVFF	FARG_Cf_Init+3, compact_C_F_cf_data_address+1
$10A6	$C022	FFE1			MOVFF	compact_C_F_ctrl_address, FSR1L
$10AA	$C8EC	FFE2			MOVFF	FARG_Cf_Init+1, FSR1H
$10AE	$0E60	    			MOVLW	96
$10B0	$6EE7	    			MOVWF	INDF1, 0
$10B2	$0E12	    			MOVLW	18
$10B4	$2422	    			ADDWF	compact_C_F_ctrl_address, 0, 0
$10B6	$6EE1	    			MOVWF	FSR1L, 0
$10B8	$6AE7	    			CLRF	INDF1, 0
$10BA	$88E7	    			BSF	INDF1, 4, 0
$10BC	$8EE7	    			BSF	INDF1, 7, 0
$10BE	$C024	FFE1			MOVFF	compact_C_F_cf_data_address, FSR1L
$10C2	$C8EE	FFE2			MOVFF	FARG_Cf_Init+3, FSR1H
$10C6	$6AE7	    			CLRF	INDF1, 0
$10C8	$0E12	    			MOVLW	18
$10CA	$2424	    			ADDWF	compact_C_F_cf_data_address, 0, 0
$10CC	$6EE1	    			MOVWF	FSR1L, 0
$10CE	$6AE7	    			CLRF	INDF1, 0
$10D0	$0012	    			RETURN
$10D2	$	_Cf_Detect:
$10D2	$C022	FFE1			MOVFF	compact_C_F_ctrl_address, FSR1L
$10D6	$C023	FFE2			MOVFF	compact_C_F_ctrl_address+1, FSR1H
$10DA	$6A01	    			CLRF	STACK_1, 0
$10DC	$B8E7	    			BTFSC	INDF1, 4, 0
$10DE	$2A01	    			INCF	STACK_1, 1, 0
$10E0	$5001	    			MOVF	STACK_1, 0, 0
$10E2	$0A00	    			XORLW	0
$10E4	$E103	    			BNZ	L_Cf_Detect_0
$10E6	$0EFF	    			MOVLW	255
$10E8	$6E00	    			MOVWF	STACK_0, 0
$10EA	$0012	    			RETURN
$10EC	$	L_Cf_Detect_0:
$10EC	$6A00	    			CLRF	STACK_0, 0
$10EE	$0012	    			RETURN
$10F0	$	cf_fat16_Init_Vars:
$10F0	$0102	    			MOVLB	2
$10F2	$6B41	    			CLRF	cf_fat16_ROOT_START_SECTOR, 1
$10F4	$6B42	    			CLRF	cf_fat16_ROOT_START_SECTOR+1, 1
$10F6	$6B43	    			CLRF	cf_fat16_ROOT_START_SECTOR+2, 1
$10F8	$6B44	    			CLRF	cf_fat16_ROOT_START_SECTOR+3, 1
$10FA	$6B45	    			CLRF	cf_fat16_root_sector_pnt, 1
$10FC	$6B46	    			CLRF	cf_fat16_root_sector_pnt+1, 1
$10FE	$6B47	    			CLRF	cf_fat16_root_offset, 1
$1100	$6B48	    			CLRF	cf_fat16_root_offset+1, 1
$1102	$6B49	    			CLRF	cf_fat16_file_offset, 1
$1104	$6B4A	    			CLRF	cf_fat16_file_offset+1, 1
$1106	$6B4B	    			CLRF	cf_fat16_file_offset+2, 1
$1108	$6B4C	    			CLRF	cf_fat16_file_offset+3, 1
$110A	$6B34	    			CLRF	cf_fat16_file_write_cluster, 1
$110C	$6B35	    			CLRF	cf_fat16_file_write_cluster+1, 1
$110E	$6B38	    			CLRF	cf_fat16_file_write_sector, 1
$1110	$6B39	    			CLRF	cf_fat16_file_write_sector+1, 1
$1112	$6B3A	    			CLRF	cf_fat16_file_write_sector+2, 1
$1114	$6B3B	    			CLRF	cf_fat16_file_write_sector+3, 1
$1116	$6B4D	    			CLRF	cf_fat16_file_size_bytes, 1
$1118	$6B4E	    			CLRF	cf_fat16_file_size_bytes+1, 1
$111A	$6B4F	    			CLRF	cf_fat16_file_size_bytes+2, 1
$111C	$6B50	    			CLRF	cf_fat16_file_size_bytes+3, 1
$111E	$6A2A	    			CLRF	cf_fat16_FAT_START_SECTOR, 0
$1120	$6A2B	    			CLRF	cf_fat16_FAT_START_SECTOR+1, 0
$1122	$6A2C	    			CLRF	cf_fat16_FAT_START_SECTOR+2, 0
$1124	$6A2D	    			CLRF	cf_fat16_FAT_START_SECTOR+3, 0
$1126	$6B30	    			CLRF	cf_fat16_FAT2_START_SECTOR, 1
$1128	$6B31	    			CLRF	cf_fat16_FAT2_START_SECTOR+1, 1
$112A	$6B32	    			CLRF	cf_fat16_FAT2_START_SECTOR+2, 1
$112C	$6B33	    			CLRF	cf_fat16_FAT2_START_SECTOR+3, 1
$112E	$6A26	    			CLRF	cf_fat16_fat_sector_pnt, 0
$1130	$6A27	    			CLRF	cf_fat16_fat_sector_pnt+1, 0
$1132	$6B51	    			CLRF	cf_fat16_fat_sector_pnt_prev, 1
$1134	$6B52	    			CLRF	cf_fat16_fat_sector_pnt_prev+1, 1
$1136	$6A28	    			CLRF	cf_fat16_fat_offset, 0
$1138	$6A29	    			CLRF	cf_fat16_fat_offset+1, 0
$113A	$6B53	    			CLRF	cf_fat16_fat_offset_prev, 1
$113C	$6B54	    			CLRF	cf_fat16_fat_offset_prev+1, 1
$113E	$6B2E	    			CLRF	cf_fat16_BYTES_PER_SECTOR, 1
$1140	$6B2F	    			CLRF	cf_fat16_BYTES_PER_SECTOR+1, 1
$1142	$6B36	    			CLRF	cf_fat16_CLUSTERS_PER_FAT_SECTOR, 1
$1144	$6B37	    			CLRF	cf_fat16_CLUSTERS_PER_FAT_SECTOR+1, 1
$1146	$6B55	    			CLRF	cf_fat16_RESERVED_SECTORS, 1
$1148	$6B56	    			CLRF	cf_fat16_RESERVED_SECTORS+1, 1
$114A	$6B57	    			CLRF	cf_fat16_SECTORS_PER_FAT, 1
$114C	$6B58	    			CLRF	cf_fat16_SECTORS_PER_FAT+1, 1
$114E	$6B59	    			CLRF	cf_fat16_ROOT_ENTRIES, 1
$1150	$6B5A	    			CLRF	cf_fat16_ROOT_ENTRIES+1, 1
$1152	$6B3D	    			CLRF	cf_fat16_DATA_START_SECTOR, 1
$1154	$6B3E	    			CLRF	cf_fat16_DATA_START_SECTOR+1, 1
$1156	$6B3F	    			CLRF	cf_fat16_DATA_START_SECTOR+2, 1
$1158	$6B40	    			CLRF	cf_fat16_DATA_START_SECTOR+3, 1
$115A	$6B3C	    			CLRF	cf_fat16_SECTORS_PER_CLUSTER, 1
$115C	$6B5B	    			CLRF	cf_fat16_sectors_in_cur_cluster, 1
$115E	$6B5C	    			CLRF	cf_fat16_NUMBER_OF_FATS, 1
$1160	$6B5D	    			CLRF	cf_fat16_tmp, 1
$1162	$6B5E	    			CLRF	cf_fat16_BOOT_SECTOR, 1
$1164	$6B5F	    			CLRF	cf_fat16_BOOT_SECTOR+1, 1
$1166	$6B60	    			CLRF	cf_fat16_BOOT_SECTOR+2, 1
$1168	$6B61	    			CLRF	cf_fat16_BOOT_SECTOR+3, 1
$116A	$6B62	    			CLRF	cf_fat16_date, 1
$116C	$6B63	    			CLRF	cf_fat16_date+1, 1
$116E	$6B64	    			CLRF	cf_fat16_time, 1
$1170	$6B65	    			CLRF	cf_fat16_time+1, 1
$1172	$0012	    			RETURN
$1174	$	_Div_32x32_S:
$1174	$0100	    			MOVLB	0
$1176	$	FXD3232S:
$1176	$6A0C	    			CLRF	STACK_12, 0
$1178	$BE07	    			BTFSC	STACK_7, 7, 0
$117A	$2A0C	    			INCF	STACK_12, F, 0
$117C	$6A0D	    			CLRF	STACK_13, 0
$117E	$6A0B	    			CLRF	STACK_11, 0
$1180	$6A0A	    			CLRF	STACK_10, 0
$1182	$6A09	    			CLRF	STACK_9, 0
$1184	$6A08	    			CLRF	STACK_8, 0
$1186	$5003	    			MOVF	STACK_3, W, 0
$1188	$1002	    			IORWF	STACK_2, W, 0
$118A	$1001	    			IORWF	STACK_1, W, 0
$118C	$1000	    			IORWF	STACK_0, W, 0
$118E	$B4D8	    			BTFSC	STATUS, Z, 0
$1190	$EF5E	F009			GOTO	END_ALL
$1194	$5003	    			MOVF	STACK_3, W, 0
$1196	$1807	    			XORWF	STACK_7, W, 0
$1198	$6E0E	    			MOVWF	STACK_14, 0
$119A	$BE0E	    			BTFSC	STACK_14, 7, 0
$119C	$1E0D	    			COMF	STACK_13, F, 0
$119E	$AE07	    			BTFSS	STACK_7, 7, 0
$11A0	$EFDD	F008			GOTO	CA3232S
$11A4	$1E04	    			COMF	STACK_4, F, 0
$11A6	$1E05	    			COMF	STACK_5, F, 0
$11A8	$1E06	    			COMF	STACK_6, F, 0
$11AA	$1E07	    			COMF	STACK_7, F, 0
$11AC	$2A04	    			INCF	STACK_4, F, 0
$11AE	$B4D8	    			BTFSC	STATUS, Z, 0
$11B0	$2A05	    			INCF	STACK_5, F, 0
$11B2	$B4D8	    			BTFSC	STATUS, Z, 0
$11B4	$2A06	    			INCF	STACK_6, F, 0
$11B6	$B4D8	    			BTFSC	STATUS, Z, 0
$11B8	$2A07	    			INCF	STACK_7, F, 0
$11BA	$	CA3232S:
$11BA	$AE03	    			BTFSS	STACK_3, 7, 0
$11BC	$EFEB	F008			GOTO	C3232SX
$11C0	$1E00	    			COMF	STACK_0, F, 0
$11C2	$1E01	    			COMF	STACK_1, F, 0
$11C4	$1E02	    			COMF	STACK_2, F, 0
$11C6	$1E03	    			COMF	STACK_3, F, 0
$11C8	$2A00	    			INCF	STACK_0, F, 0
$11CA	$B4D8	    			BTFSC	STATUS, Z, 0
$11CC	$2A01	    			INCF	STACK_1, F, 0
$11CE	$B4D8	    			BTFSC	STATUS, Z, 0
$11D0	$2A02	    			INCF	STACK_2, F, 0
$11D2	$B4D8	    			BTFSC	STATUS, Z, 0
$11D4	$2A03	    			INCF	STACK_3, F, 0
$11D6	$	C3232SX:
$11D6	$5003	    			MOVF	STACK_3, W, 0
$11D8	$1007	    			IORWF	STACK_7, W, 0
$11DA	$6E0E	    			MOVWF	STACK_14, 0
$11DC	$BE0E	    			BTFSC	STACK_14, 7, 0
$11DE	$EF11	F009			GOTO	C3232SX1
$11E2	$	C3232S:
$11E2	$EC81	F002			CALL	_SDIV3232L
$11E6	$	C3232S2:
$11E6	$BE0C	    			BTFSC	STACK_12, 7, 0
$11E8	$EF32	F009			GOTO	C3232SX4
$11EC	$	C3232SOK:
$11EC	$AE0D	    			BTFSS	STACK_13, 7, 0
$11EE	$EF5E	F009			GOTO	END_ALL
$11F2	$1E00	    			COMF	STACK_0, F, 0
$11F4	$1E01	    			COMF	STACK_1, F, 0
$11F6	$1E02	    			COMF	STACK_2, F, 0
$11F8	$1E03	    			COMF	STACK_3, F, 0
$11FA	$2A00	    			INCF	STACK_0, F, 0
$11FC	$B4D8	    			BTFSC	STATUS, Z, 0
$11FE	$2A01	    			INCF	STACK_1, F, 0
$1200	$B4D8	    			BTFSC	STATUS, Z, 0
$1202	$2A02	    			INCF	STACK_2, F, 0
$1204	$B4D8	    			BTFSC	STATUS, Z, 0
$1206	$2A03	    			INCF	STACK_3, F, 0
$1208	$1E08	    			COMF	STACK_8, F, 0
$120A	$1E09	    			COMF	STACK_9, F, 0
$120C	$1E0A	    			COMF	STACK_10, F, 0
$120E	$1E0B	    			COMF	STACK_11, F, 0
$1210	$2A08	    			INCF	STACK_8, F, 0
$1212	$B4D8	    			BTFSC	STATUS, Z, 0
$1214	$2A09	    			INCF	STACK_9, F, 0
$1216	$B4D8	    			BTFSC	STATUS, Z, 0
$1218	$2A0A	    			INCF	STACK_10, F, 0
$121A	$B4D8	    			BTFSC	STATUS, Z, 0
$121C	$2A0B	    			INCF	STACK_11, F, 0
$121E	$EF5E	F009			GOTO	END_ALL
$1222	$	C3232SX1:
$1222	$AE07	    			BTFSS	STACK_7, 7, 0
$1224	$EF2B	F009			GOTO	C3232SX3
$1228	$BE03	    			BTFSC	STACK_3, 7, 0
$122A	$EF25	F009			GOTO	C3232SX2
$122E	$5003	    			MOVF	STACK_3, W, 0
$1230	$6E0B	    			MOVWF	STACK_11, 0
$1232	$5002	    			MOVF	STACK_2, W, 0
$1234	$6E0A	    			MOVWF	STACK_10, 0
$1236	$5001	    			MOVF	STACK_1, W, 0
$1238	$6E09	    			MOVWF	STACK_9, 0
$123A	$5000	    			MOVF	STACK_0, W, 0
$123C	$6E08	    			MOVWF	STACK_8, 0
$123E	$6A03	    			CLRF	STACK_3, 0
$1240	$6A02	    			CLRF	STACK_2, 0
$1242	$6A01	    			CLRF	STACK_1, 0
$1244	$6A00	    			CLRF	STACK_0, 0
$1246	$EFF6	F008			GOTO	C3232SOK
$124A	$	C3232SX2:
$124A	$6A03	    			CLRF	STACK_3, 0
$124C	$6A02	    			CLRF	STACK_2, 0
$124E	$6A01	    			CLRF	STACK_1, 0
$1250	$6A00	    			CLRF	STACK_0, 0
$1252	$2A00	    			INCF	STACK_0, F, 0
$1254	$0C00	    			RETLW	0x00
$1256	$	C3232SX3:
$1256	$1E03	    			COMF	STACK_3, F, 0
$1258	$1E02	    			COMF	STACK_2, F, 0
$125A	$1E01	    			COMF	STACK_1, F, 0
$125C	$1E00	    			COMF	STACK_0, F, 0
$125E	$8E0C	    			BSF	STACK_12, 7, 0
$1260	$EFF1	F008			GOTO	C3232S
$1264	$	C3232SX4:
$1264	$2A08	    			INCF	STACK_8, F, 0
$1266	$B4D8	    			BTFSC	STATUS, Z, 0
$1268	$2A09	    			INCF	STACK_9, F, 0
$126A	$B4D8	    			BTFSC	STATUS, Z, 0
$126C	$2A0A	    			INCF	STACK_10, F, 0
$126E	$B4D8	    			BTFSC	STATUS, Z, 0
$1270	$2A0B	    			INCF	STACK_11, F, 0
$1272	$5004	    			MOVF	STACK_4, W, 0
$1274	$5C08	    			SUBWF	STACK_8, W, 0
$1276	$A4D8	    			BTFSS	STATUS, Z, 0
$1278	$EFF6	F008			GOTO	C3232SOK
$127C	$5005	    			MOVF	STACK_5, W, 0
$127E	$5C09	    			SUBWF	STACK_9, W, 0
$1280	$A4D8	    			BTFSS	STATUS, Z, 0
$1282	$EFF6	F008			GOTO	C3232SOK
$1286	$5006	    			MOVF	STACK_6, W, 0
$1288	$5C0A	    			SUBWF	STACK_10, W, 0
$128A	$A4D8	    			BTFSS	STATUS, Z, 0
$128C	$EFF6	F008			GOTO	C3232SOK
$1290	$5007	    			MOVF	STACK_7, W, 0
$1292	$5C0B	    			SUBWF	STACK_11, W, 0
$1294	$A4D8	    			BTFSS	STATUS, Z, 0
$1296	$EFF6	F008			GOTO	C3232SOK
$129A	$6A0B	    			CLRF	STACK_11, 0
$129C	$6A0A	    			CLRF	STACK_10, 0
$129E	$6A09	    			CLRF	STACK_9, 0
$12A0	$6A08	    			CLRF	STACK_8, 0
$12A2	$2A00	    			INCF	STACK_0, F, 0
$12A4	$B4D8	    			BTFSC	STATUS, Z, 0
$12A6	$2A01	    			INCF	STACK_1, F, 0
$12A8	$B4D8	    			BTFSC	STATUS, Z, 0
$12AA	$2A02	    			INCF	STACK_2, F, 0
$12AC	$B4D8	    			BTFSC	STATUS, Z, 0
$12AE	$2A03	    			INCF	STACK_3, F, 0
$12B0	$AE03	    			BTFSS	STACK_3, 7, 0
$12B2	$EFF6	F008			GOTO	C3232SOK
$12B6	$6A0E	    			CLRF	STACK_14, 0
$12B8	$880E	    			BSF	STACK_14, 4, 0
$12BA	$0CFF	    			RETLW	0xFF
$12BC	$	END_ALL:
$12BC	$6A0E	    			CLRF	STACK_14, 0
$12BE	$A00C	    			BTFSS	STACK_12, 0, 0
$12C0	$EF64	F009			GOTO	avoid_comfrem
$12C4	$ECC1	F003			CALL	_COMFREM
$12C8	$	avoid_comfrem:
$12C8	$0F00	    			ADDLW	0x00
$12CA	$0012	    			RETURN
$12CC	$	_islower:
$12CC	$0108	    			MOVLB	8
$12CE	$51EB	    			MOVF	FARG_islower+0, 0, 1
$12D0	$087A	    			SUBLW	122
$12D2	$E307	    			BNC	L_islower_1
$12D4	$0E61	    			MOVLW	97
$12D6	$5DEB	    			SUBWF	FARG_islower+0, 0, 1
$12D8	$E304	    			BNC	L_islower_1
$12DA	$0E01	    			MOVLW	1
$12DC	$6E00	    			MOVWF	STACK_0, 0
$12DE	$EF72	F009			GOTO	L_islower_0
$12E2	$	L_islower_1:
$12E2	$6A00	    			CLRF	STACK_0, 0
$12E4	$	L_islower_0:
$12E4	$0E00	    			MOVLW	0
$12E6	$6E01	    			MOVWF	STACK_0+1, 0
$12E8	$0012	    			RETURN
$12EA	$	_toupper:
$12EA	$0108	    			MOVLB	8
$12EC	$51EB	    			MOVF	FARG_toupper+0, 0, 1
$12EE	$087A	    			SUBLW	122
$12F0	$E304	    			BNC	L_toupper_35
$12F2	$0E61	    			MOVLW	97
$12F4	$5DEB	    			SUBWF	FARG_toupper+0, 0, 1
$12F6	$B0D8	    			BTFSC	STATUS, C, 0
$12F8	$	L210_ex_L_toupper_35:
$12F8	$9BEB	    			BCF	FARG_toupper+0, 5, 1
$12FA	$	L_toupper_35:
$12FA	$C8EB	F000			MOVFF	FARG_toupper+0, STACK_0
$12FE	$0012	    			RETURN
$1300	$	cf_fat16_Set_Fat_Start_Pos:
$1300	$C234	F004			MOVFF	cf_fat16_file_write_cluster, STACK_4
$1304	$C235	F005			MOVFF	cf_fat16_file_write_cluster+1, STACK_4+1
$1308	$0E00	    			MOVLW	0
$130A	$6E06	    			MOVWF	STACK_4+2, 0
$130C	$6E07	    			MOVWF	STACK_4+3, 0
$130E	$C004	F8EB			MOVFF	STACK_4, FLOC_cf_fat16_Set_Fat_Start_Pos+0
$1312	$C005	F8EC			MOVFF	STACK_4+1, FLOC_cf_fat16_Set_Fat_Start_Pos+1
$1316	$C006	F8ED			MOVFF	STACK_4+2, FLOC_cf_fat16_Set_Fat_Start_Pos+2
$131A	$C007	F8EE			MOVFF	STACK_4+3, FLOC_cf_fat16_Set_Fat_Start_Pos+3
$131E	$0108	    			MOVLB	8
$1320	$37EB	    			RLCF	FLOC_cf_fat16_Set_Fat_Start_Pos+0, 1, 1
$1322	$91EB	    			BCF	FLOC_cf_fat16_Set_Fat_Start_Pos+0, 0, 1
$1324	$37EC	    			RLCF	FLOC_cf_fat16_Set_Fat_Start_Pos+1, 1, 1
$1326	$37ED	    			RLCF	FLOC_cf_fat16_Set_Fat_Start_Pos+2, 1, 1
$1328	$37EE	    			RLCF	FLOC_cf_fat16_Set_Fat_Start_Pos+3, 1, 1
$132A	$C22E	F004			MOVFF	cf_fat16_BYTES_PER_SECTOR, STACK_4
$132E	$C22F	F005			MOVFF	cf_fat16_BYTES_PER_SECTOR+1, STACK_4+1
$1332	$0E00	    			MOVLW	0
$1334	$6E06	    			MOVWF	STACK_4+2, 0
$1336	$6E07	    			MOVWF	STACK_4+3, 0
$1338	$C8EB	F000			MOVFF	FLOC_cf_fat16_Set_Fat_Start_Pos+0, STACK_0
$133C	$C8EC	F001			MOVFF	FLOC_cf_fat16_Set_Fat_Start_Pos+1, STACK_0+1
$1340	$C8ED	F002			MOVFF	FLOC_cf_fat16_Set_Fat_Start_Pos+2, STACK_0+2
$1344	$C8EE	F003			MOVFF	FLOC_cf_fat16_Set_Fat_Start_Pos+3, STACK_0+3
$1348	$ECCE	F003			CALL	_div_32x32_u
$134C	$C000	F026			MOVFF	STACK_0, cf_fat16_fat_sector_pnt
$1350	$C001	F027			MOVFF	STACK_0+1, cf_fat16_fat_sector_pnt+1
$1354	$C22E	F004			MOVFF	cf_fat16_BYTES_PER_SECTOR, STACK_4
$1358	$C22F	F005			MOVFF	cf_fat16_BYTES_PER_SECTOR+1, STACK_4+1
$135C	$0E00	    			MOVLW	0
$135E	$6E06	    			MOVWF	STACK_4+2, 0
$1360	$6E07	    			MOVWF	STACK_4+3, 0
$1362	$C8EB	F000			MOVFF	FLOC_cf_fat16_Set_Fat_Start_Pos+0, STACK_0
$1366	$C8EC	F001			MOVFF	FLOC_cf_fat16_Set_Fat_Start_Pos+1, STACK_0+1
$136A	$C8ED	F002			MOVFF	FLOC_cf_fat16_Set_Fat_Start_Pos+2, STACK_0+2
$136E	$C8EE	F003			MOVFF	FLOC_cf_fat16_Set_Fat_Start_Pos+3, STACK_0+3
$1372	$ECCE	F003			CALL	_div_32x32_u
$1376	$C008	F000			MOVFF	STACK_8, STACK_0
$137A	$C009	F001			MOVFF	STACK_9, STACK_1
$137E	$C00A	F002			MOVFF	STACK_10, STACK_2
$1382	$C00B	F003			MOVFF	STACK_11, STACK_3
$1386	$C000	F028			MOVFF	STACK_0, cf_fat16_fat_offset
$138A	$C001	F029			MOVFF	STACK_0+1, cf_fat16_fat_offset+1
$138E	$0012	    			RETURN
$1390	$	_Cf_Fat_Create:
$1390	$0102	    			MOVLB	2
$1392	$6B47	    			CLRF	cf_fat16_root_offset, 1
$1394	$6B48	    			CLRF	cf_fat16_root_offset+1, 1
$1396	$6B45	    			CLRF	cf_fat16_root_sector_pnt, 1
$1398	$6B46	    			CLRF	cf_fat16_root_sector_pnt+1, 1
$139A	$EC58	F005			CALL	cf_fat16_Get_Free_Fat_Entry
$139E	$ECBA	F005			CALL	cf_fat16_Occupy_Current_Fat_Entry
$13A2	$ECFE	F005			CALL	cf_fat16_Set_File_Write_Cluster
$13A6	$C241	F901			MOVFF	cf_fat16_ROOT_START_SECTOR, FARG_Cf_Read_Sector+0
$13AA	$C242	F902			MOVFF	cf_fat16_ROOT_START_SECTOR+1, FARG_Cf_Read_Sector+1
$13AE	$C243	F903			MOVFF	cf_fat16_ROOT_START_SECTOR+2, FARG_Cf_Read_Sector+2
$13B2	$C244	F904			MOVFF	cf_fat16_ROOT_START_SECTOR+3, FARG_Cf_Read_Sector+3
$13B6	$0E2E	    			MOVLW	cf_fat16_data
$13B8	$0109	    			MOVLB	9
$13BA	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$13BC	$0E00	    			MOVLW	@cf_fat16_data
$13BE	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$13C0	$EC5C	F001			CALL	_Cf_Read_Sector
$13C4	$0108	    			MOVLB	8
$13C6	$6BEF	    			CLRF	Cf_Fat_Create_free_entry_L0, 1
$13C8	$	L_Cf_Fat_Create_59:
$13C8	$0102	    			MOVLB	2
$13CA	$5148	    			MOVF	cf_fat16_root_offset+1, 0, 1
$13CC	$192F	    			XORWF	cf_fat16_BYTES_PER_SECTOR+1, 0, 1
$13CE	$E102	    			BNZ	L_Cf_Fat_Create_253
$13D0	$512E	    			MOVF	cf_fat16_BYTES_PER_SECTOR, 0, 1
$13D2	$1947	    			XORWF	cf_fat16_root_offset, 0, 1
$13D4	$	L_Cf_Fat_Create_253:
$13D4	$E11E	    			BNZ	L_Cf_Fat_Create_61
$13D6	$0102	    			MOVLB	2
$13D8	$6B47	    			CLRF	cf_fat16_root_offset, 1
$13DA	$6B48	    			CLRF	cf_fat16_root_offset+1, 1
$13DC	$4B45	    			INFSNZ	cf_fat16_root_sector_pnt, 1, 1
$13DE	$2B46	    			INCF	cf_fat16_root_sector_pnt+1, 1, 1
$13E0	$5145	    			MOVF	cf_fat16_root_sector_pnt, 0, 1
$13E2	$2541	    			ADDWF	cf_fat16_ROOT_START_SECTOR, 0, 1
$13E4	$0109	    			MOVLB	9
$13E6	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$13E8	$0102	    			MOVLB	2
$13EA	$5146	    			MOVF	cf_fat16_root_sector_pnt+1, 0, 1
$13EC	$2142	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+1, 0, 1
$13EE	$0109	    			MOVLB	9
$13F0	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$13F2	$0E00	    			MOVLW	0
$13F4	$0102	    			MOVLB	2
$13F6	$2143	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+2, 0, 1
$13F8	$0109	    			MOVLB	9
$13FA	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$13FC	$0E00	    			MOVLW	0
$13FE	$0102	    			MOVLB	2
$1400	$2144	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+3, 0, 1
$1402	$0109	    			MOVLB	9
$1404	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$1406	$0E2E	    			MOVLW	cf_fat16_data
$1408	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$140A	$0E00	    			MOVLW	@cf_fat16_data
$140C	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$140E	$EC5C	F001			CALL	_Cf_Read_Sector
$1412	$	L_Cf_Fat_Create_61:
$1412	$0E2E	    			MOVLW	cf_fat16_data
$1414	$0102	    			MOVLB	2
$1416	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$1418	$6EE9	    			MOVWF	FSR0L, 0
$141A	$0E00	    			MOVLW	@cf_fat16_data
$141C	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$141E	$6EEA	    			MOVWF	FSR0L+1, 0
$1420	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$1424	$5002	    			MOVF	STACK_2, 0, 0
$1426	$0AE5	    			XORLW	229
$1428	$E00B	    			BZ	L456_ex_L_Cf_Fat_Create_64
$142A	$0E2E	    			MOVLW	cf_fat16_data
$142C	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$142E	$6EE9	    			MOVWF	FSR0L, 0
$1430	$0E00	    			MOVLW	@cf_fat16_data
$1432	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$1434	$6EEA	    			MOVWF	FSR0L+1, 0
$1436	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$143A	$5002	    			MOVF	STACK_2, 0, 0
$143C	$0A00	    			XORLW	0
$143E	$E103	    			BNZ	L_Cf_Fat_Create_64
$1440	$	L456_ex_L_Cf_Fat_Create_64:
$1440	$0E01	    			MOVLW	1
$1442	$0108	    			MOVLB	8
$1444	$6FEF	    			MOVWF	Cf_Fat_Create_free_entry_L0, 1
$1446	$	L_Cf_Fat_Create_64:
$1446	$0E20	    			MOVLW	32
$1448	$0102	    			MOVLB	2
$144A	$2747	    			ADDWF	cf_fat16_root_offset, 1, 1
$144C	$0E00	    			MOVLW	0
$144E	$2348	    			ADDWFC	cf_fat16_root_offset+1, 1, 1
$1450	$0108	    			MOVLB	8
$1452	$53EF	    			MOVF	Cf_Fat_Create_free_entry_L0, 1, 1
$1454	$E0B9	    			BZ	L_Cf_Fat_Create_59
$1456	$	L_Cf_Fat_Create_60:
$1456	$0108	    			MOVLB	8
$1458	$51EF	    			MOVF	Cf_Fat_Create_free_entry_L0, 0, 1
$145A	$0A01	    			XORLW	1
$145C	$A4D8	    			BTFSS	STATUS, Z, 0
$145E	$D08F	    			BRA	L_Cf_Fat_Create_65
$1460	$0E20	    			MOVLW	32
$1462	$0102	    			MOVLB	2
$1464	$5F47	    			SUBWF	cf_fat16_root_offset, 1, 1
$1466	$0E00	    			MOVLW	0
$1468	$5B48	    			SUBWFB	cf_fat16_root_offset+1, 1, 1
$146A	$0108	    			MOVLB	8
$146C	$6BEE	    			CLRF	Cf_Fat_Create_i_L0, 1
$146E	$	L_Cf_Fat_Create_66:
$146E	$0108	    			MOVLB	8
$1470	$51EE	    			MOVF	Cf_Fat_Create_i_L0, 0, 1
$1472	$080A	    			SUBLW	10
$1474	$E31B	    			BNC	L_Cf_Fat_Create_67
$1476	$51EE	    			MOVF	Cf_Fat_Create_i_L0, 0, 1
$1478	$0102	    			MOVLB	2
$147A	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$147C	$6E00	    			MOVWF	STACK_0, 0
$147E	$0E00	    			MOVLW	0
$1480	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$1482	$6E01	    			MOVWF	STACK_0+1, 0
$1484	$0E2E	    			MOVLW	cf_fat16_data
$1486	$2400	    			ADDWF	STACK_0, 0, 0
$1488	$6EE1	    			MOVWF	FSR1L, 0
$148A	$0E00	    			MOVLW	@cf_fat16_data
$148C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$148E	$6EE2	    			MOVWF	FSR1L+1, 0
$1490	$0108	    			MOVLB	8
$1492	$51EE	    			MOVF	Cf_Fat_Create_i_L0, 0, 1
$1494	$25EB	    			ADDWF	FARG_Cf_Fat_Create+0, 0, 1
$1496	$6EE9	    			MOVWF	FSR0L, 0
$1498	$0E00	    			MOVLW	0
$149A	$21EC	    			ADDWFC	FARG_Cf_Fat_Create+1, 0, 1
$149C	$6EEA	    			MOVWF	FSR0L+1, 0
$149E	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$14A2	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$14A6	$	L_Cf_Fat_Create_68:
$14A6	$0108	    			MOVLB	8
$14A8	$2BEE	    			INCF	Cf_Fat_Create_i_L0, 1, 1
$14AA	$D7E1	    			BRA	L_Cf_Fat_Create_66
$14AC	$	L_Cf_Fat_Create_67:
$14AC	$0E1C	    			MOVLW	28
$14AE	$0108	    			MOVLB	8
$14B0	$6FEE	    			MOVWF	Cf_Fat_Create_i_L0, 1
$14B2	$	L_Cf_Fat_Create_69:
$14B2	$0E20	    			MOVLW	32
$14B4	$0108	    			MOVLB	8
$14B6	$5DEE	    			SUBWF	Cf_Fat_Create_i_L0, 0, 1
$14B8	$E211	    			BC	L_Cf_Fat_Create_70
$14BA	$51EE	    			MOVF	Cf_Fat_Create_i_L0, 0, 1
$14BC	$0102	    			MOVLB	2
$14BE	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$14C0	$6E00	    			MOVWF	STACK_0, 0
$14C2	$0E00	    			MOVLW	0
$14C4	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$14C6	$6E01	    			MOVWF	STACK_0+1, 0
$14C8	$0E2E	    			MOVLW	cf_fat16_data
$14CA	$2400	    			ADDWF	STACK_0, 0, 0
$14CC	$6EE1	    			MOVWF	FSR1L, 0
$14CE	$0E00	    			MOVLW	@cf_fat16_data
$14D0	$2001	    			ADDWFC	STACK_0+1, 0, 0
$14D2	$6EE2	    			MOVWF	FSR1L+1, 0
$14D4	$6AE6	    			CLRF	POSTINC1, 0
$14D6	$	L_Cf_Fat_Create_71:
$14D6	$0108	    			MOVLB	8
$14D8	$2BEE	    			INCF	Cf_Fat_Create_i_L0, 1, 1
$14DA	$D7EB	    			BRA	L_Cf_Fat_Create_69
$14DC	$	L_Cf_Fat_Create_70:
$14DC	$0E1A	    			MOVLW	26
$14DE	$0102	    			MOVLB	2
$14E0	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$14E2	$6E00	    			MOVWF	STACK_0, 0
$14E4	$0E00	    			MOVLW	0
$14E6	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$14E8	$6E01	    			MOVWF	STACK_0+1, 0
$14EA	$0E2E	    			MOVLW	cf_fat16_data
$14EC	$2400	    			ADDWF	STACK_0, 0, 0
$14EE	$6EE1	    			MOVWF	FSR1L, 0
$14F0	$0E00	    			MOVLW	@cf_fat16_data
$14F2	$2001	    			ADDWFC	STACK_0+1, 0, 0
$14F4	$6EE2	    			MOVWF	FSR1L+1, 0
$14F6	$C234	FFE6			MOVFF	cf_fat16_file_write_cluster, POSTINC1
$14FA	$C235	FFE6			MOVFF	cf_fat16_file_write_cluster+1, POSTINC1
$14FE	$0E0B	    			MOVLW	11
$1500	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$1502	$6E00	    			MOVWF	STACK_0, 0
$1504	$0E00	    			MOVLW	0
$1506	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$1508	$6E01	    			MOVWF	STACK_0+1, 0
$150A	$0E2E	    			MOVLW	cf_fat16_data
$150C	$2400	    			ADDWF	STACK_0, 0, 0
$150E	$6EE1	    			MOVWF	FSR1L, 0
$1510	$0E00	    			MOVLW	@cf_fat16_data
$1512	$2001	    			ADDWFC	STACK_0+1, 0, 0
$1514	$6EE2	    			MOVWF	FSR1L+1, 0
$1516	$C8ED	FFE6			MOVFF	FARG_Cf_Fat_Create+2, POSTINC1
$151A	$0E0D	    			MOVLW	13
$151C	$0108	    			MOVLB	8
$151E	$6FEE	    			MOVWF	Cf_Fat_Create_i_L0, 1
$1520	$	L_Cf_Fat_Create_72:
$1520	$0108	    			MOVLB	8
$1522	$51EE	    			MOVF	Cf_Fat_Create_i_L0, 0, 1
$1524	$0819	    			SUBLW	25
$1526	$E311	    			BNC	L_Cf_Fat_Create_73
$1528	$51EE	    			MOVF	Cf_Fat_Create_i_L0, 0, 1
$152A	$0102	    			MOVLB	2
$152C	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$152E	$6E00	    			MOVWF	STACK_0, 0
$1530	$0E00	    			MOVLW	0
$1532	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$1534	$6E01	    			MOVWF	STACK_0+1, 0
$1536	$0E2E	    			MOVLW	cf_fat16_data
$1538	$2400	    			ADDWF	STACK_0, 0, 0
$153A	$6EE1	    			MOVWF	FSR1L, 0
$153C	$0E00	    			MOVLW	@cf_fat16_data
$153E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$1540	$6EE2	    			MOVWF	FSR1L+1, 0
$1542	$6AE6	    			CLRF	POSTINC1, 0
$1544	$	L_Cf_Fat_Create_74:
$1544	$0108	    			MOVLB	8
$1546	$2BEE	    			INCF	Cf_Fat_Create_i_L0, 1, 1
$1548	$D7EB	    			BRA	L_Cf_Fat_Create_72
$154A	$	L_Cf_Fat_Create_73:
$154A	$0102	    			MOVLB	2
$154C	$5145	    			MOVF	cf_fat16_root_sector_pnt, 0, 1
$154E	$2541	    			ADDWF	cf_fat16_ROOT_START_SECTOR, 0, 1
$1550	$0109	    			MOVLB	9
$1552	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$1554	$0102	    			MOVLB	2
$1556	$5146	    			MOVF	cf_fat16_root_sector_pnt+1, 0, 1
$1558	$2142	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+1, 0, 1
$155A	$0109	    			MOVLB	9
$155C	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$155E	$0E00	    			MOVLW	0
$1560	$0102	    			MOVLB	2
$1562	$2143	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+2, 0, 1
$1564	$0109	    			MOVLB	9
$1566	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$1568	$0E00	    			MOVLW	0
$156A	$0102	    			MOVLB	2
$156C	$2144	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+3, 0, 1
$156E	$0109	    			MOVLB	9
$1570	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$1572	$0E2E	    			MOVLW	cf_fat16_data
$1574	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$1576	$0E00	    			MOVLW	@cf_fat16_data
$1578	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$157A	$EC89	F001			CALL	_Cf_Write_Sector
$157E	$	L_Cf_Fat_Create_65:
$157E	$EC17	F006			CALL	cf_fat16_Set_File_Write_Sector
$1582	$0012	    			RETURN
$1584	$	cf_fat16_Reset_Fat_Chain:
$1584	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$1586	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$1588	$0109	    			MOVLB	9
$158A	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$158C	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$158E	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$1590	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$1592	$0E00	    			MOVLW	0
$1594	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$1596	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$1598	$0E00	    			MOVLW	0
$159A	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$159C	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$159E	$0E2E	    			MOVLW	cf_fat16_data
$15A0	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$15A2	$0E00	    			MOVLW	@cf_fat16_data
$15A4	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$15A6	$EC5C	F001			CALL	_Cf_Read_Sector
$15AA	$0E2E	    			MOVLW	cf_fat16_data
$15AC	$2428	    			ADDWF	cf_fat16_fat_offset, 0, 0
$15AE	$6E00	    			MOVWF	STACK_0, 0
$15B0	$0E00	    			MOVLW	@cf_fat16_data
$15B2	$2029	    			ADDWFC	cf_fat16_fat_offset+1, 0, 0
$15B4	$6E01	    			MOVWF	STACK_0+1, 0
$15B6	$C000	FFE9			MOVFF	STACK_0, FSR0L
$15BA	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$15BE	$CFEE	F8EC			MOVFF	POSTINC0, cf_fat16_Reset_Fat_Chain_next_cluster_L0
$15C2	$0E00	    			MOVLW	0
$15C4	$0108	    			MOVLB	8
$15C6	$6FED	    			MOVWF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+1, 1
$15C8	$6FEE	    			MOVWF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+2, 1
$15CA	$6FEF	    			MOVWF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+3, 1
$15CC	$0E00	    			MOVLW	0
$15CE	$6FED	    			MOVWF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+1, 1
$15D0	$6FEE	    			MOVWF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+2, 1
$15D2	$6FEF	    			MOVWF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+3, 1
$15D4	$CFEE	F8ED			MOVFF	POSTINC0, cf_fat16_Reset_Fat_Chain_next_cluster_L0+1
$15D8	$C026	F251			MOVFF	cf_fat16_fat_sector_pnt, cf_fat16_fat_sector_pnt_prev
$15DC	$C027	F252			MOVFF	cf_fat16_fat_sector_pnt+1, cf_fat16_fat_sector_pnt_prev+1
$15E0	$C028	F253			MOVFF	cf_fat16_fat_offset, cf_fat16_fat_offset_prev
$15E4	$C029	F254			MOVFF	cf_fat16_fat_offset+1, cf_fat16_fat_offset_prev+1
$15E8	$C000	FFE1			MOVFF	STACK_0, FSR1L
$15EC	$C001	FFE2			MOVFF	STACK_0+1, FSR1H
$15F0	$C8EB	FFE6			MOVFF	FARG_cf_fat16_Reset_Fat_Chain+0, POSTINC1
$15F4	$C8EB	FFE6			MOVFF	FARG_cf_fat16_Reset_Fat_Chain+0, POSTINC1
$15F8	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$15FA	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$15FC	$0109	    			MOVLB	9
$15FE	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$1600	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$1602	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$1604	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$1606	$0E00	    			MOVLW	0
$1608	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$160A	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$160C	$0E00	    			MOVLW	0
$160E	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$1610	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$1612	$0E2E	    			MOVLW	cf_fat16_data
$1614	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$1616	$0E00	    			MOVLW	@cf_fat16_data
$1618	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$161A	$EC89	F001			CALL	_Cf_Write_Sector
$161E	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$1620	$0102	    			MOVLB	2
$1622	$2530	    			ADDWF	cf_fat16_FAT2_START_SECTOR, 0, 1
$1624	$0109	    			MOVLB	9
$1626	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$1628	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$162A	$0102	    			MOVLB	2
$162C	$2131	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+1, 0, 1
$162E	$0109	    			MOVLB	9
$1630	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$1632	$0E00	    			MOVLW	0
$1634	$0102	    			MOVLB	2
$1636	$2132	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+2, 0, 1
$1638	$0109	    			MOVLB	9
$163A	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$163C	$0E00	    			MOVLW	0
$163E	$0102	    			MOVLB	2
$1640	$2133	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+3, 0, 1
$1642	$0109	    			MOVLB	9
$1644	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$1646	$0E2E	    			MOVLW	cf_fat16_data
$1648	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$164A	$0E00	    			MOVLW	@cf_fat16_data
$164C	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$164E	$EC89	F001			CALL	_Cf_Write_Sector
$1652	$	L_cf_fat16_Reset_Fat_Chain_10:
$1652	$0E00	    			MOVLW	0
$1654	$6E00	    			MOVWF	STACK_0, 0
$1656	$0108	    			MOVLB	8
$1658	$19EF	    			XORWF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+3, 0, 1
$165A	$E108	    			BNZ	L_Reset_Fat_Chain_239
$165C	$5000	    			MOVF	STACK_0, 0, 0
$165E	$19EE	    			XORWF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+2, 0, 1
$1660	$E105	    			BNZ	L_Reset_Fat_Chain_239
$1662	$0EFF	    			MOVLW	255
$1664	$19ED	    			XORWF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+1, 0, 1
$1666	$E102	    			BNZ	L_Reset_Fat_Chain_239
$1668	$51EC	    			MOVF	cf_fat16_Reset_Fat_Chain_next_cluster_L0, 0, 1
$166A	$0AFF	    			XORLW	255
$166C	$	L_Reset_Fat_Chain_239:
$166C	$B4D8	    			BTFSC	STATUS, Z, 0
$166E	$D0A8	    			BRA	L_cf_fat16_Reset_Fat_Chain_11
$1670	$C8EC	F8F4			MOVFF	cf_fat16_Reset_Fat_Chain_next_cluster_L0, FLOC_cf_fat16_Reset_Fat_Chain+8
$1674	$C8ED	F8F5			MOVFF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+1, FLOC_cf_fat16_Reset_Fat_Chain+9
$1678	$C8EE	F8F6			MOVFF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+2, FLOC_cf_fat16_Reset_Fat_Chain+10
$167C	$C8EF	F8F7			MOVFF	cf_fat16_Reset_Fat_Chain_next_cluster_L0+3, FLOC_cf_fat16_Reset_Fat_Chain+11
$1680	$0108	    			MOVLB	8
$1682	$37F4	    			RLCF	FLOC_cf_fat16_Reset_Fat_Chain+8, 1, 1
$1684	$91F4	    			BCF	FLOC_cf_fat16_Reset_Fat_Chain+8, 0, 1
$1686	$37F5	    			RLCF	FLOC_cf_fat16_Reset_Fat_Chain+9, 1, 1
$1688	$37F6	    			RLCF	FLOC_cf_fat16_Reset_Fat_Chain+10, 1, 1
$168A	$37F7	    			RLCF	FLOC_cf_fat16_Reset_Fat_Chain+11, 1, 1
$168C	$C8F4	F8EC			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+8, cf_fat16_Reset_Fat_Chain_next_cluster_L0
$1690	$C8F5	F8ED			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+9, cf_fat16_Reset_Fat_Chain_next_cluster_L0+1
$1694	$C8F6	F8EE			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+10, cf_fat16_Reset_Fat_Chain_next_cluster_L0+2
$1698	$C8F7	F8EF			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+11, cf_fat16_Reset_Fat_Chain_next_cluster_L0+3
$169C	$C22E	F004			MOVFF	cf_fat16_BYTES_PER_SECTOR, STACK_4
$16A0	$C22F	F005			MOVFF	cf_fat16_BYTES_PER_SECTOR+1, STACK_4+1
$16A4	$0E00	    			MOVLW	0
$16A6	$6E06	    			MOVWF	STACK_4+2, 0
$16A8	$6E07	    			MOVWF	STACK_4+3, 0
$16AA	$C8F4	F000			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+8, STACK_0
$16AE	$C8F5	F001			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+9, STACK_0+1
$16B2	$C8F6	F002			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+10, STACK_0+2
$16B6	$C8F7	F003			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+11, STACK_0+3
$16BA	$ECCE	F003			CALL	_div_32x32_u
$16BE	$C000	F8F0			MOVFF	STACK_0, FLOC_cf_fat16_Reset_Fat_Chain+4
$16C2	$C001	F8F1			MOVFF	STACK_0+1, FLOC_cf_fat16_Reset_Fat_Chain+5
$16C6	$C002	F8F2			MOVFF	STACK_0+2, FLOC_cf_fat16_Reset_Fat_Chain+6
$16CA	$C003	F8F3			MOVFF	STACK_0+3, FLOC_cf_fat16_Reset_Fat_Chain+7
$16CE	$C8F0	F026			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+4, cf_fat16_fat_sector_pnt
$16D2	$C8F1	F027			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+5, cf_fat16_fat_sector_pnt+1
$16D6	$C22E	F004			MOVFF	cf_fat16_BYTES_PER_SECTOR, STACK_4
$16DA	$C22F	F005			MOVFF	cf_fat16_BYTES_PER_SECTOR+1, STACK_4+1
$16DE	$0E00	    			MOVLW	0
$16E0	$6E06	    			MOVWF	STACK_4+2, 0
$16E2	$6E07	    			MOVWF	STACK_4+3, 0
$16E4	$C8F4	F000			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+8, STACK_0
$16E8	$C8F5	F001			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+9, STACK_0+1
$16EC	$C8F6	F002			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+10, STACK_0+2
$16F0	$C8F7	F003			MOVFF	FLOC_cf_fat16_Reset_Fat_Chain+11, STACK_0+3
$16F4	$ECCE	F003			CALL	_div_32x32_u
$16F8	$C008	F000			MOVFF	STACK_8, STACK_0
$16FC	$C009	F001			MOVFF	STACK_9, STACK_1
$1700	$C00A	F002			MOVFF	STACK_10, STACK_2
$1704	$C00B	F003			MOVFF	STACK_11, STACK_3
$1708	$C000	F028			MOVFF	STACK_0, cf_fat16_fat_offset
$170C	$C001	F029			MOVFF	STACK_0+1, cf_fat16_fat_offset+1
$1710	$0108	    			MOVLB	8
$1712	$51F0	    			MOVF	FLOC_cf_fat16_Reset_Fat_Chain+4, 0, 1
$1714	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$1716	$0109	    			MOVLB	9
$1718	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$171A	$0108	    			MOVLB	8
$171C	$51F1	    			MOVF	FLOC_cf_fat16_Reset_Fat_Chain+5, 0, 1
$171E	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$1720	$0109	    			MOVLB	9
$1722	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$1724	$0E00	    			MOVLW	0
$1726	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$1728	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$172A	$0E00	    			MOVLW	0
$172C	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$172E	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$1730	$0E2E	    			MOVLW	cf_fat16_data
$1732	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$1734	$0E00	    			MOVLW	@cf_fat16_data
$1736	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$1738	$EC5C	F001			CALL	_Cf_Read_Sector
$173C	$0E2E	    			MOVLW	cf_fat16_data
$173E	$2428	    			ADDWF	cf_fat16_fat_offset, 0, 0
$1740	$6E00	    			MOVWF	STACK_0, 0
$1742	$0E00	    			MOVLW	@cf_fat16_data
$1744	$2029	    			ADDWFC	cf_fat16_fat_offset+1, 0, 0
$1746	$6E01	    			MOVWF	STACK_0+1, 0
$1748	$C000	FFE9			MOVFF	STACK_0, FSR0L
$174C	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$1750	$CFEE	F8EC			MOVFF	POSTINC0, cf_fat16_Reset_Fat_Chain_next_cluster_L0
$1754	$CFEE	F8ED			MOVFF	POSTINC0, cf_fat16_Reset_Fat_Chain_next_cluster_L0+1
$1758	$C000	FFE1			MOVFF	STACK_0, FSR1L
$175C	$C001	FFE2			MOVFF	STACK_0+1, FSR1H
$1760	$6AE6	    			CLRF	POSTINC1, 0
$1762	$6AE6	    			CLRF	POSTINC1, 0
$1764	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$1766	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$1768	$0109	    			MOVLB	9
$176A	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$176C	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$176E	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$1770	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$1772	$0E00	    			MOVLW	0
$1774	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$1776	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$1778	$0E00	    			MOVLW	0
$177A	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$177C	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$177E	$0E2E	    			MOVLW	cf_fat16_data
$1780	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$1782	$0E00	    			MOVLW	@cf_fat16_data
$1784	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$1786	$EC89	F001			CALL	_Cf_Write_Sector
$178A	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$178C	$0102	    			MOVLB	2
$178E	$2530	    			ADDWF	cf_fat16_FAT2_START_SECTOR, 0, 1
$1790	$0109	    			MOVLB	9
$1792	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$1794	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$1796	$0102	    			MOVLB	2
$1798	$2131	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+1, 0, 1
$179A	$0109	    			MOVLB	9
$179C	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$179E	$0E00	    			MOVLW	0
$17A0	$0102	    			MOVLB	2
$17A2	$2132	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+2, 0, 1
$17A4	$0109	    			MOVLB	9
$17A6	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$17A8	$0E00	    			MOVLW	0
$17AA	$0102	    			MOVLB	2
$17AC	$2133	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+3, 0, 1
$17AE	$0109	    			MOVLB	9
$17B0	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$17B2	$0E2E	    			MOVLW	cf_fat16_data
$17B4	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$17B6	$0E00	    			MOVLW	@cf_fat16_data
$17B8	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$17BA	$EC89	F001			CALL	_Cf_Write_Sector
$17BE	$D749	    			BRA	L_cf_fat16_Reset_Fat_Chain_10
$17C0	$	L_cf_fat16_Reset_Fat_Chain_11:
$17C0	$C251	F026			MOVFF	cf_fat16_fat_sector_pnt_prev, cf_fat16_fat_sector_pnt
$17C4	$C252	F027			MOVFF	cf_fat16_fat_sector_pnt_prev+1, cf_fat16_fat_sector_pnt+1
$17C8	$C253	F028			MOVFF	cf_fat16_fat_offset_prev, cf_fat16_fat_offset
$17CC	$C254	F029			MOVFF	cf_fat16_fat_offset_prev+1, cf_fat16_fat_offset+1
$17D0	$0012	    			RETURN
$17D2	$	_WordToStr:
$17D2	$C8ED	FFE1			MOVFF	FARG_WordToStr+2, FSR1L
$17D6	$C8EE	FFE2			MOVFF	FARG_WordToStr+3, FSR1H
$17DA	$0E20	    			MOVLW	32
$17DC	$6EE6	    			MOVWF	POSTINC1, 0
$17DE	$0E01	    			MOVLW	1
$17E0	$0108	    			MOVLB	8
$17E2	$25ED	    			ADDWF	FARG_WordToStr+2, 0, 1
$17E4	$6EE1	    			MOVWF	FSR1L, 0
$17E6	$0E00	    			MOVLW	0
$17E8	$21EE	    			ADDWFC	FARG_WordToStr+3, 0, 1
$17EA	$6EE2	    			MOVWF	FSR1L+1, 0
$17EC	$0E20	    			MOVLW	32
$17EE	$6EE6	    			MOVWF	POSTINC1, 0
$17F0	$0E02	    			MOVLW	2
$17F2	$25ED	    			ADDWF	FARG_WordToStr+2, 0, 1
$17F4	$6EE1	    			MOVWF	FSR1L, 0
$17F6	$0E00	    			MOVLW	0
$17F8	$21EE	    			ADDWFC	FARG_WordToStr+3, 0, 1
$17FA	$6EE2	    			MOVWF	FSR1L+1, 0
$17FC	$0E20	    			MOVLW	32
$17FE	$6EE6	    			MOVWF	POSTINC1, 0
$1800	$0E03	    			MOVLW	3
$1802	$25ED	    			ADDWF	FARG_WordToStr+2, 0, 1
$1804	$6EE1	    			MOVWF	FSR1L, 0
$1806	$0E00	    			MOVLW	0
$1808	$21EE	    			ADDWFC	FARG_WordToStr+3, 0, 1
$180A	$6EE2	    			MOVWF	FSR1L+1, 0
$180C	$0E20	    			MOVLW	32
$180E	$6EE6	    			MOVWF	POSTINC1, 0
$1810	$0E04	    			MOVLW	4
$1812	$25ED	    			ADDWF	FARG_WordToStr+2, 0, 1
$1814	$6EE1	    			MOVWF	FSR1L, 0
$1816	$0E00	    			MOVLW	0
$1818	$21EE	    			ADDWFC	FARG_WordToStr+3, 0, 1
$181A	$6EE2	    			MOVWF	FSR1L+1, 0
$181C	$0E30	    			MOVLW	48
$181E	$6EE6	    			MOVWF	POSTINC1, 0
$1820	$0E05	    			MOVLW	5
$1822	$25ED	    			ADDWF	FARG_WordToStr+2, 0, 1
$1824	$6EE1	    			MOVWF	FSR1L, 0
$1826	$0E00	    			MOVLW	0
$1828	$21EE	    			ADDWFC	FARG_WordToStr+3, 0, 1
$182A	$6EE2	    			MOVWF	FSR1L+1, 0
$182C	$6AE6	    			CLRF	POSTINC1, 0
$182E	$0E04	    			MOVLW	4
$1830	$6FEF	    			MOVWF	WordToStr_pos_L0, 1
$1832	$	L_WordToStr_4:
$1832	$0E00	    			MOVLW	0
$1834	$6E00	    			MOVWF	STACK_0, 0
$1836	$0108	    			MOVLB	8
$1838	$51EC	    			MOVF	FARG_WordToStr+1, 0, 1
$183A	$5C00	    			SUBWF	STACK_0, 0, 0
$183C	$E102	    			BNZ	L_WordToStr_51
$183E	$51EB	    			MOVF	FARG_WordToStr+0, 0, 1
$1840	$0800	    			SUBLW	0
$1842	$	L_WordToStr_51:
$1842	$E22A	    			BC	L_WordToStr_5
$1844	$0108	    			MOVLB	8
$1846	$51EF	    			MOVF	WordToStr_pos_L0, 0, 1
$1848	$25ED	    			ADDWF	FARG_WordToStr+2, 0, 1
$184A	$6EE1	    			MOVWF	FSR1L, 0
$184C	$0E00	    			MOVLW	0
$184E	$21EE	    			ADDWFC	FARG_WordToStr+3, 0, 1
$1850	$6EE2	    			MOVWF	FSR1L+1, 0
$1852	$0E0A	    			MOVLW	10
$1854	$6E04	    			MOVWF	STACK_4, 0
$1856	$0E00	    			MOVLW	0
$1858	$6E05	    			MOVWF	STACK_4+1, 0
$185A	$C8EB	F000			MOVFF	FARG_WordToStr+0, STACK_0
$185E	$C8EC	F001			MOVFF	FARG_WordToStr+1, STACK_0+1
$1862	$EC3F	F006			CALL	_div_16x16_u
$1866	$C008	F000			MOVFF	STACK_8, STACK_0
$186A	$C009	F001			MOVFF	STACK_9, STACK_1
$186E	$0E30	    			MOVLW	48
$1870	$2600	    			ADDWF	STACK_0, 1, 0
$1872	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$1876	$0E0A	    			MOVLW	10
$1878	$6E04	    			MOVWF	STACK_4, 0
$187A	$0E00	    			MOVLW	0
$187C	$6E05	    			MOVWF	STACK_4+1, 0
$187E	$C8EB	F000			MOVFF	FARG_WordToStr+0, STACK_0
$1882	$C8EC	F001			MOVFF	FARG_WordToStr+1, STACK_0+1
$1886	$EC3F	F006			CALL	_div_16x16_u
$188A	$C000	F8EB			MOVFF	STACK_0, FARG_WordToStr+0
$188E	$C001	F8EC			MOVFF	STACK_0+1, FARG_WordToStr+1
$1892	$0108	    			MOVLB	8
$1894	$07EF	    			DECF	WordToStr_pos_L0, 1, 1
$1896	$D7CD	    			BRA	L_WordToStr_4
$1898	$	L_WordToStr_5:
$1898	$0012	    			RETURN
$189A	$	cf_fat16_Fat_Chain_Next:
$189A	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$189C	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$189E	$0109	    			MOVLB	9
$18A0	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$18A2	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$18A4	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$18A6	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$18A8	$0E00	    			MOVLW	0
$18AA	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$18AC	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$18AE	$0E00	    			MOVLW	0
$18B0	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$18B2	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$18B4	$0E2E	    			MOVLW	cf_fat16_data
$18B6	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$18B8	$0E00	    			MOVLW	@cf_fat16_data
$18BA	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$18BC	$EC5C	F001			CALL	_Cf_Read_Sector
$18C0	$0E2E	    			MOVLW	cf_fat16_data
$18C2	$2428	    			ADDWF	cf_fat16_fat_offset, 0, 0
$18C4	$6EE9	    			MOVWF	FSR0L, 0
$18C6	$0E00	    			MOVLW	@cf_fat16_data
$18C8	$2029	    			ADDWFC	cf_fat16_fat_offset+1, 0, 0
$18CA	$6EEA	    			MOVWF	FSR0L+1, 0
$18CC	$CFEE	F8EB			MOVFF	POSTINC0, cf_fat16_Fat_Chain_Next_next_cluster_L0
$18D0	$CFEE	F8EC			MOVFF	POSTINC0, cf_fat16_Fat_Chain_Next_next_cluster_L0+1
$18D4	$0108	    			MOVLB	8
$18D6	$51EC	    			MOVF	cf_fat16_Fat_Chain_Next_next_cluster_L0+1, 0, 1
$18D8	$0AFF	    			XORLW	255
$18DA	$E102	    			BNZ	L_Fat_Chain_Next_240
$18DC	$0EFF	    			MOVLW	255
$18DE	$19EB	    			XORWF	cf_fat16_Fat_Chain_Next_next_cluster_L0, 0, 1
$18E0	$	L_Fat_Chain_Next_240:
$18E0	$E02D	    			BZ	L_cf_fat16_Fat_Chain_Next_12
$18E2	$C236	F004			MOVFF	cf_fat16_CLUSTERS_PER_FAT_SECTOR, STACK_4
$18E6	$C237	F005			MOVFF	cf_fat16_CLUSTERS_PER_FAT_SECTOR+1, STACK_4+1
$18EA	$C8EB	F000			MOVFF	cf_fat16_Fat_Chain_Next_next_cluster_L0, STACK_0
$18EE	$C8EC	F001			MOVFF	cf_fat16_Fat_Chain_Next_next_cluster_L0+1, STACK_0+1
$18F2	$EC3F	F006			CALL	_div_16x16_u
$18F6	$C000	F026			MOVFF	STACK_0, cf_fat16_fat_sector_pnt
$18FA	$C001	F027			MOVFF	STACK_0+1, cf_fat16_fat_sector_pnt+1
$18FE	$C236	F004			MOVFF	cf_fat16_CLUSTERS_PER_FAT_SECTOR, STACK_4
$1902	$C237	F005			MOVFF	cf_fat16_CLUSTERS_PER_FAT_SECTOR+1, STACK_4+1
$1906	$C8EB	F000			MOVFF	cf_fat16_Fat_Chain_Next_next_cluster_L0, STACK_0
$190A	$C8EC	F001			MOVFF	cf_fat16_Fat_Chain_Next_next_cluster_L0+1, STACK_0+1
$190E	$EC3F	F006			CALL	_div_16x16_u
$1912	$C008	F000			MOVFF	STACK_8, STACK_0
$1916	$C009	F001			MOVFF	STACK_9, STACK_1
$191A	$C000	F028			MOVFF	STACK_0, cf_fat16_fat_offset
$191E	$C001	F029			MOVFF	STACK_0+1, cf_fat16_fat_offset+1
$1922	$C000	F028			MOVFF	STACK_0, cf_fat16_fat_offset
$1926	$C001	F029			MOVFF	STACK_0+1, cf_fat16_fat_offset+1
$192A	$3628	    			RLCF	cf_fat16_fat_offset, 1, 0
$192C	$9028	    			BCF	cf_fat16_fat_offset, 0, 0
$192E	$3629	    			RLCF	cf_fat16_fat_offset+1, 1, 0
$1930	$C8EB	F234			MOVFF	cf_fat16_Fat_Chain_Next_next_cluster_L0, cf_fat16_file_write_cluster
$1934	$C8EC	F235			MOVFF	cf_fat16_Fat_Chain_Next_next_cluster_L0+1, cf_fat16_file_write_cluster+1
$1938	$EC17	F006			CALL	cf_fat16_Set_File_Write_Sector
$193C	$	L_cf_fat16_Fat_Chain_Next_12:
$193C	$0012	    			RETURN
$193E	$	_ByteToStr:
$193E	$C8EC	FFE9			MOVFF	FARG_ByteToStr+1, FSR0L
$1942	$C8ED	FFEA			MOVFF	FARG_ByteToStr+2, FSR0H
$1946	$0E20	    			MOVLW	32
$1948	$6EEE	    			MOVWF	POSTINC0, 0
$194A	$0E20	    			MOVLW	32
$194C	$6EEE	    			MOVWF	POSTINC0, 0
$194E	$0E20	    			MOVLW	32
$1950	$6EEE	    			MOVWF	POSTINC0, 0
$1952	$6AEF	    			CLRF	INDF0, 0
$1954	$0E01	    			MOVLW	1
$1956	$0108	    			MOVLB	8
$1958	$6FEE	    			MOVWF	ByteToStr_len_L0, 1
$195A	$51EB	    			MOVF	FARG_ByteToStr+0, 0, 1
$195C	$0809	    			SUBLW	9
$195E	$A0D8	    			BTFSS	STATUS, C, 0
$1960	$2BEE	    			INCF	ByteToStr_len_L0, 1, 1
$1962	$	L_ByteToStr_0:
$1962	$0108	    			MOVLB	8
$1964	$51EB	    			MOVF	FARG_ByteToStr+0, 0, 1
$1966	$0863	    			SUBLW	99
$1968	$A0D8	    			BTFSS	STATUS, C, 0
$196A	$2BEE	    			INCF	ByteToStr_len_L0, 1, 1
$196C	$	L_ByteToStr_1:
$196C	$6AED	    			CLRF	POSTDEC0, 0
$196E	$	L_ByteToStr_2:
$196E	$0108	    			MOVLB	8
$1970	$51EE	    			MOVF	ByteToStr_len_L0, 0, 1
$1972	$0800	    			SUBLW	0
$1974	$E21E	    			BC	L_ByteToStr_3
$1976	$0E0A	    			MOVLW	10
$1978	$6E04	    			MOVWF	STACK_4, 0
$197A	$C8EB	F000			MOVFF	FARG_ByteToStr+0, STACK_0
$197E	$EC5D	F006			CALL	_div_8x8_u
$1982	$C008	F000			MOVFF	STACK_8, STACK_0
$1986	$C000	FFEF			MOVFF	STACK_0, INDF0
$198A	$50EF	    			MOVF	INDF0, 0, 0
$198C	$0108	    			MOVLB	8
$198E	$5DEB	    			SUBWF	FARG_ByteToStr+0, 0, 1
$1990	$6E00	    			MOVWF	STACK_0, 0
$1992	$6A01	    			CLRF	STACK_0+1, 0
$1994	$0E00	    			MOVLW	0
$1996	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$1998	$0E0A	    			MOVLW	10
$199A	$6E04	    			MOVWF	STACK_4, 0
$199C	$0E00	    			MOVLW	0
$199E	$6E05	    			MOVWF	STACK_4+1, 0
$19A0	$EC6F	F006			CALL	_div_16x16_s
$19A4	$C000	F8EB			MOVFF	STACK_0, FARG_ByteToStr+0
$19A8	$0E30	    			MOVLW	48
$19AA	$26ED	    			ADDWF	POSTDEC0, 1, 0
$19AC	$0108	    			MOVLB	8
$19AE	$07EE	    			DECF	ByteToStr_len_L0, 1, 1
$19B0	$D7DE	    			BRA	L_ByteToStr_2
$19B2	$	L_ByteToStr_3:
$19B2	$0012	    			RETURN
$19B4	$	_Div_8x8_S:
$19B4	$0100	    			MOVLB	0
$19B6	$6A0D	    			CLRF	STACK_13, 0
$19B8	$6A08	    			CLRF	STACK_8, 0
$19BA	$5000	    			MOVF	STACK_0, W, 0
$19BC	$B4D8	    			BTFSC	STATUS, Z, 0
$19BE	$0C00	    			RETLW	0x00
$19C0	$1804	    			XORWF	STACK_4, W, 0
$19C2	$6E0A	    			MOVWF	STACK_10, 0
$19C4	$BE0A	    			BTFSC	STACK_10, 7, 0
$19C6	$1E0D	    			COMF	STACK_13, F, 0
$19C8	$6A0B	    			CLRF	STACK_11, 0
$19CA	$AE04	    			BTFSS	STACK_4, 7, 0
$19CC	$EFEA	F00C			GOTO	$+3
$19D0	$1E04	    			COMF	STACK_4, F, 0
$19D2	$2A04	    			INCF	STACK_4, F, 0
$19D4	$A000	    			BTFSS	STACK_0, 0, 0
$19D6	$EFEF	F00C			GOTO	$+3
$19DA	$1E00	    			COMF	STACK_0, F, 0
$19DC	$2A00	    			INCF	STACK_0, F, 0
$19DE	$5000	    			MOVF	STACK_0, W, 0
$19E0	$1004	    			IORWF	STACK_4, W, 0
$19E2	$6E0A	    			MOVWF	STACK_10, 0
$19E4	$BE0A	    			BTFSC	STACK_10, 7, 0
$19E6	$EF16	F00D			GOTO	$+32
$19EA	$5004	    			MOVF	STACK_4, W, 0
$19EC	$5E08	    			SUBWF	STACK_8, F, 0
$19EE	$3600	    			RLCF	STACK_0, F, 0
$19F0	$3400	    			RLCF	STACK_0, W, 0
$19F2	$3608	    			RLCF	STACK_8, F, 0
$19F4	$5004	    			MOVF	STACK_4, W, 0
$19F6	$2608	    			ADDWF	STACK_8, F, 0
$19F8	$3600	    			RLCF	STACK_0, F, 0
$19FA	$0E06	    			MOVLW	6
$19FC	$6E0C	    			MOVWF	STACK_12, 0
$19FE	$3400	    			RLCF	STACK_0, W, 0
$1A00	$3608	    			RLCF	STACK_8, F, 0
$1A02	$5004	    			MOVF	STACK_4, W, 0
$1A04	$B000	    			BTFSC	STACK_0, 0, 0
$1A06	$5E08	    			SUBWF	STACK_8, F, 0
$1A08	$A000	    			BTFSS	STACK_0, 0, 0
$1A0A	$2608	    			ADDWF	STACK_8, F, 0
$1A0C	$3600	    			RLCF	STACK_0, F, 0
$1A0E	$2E0C	    			DECFSZ	STACK_12, F, 0
$1A10	$EFFF	F00C			GOTO	$-9
$1A14	$A000	    			BTFSS	STACK_0, 0, 0
$1A16	$2608	    			ADDWF	STACK_8, F, 0
$1A18	$B00B	    			BTFSC	STACK_11, 0, 0
$1A1A	$EF28	F00D			GOTO	$+22
$1A1E	$AE0D	    			BTFSS	STACK_13, 7, 0
$1A20	$0C00	    			RETLW	0x00
$1A22	$1E00	    			COMF	STACK_0, F, 0
$1A24	$2A00	    			INCF	STACK_0, F, 0
$1A26	$1E08	    			COMF	STACK_8, F, 0
$1A28	$2A08	    			INCF	STACK_8, F, 0
$1A2A	$0C00	    			RETLW	0x00
$1A2C	$AE04	    			BTFSS	STACK_4, 7, 0
$1A2E	$EF24	F00D			GOTO	$+10
$1A32	$BE00	    			BTFSC	STACK_0, 7, 0
$1A34	$EF21	F00D			GOTO	$+5
$1A38	$5000	    			MOVF	STACK_0, W, 0
$1A3A	$6E08	    			MOVWF	STACK_8, 0
$1A3C	$6A00	    			CLRF	STACK_0, 0
$1A3E	$EF0F	F00D			GOTO	$-14
$1A42	$6A00	    			CLRF	STACK_0, 0
$1A44	$2A00	    			INCF	STACK_0, F, 0
$1A46	$0C00	    			RETLW	0x00
$1A48	$1E00	    			COMF	STACK_0, F, 0
$1A4A	$2A0B	    			INCF	STACK_11, F, 0
$1A4C	$EFF5	F00C			GOTO	$-44
$1A50	$2A08	    			INCF	STACK_8, F, 0
$1A52	$5004	    			MOVF	STACK_4, W, 0
$1A54	$5C08	    			SUBWF	STACK_8, W, 0
$1A56	$A4D8	    			BTFSS	STATUS, Z, 0
$1A58	$EF0F	F00D			GOTO	$-25
$1A5C	$6A08	    			CLRF	STACK_8, 0
$1A5E	$2A00	    			INCF	STACK_0, F, 0
$1A60	$AE00	    			BTFSS	STACK_0, 7, 0
$1A62	$EF0F	F00D			GOTO	$-29
$1A66	$0CFF	    			RETLW	0xFF
$1A68	$0012	    			RETURN
$1A6A	$	_Mul_32x32_FP:
$1A6A	$0100	    			MOVLB	0
$1A6C	$	FPM32:
$1A6C	$6A08	    			CLRF	STACK_8, 0
$1A6E	$6A09	    			CLRF	STACK_9, 0
$1A70	$0E00	    			MOVLW	0x00
$1A72	$6207	    			CPFSEQ	STACK_7, 0
$1A74	$6403	    			CPFSGT	STACK_3, 0
$1A76	$EFBB	F00D			GOTO	MULJPRES032
$1A7A	$	M32BNE0:
$1A7A	$5002	    			MOVF	STACK_2, W, 0
$1A7C	$1806	    			XORWF	STACK_6, W, 0
$1A7E	$6E0A	    			MOVWF	STACK_10, 0
$1A80	$5007	    			MOVF	STACK_7, W, 0
$1A82	$2603	    			ADDWF	STACK_3, F, 0
$1A84	$0E7E	    			MOVLW	126
$1A86	$A0D8	    			BTFSS	STATUS, C, 0
$1A88	$EF4C	F00D			GOTO	MTUN32
$1A8C	$5E03	    			SUBWF	STACK_3, F, 0
$1A8E	$B0D8	    			BTFSC	STATUS, C, 0
$1A90	$EFC0	F00D			GOTO	MULJPSETFOV32
$1A94	$EF50	F00D			GOTO	MOK32
$1A98	$	MTUN32:
$1A98	$5E03	    			SUBWF	STACK_3, F, 0
$1A9A	$A0D8	    			BTFSS	STATUS, C, 0
$1A9C	$EFC5	F00D			GOTO	MULJPSETFUN32
$1AA0	$	MOK32:
$1AA0	$8E02	    			BSF	STACK_2, 7, 0
$1AA2	$8E06	    			BSF	STACK_6, 7, 0
$1AA4	$C002	F00E			MOVFF	STACK_2, STACK_14
$1AA8	$C001	F00B			MOVFF	STACK_1, STACK_11
$1AAC	$C000	F00D			MOVFF	STACK_0, STACK_13
$1AB0	$5000	    			MOVF	STACK_0, W, 0
$1AB2	$0204	    			MULWF	STACK_4, 0
$1AB4	$CFF4	F00C			MOVFF	PRODH, STACK_12
$1AB8	$5001	    			MOVF	STACK_1, W, 0
$1ABA	$0205	    			MULWF	STACK_5, 0
$1ABC	$CFF4	F000			MOVFF	PRODH, STACK_0
$1AC0	$CFF3	F008			MOVFF	PRODL, STACK_8
$1AC4	$0204	    			MULWF	STACK_4, 0
$1AC6	$50F3	    			MOVF	PRODL, W, 0
$1AC8	$260C	    			ADDWF	STACK_12, F, 0
$1ACA	$50F4	    			MOVF	PRODH, W, 0
$1ACC	$2208	    			ADDWFC	STACK_8, F, 0
$1ACE	$0E00	    			MOVLW	0x00
$1AD0	$2200	    			ADDWFC	STACK_0, F, 0
$1AD2	$500D	    			MOVF	STACK_13, W, 0
$1AD4	$0205	    			MULWF	STACK_5, 0
$1AD6	$50F3	    			MOVF	PRODL, W, 0
$1AD8	$260C	    			ADDWF	STACK_12, F, 0
$1ADA	$50F4	    			MOVF	PRODH, W, 0
$1ADC	$2208	    			ADDWFC	STACK_8, F, 0
$1ADE	$0E00	    			MOVLW	0x00
$1AE0	$2200	    			ADDWFC	STACK_0, F, 0
$1AE2	$5002	    			MOVF	STACK_2, W, 0
$1AE4	$0204	    			MULWF	STACK_4, 0
$1AE6	$50F3	    			MOVF	PRODL, W, 0
$1AE8	$2608	    			ADDWF	STACK_8, F, 0
$1AEA	$50F4	    			MOVF	PRODH, W, 0
$1AEC	$2200	    			ADDWFC	STACK_0, F, 0
$1AEE	$5002	    			MOVF	STACK_2, W, 0
$1AF0	$0205	    			MULWF	STACK_5, 0
$1AF2	$6A01	    			CLRF	STACK_1, 0
$1AF4	$0E00	    			MOVLW	0x00
$1AF6	$2201	    			ADDWFC	STACK_1, F, 0
$1AF8	$50F3	    			MOVF	PRODL, W, 0
$1AFA	$2600	    			ADDWF	STACK_0, F, 0
$1AFC	$50F4	    			MOVF	PRODH, W, 0
$1AFE	$2201	    			ADDWFC	STACK_1, F, 0
$1B00	$500D	    			MOVF	STACK_13, W, 0
$1B02	$0206	    			MULWF	STACK_6, 0
$1B04	$50F3	    			MOVF	PRODL, W, 0
$1B06	$2608	    			ADDWF	STACK_8, F, 0
$1B08	$50F4	    			MOVF	PRODH, W, 0
$1B0A	$2200	    			ADDWFC	STACK_0, F, 0
$1B0C	$6A02	    			CLRF	STACK_2, 0
$1B0E	$0E00	    			MOVLW	0x00
$1B10	$2201	    			ADDWFC	STACK_1, F, 0
$1B12	$2202	    			ADDWFC	STACK_2, F, 0
$1B14	$500B	    			MOVF	STACK_11, W, 0
$1B16	$0206	    			MULWF	STACK_6, 0
$1B18	$50F3	    			MOVF	PRODL, W, 0
$1B1A	$2600	    			ADDWF	STACK_0, F, 0
$1B1C	$50F4	    			MOVF	PRODH, W, 0
$1B1E	$2201	    			ADDWFC	STACK_1, F, 0
$1B20	$0E00	    			MOVLW	0x00
$1B22	$2202	    			ADDWFC	STACK_2, F, 0
$1B24	$500E	    			MOVF	STACK_14, W, 0
$1B26	$0206	    			MULWF	STACK_6, 0
$1B28	$50F3	    			MOVF	PRODL, W, 0
$1B2A	$2601	    			ADDWF	STACK_1, F, 0
$1B2C	$50F4	    			MOVF	PRODH, W, 0
$1B2E	$2202	    			ADDWFC	STACK_2, F, 0
$1B30	$BE02	    			BTFSC	STACK_2, 7, 0
$1B32	$EFA3	F00D			GOTO	MROUND32
$1B36	$3608	    			RLCF	STACK_8, F, 0
$1B38	$3600	    			RLCF	STACK_0, F, 0
$1B3A	$3601	    			RLCF	STACK_1, F, 0
$1B3C	$3602	    			RLCF	STACK_2, F, 0
$1B3E	$0603	    			DECF	STACK_3, F, 0
$1B40	$B4D8	    			BTFSC	STATUS, Z, 0
$1B42	$EFC5	F00D			GOTO	MULJPSETFUN32
$1B46	$	MROUND32:
$1B46	$EFB6	F00D			GOTO	MUL32OK
$1B4A	$80D8	    			BSF	STATUS, C, 0
$1B4C	$0E80	    			MOVLW	0x80
$1B4E	$6408	    			CPFSGT	STACK_8, 0
$1B50	$3000	    			RRCF	STACK_0, W, 0
$1B52	$0E00	    			MOVLW	0x00
$1B54	$2200	    			ADDWFC	STACK_0, F, 0
$1B56	$2201	    			ADDWFC	STACK_1, F, 0
$1B58	$2202	    			ADDWFC	STACK_2, F, 0
$1B5A	$A0D8	    			BTFSS	STATUS, C, 0
$1B5C	$EFB6	F00D			GOTO	MUL32OK
$1B60	$3202	    			RRCF	STACK_2, F, 0
$1B62	$3201	    			RRCF	STACK_1, F, 0
$1B64	$3200	    			RRCF	STACK_0, F, 0
$1B66	$4A03	    			INFSNZ	STACK_3, F, 0
$1B68	$EFC0	F00D			GOTO	MULJPSETFOV32
$1B6C	$	MUL32OK:
$1B6C	$AE0A	    			BTFSS	STACK_10, 7, 0
$1B6E	$9E02	    			BCF	STACK_2, 7, 0
$1B70	$0E00	    			MOVLW	0
$1B72	$EFC8	F00D			GOTO	MULEEE
$1B76	$	MULJPRES032:
$1B76	$0E01	    			MOVLW	0x01
$1B78	$EC5F	F002			CALL	_RES032
$1B7C	$EFC8	F00D			GOTO	MULEEE
$1B80	$	MULJPSETFOV32:
$1B80	$0E02	    			MOVLW	0x02
$1B82	$EC52	F002			CALL	_SETFOV32
$1B86	$EFC8	F00D			GOTO	MULEEE
$1B8A	$	MULJPSETFUN32:
$1B8A	$0E04	    			MOVLW	0x04
$1B8C	$EC3F	F002			CALL	_SETFUN32
$1B90	$	MULEEE:
$1B90	$0012	    			RETURN
$1B92	$	_SETFDZ32:
$1B92	$0100	    			MOVLB	0
$1B94	$6A0B	    			CLRF	STACK_11, 0
$1B96	$860B	    			BSF	STACK_11, 3, 0
$1B98	$0EFF	    			MOVLW	0xFF
$1B9A	$0012	    			RETURN
$1B9C	$	_SETIOV3224:
$1B9C	$0100	    			MOVLB	0
$1B9E	$800B	    			BSF	STACK_11, 0, 0
$1BA0	$AE0B	    			BTFSS	STACK_11, 7, 0
$1BA2	$EFDB	F00D			GOTO	SETIOV3224EEE
$1BA6	$6A02	    			CLRF	STACK_2, 0
$1BA8	$AE0A	    			BTFSS	STACK_10, 7, 0
$1BAA	$0EFF	    			MOVLW	0xFF
$1BAC	$6E02	    			MOVWF	STACK_2, 0
$1BAE	$6E01	    			MOVWF	STACK_1, 0
$1BB0	$6E00	    			MOVWF	STACK_0, 0
$1BB2	$360A	    			RLCF	STACK_10, F, 0
$1BB4	$3202	    			RRCF	STACK_2, F, 0
$1BB6	$	SETIOV3224EEE:
$1BB6	$0EFF	    			MOVLW	0xFF
$1BB8	$0012	    			RETURN
$1BBA	$	_Add_32x32_FP:
$1BBA	$0100	    			MOVLB	0
$1BBC	$	FPA32:
$1BBC	$5002	    			MOVF	STACK_2, W, 0
$1BBE	$1806	    			XORWF	STACK_6, W, 0
$1BC0	$6E0E	    			MOVWF	STACK_14, 0
$1BC2	$6A08	    			CLRF	STACK_8, 0
$1BC4	$6A09	    			CLRF	STACK_9, 0
$1BC6	$6A0B	    			CLRF	STACK_11, 0
$1BC8	$5003	    			MOVF	STACK_3, W, 0
$1BCA	$6407	    			CPFSGT	STACK_7, 0
$1BCC	$EFD1	F00E			GOTO	USEA32
$1BD0	$	USEB32:
$1BD0	$5006	    			MOVF	STACK_6, W, 0
$1BD2	$6E0A	    			MOVWF	STACK_10, 0
$1BD4	$8E06	    			BSF	STACK_6, 7, 0
$1BD6	$8E02	    			BSF	STACK_2, 7, 0
$1BD8	$5003	    			MOVF	STACK_3, W, 0
$1BDA	$6E0B	    			MOVWF	STACK_11, 0
$1BDC	$5007	    			MOVF	STACK_7, W, 0
$1BDE	$6E03	    			MOVWF	STACK_3, 0
$1BE0	$0E00	    			MOVLW	0x00
$1BE2	$640B	    			CPFSGT	STACK_11, 0
$1BE4	$EF21	F00E			GOTO	BRETURN32
$1BE8	$500B	    			MOVF	STACK_11, W, 0
$1BEA	$5E07	    			SUBWF	STACK_7, F, 0
$1BEC	$B4D8	    			BTFSC	STATUS, Z, 0
$1BEE	$EFC2	F00E			GOTO	BLIGNED32
$1BF2	$0E07	    			MOVLW	7
$1BF4	$6407	    			CPFSGT	STACK_7, 0
$1BF6	$EF90	F00E			GOTO	BNIB32
$1BFA	$5E07	    			SUBWF	STACK_7, F, 0
$1BFC	$C000	F008			MOVFF	STACK_0, STACK_8
$1C00	$C001	F000			MOVFF	STACK_1, STACK_0
$1C04	$C002	F001			MOVFF	STACK_2, STACK_1
$1C08	$6A02	    			CLRF	STACK_2, 0
$1C0A	$4E07	    			DCFSNZ	STACK_7, F, 0
$1C0C	$EFC2	F00E			GOTO	BLIGNED32
$1C10	$6407	    			CPFSGT	STACK_7, 0
$1C12	$EF65	F00E			GOTO	BNIB32A
$1C16	$5E07	    			SUBWF	STACK_7, F, 0
$1C18	$C000	F008			MOVFF	STACK_0, STACK_8
$1C1C	$C001	F000			MOVFF	STACK_1, STACK_0
$1C20	$6A01	    			CLRF	STACK_1, 0
$1C22	$4E07	    			DCFSNZ	STACK_7, F, 0
$1C24	$EFC2	F00E			GOTO	BLIGNED32
$1C28	$6407	    			CPFSGT	STACK_7, 0
$1C2A	$EF43	F00E			GOTO	BNIB32B
$1C2E	$5E07	    			SUBWF	STACK_7, F, 0
$1C30	$C000	F008			MOVFF	STACK_0, STACK_8
$1C34	$6A00	    			CLRF	STACK_0, 0
$1C36	$4E07	    			DCFSNZ	STACK_7, F, 0
$1C38	$EFC2	F00E			GOTO	BLIGNED32
$1C3C	$6407	    			CPFSGT	STACK_7, 0
$1C3E	$EF2A	F00E			GOTO	BNIB32C
$1C42	$	BRETURN32:
$1C42	$C00A	F002			MOVFF	STACK_10, STACK_2
$1C46	$C005	F001			MOVFF	STACK_5, STACK_1
$1C4A	$C004	F000			MOVFF	STACK_4, STACK_0
$1C4E	$6A08	    			CLRF	STACK_8, 0
$1C50	$EFEE	F00F			GOTO	ADDEOK
$1C54	$	BNIB32C:
$1C54	$0E03	    			MOVLW	3
$1C56	$6407	    			CPFSGT	STACK_7, 0
$1C58	$EF35	F00E			GOTO	BLOOP32C
$1C5C	$5E07	    			SUBWF	STACK_7, F, 0
$1C5E	$3808	    			SWAPF	STACK_8, W, 0
$1C60	$0B0F	    			ANDLW	0x0F
$1C62	$6E08	    			MOVWF	STACK_8, 0
$1C64	$4E07	    			DCFSNZ	STACK_7, F, 0
$1C66	$EFC2	F00E			GOTO	BLIGNED32
$1C6A	$	BLOOP32C:
$1C6A	$90D8	    			BCF	STATUS, C, 0
$1C6C	$3208	    			RRCF	STACK_8, F, 0
$1C6E	$4E07	    			DCFSNZ	STACK_7, F, 0
$1C70	$EFC2	F00E			GOTO	BLIGNED32
$1C74	$90D8	    			BCF	STATUS, C, 0
$1C76	$3208	    			RRCF	STACK_8, F, 0
$1C78	$4E07	    			DCFSNZ	STACK_7, F, 0
$1C7A	$EFC2	F00E			GOTO	BLIGNED32
$1C7E	$90D8	    			BCF	STATUS, C, 0
$1C80	$3208	    			RRCF	STACK_8, F, 0
$1C82	$EFC2	F00E			GOTO	BLIGNED32
$1C86	$	BNIB32B:
$1C86	$0E03	    			MOVLW	3
$1C88	$6407	    			CPFSGT	STACK_7, 0
$1C8A	$EF54	F00E			GOTO	BLOOP32B
$1C8E	$5E07	    			SUBWF	STACK_7, F, 0
$1C90	$3808	    			SWAPF	STACK_8, W, 0
$1C92	$0B0F	    			ANDLW	0x0F
$1C94	$6E08	    			MOVWF	STACK_8, 0
$1C96	$3800	    			SWAPF	STACK_0, W, 0
$1C98	$0BF0	    			ANDLW	0xF0
$1C9A	$2608	    			ADDWF	STACK_8, F, 0
$1C9C	$3800	    			SWAPF	STACK_0, W, 0
$1C9E	$0B0F	    			ANDLW	0x0F
$1CA0	$6E00	    			MOVWF	STACK_0, 0
$1CA2	$4E07	    			DCFSNZ	STACK_7, F, 0
$1CA4	$EFC2	F00E			GOTO	BLIGNED32
$1CA8	$	BLOOP32B:
$1CA8	$90D8	    			BCF	STATUS, C, 0
$1CAA	$3200	    			RRCF	STACK_0, F, 0
$1CAC	$3208	    			RRCF	STACK_8, F, 0
$1CAE	$4E07	    			DCFSNZ	STACK_7, F, 0
$1CB0	$EFC2	F00E			GOTO	BLIGNED32
$1CB4	$90D8	    			BCF	STATUS, C, 0
$1CB6	$3200	    			RRCF	STACK_0, F, 0
$1CB8	$3208	    			RRCF	STACK_8, F, 0
$1CBA	$4E07	    			DCFSNZ	STACK_7, F, 0
$1CBC	$EFC2	F00E			GOTO	BLIGNED32
$1CC0	$90D8	    			BCF	STATUS, C, 0
$1CC2	$3200	    			RRCF	STACK_0, F, 0
$1CC4	$3208	    			RRCF	STACK_8, F, 0
$1CC6	$EFC2	F00E			GOTO	BLIGNED32
$1CCA	$	BNIB32A:
$1CCA	$0E03	    			MOVLW	3
$1CCC	$6407	    			CPFSGT	STACK_7, 0
$1CCE	$EF7C	F00E			GOTO	BLOOP32A
$1CD2	$5E07	    			SUBWF	STACK_7, F, 0
$1CD4	$3808	    			SWAPF	STACK_8, W, 0
$1CD6	$0B0F	    			ANDLW	0x0F
$1CD8	$6E08	    			MOVWF	STACK_8, 0
$1CDA	$3800	    			SWAPF	STACK_0, W, 0
$1CDC	$0BF0	    			ANDLW	0xF0
$1CDE	$2608	    			ADDWF	STACK_8, F, 0
$1CE0	$3800	    			SWAPF	STACK_0, W, 0
$1CE2	$0B0F	    			ANDLW	0x0F
$1CE4	$6E00	    			MOVWF	STACK_0, 0
$1CE6	$3801	    			SWAPF	STACK_1, W, 0
$1CE8	$0BF0	    			ANDLW	0xF0
$1CEA	$2600	    			ADDWF	STACK_0, F, 0
$1CEC	$3801	    			SWAPF	STACK_1, W, 0
$1CEE	$0B0F	    			ANDLW	0x0F
$1CF0	$6E01	    			MOVWF	STACK_1, 0
$1CF2	$4E07	    			DCFSNZ	STACK_7, F, 0
$1CF4	$EFC2	F00E			GOTO	BLIGNED32
$1CF8	$	BLOOP32A:
$1CF8	$90D8	    			BCF	STATUS, C, 0
$1CFA	$3201	    			RRCF	STACK_1, F, 0
$1CFC	$3200	    			RRCF	STACK_0, F, 0
$1CFE	$3208	    			RRCF	STACK_8, F, 0
$1D00	$4E07	    			DCFSNZ	STACK_7, F, 0
$1D02	$EFC2	F00E			GOTO	BLIGNED32
$1D06	$90D8	    			BCF	STATUS, C, 0
$1D08	$3201	    			RRCF	STACK_1, F, 0
$1D0A	$3200	    			RRCF	STACK_0, F, 0
$1D0C	$3208	    			RRCF	STACK_8, F, 0
$1D0E	$4E07	    			DCFSNZ	STACK_7, F, 0
$1D10	$EFC2	F00E			GOTO	BLIGNED32
$1D14	$90D8	    			BCF	STATUS, C, 0
$1D16	$3201	    			RRCF	STACK_1, F, 0
$1D18	$3200	    			RRCF	STACK_0, F, 0
$1D1A	$3208	    			RRCF	STACK_8, F, 0
$1D1C	$EFC2	F00E			GOTO	BLIGNED32
$1D20	$	BNIB32:
$1D20	$0E03	    			MOVLW	3
$1D22	$6407	    			CPFSGT	STACK_7, 0
$1D24	$EFAD	F00E			GOTO	BLOOP32
$1D28	$5E07	    			SUBWF	STACK_7, F, 0
$1D2A	$3808	    			SWAPF	STACK_8, W, 0
$1D2C	$0B0F	    			ANDLW	0x0F
$1D2E	$6E08	    			MOVWF	STACK_8, 0
$1D30	$3800	    			SWAPF	STACK_0, W, 0
$1D32	$0BF0	    			ANDLW	0xF0
$1D34	$2608	    			ADDWF	STACK_8, F, 0
$1D36	$3800	    			SWAPF	STACK_0, W, 0
$1D38	$0B0F	    			ANDLW	0x0F
$1D3A	$6E00	    			MOVWF	STACK_0, 0
$1D3C	$3801	    			SWAPF	STACK_1, W, 0
$1D3E	$0BF0	    			ANDLW	0xF0
$1D40	$2600	    			ADDWF	STACK_0, F, 0
$1D42	$3801	    			SWAPF	STACK_1, W, 0
$1D44	$0B0F	    			ANDLW	0x0F
$1D46	$6E01	    			MOVWF	STACK_1, 0
$1D48	$3802	    			SWAPF	STACK_2, W, 0
$1D4A	$0BF0	    			ANDLW	0xF0
$1D4C	$2601	    			ADDWF	STACK_1, F, 0
$1D4E	$3802	    			SWAPF	STACK_2, W, 0
$1D50	$0B0F	    			ANDLW	0x0F
$1D52	$6E02	    			MOVWF	STACK_2, 0
$1D54	$4E07	    			DCFSNZ	STACK_7, F, 0
$1D56	$EFC2	F00E			GOTO	BLIGNED32
$1D5A	$	BLOOP32:
$1D5A	$90D8	    			BCF	STATUS, C, 0
$1D5C	$3202	    			RRCF	STACK_2, F, 0
$1D5E	$3201	    			RRCF	STACK_1, F, 0
$1D60	$3200	    			RRCF	STACK_0, F, 0
$1D62	$3208	    			RRCF	STACK_8, F, 0
$1D64	$4E07	    			DCFSNZ	STACK_7, F, 0
$1D66	$EFC2	F00E			GOTO	BLIGNED32
$1D6A	$90D8	    			BCF	STATUS, C, 0
$1D6C	$3202	    			RRCF	STACK_2, F, 0
$1D6E	$3201	    			RRCF	STACK_1, F, 0
$1D70	$3200	    			RRCF	STACK_0, F, 0
$1D72	$3208	    			RRCF	STACK_8, F, 0
$1D74	$4E07	    			DCFSNZ	STACK_7, F, 0
$1D76	$EFC2	F00E			GOTO	BLIGNED32
$1D7A	$90D8	    			BCF	STATUS, C, 0
$1D7C	$3202	    			RRCF	STACK_2, F, 0
$1D7E	$3201	    			RRCF	STACK_1, F, 0
$1D80	$3200	    			RRCF	STACK_0, F, 0
$1D82	$3208	    			RRCF	STACK_8, F, 0
$1D84	$	BLIGNED32:
$1D84	$6A09	    			CLRF	STACK_9, 0
$1D86	$0E00	    			MOVLW	0x00
$1D88	$AE0E	    			BTFSS	STACK_14, 7, 0
$1D8A	$EFB6	F00F			GOTO	AOK32
$1D8E	$1E08	    			COMF	STACK_8, F, 0
$1D90	$1E00	    			COMF	STACK_0, F, 0
$1D92	$1E01	    			COMF	STACK_1, F, 0
$1D94	$1E02	    			COMF	STACK_2, F, 0
$1D96	$2A08	    			INCF	STACK_8, F, 0
$1D98	$2200	    			ADDWFC	STACK_0, F, 0
$1D9A	$2201	    			ADDWFC	STACK_1, F, 0
$1D9C	$2202	    			ADDWFC	STACK_2, F, 0
$1D9E	$EFB6	F00F			GOTO	AOK32
$1DA2	$	USEA32:
$1DA2	$5007	    			MOVF	STACK_7, W, 0
$1DA4	$A4D8	    			BTFSS	STATUS, Z, 0
$1DA6	$EFD7	F00E			GOTO	BNE032
$1DAA	$EFEE	F00F			GOTO	ADDEOK
$1DAE	$	BNE032:
$1DAE	$6A09	    			CLRF	STACK_9, 0
$1DB0	$C002	F00A			MOVFF	STACK_2, STACK_10
$1DB4	$8E02	    			BSF	STACK_2, 7, 0
$1DB6	$8E06	    			BSF	STACK_6, 7, 0
$1DB8	$5007	    			MOVF	STACK_7, W, 0
$1DBA	$5C03	    			SUBWF	STACK_3, W, 0
$1DBC	$6E07	    			MOVWF	STACK_7, 0
$1DBE	$B4D8	    			BTFSC	STATUS, Z, 0
$1DC0	$EFA9	F00F			GOTO	ALIGNED32
$1DC4	$0E07	    			MOVLW	7
$1DC6	$6407	    			CPFSGT	STACK_7, 0
$1DC8	$EF77	F00F			GOTO	ANIB32
$1DCC	$5E07	    			SUBWF	STACK_7, F, 0
$1DCE	$5004	    			MOVF	STACK_4, W, 0
$1DD0	$6E09	    			MOVWF	STACK_9, 0
$1DD2	$5005	    			MOVF	STACK_5, W, 0
$1DD4	$6E04	    			MOVWF	STACK_4, 0
$1DD6	$5006	    			MOVF	STACK_6, W, 0
$1DD8	$6E05	    			MOVWF	STACK_5, 0
$1DDA	$6A06	    			CLRF	STACK_6, 0
$1DDC	$4E07	    			DCFSNZ	STACK_7, F, 0
$1DDE	$EFA9	F00F			GOTO	ALIGNED32
$1DE2	$0E07	    			MOVLW	7
$1DE4	$6407	    			CPFSGT	STACK_7, 0
$1DE6	$EF4C	F00F			GOTO	ANIB32A
$1DEA	$5E07	    			SUBWF	STACK_7, F, 0
$1DEC	$5004	    			MOVF	STACK_4, W, 0
$1DEE	$6E09	    			MOVWF	STACK_9, 0
$1DF0	$5005	    			MOVF	STACK_5, W, 0
$1DF2	$6E04	    			MOVWF	STACK_4, 0
$1DF4	$6A05	    			CLRF	STACK_5, 0
$1DF6	$4E07	    			DCFSNZ	STACK_7, F, 0
$1DF8	$EFA9	F00F			GOTO	ALIGNED32
$1DFC	$0E07	    			MOVLW	7
$1DFE	$6407	    			CPFSGT	STACK_7, 0
$1E00	$EF2A	F00F			GOTO	ANIB32B
$1E04	$5E07	    			SUBWF	STACK_7, F, 0
$1E06	$5004	    			MOVF	STACK_4, W, 0
$1E08	$6E09	    			MOVWF	STACK_9, 0
$1E0A	$6A04	    			CLRF	STACK_4, 0
$1E0C	$4E07	    			DCFSNZ	STACK_7, F, 0
$1E0E	$EFA9	F00F			GOTO	ALIGNED32
$1E12	$0E07	    			MOVLW	7
$1E14	$6407	    			CPFSGT	STACK_7, 0
$1E16	$EF11	F00F			GOTO	ANIB32C
$1E1A	$C00A	F002			MOVFF	STACK_10, STACK_2
$1E1E	$EFEE	F00F			GOTO	ADDEOK
$1E22	$	ANIB32C:
$1E22	$0E03	    			MOVLW	3
$1E24	$6407	    			CPFSGT	STACK_7, 0
$1E26	$EF1C	F00F			GOTO	ALOOP32C
$1E2A	$5E07	    			SUBWF	STACK_7, F, 0
$1E2C	$3809	    			SWAPF	STACK_9, W, 0
$1E2E	$0B0F	    			ANDLW	0x0F
$1E30	$6E09	    			MOVWF	STACK_9, 0
$1E32	$4E07	    			DCFSNZ	STACK_7, F, 0
$1E34	$EFA9	F00F			GOTO	ALIGNED32
$1E38	$	ALOOP32C:
$1E38	$90D8	    			BCF	STATUS, C, 0
$1E3A	$3209	    			RRCF	STACK_9, F, 0
$1E3C	$4E07	    			DCFSNZ	STACK_7, F, 0
$1E3E	$EFA9	F00F			GOTO	ALIGNED32
$1E42	$90D8	    			BCF	STATUS, C, 0
$1E44	$3209	    			RRCF	STACK_9, F, 0
$1E46	$4E07	    			DCFSNZ	STACK_7, F, 0
$1E48	$EFA9	F00F			GOTO	ALIGNED32
$1E4C	$90D8	    			BCF	STATUS, C, 0
$1E4E	$3209	    			RRCF	STACK_9, F, 0
$1E50	$EFA9	F00F			GOTO	ALIGNED32
$1E54	$	ANIB32B:
$1E54	$0E03	    			MOVLW	3
$1E56	$6407	    			CPFSGT	STACK_7, 0
$1E58	$EF3B	F00F			GOTO	ALOOP32B
$1E5C	$5E07	    			SUBWF	STACK_7, F, 0
$1E5E	$3809	    			SWAPF	STACK_9, W, 0
$1E60	$0B0F	    			ANDLW	0x0F
$1E62	$6E09	    			MOVWF	STACK_9, 0
$1E64	$3804	    			SWAPF	STACK_4, W, 0
$1E66	$0BF0	    			ANDLW	0xF0
$1E68	$2609	    			ADDWF	STACK_9, F, 0
$1E6A	$3804	    			SWAPF	STACK_4, W, 0
$1E6C	$0B0F	    			ANDLW	0x0F
$1E6E	$6E04	    			MOVWF	STACK_4, 0
$1E70	$4E07	    			DCFSNZ	STACK_7, F, 0
$1E72	$EFA9	F00F			GOTO	ALIGNED32
$1E76	$	ALOOP32B:
$1E76	$90D8	    			BCF	STATUS, C, 0
$1E78	$3204	    			RRCF	STACK_4, F, 0
$1E7A	$3209	    			RRCF	STACK_9, F, 0
$1E7C	$4E07	    			DCFSNZ	STACK_7, F, 0
$1E7E	$EFA9	F00F			GOTO	ALIGNED32
$1E82	$90D8	    			BCF	STATUS, C, 0
$1E84	$3204	    			RRCF	STACK_4, F, 0
$1E86	$3209	    			RRCF	STACK_9, F, 0
$1E88	$4E07	    			DCFSNZ	STACK_7, F, 0
$1E8A	$EFA9	F00F			GOTO	ALIGNED32
$1E8E	$90D8	    			BCF	STATUS, C, 0
$1E90	$3204	    			RRCF	STACK_4, F, 0
$1E92	$3209	    			RRCF	STACK_9, F, 0
$1E94	$EFA9	F00F			GOTO	ALIGNED32
$1E98	$	ANIB32A:
$1E98	$0E03	    			MOVLW	3
$1E9A	$6407	    			CPFSGT	STACK_7, 0
$1E9C	$EF63	F00F			GOTO	ALOOP32A
$1EA0	$5E07	    			SUBWF	STACK_7, F, 0
$1EA2	$3809	    			SWAPF	STACK_9, W, 0
$1EA4	$0B0F	    			ANDLW	0x0F
$1EA6	$6E09	    			MOVWF	STACK_9, 0
$1EA8	$3804	    			SWAPF	STACK_4, W, 0
$1EAA	$0BF0	    			ANDLW	0xF0
$1EAC	$2609	    			ADDWF	STACK_9, F, 0
$1EAE	$3804	    			SWAPF	STACK_4, W, 0
$1EB0	$0B0F	    			ANDLW	0x0F
$1EB2	$6E04	    			MOVWF	STACK_4, 0
$1EB4	$3805	    			SWAPF	STACK_5, W, 0
$1EB6	$0BF0	    			ANDLW	0xF0
$1EB8	$2604	    			ADDWF	STACK_4, F, 0
$1EBA	$3805	    			SWAPF	STACK_5, W, 0
$1EBC	$0B0F	    			ANDLW	0x0F
$1EBE	$6E05	    			MOVWF	STACK_5, 0
$1EC0	$4E07	    			DCFSNZ	STACK_7, F, 0
$1EC2	$EFA9	F00F			GOTO	ALIGNED32
$1EC6	$	ALOOP32A:
$1EC6	$90D8	    			BCF	STATUS, C, 0
$1EC8	$3205	    			RRCF	STACK_5, F, 0
$1ECA	$3204	    			RRCF	STACK_4, F, 0
$1ECC	$3209	    			RRCF	STACK_9, F, 0
$1ECE	$4E07	    			DCFSNZ	STACK_7, F, 0
$1ED0	$EFA9	F00F			GOTO	ALIGNED32
$1ED4	$90D8	    			BCF	STATUS, C, 0
$1ED6	$3205	    			RRCF	STACK_5, F, 0
$1ED8	$3204	    			RRCF	STACK_4, F, 0
$1EDA	$3209	    			RRCF	STACK_9, F, 0
$1EDC	$4E07	    			DCFSNZ	STACK_7, F, 0
$1EDE	$EFA9	F00F			GOTO	ALIGNED32
$1EE2	$90D8	    			BCF	STATUS, C, 0
$1EE4	$3205	    			RRCF	STACK_5, F, 0
$1EE6	$3204	    			RRCF	STACK_4, F, 0
$1EE8	$3209	    			RRCF	STACK_9, F, 0
$1EEA	$EFA9	F00F			GOTO	ALIGNED32
$1EEE	$	ANIB32:
$1EEE	$0E03	    			MOVLW	3
$1EF0	$6407	    			CPFSGT	STACK_7, 0
$1EF2	$EF94	F00F			GOTO	ALOOP32
$1EF6	$5E07	    			SUBWF	STACK_7, F, 0
$1EF8	$3809	    			SWAPF	STACK_9, W, 0
$1EFA	$0B0F	    			ANDLW	0x0F
$1EFC	$6E09	    			MOVWF	STACK_9, 0
$1EFE	$3804	    			SWAPF	STACK_4, W, 0
$1F00	$0BF0	    			ANDLW	0xF0
$1F02	$2609	    			ADDWF	STACK_9, F, 0
$1F04	$3804	    			SWAPF	STACK_4, W, 0
$1F06	$0B0F	    			ANDLW	0x0F
$1F08	$6E04	    			MOVWF	STACK_4, 0
$1F0A	$3805	    			SWAPF	STACK_5, W, 0
$1F0C	$0BF0	    			ANDLW	0xF0
$1F0E	$2604	    			ADDWF	STACK_4, F, 0
$1F10	$3805	    			SWAPF	STACK_5, W, 0
$1F12	$0B0F	    			ANDLW	0x0F
$1F14	$6E05	    			MOVWF	STACK_5, 0
$1F16	$3806	    			SWAPF	STACK_6, W, 0
$1F18	$0BF0	    			ANDLW	0xF0
$1F1A	$2605	    			ADDWF	STACK_5, F, 0
$1F1C	$3806	    			SWAPF	STACK_6, W, 0
$1F1E	$0B0F	    			ANDLW	0x0F
$1F20	$6E06	    			MOVWF	STACK_6, 0
$1F22	$4E07	    			DCFSNZ	STACK_7, F, 0
$1F24	$EFA9	F00F			GOTO	ALIGNED32
$1F28	$	ALOOP32:
$1F28	$90D8	    			BCF	STATUS, C, 0
$1F2A	$3206	    			RRCF	STACK_6, F, 0
$1F2C	$3205	    			RRCF	STACK_5, F, 0
$1F2E	$3204	    			RRCF	STACK_4, F, 0
$1F30	$3209	    			RRCF	STACK_9, F, 0
$1F32	$4E07	    			DCFSNZ	STACK_7, F, 0
$1F34	$EFA9	F00F			GOTO	ALIGNED32
$1F38	$90D8	    			BCF	STATUS, C, 0
$1F3A	$3206	    			RRCF	STACK_6, F, 0
$1F3C	$3205	    			RRCF	STACK_5, F, 0
$1F3E	$3204	    			RRCF	STACK_4, F, 0
$1F40	$3209	    			RRCF	STACK_9, F, 0
$1F42	$4E07	    			DCFSNZ	STACK_7, F, 0
$1F44	$EFA9	F00F			GOTO	ALIGNED32
$1F48	$90D8	    			BCF	STATUS, C, 0
$1F4A	$3206	    			RRCF	STACK_6, F, 0
$1F4C	$3205	    			RRCF	STACK_5, F, 0
$1F4E	$3204	    			RRCF	STACK_4, F, 0
$1F50	$3209	    			RRCF	STACK_9, F, 0
$1F52	$	ALIGNED32:
$1F52	$6A08	    			CLRF	STACK_8, 0
$1F54	$0E00	    			MOVLW	0x00
$1F56	$AE0E	    			BTFSS	STACK_14, 7, 0
$1F58	$EFB6	F00F			GOTO	AOK32
$1F5C	$1E09	    			COMF	STACK_9, F, 0
$1F5E	$1E04	    			COMF	STACK_4, F, 0
$1F60	$1E05	    			COMF	STACK_5, F, 0
$1F62	$1E06	    			COMF	STACK_6, F, 0
$1F64	$2A09	    			INCF	STACK_9, F, 0
$1F66	$2204	    			ADDWFC	STACK_4, F, 0
$1F68	$2205	    			ADDWFC	STACK_5, F, 0
$1F6A	$2206	    			ADDWFC	STACK_6, F, 0
$1F6C	$	AOK32:
$1F6C	$5009	    			MOVF	STACK_9, W, 0
$1F6E	$2608	    			ADDWF	STACK_8, F, 0
$1F70	$5004	    			MOVF	STACK_4, W, 0
$1F72	$2200	    			ADDWFC	STACK_0, F, 0
$1F74	$5005	    			MOVF	STACK_5, W, 0
$1F76	$2201	    			ADDWFC	STACK_1, F, 0
$1F78	$5006	    			MOVF	STACK_6, W, 0
$1F7A	$2202	    			ADDWFC	STACK_2, F, 0
$1F7C	$BE0E	    			BTFSC	STACK_14, 7, 0
$1F7E	$EFCD	F00F			GOTO	ACOMP32
$1F82	$A0D8	    			BTFSS	STATUS, C, 0
$1F84	$EFDC	F00F			GOTO	ADDJPNRMRND4032
$1F88	$3202	    			RRCF	STACK_2, F, 0
$1F8A	$3201	    			RRCF	STACK_1, F, 0
$1F8C	$3200	    			RRCF	STACK_0, F, 0
$1F8E	$3208	    			RRCF	STACK_8, F, 0
$1F90	$3E03	    			INCFSZ	STACK_3, F, 0
$1F92	$EFDC	F00F			GOTO	ADDJPNRMRND4032
$1F96	$EFE8	F00F			GOTO	ADDJPSETFOV32
$1F9A	$	ACOMP32:
$1F9A	$B0D8	    			BTFSC	STATUS, C, 0
$1F9C	$EFE2	F00F			GOTO	ADDJPNRM4032
$1FA0	$0E00	    			MOVLW	0x00
$1FA2	$1E08	    			COMF	STACK_8, F, 0
$1FA4	$1E00	    			COMF	STACK_0, F, 0
$1FA6	$1E01	    			COMF	STACK_1, F, 0
$1FA8	$1E02	    			COMF	STACK_2, F, 0
$1FAA	$2A08	    			INCF	STACK_8, F, 0
$1FAC	$2200	    			ADDWFC	STACK_0, F, 0
$1FAE	$2201	    			ADDWFC	STACK_1, F, 0
$1FB0	$2202	    			ADDWFC	STACK_2, F, 0
$1FB2	$7E0A	    			BTG	STACK_10, 7, 0
$1FB4	$EFE2	F00F			GOTO	ADDJPNRM4032
$1FB8	$	ADDJPNRMRND4032:
$1FB8	$0E01	    			MOVLW	0x01
$1FBA	$6E0C	    			MOVWF	STACK_12, 0
$1FBC	$ECD4	F006			CALL	_NRM4032
$1FC0	$EFF0	F00F			GOTO	ADDEEE
$1FC4	$	ADDJPNRM4032:
$1FC4	$0E02	    			MOVLW	0x02
$1FC6	$6E0C	    			MOVWF	STACK_12, 0
$1FC8	$ECD4	F006			CALL	_NRM4032
$1FCC	$EFF0	F00F			GOTO	ADDEEE
$1FD0	$	ADDJPSETFOV32:
$1FD0	$0E04	    			MOVLW	0x04
$1FD2	$6E0C	    			MOVWF	STACK_12, 0
$1FD4	$EC52	F002			CALL	_SETFOV32
$1FD8	$EFF0	F00F			GOTO	ADDEEE
$1FDC	$	ADDEOK:
$1FDC	$0E00	    			MOVLW	0x00
$1FDE	$6E0C	    			MOVWF	STACK_12, 0
$1FE0	$	ADDEEE:
$1FE0	$0012	    			RETURN
$1FE2	$	_Ethernet_memcpy:
$1FE2	$0EE2	    			MOVLW	EWRPT
$1FE4	$0108	    			MOVLB	8
$1FE6	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$1FE8	$0E0E	    			MOVLW	@EWRPT
$1FEA	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$1FEC	$C8D5	F8FA			MOVFF	FARG_Ethernet_memcpy+0, FARG_Ethernet_writeAddr2+2
$1FF0	$C8D6	F8FB			MOVFF	FARG_Ethernet_memcpy+1, FARG_Ethernet_writeAddr2+3
$1FF4	$EC67	F002			CALL	_Ethernet_writeAddr2
$1FF8	$	L_Ethernet_memcpy_222:
$1FF8	$0108	    			MOVLB	8
$1FFA	$53D9	    			MOVF	FARG_Ethernet_memcpy+4, 1, 1
$1FFC	$E00A	    			BZ	L_Ethernet_memcpy_223
$1FFE	$C8D7	FFE9			MOVFF	FARG_Ethernet_memcpy+2, FSR0L
$2002	$C8D8	FFEA			MOVFF	FARG_Ethernet_memcpy+3, FSR0H
$2006	$CFEE	FF61			MOVFF	POSTINC0, EDATA
$200A	$4BD7	    			INFSNZ	FARG_Ethernet_memcpy+2, 1, 1
$200C	$2BD8	    			INCF	FARG_Ethernet_memcpy+3, 1, 1
$200E	$07D9	    			DECF	FARG_Ethernet_memcpy+4, 1, 1
$2010	$D7F3	    			BRA	L_Ethernet_memcpy_222
$2012	$	L_Ethernet_memcpy_223:
$2012	$0012	    			RETURN
$2014	$	_Ethernet_putBytes:
$2014	$	L_Ethernet_putBytes_224:
$2014	$C8D7	F000			MOVFF	FARG_Ethernet_putBytes+2, STACK_0
$2018	$0108	    			MOVLB	8
$201A	$07D7	    			DECF	FARG_Ethernet_putBytes+2, 1, 1
$201C	$5200	    			MOVF	STACK_0, 1, 0
$201E	$E009	    			BZ	L_Ethernet_putBytes_225
$2020	$C8D5	FFE9			MOVFF	FARG_Ethernet_putBytes+0, FSR0L
$2024	$C8D6	FFEA			MOVFF	FARG_Ethernet_putBytes+1, FSR0H
$2028	$CFEE	FF61			MOVFF	POSTINC0, EDATA
$202C	$4BD5	    			INFSNZ	FARG_Ethernet_putBytes+0, 1, 1
$202E	$2BD6	    			INCF	FARG_Ethernet_putBytes+1, 1, 1
$2030	$D7F1	    			BRA	L_Ethernet_putBytes_224
$2032	$	L_Ethernet_putBytes_225:
$2032	$0012	    			RETURN
$2034	$	_Ethernet_writeMemory2:
$2034	$C8D6	FF61			MOVFF	FARG_Ethernet_writeMemory2+1, EDATA
$2038	$0000	    			NOP
$203A	$0000	    			NOP
$203C	$C8D5	FF61			MOVFF	FARG_Ethernet_writeMemory2+0, EDATA
$2040	$0012	    			RETURN
$2042	$	_Ethernet_checksum:
$2042	$0108	    			MOVLB	8
$2044	$51D7	    			MOVF	FARG_Ethernet_checksum+2, 0, 1
$2046	$25D5	    			ADDWF	FARG_Ethernet_checksum+0, 0, 1
$2048	$6FD9	    			MOVWF	Ethernet_checksum_stop_L0, 1
$204A	$51D8	    			MOVF	FARG_Ethernet_checksum+3, 0, 1
$204C	$21D6	    			ADDWFC	FARG_Ethernet_checksum+1, 0, 1
$204E	$6FDA	    			MOVWF	Ethernet_checksum_stop_L0+1, 1
$2050	$0E01	    			MOVLW	1
$2052	$5FD9	    			SUBWF	Ethernet_checksum_stop_L0, 1, 1
$2054	$0E00	    			MOVLW	0
$2056	$5BDA	    			SUBWFB	Ethernet_checksum_stop_L0+1, 1, 1
$2058	$0EF0	    			MOVLW	EDMAST
$205A	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$205C	$0E0E	    			MOVLW	@EDMAST
$205E	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$2060	$C8D5	F8FA			MOVFF	FARG_Ethernet_checksum+0, FARG_Ethernet_writeAddr2+2
$2064	$C8D6	F8FB			MOVFF	FARG_Ethernet_checksum+1, FARG_Ethernet_writeAddr2+3
$2068	$EC67	F002			CALL	_Ethernet_writeAddr2
$206C	$0EF2	    			MOVLW	EDMAND
$206E	$0108	    			MOVLB	8
$2070	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$2072	$0E0E	    			MOVLW	@EDMAND
$2074	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$2076	$C8D9	F8FA			MOVFF	Ethernet_checksum_stop_L0, FARG_Ethernet_writeAddr2+2
$207A	$C8DA	F8FB			MOVFF	Ethernet_checksum_stop_L0+1, FARG_Ethernet_writeAddr2+3
$207E	$EC67	F002			CALL	_Ethernet_writeAddr2
$2082	$0E30	    			MOVLW	48
$2084	$12D2	    			IORWF	ECON1, 1, 0
$2086	$	L_Ethernet_checksum_201:
$2086	$0ED2	    			MOVLW	ECON1
$2088	$0108	    			MOVLB	8
$208A	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$208C	$0E0F	    			MOVLW	@ECON1
$208E	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$2090	$ECCA	F007			CALL	_Ethernet_readReg2
$2094	$BA00	    			BTFSC	STACK_0, 5, 0
$2096	$D7F7	    			BRA	L_Ethernet_checksum_201
$2098	$	L_Ethernet_checksum_202:
$2098	$0012	    			RETURN
$209A	$	_Ethernet_writeMemory:
$209A	$C8D5	F8EB			MOVFF	FARG_Ethernet_writeMemory+0, FARG_Ethernet_writeMem+0
$209E	$C8D6	F8EC			MOVFF	FARG_Ethernet_writeMemory+1, FARG_Ethernet_writeMem+1
$20A2	$C8D7	F8ED			MOVFF	FARG_Ethernet_writeMemory+2, FARG_Ethernet_writeMem+2
$20A6	$ECD1	F007			CALL	_Ethernet_writeMem
$20AA	$C8D8	F8EB			MOVFF	FARG_Ethernet_writeMemory+3, FARG_Ethernet_putByte+0
$20AE	$ECDF	F007			CALL	_Ethernet_putByte
$20B2	$0012	    			RETURN
$20B4	$	_Ethernet_RAMcopy:
$20B4	$0108	    			MOVLB	8
$20B6	$6BDC	    			CLRF	Ethernet_RAMcopy_overflow_L0, 1
$20B8	$0E01	    			MOVLW	1
$20BA	$5FD7	    			SUBWF	FARG_Ethernet_RAMcopy+2, 1, 1
$20BC	$0E00	    			MOVLW	0
$20BE	$5BD8	    			SUBWFB	FARG_Ethernet_RAMcopy+3, 1, 1
$20C0	$53DB	    			MOVF	FARG_Ethernet_RAMcopy+6, 1, 1
$20C2	$E00E	    			BZ	L_Ethernet_RAMcopy_205
$20C4	$51D8	    			MOVF	FARG_Ethernet_RAMcopy+3, 0, 1
$20C6	$0819	    			SUBLW	25
$20C8	$E102	    			BNZ	L_Ethernet_RAMcopy_267
$20CA	$51D7	    			MOVF	FARG_Ethernet_RAMcopy+2, 0, 1
$20CC	$08AD	    			SUBLW	173
$20CE	$	L_Ethernet_RAMcopy_267:
$20CE	$E208	    			BC	L_Ethernet_RAMcopy_205
$20D0	$	L1679_ex_L_Ethernet_RAMcopy_205:
$20D0	$0108	    			MOVLB	8
$20D2	$2BDC	    			INCF	Ethernet_RAMcopy_overflow_L0, 1, 1
$20D4	$0EAD	    			MOVLW	173
$20D6	$5DD7	    			SUBWF	FARG_Ethernet_RAMcopy+2, 0, 1
$20D8	$6FDD	    			MOVWF	Ethernet_RAMcopy_remain_L0, 1
$20DA	$0E19	    			MOVLW	25
$20DC	$59D8	    			SUBWFB	FARG_Ethernet_RAMcopy+3, 0, 1
$20DE	$6FDE	    			MOVWF	Ethernet_RAMcopy_remain_L0+1, 1
$20E0	$	L_Ethernet_RAMcopy_205:
$20E0	$	___Ethernet_RAMcopy_PART2:
$20E0	$0108	    			MOVLB	8
$20E2	$0108	    			MOVLB	8
$20E4	$53DC	    			MOVF	Ethernet_RAMcopy_overflow_L0, 1, 1
$20E6	$E005	    			BZ	L_Ethernet_RAMcopy_206
$20E8	$0EAD	    			MOVLW	173
$20EA	$6E02	    			MOVWF	STACK_2, 0
$20EC	$0E19	    			MOVLW	25
$20EE	$6E03	    			MOVWF	STACK_2+1, 0
$20F0	$D004	    			BRA	L_Ethernet_RAMcopy_207
$20F2	$	L_Ethernet_RAMcopy_206:
$20F2	$C8D7	F002			MOVFF	FARG_Ethernet_RAMcopy+2, STACK_2
$20F6	$C8D8	F003			MOVFF	FARG_Ethernet_RAMcopy+3, STACK_2+1
$20FA	$	L_Ethernet_RAMcopy_207:
$20FA	$0108	    			MOVLB	8
$20FC	$51D6	    			MOVF	FARG_Ethernet_RAMcopy+1, 0, 1
$20FE	$1803	    			XORWF	STACK_2+1, 0, 0
$2100	$E102	    			BNZ	L_Ethernet_RAMcopy_268
$2102	$5002	    			MOVF	STACK_2, 0, 0
$2104	$19D5	    			XORWF	FARG_Ethernet_RAMcopy+0, 0, 1
$2106	$	L_Ethernet_RAMcopy_268:
$2106	$E10F	    			BNZ	L_Ethernet_RAMcopy_208
$2108	$C8D5	F8EB			MOVFF	FARG_Ethernet_RAMcopy+0, FARG_Ethernet_readMem+0
$210C	$C8D6	F8EC			MOVFF	FARG_Ethernet_RAMcopy+1, FARG_Ethernet_readMem+1
$2110	$ECE2	F007			CALL	_Ethernet_readMem
$2114	$C000	F8ED			MOVFF	STACK_0, FARG_Ethernet_writeMem+2
$2118	$C8D9	F8EB			MOVFF	FARG_Ethernet_RAMcopy+4, FARG_Ethernet_writeMem+0
$211C	$C8DA	F8EC			MOVFF	FARG_Ethernet_RAMcopy+5, FARG_Ethernet_writeMem+1
$2120	$ECD1	F007			CALL	_Ethernet_writeMem
$2124	$D03D	    			BRA	L_Ethernet_RAMcopy_209
$2126	$	L_Ethernet_RAMcopy_208:
$2126	$0EF0	    			MOVLW	EDMAST
$2128	$0108	    			MOVLB	8
$212A	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$212C	$0E0E	    			MOVLW	@EDMAST
$212E	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$2130	$C8D5	F8FA			MOVFF	FARG_Ethernet_RAMcopy+0, FARG_Ethernet_writeAddr2+2
$2134	$C8D6	F8FB			MOVFF	FARG_Ethernet_RAMcopy+1, FARG_Ethernet_writeAddr2+3
$2138	$EC67	F002			CALL	_Ethernet_writeAddr2
$213C	$0EF2	    			MOVLW	EDMAND
$213E	$0108	    			MOVLB	8
$2140	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$2142	$0E0E	    			MOVLW	@EDMAND
$2144	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$2146	$53DC	    			MOVF	Ethernet_RAMcopy_overflow_L0, 1, 1
$2148	$E005	    			BZ	L_Ethernet_RAMcopy_210
$214A	$0EAD	    			MOVLW	173
$214C	$6E00	    			MOVWF	STACK_0, 0
$214E	$0E19	    			MOVLW	25
$2150	$6E01	    			MOVWF	STACK_0+1, 0
$2152	$D004	    			BRA	L_Ethernet_RAMcopy_211
$2154	$	L_Ethernet_RAMcopy_210:
$2154	$C8D7	F000			MOVFF	FARG_Ethernet_RAMcopy+2, STACK_0
$2158	$C8D8	F001			MOVFF	FARG_Ethernet_RAMcopy+3, STACK_0+1
$215C	$	L_Ethernet_RAMcopy_211:
$215C	$C000	F8FA			MOVFF	STACK_0, FARG_Ethernet_writeAddr2+2
$2160	$C001	F8FB			MOVFF	STACK_0+1, FARG_Ethernet_writeAddr2+3
$2164	$EC67	F002			CALL	_Ethernet_writeAddr2
$2168	$0EF4	    			MOVLW	EDMADST
$216A	$0108	    			MOVLB	8
$216C	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$216E	$0E0E	    			MOVLW	@EDMADST
$2170	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$2172	$C8D9	F8FA			MOVFF	FARG_Ethernet_RAMcopy+4, FARG_Ethernet_writeAddr2+2
$2176	$C8DA	F8FB			MOVFF	FARG_Ethernet_RAMcopy+5, FARG_Ethernet_writeAddr2+3
$217A	$EC67	F002			CALL	_Ethernet_writeAddr2
$217E	$0EEF	    			MOVLW	239
$2180	$14D2	    			ANDWF	ECON1, 0, 0
$2182	$6E00	    			MOVWF	STACK_0, 0
$2184	$C000	FFD2			MOVFF	STACK_0, ECON1
$2188	$0E20	    			MOVLW	32
$218A	$1000	    			IORWF	STACK_0, 0, 0
$218C	$6ED2	    			MOVWF	ECON1, 0
$218E	$	L_Ethernet_RAMcopy_212:
$218E	$0ED2	    			MOVLW	ECON1
$2190	$0108	    			MOVLB	8
$2192	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$2194	$0E0F	    			MOVLW	@ECON1
$2196	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$2198	$ECCA	F007			CALL	_Ethernet_readReg2
$219C	$BA00	    			BTFSC	STACK_0, 5, 0
$219E	$D7F7	    			BRA	L_Ethernet_RAMcopy_212
$21A0	$	L_Ethernet_RAMcopy_213:
$21A0	$	L_Ethernet_RAMcopy_209:
$21A0	$0108	    			MOVLB	8
$21A2	$53DC	    			MOVF	Ethernet_RAMcopy_overflow_L0, 1, 1
$21A4	$E01A	    			BZ	L_Ethernet_RAMcopy_214
$21A6	$51D5	    			MOVF	FARG_Ethernet_RAMcopy+0, 0, 1
$21A8	$5DD7	    			SUBWF	FARG_Ethernet_RAMcopy+2, 0, 1
$21AA	$6E00	    			MOVWF	STACK_0, 0
$21AC	$51D6	    			MOVF	FARG_Ethernet_RAMcopy+1, 0, 1
$21AE	$59D8	    			SUBWFB	FARG_Ethernet_RAMcopy+3, 0, 1
$21B0	$6E01	    			MOVWF	STACK_0+1, 0
$21B2	$51DD	    			MOVF	Ethernet_RAMcopy_remain_L0, 0, 1
$21B4	$5E00	    			SUBWF	STACK_0, 1, 0
$21B6	$51DE	    			MOVF	Ethernet_RAMcopy_remain_L0+1, 0, 1
$21B8	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$21BA	$4A00	    			INFSNZ	STACK_0, 1, 0
$21BC	$2A01	    			INCF	STACK_0+1, 1, 0
$21BE	$5000	    			MOVF	STACK_0, 0, 0
$21C0	$27D9	    			ADDWF	FARG_Ethernet_RAMcopy+4, 1, 1
$21C2	$5001	    			MOVF	STACK_0+1, 0, 0
$21C4	$23DA	    			ADDWFC	FARG_Ethernet_RAMcopy+5, 1, 1
$21C6	$0E01	    			MOVLW	1
$21C8	$5DDD	    			SUBWF	Ethernet_RAMcopy_remain_L0, 0, 1
$21CA	$6FD7	    			MOVWF	FARG_Ethernet_RAMcopy+2, 1
$21CC	$0E00	    			MOVLW	0
$21CE	$59DE	    			SUBWFB	Ethernet_RAMcopy_remain_L0+1, 0, 1
$21D0	$6FD8	    			MOVWF	FARG_Ethernet_RAMcopy+3, 1
$21D2	$6BD5	    			CLRF	FARG_Ethernet_RAMcopy+0, 1
$21D4	$6BD6	    			CLRF	FARG_Ethernet_RAMcopy+1, 1
$21D6	$6BDC	    			CLRF	Ethernet_RAMcopy_overflow_L0, 1
$21D8	$D783	    			BRA	___Ethernet_RAMcopy_PART2
$21DA	$	L_Ethernet_RAMcopy_214:
$21DA	$0012	    			RETURN
$21DC	$	_Ethernet_TXpacket:
$21DC	$0EAE	    			MOVLW	174
$21DE	$0108	    			MOVLB	8
$21E0	$6FEB	    			MOVWF	FARG_Ethernet_writeMem+0, 1
$21E2	$0E19	    			MOVLW	25
$21E4	$6FEC	    			MOVWF	FARG_Ethernet_writeMem+1, 1
$21E6	$6BED	    			CLRF	FARG_Ethernet_writeMem+2, 1
$21E8	$ECD1	F007			CALL	_Ethernet_writeMem
$21EC	$0EAE	    			MOVLW	174
$21EE	$0108	    			MOVLB	8
$21F0	$25D5	    			ADDWF	FARG_Ethernet_TXpacket+0, 0, 1
$21F2	$6E00	    			MOVWF	STACK_0, 0
$21F4	$0E19	    			MOVLW	25
$21F6	$21D6	    			ADDWFC	FARG_Ethernet_TXpacket+1, 0, 1
$21F8	$6E01	    			MOVWF	STACK_0+1, 0
$21FA	$C000	F8D5			MOVFF	STACK_0, FARG_Ethernet_TXpacket+0
$21FE	$C001	F8D6			MOVFF	STACK_0+1, FARG_Ethernet_TXpacket+1
$2202	$0EE6	    			MOVLW	ETXND
$2204	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$2206	$0E0E	    			MOVLW	@ETXND
$2208	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$220A	$C000	F8FA			MOVFF	STACK_0, FARG_Ethernet_writeAddr2+2
$220E	$C001	F8FB			MOVFF	STACK_0+1, FARG_Ethernet_writeAddr2+3
$2212	$EC67	F002			CALL	_Ethernet_writeAddr2
$2216	$86D2	    			BSF	ECON1, 3, 0
$2218	$	L_Ethernet_TXpacket_215:
$2218	$0ED2	    			MOVLW	ECON1
$221A	$0108	    			MOVLB	8
$221C	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$221E	$0E0F	    			MOVLW	@ECON1
$2220	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$2222	$ECCA	F007			CALL	_Ethernet_readReg2
$2226	$B600	    			BTFSC	STACK_0, 3, 0
$2228	$D7F7	    			BRA	L_Ethernet_TXpacket_215
$222A	$	L_Ethernet_TXpacket_216:
$222A	$0EFD	    			MOVLW	ESTAT
$222C	$0108	    			MOVLB	8
$222E	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$2230	$0E0E	    			MOVLW	@ESTAT
$2232	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$2234	$ECCA	F007			CALL	_Ethernet_readReg2
$2238	$0E06	    			MOVLW	6
$223A	$1600	    			ANDWF	STACK_0, 1, 0
$223C	$5200	    			MOVF	STACK_0, 1, 0
$223E	$E002	    			BZ	L_Ethernet_TXpacket_217
$2240	$6A00	    			CLRF	STACK_0, 0
$2242	$D002	    			BRA	L_Ethernet_TXpacket_218
$2244	$	L_Ethernet_TXpacket_217:
$2244	$0E01	    			MOVLW	1
$2246	$6E00	    			MOVWF	STACK_0, 0
$2248	$	L_Ethernet_TXpacket_218:
$2248	$0012	    			RETURN
$224A	$	_Read_Time:
;rtc.c,20 :: 			void Read_Time(void)    //чтение часов
;rtc.c,24 :: 			I2C_Init(100000);         // initialize I2C
$224A	$0E3E	    			MOVLW	62
$224C	$6EC8	    			MOVWF	SSPADD, 0
$224E	$EC44	F008			CALL	_I2C_Init
;rtc.c,25 :: 			I2C_Start();
$2252	$ECF0	F007			CALL	_I2C_Start
;rtc.c,26 :: 			I2C_Wr(0xD0);                 // Slave address DS1338, write to RTC
$2256	$0ED0	    			MOVLW	208
$2258	$0108	    			MOVLB	8
$225A	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$225C	$EC15	F008			CALL	_I2C_Wr
;rtc.c,27 :: 			I2C_Wr(0x00);                 // Byte adress
$2260	$0108	    			MOVLB	8
$2262	$6BEB	    			CLRF	FARG_I2C_Wr+0, 1
$2264	$EC15	F008			CALL	_I2C_Wr
;rtc.c,28 :: 			I2C_Repeated_Start();
$2268	$EC28	F008			CALL	_I2C_Repeated_Start
;rtc.c,29 :: 			I2C_Wr(0xD1);                 // Slave address DS1338, read from RTC
$226C	$0ED1	    			MOVLW	209
$226E	$0108	    			MOVLB	8
$2270	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$2272	$EC15	F008			CALL	_I2C_Wr
;rtc.c,30 :: 			tsecond =I2C_Rd(1);
$2276	$0E01	    			MOVLW	1
$2278	$0108	    			MOVLB	8
$227A	$6FEB	    			MOVWF	FARG_I2C_Rd+0, 1
$227C	$EC2E	F008			CALL	_I2C_Rd
$2280	$C000	F8D5			MOVFF	STACK_0, Read_Time_tsecond_L0
;rtc.c,31 :: 			tminute =I2C_Rd(1);
$2284	$0E01	    			MOVLW	1
$2286	$0108	    			MOVLB	8
$2288	$6FEB	    			MOVWF	FARG_I2C_Rd+0, 1
$228A	$EC2E	F008			CALL	_I2C_Rd
$228E	$C000	F8D6			MOVFF	STACK_0, Read_Time_tminute_L0
;rtc.c,32 :: 			thour =I2C_Rd(1);
$2292	$0E01	    			MOVLW	1
$2294	$0108	    			MOVLB	8
$2296	$6FEB	    			MOVWF	FARG_I2C_Rd+0, 1
$2298	$EC2E	F008			CALL	_I2C_Rd
$229C	$C000	F8D7			MOVFF	STACK_0, Read_Time_thour_L0
;rtc.c,33 :: 			tday =I2C_Rd(1);
$22A0	$0E01	    			MOVLW	1
$22A2	$0108	    			MOVLB	8
$22A4	$6FEB	    			MOVWF	FARG_I2C_Rd+0, 1
$22A6	$EC2E	F008			CALL	_I2C_Rd
;rtc.c,34 :: 			tdate =I2C_Rd(1);
$22AA	$0E01	    			MOVLW	1
$22AC	$0108	    			MOVLB	8
$22AE	$6FEB	    			MOVWF	FARG_I2C_Rd+0, 1
$22B0	$EC2E	F008			CALL	_I2C_Rd
$22B4	$C000	F8D8			MOVFF	STACK_0, Read_Time_tdate_L0
;rtc.c,35 :: 			tmonth =I2C_Rd(1);
$22B8	$0E01	    			MOVLW	1
$22BA	$0108	    			MOVLB	8
$22BC	$6FEB	    			MOVWF	FARG_I2C_Rd+0, 1
$22BE	$EC2E	F008			CALL	_I2C_Rd
$22C2	$C000	F8D9			MOVFF	STACK_0, Read_Time_tmonth_L0
;rtc.c,36 :: 			tyear =I2C_Rd(0);              // LAST DATA BYTE IS FOLLOWED BY A NACK
$22C6	$0108	    			MOVLB	8
$22C8	$6BEB	    			CLRF	FARG_I2C_Rd+0, 1
$22CA	$EC2E	F008			CALL	_I2C_Rd
$22CE	$C000	F8DA			MOVFF	STACK_0, Read_Time_tyear_L0
;rtc.c,37 :: 			I2C_Stop();
$22D2	$EC42	F008			CALL	_I2C_Stop
;rtc.c,39 :: 			second  =  ((tsecond & 0xF0) >> 4)*10 + (tsecond & 0x0F);
$22D6	$0EF0	    			MOVLW	240
$22D8	$0108	    			MOVLB	8
$22DA	$15D5	    			ANDWF	Read_Time_tsecond_L0, 0, 1
$22DC	$0102	    			MOVLB	2
$22DE	$6F66	    			MOVWF	_second, 1
$22E0	$3366	    			RRCF	_second, 1, 1
$22E2	$9F66	    			BCF	_second, 7, 1
$22E4	$3366	    			RRCF	_second, 1, 1
$22E6	$9F66	    			BCF	_second, 7, 1
$22E8	$3366	    			RRCF	_second, 1, 1
$22EA	$9F66	    			BCF	_second, 7, 1
$22EC	$3366	    			RRCF	_second, 1, 1
$22EE	$9F66	    			BCF	_second, 7, 1
$22F0	$0E0A	    			MOVLW	10
$22F2	$0366	    			MULWF	_second, 1
$22F4	$CFF3	F266			MOVFF	PRODL, _second
$22F8	$0E0F	    			MOVLW	15
$22FA	$0108	    			MOVLB	8
$22FC	$15D5	    			ANDWF	Read_Time_tsecond_L0, 0, 1
$22FE	$6E00	    			MOVWF	STACK_0, 0
$2300	$5000	    			MOVF	STACK_0, 0, 0
$2302	$0102	    			MOVLB	2
$2304	$2766	    			ADDWF	_second, 1, 1
;rtc.c,40 :: 			minute  =  ((tminute & 0xF0) >> 4)*10 + (tminute & 0x0F);
$2306	$0EF0	    			MOVLW	240
$2308	$0108	    			MOVLB	8
$230A	$15D6	    			ANDWF	Read_Time_tminute_L0, 0, 1
$230C	$0102	    			MOVLB	2
$230E	$6F67	    			MOVWF	_minute, 1
$2310	$3367	    			RRCF	_minute, 1, 1
$2312	$9F67	    			BCF	_minute, 7, 1
$2314	$3367	    			RRCF	_minute, 1, 1
$2316	$9F67	    			BCF	_minute, 7, 1
$2318	$3367	    			RRCF	_minute, 1, 1
$231A	$9F67	    			BCF	_minute, 7, 1
$231C	$3367	    			RRCF	_minute, 1, 1
$231E	$9F67	    			BCF	_minute, 7, 1
$2320	$0E0A	    			MOVLW	10
$2322	$0367	    			MULWF	_minute, 1
$2324	$CFF3	F267			MOVFF	PRODL, _minute
$2328	$0E0F	    			MOVLW	15
$232A	$0108	    			MOVLB	8
$232C	$15D6	    			ANDWF	Read_Time_tminute_L0, 0, 1
$232E	$6E00	    			MOVWF	STACK_0, 0
$2330	$5000	    			MOVF	STACK_0, 0, 0
$2332	$0102	    			MOVLB	2
$2334	$2767	    			ADDWF	_minute, 1, 1
;rtc.c,41 :: 			hour    =  ((thour & 0xF0) >> 4)*10 + (thour & 0x0F);
$2336	$0EF0	    			MOVLW	240
$2338	$0108	    			MOVLB	8
$233A	$15D7	    			ANDWF	Read_Time_thour_L0, 0, 1
$233C	$0102	    			MOVLB	2
$233E	$6F68	    			MOVWF	_hour, 1
$2340	$3368	    			RRCF	_hour, 1, 1
$2342	$9F68	    			BCF	_hour, 7, 1
$2344	$3368	    			RRCF	_hour, 1, 1
$2346	$9F68	    			BCF	_hour, 7, 1
$2348	$3368	    			RRCF	_hour, 1, 1
$234A	$9F68	    			BCF	_hour, 7, 1
$234C	$3368	    			RRCF	_hour, 1, 1
$234E	$9F68	    			BCF	_hour, 7, 1
$2350	$0E0A	    			MOVLW	10
$2352	$0368	    			MULWF	_hour, 1
$2354	$CFF3	F268			MOVFF	PRODL, _hour
$2358	$0E0F	    			MOVLW	15
$235A	$0108	    			MOVLB	8
$235C	$15D7	    			ANDWF	Read_Time_thour_L0, 0, 1
$235E	$6E00	    			MOVWF	STACK_0, 0
$2360	$5000	    			MOVF	STACK_0, 0, 0
$2362	$0102	    			MOVLB	2
$2364	$2768	    			ADDWF	_hour, 1, 1
;rtc.c,42 :: 			date    =  ((tdate & 0xF0) >> 4)*10 + (tdate & 0x0F);
$2366	$0EF0	    			MOVLW	240
$2368	$0108	    			MOVLB	8
$236A	$15D8	    			ANDWF	Read_Time_tdate_L0, 0, 1
$236C	$0102	    			MOVLB	2
$236E	$6F69	    			MOVWF	_date, 1
$2370	$3369	    			RRCF	_date, 1, 1
$2372	$9F69	    			BCF	_date, 7, 1
$2374	$3369	    			RRCF	_date, 1, 1
$2376	$9F69	    			BCF	_date, 7, 1
$2378	$3369	    			RRCF	_date, 1, 1
$237A	$9F69	    			BCF	_date, 7, 1
$237C	$3369	    			RRCF	_date, 1, 1
$237E	$9F69	    			BCF	_date, 7, 1
$2380	$0E0A	    			MOVLW	10
$2382	$0369	    			MULWF	_date, 1
$2384	$CFF3	F269			MOVFF	PRODL, _date
$2388	$0E0F	    			MOVLW	15
$238A	$0108	    			MOVLB	8
$238C	$15D8	    			ANDWF	Read_Time_tdate_L0, 0, 1
$238E	$6E00	    			MOVWF	STACK_0, 0
$2390	$5000	    			MOVF	STACK_0, 0, 0
$2392	$0102	    			MOVLB	2
$2394	$2769	    			ADDWF	_date, 1, 1
;rtc.c,43 :: 			month   =  ((tmonth & 0xF0) >> 4)*10 + (tmonth & 0x0F);
$2396	$0EF0	    			MOVLW	240
$2398	$0108	    			MOVLB	8
$239A	$15D9	    			ANDWF	Read_Time_tmonth_L0, 0, 1
$239C	$0102	    			MOVLB	2
$239E	$6F6A	    			MOVWF	_month, 1
$23A0	$336A	    			RRCF	_month, 1, 1
$23A2	$9F6A	    			BCF	_month, 7, 1
$23A4	$336A	    			RRCF	_month, 1, 1
$23A6	$9F6A	    			BCF	_month, 7, 1
$23A8	$336A	    			RRCF	_month, 1, 1
$23AA	$9F6A	    			BCF	_month, 7, 1
$23AC	$336A	    			RRCF	_month, 1, 1
$23AE	$9F6A	    			BCF	_month, 7, 1
$23B0	$0E0A	    			MOVLW	10
$23B2	$036A	    			MULWF	_month, 1
$23B4	$CFF3	F26A			MOVFF	PRODL, _month
$23B8	$0E0F	    			MOVLW	15
$23BA	$0108	    			MOVLB	8
$23BC	$15D9	    			ANDWF	Read_Time_tmonth_L0, 0, 1
$23BE	$6E00	    			MOVWF	STACK_0, 0
$23C0	$5000	    			MOVF	STACK_0, 0, 0
$23C2	$0102	    			MOVLB	2
$23C4	$276A	    			ADDWF	_month, 1, 1
;rtc.c,44 :: 			year    =  ((tyear & 0xF0) >> 4)*10 + (tyear & 0x0F);
$23C6	$0EF0	    			MOVLW	240
$23C8	$0108	    			MOVLB	8
$23CA	$15DA	    			ANDWF	Read_Time_tyear_L0, 0, 1
$23CC	$0102	    			MOVLB	2
$23CE	$6F6B	    			MOVWF	_year, 1
$23D0	$336B	    			RRCF	_year, 1, 1
$23D2	$9F6B	    			BCF	_year, 7, 1
$23D4	$336B	    			RRCF	_year, 1, 1
$23D6	$9F6B	    			BCF	_year, 7, 1
$23D8	$336B	    			RRCF	_year, 1, 1
$23DA	$9F6B	    			BCF	_year, 7, 1
$23DC	$336B	    			RRCF	_year, 1, 1
$23DE	$9F6B	    			BCF	_year, 7, 1
$23E0	$0E0A	    			MOVLW	10
$23E2	$036B	    			MULWF	_year, 1
$23E4	$CFF3	F26B			MOVFF	PRODL, _year
$23E8	$0E0F	    			MOVLW	15
$23EA	$0108	    			MOVLB	8
$23EC	$15DA	    			ANDWF	Read_Time_tyear_L0, 0, 1
$23EE	$6E00	    			MOVWF	STACK_0, 0
$23F0	$5000	    			MOVF	STACK_0, 0, 0
$23F2	$0102	    			MOVLB	2
$23F4	$276B	    			ADDWF	_year, 1, 1
;rtc.c,45 :: 			}//~
$23F6	$0012	    			RETURN
$23F8	$	_Cf_Fat_Init:
$23F8	$0108	    			MOVLB	8
$23FA	$6BDD	    			CLRF	Cf_Fat_Init_found_L0, 1
$23FC	$6BDE	    			CLRF	Cf_Fat_Init_rslt_L0, 1
$23FE	$6BDE	    			CLRF	Cf_Fat_Init_rslt_L0, 1
$2400	$C8D5	F8EB			MOVFF	FARG_Cf_Fat_Init+0, FARG_Cf_Init+0
$2404	$C8D6	F8EC			MOVFF	FARG_Cf_Fat_Init+1, FARG_Cf_Init+1
$2408	$C8D7	F8ED			MOVFF	FARG_Cf_Fat_Init+2, FARG_Cf_Init+2
$240C	$C8D8	F8EE			MOVFF	FARG_Cf_Fat_Init+3, FARG_Cf_Init+3
$2410	$EC4B	F008			CALL	_Cf_Init
$2414	$	L_Cf_Fat_Init_13:
$2414	$EC69	F008			CALL	_Cf_Detect
$2418	$5200	    			MOVF	STACK_0, 1, 0
$241A	$E107	    			BNZ	L_Cf_Fat_Init_14
$241C	$0E1E	    			MOVLW	30
$241E	$0108	    			MOVLB	8
$2420	$5DDE	    			SUBWF	Cf_Fat_Init_rslt_L0, 0, 1
$2422	$E203	    			BC	L_Cf_Fat_Init_14
$2424	$	L245_ex_L_Cf_Fat_Init_14:
$2424	$0108	    			MOVLB	8
$2426	$2BDE	    			INCF	Cf_Fat_Init_rslt_L0, 1, 1
$2428	$D7F5	    			BRA	L_Cf_Fat_Init_13
$242A	$	L_Cf_Fat_Init_14:
$242A	$0E1E	    			MOVLW	30
$242C	$0108	    			MOVLB	8
$242E	$5DDE	    			SUBWF	Cf_Fat_Init_rslt_L0, 0, 1
$2430	$E303	    			BNC	L_Cf_Fat_Init_17
$2432	$0EFF	    			MOVLW	255
$2434	$6E00	    			MOVWF	STACK_0, 0
$2436	$0012	    			RETURN
$2438	$	L_Cf_Fat_Init_17:
$2438	$	L_Cf_Fat_Init_18:
$2438	$EC78	F008			CALL	cf_fat16_Init_Vars
$243C	$C25E	F901			MOVFF	cf_fat16_BOOT_SECTOR, FARG_Cf_Read_Sector+0
$2440	$C25F	F902			MOVFF	cf_fat16_BOOT_SECTOR+1, FARG_Cf_Read_Sector+1
$2444	$C260	F903			MOVFF	cf_fat16_BOOT_SECTOR+2, FARG_Cf_Read_Sector+2
$2448	$C261	F904			MOVFF	cf_fat16_BOOT_SECTOR+3, FARG_Cf_Read_Sector+3
$244C	$0E2E	    			MOVLW	cf_fat16_data
$244E	$0109	    			MOVLB	9
$2450	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$2452	$0E00	    			MOVLW	@cf_fat16_data
$2454	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$2456	$EC5C	F001			CALL	_Cf_Read_Sector
$245A	$0102	    			MOVLB	2
$245C	$512C	    			MOVF	cf_fat16_data+510, 0, 1
$245E	$0A55	    			XORLW	85
$2460	$A4D8	    			BTFSS	STATUS, Z, 0
$2462	$D069	    			BRA	L_Cf_Fat_Init_21
$2464	$512D	    			MOVF	cf_fat16_data+511, 0, 1
$2466	$0AAA	    			XORLW	170
$2468	$A4D8	    			BTFSS	STATUS, Z, 0
$246A	$D065	    			BRA	L_Cf_Fat_Init_21
$246C	$	L270_ex_L_Cf_Fat_Init_21:
$246C	$502E	    			MOVF	cf_fat16_data, 0, 0
$246E	$0AE9	    			XORLW	233
$2470	$E009	    			BZ	L_Cf_Fat_Init_25
$2472	$502E	    			MOVF	cf_fat16_data, 0, 0
$2474	$0AEB	    			XORLW	235
$2476	$E103	    			BNZ	L283_ex_L_Cf_Fat_Init_25
$2478	$5030	    			MOVF	cf_fat16_data+2, 0, 0
$247A	$0A90	    			XORLW	144
$247C	$E003	    			BZ	L_Cf_Fat_Init_25
$247E	$	L283_ex_L_Cf_Fat_Init_25:
$247E	$0102	    			MOVLB	2
$2480	$6A00	    			CLRF	STACK_0, 0
$2482	$D003	    			BRA	L_Cf_Fat_Init_24
$2484	$	L_Cf_Fat_Init_25:
$2484	$0102	    			MOVLB	2
$2486	$0E01	    			MOVLW	1
$2488	$6E00	    			MOVWF	STACK_0, 0
$248A	$	L_Cf_Fat_Init_24:
$248A	$5200	    			MOVF	STACK_0, 1, 0
$248C	$E151	    			BNZ	L_Cf_Fat_Init_26
$248E	$0101	    			MOVLB	1
$2490	$53F8	    			MOVF	cf_fat16_data+458, 1, 1
$2492	$E106	    			BNZ	L302_ex_L_Cf_Fat_Init_29
$2494	$53F9	    			MOVF	cf_fat16_data+459, 1, 1
$2496	$E104	    			BNZ	L302_ex_L_Cf_Fat_Init_29
$2498	$53FA	    			MOVF	cf_fat16_data+460, 1, 1
$249A	$E102	    			BNZ	L302_ex_L_Cf_Fat_Init_29
$249C	$53FB	    			MOVF	cf_fat16_data+461, 1, 1
$249E	$E009	    			BZ	L_Cf_Fat_Init_29
$24A0	$	L302_ex_L_Cf_Fat_Init_29:
$24A0	$C1F4	F25E			MOVFF	cf_fat16_data+454, cf_fat16_BOOT_SECTOR
$24A4	$C1F5	F25F			MOVFF	cf_fat16_data+455, cf_fat16_BOOT_SECTOR+1
$24A8	$C1F6	F260			MOVFF	cf_fat16_data+456, cf_fat16_BOOT_SECTOR+2
$24AC	$C1F7	F261			MOVFF	cf_fat16_data+457, cf_fat16_BOOT_SECTOR+3
$24B0	$D039	    			BRA	L_Cf_Fat_Init_30
$24B2	$	L_Cf_Fat_Init_29:
$24B2	$0102	    			MOVLB	2
$24B4	$5308	    			MOVF	cf_fat16_data+474, 1, 1
$24B6	$E106	    			BNZ	L319_ex_L_Cf_Fat_Init_33
$24B8	$5309	    			MOVF	cf_fat16_data+475, 1, 1
$24BA	$E104	    			BNZ	L319_ex_L_Cf_Fat_Init_33
$24BC	$530A	    			MOVF	cf_fat16_data+476, 1, 1
$24BE	$E102	    			BNZ	L319_ex_L_Cf_Fat_Init_33
$24C0	$530B	    			MOVF	cf_fat16_data+477, 1, 1
$24C2	$E009	    			BZ	L_Cf_Fat_Init_33
$24C4	$	L319_ex_L_Cf_Fat_Init_33:
$24C4	$C204	F25E			MOVFF	cf_fat16_data+470, cf_fat16_BOOT_SECTOR
$24C8	$C205	F25F			MOVFF	cf_fat16_data+471, cf_fat16_BOOT_SECTOR+1
$24CC	$C206	F260			MOVFF	cf_fat16_data+472, cf_fat16_BOOT_SECTOR+2
$24D0	$C207	F261			MOVFF	cf_fat16_data+473, cf_fat16_BOOT_SECTOR+3
$24D4	$D027	    			BRA	L_Cf_Fat_Init_34
$24D6	$	L_Cf_Fat_Init_33:
$24D6	$0102	    			MOVLB	2
$24D8	$5318	    			MOVF	cf_fat16_data+490, 1, 1
$24DA	$E106	    			BNZ	L336_ex_L_Cf_Fat_Init_37
$24DC	$5319	    			MOVF	cf_fat16_data+491, 1, 1
$24DE	$E104	    			BNZ	L336_ex_L_Cf_Fat_Init_37
$24E0	$531A	    			MOVF	cf_fat16_data+492, 1, 1
$24E2	$E102	    			BNZ	L336_ex_L_Cf_Fat_Init_37
$24E4	$531B	    			MOVF	cf_fat16_data+493, 1, 1
$24E6	$E009	    			BZ	L_Cf_Fat_Init_37
$24E8	$	L336_ex_L_Cf_Fat_Init_37:
$24E8	$C214	F25E			MOVFF	cf_fat16_data+486, cf_fat16_BOOT_SECTOR
$24EC	$C215	F25F			MOVFF	cf_fat16_data+487, cf_fat16_BOOT_SECTOR+1
$24F0	$C216	F260			MOVFF	cf_fat16_data+488, cf_fat16_BOOT_SECTOR+2
$24F4	$C217	F261			MOVFF	cf_fat16_data+489, cf_fat16_BOOT_SECTOR+3
$24F8	$D015	    			BRA	L_Cf_Fat_Init_38
$24FA	$	L_Cf_Fat_Init_37:
$24FA	$0102	    			MOVLB	2
$24FC	$5328	    			MOVF	cf_fat16_data+506, 1, 1
$24FE	$E106	    			BNZ	L353_ex_L_Cf_Fat_Init_41
$2500	$5329	    			MOVF	cf_fat16_data+507, 1, 1
$2502	$E104	    			BNZ	L353_ex_L_Cf_Fat_Init_41
$2504	$532A	    			MOVF	cf_fat16_data+508, 1, 1
$2506	$E102	    			BNZ	L353_ex_L_Cf_Fat_Init_41
$2508	$532B	    			MOVF	cf_fat16_data+509, 1, 1
$250A	$E009	    			BZ	L_Cf_Fat_Init_41
$250C	$	L353_ex_L_Cf_Fat_Init_41:
$250C	$C224	F25E			MOVFF	cf_fat16_data+502, cf_fat16_BOOT_SECTOR
$2510	$C225	F25F			MOVFF	cf_fat16_data+503, cf_fat16_BOOT_SECTOR+1
$2514	$C226	F260			MOVFF	cf_fat16_data+504, cf_fat16_BOOT_SECTOR+2
$2518	$C227	F261			MOVFF	cf_fat16_data+505, cf_fat16_BOOT_SECTOR+3
$251C	$D003	    			BRA	L_Cf_Fat_Init_42
$251E	$	L_Cf_Fat_Init_41:
$251E	$0E01	    			MOVLW	1
$2520	$6E00	    			MOVWF	STACK_0, 0
$2522	$0012	    			RETURN
$2524	$	L_Cf_Fat_Init_42:
$2524	$	L_Cf_Fat_Init_38:
$2524	$	L_Cf_Fat_Init_34:
$2524	$	L_Cf_Fat_Init_30:
$2524	$0102	    			MOVLB	2
$2526	$0102	    			MOVLB	2
$2528	$0102	    			MOVLB	2
$252A	$0108	    			MOVLB	8
$252C	$6BDD	    			CLRF	Cf_Fat_Init_found_L0, 1
$252E	$D003	    			BRA	L_Cf_Fat_Init_43
$2530	$	L_Cf_Fat_Init_26:
$2530	$0E01	    			MOVLW	1
$2532	$0108	    			MOVLB	8
$2534	$6FDD	    			MOVWF	Cf_Fat_Init_found_L0, 1
$2536	$	L_Cf_Fat_Init_43:
$2536	$	L_Cf_Fat_Init_21:
$2536	$0108	    			MOVLB	8
$2538	$6BDE	    			CLRF	Cf_Fat_Init_rslt_L0, 1
$253A	$	L_Cf_Fat_Init_44:
$253A	$0108	    			MOVLB	8
$253C	$53DD	    			MOVF	Cf_Fat_Init_found_L0, 1, 1
$253E	$E12B	    			BNZ	L_Cf_Fat_Init_45
$2540	$C25E	F901			MOVFF	cf_fat16_BOOT_SECTOR, FARG_Cf_Read_Sector+0
$2544	$C25F	F902			MOVFF	cf_fat16_BOOT_SECTOR+1, FARG_Cf_Read_Sector+1
$2548	$C260	F903			MOVFF	cf_fat16_BOOT_SECTOR+2, FARG_Cf_Read_Sector+2
$254C	$C261	F904			MOVFF	cf_fat16_BOOT_SECTOR+3, FARG_Cf_Read_Sector+3
$2550	$0E2E	    			MOVLW	cf_fat16_data
$2552	$0109	    			MOVLB	9
$2554	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$2556	$0E00	    			MOVLW	@cf_fat16_data
$2558	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$255A	$EC5C	F001			CALL	_Cf_Read_Sector
$255E	$0102	    			MOVLB	2
$2560	$512C	    			MOVF	cf_fat16_data+510, 0, 1
$2562	$0A55	    			XORLW	85
$2564	$E107	    			BNZ	L_Cf_Fat_Init_48
$2566	$512D	    			MOVF	cf_fat16_data+511, 0, 1
$2568	$0AAA	    			XORLW	170
$256A	$E104	    			BNZ	L_Cf_Fat_Init_48
$256C	$	L389_ex_L_Cf_Fat_Init_48:
$256C	$0E01	    			MOVLW	1
$256E	$0108	    			MOVLB	8
$2570	$6FDD	    			MOVWF	Cf_Fat_Init_found_L0, 1
$2572	$D011	    			BRA	L_Cf_Fat_Init_45
$2574	$	L_Cf_Fat_Init_48:
$2574	$0108	    			MOVLB	8
$2576	$51DE	    			MOVF	Cf_Fat_Init_rslt_L0, 0, 1
$2578	$0A40	    			XORLW	64
$257A	$E103	    			BNZ	L_Cf_Fat_Init_49
$257C	$0E01	    			MOVLW	1
$257E	$6E00	    			MOVWF	STACK_0, 0
$2580	$0012	    			RETURN
$2582	$	L_Cf_Fat_Init_49:
$2582	$0108	    			MOVLB	8
$2584	$2BDE	    			INCF	Cf_Fat_Init_rslt_L0, 1, 1
$2586	$0E01	    			MOVLW	1
$2588	$0102	    			MOVLB	2
$258A	$275E	    			ADDWF	cf_fat16_BOOT_SECTOR, 1, 1
$258C	$0E00	    			MOVLW	0
$258E	$235F	    			ADDWFC	cf_fat16_BOOT_SECTOR+1, 1, 1
$2590	$2360	    			ADDWFC	cf_fat16_BOOT_SECTOR+2, 1, 1
$2592	$2361	    			ADDWFC	cf_fat16_BOOT_SECTOR+3, 1, 1
$2594	$D7D2	    			BRA	L_Cf_Fat_Init_44
$2596	$	L_Cf_Fat_Init_45:
$2596	$0E01	    			MOVLW	1
$2598	$0108	    			MOVLB	8
$259A	$6FDE	    			MOVWF	Cf_Fat_Init_rslt_L0, 1
$259C	$51DD	    			MOVF	Cf_Fat_Init_found_L0, 0, 1
$259E	$0A01	    			XORLW	1
$25A0	$A4D8	    			BTFSS	STATUS, Z, 0
$25A2	$D16E	    			BRA	L_Cf_Fat_Init_50
$25A4	$0E08	    			MOVLW	8
$25A6	$6E04	    			MOVWF	STACK_4, 0
$25A8	$C03A	F000			MOVFF	cf_fat16_data+12, STACK_0
$25AC	$0E00	    			MOVLW	0
$25AE	$6E01	    			MOVWF	STACK_0+1, 0
$25B0	$5004	    			MOVF	STACK_4, 0, 0
$25B2	$	L_Cf_Fat_Init_241:
$25B2	$0108	    			MOVLB	8
$25B4	$E005	    			BZ	L_Cf_Fat_Init_242
$25B6	$3600	    			RLCF	STACK_0, 1, 0
$25B8	$9000	    			BCF	STACK_0, 0, 0
$25BA	$3601	    			RLCF	STACK_0+1, 1, 0
$25BC	$0FFF	    			ADDLW	255
$25BE	$D7F9	    			BRA	L_Cf_Fat_Init_241
$25C0	$	L_Cf_Fat_Init_242:
$25C0	$5039	    			MOVF	cf_fat16_data+11, 0, 0
$25C2	$1000	    			IORWF	STACK_0, 0, 0
$25C4	$0108	    			MOVLB	8
$25C6	$6FE7	    			MOVWF	FLOC_Cf_Fat_Init+14, 1
$25C8	$C001	F8E8			MOVFF	STACK_0+1, FLOC_Cf_Fat_Init+15
$25CC	$0E00	    			MOVLW	0
$25CE	$13E8	    			IORWF	FLOC_Cf_Fat_Init+15, 1, 1
$25D0	$C8E7	F22E			MOVFF	FLOC_Cf_Fat_Init+14, cf_fat16_BYTES_PER_SECTOR
$25D4	$C8E8	F22F			MOVFF	FLOC_Cf_Fat_Init+15, cf_fat16_BYTES_PER_SECTOR+1
$25D8	$C03B	F23C			MOVFF	cf_fat16_data+13, cf_fat16_SECTORS_PER_CLUSTER
$25DC	$0E08	    			MOVLW	8
$25DE	$6E04	    			MOVWF	STACK_4, 0
$25E0	$C03D	F000			MOVFF	cf_fat16_data+15, STACK_0
$25E4	$0E00	    			MOVLW	0
$25E6	$6E01	    			MOVWF	STACK_0+1, 0
$25E8	$5004	    			MOVF	STACK_4, 0, 0
$25EA	$	L_Cf_Fat_Init_243:
$25EA	$0108	    			MOVLB	8
$25EC	$E005	    			BZ	L_Cf_Fat_Init_244
$25EE	$3600	    			RLCF	STACK_0, 1, 0
$25F0	$9000	    			BCF	STACK_0, 0, 0
$25F2	$3601	    			RLCF	STACK_0+1, 1, 0
$25F4	$0FFF	    			ADDLW	255
$25F6	$D7F9	    			BRA	L_Cf_Fat_Init_243
$25F8	$	L_Cf_Fat_Init_244:
$25F8	$503C	    			MOVF	cf_fat16_data+14, 0, 0
$25FA	$1000	    			IORWF	STACK_0, 0, 0
$25FC	$0108	    			MOVLB	8
$25FE	$6FE5	    			MOVWF	FLOC_Cf_Fat_Init+12, 1
$2600	$C001	F8E6			MOVFF	STACK_0+1, FLOC_Cf_Fat_Init+13
$2604	$0E00	    			MOVLW	0
$2606	$13E6	    			IORWF	FLOC_Cf_Fat_Init+13, 1, 1
$2608	$C8E5	F255			MOVFF	FLOC_Cf_Fat_Init+12, cf_fat16_RESERVED_SECTORS
$260C	$C8E6	F256			MOVFF	FLOC_Cf_Fat_Init+13, cf_fat16_RESERVED_SECTORS+1
$2610	$C03E	F25C			MOVFF	cf_fat16_data+16, cf_fat16_NUMBER_OF_FATS
$2614	$0E08	    			MOVLW	8
$2616	$6E04	    			MOVWF	STACK_4, 0
$2618	$C045	F000			MOVFF	cf_fat16_data+23, STACK_0
$261C	$0E00	    			MOVLW	0
$261E	$6E01	    			MOVWF	STACK_0+1, 0
$2620	$5004	    			MOVF	STACK_4, 0, 0
$2622	$	L_Cf_Fat_Init_245:
$2622	$0108	    			MOVLB	8
$2624	$E005	    			BZ	L_Cf_Fat_Init_246
$2626	$3600	    			RLCF	STACK_0, 1, 0
$2628	$9000	    			BCF	STACK_0, 0, 0
$262A	$3601	    			RLCF	STACK_0+1, 1, 0
$262C	$0FFF	    			ADDLW	255
$262E	$D7F9	    			BRA	L_Cf_Fat_Init_245
$2630	$	L_Cf_Fat_Init_246:
$2630	$5044	    			MOVF	cf_fat16_data+22, 0, 0
$2632	$1000	    			IORWF	STACK_0, 0, 0
$2634	$0108	    			MOVLB	8
$2636	$6FE3	    			MOVWF	FLOC_Cf_Fat_Init+10, 1
$2638	$C001	F8E4			MOVFF	STACK_0+1, FLOC_Cf_Fat_Init+11
$263C	$0E00	    			MOVLW	0
$263E	$13E4	    			IORWF	FLOC_Cf_Fat_Init+11, 1, 1
$2640	$C8E3	F257			MOVFF	FLOC_Cf_Fat_Init+10, cf_fat16_SECTORS_PER_FAT
$2644	$C8E4	F258			MOVFF	FLOC_Cf_Fat_Init+11, cf_fat16_SECTORS_PER_FAT+1
$2648	$C03E	F000			MOVFF	cf_fat16_data+16, STACK_0
$264C	$0E00	    			MOVLW	0
$264E	$6E01	    			MOVWF	STACK_0+1, 0
$2650	$C8E3	F004			MOVFF	FLOC_Cf_Fat_Init+10, STACK_4
$2654	$C8E4	F005			MOVFF	FLOC_Cf_Fat_Init+11, STACK_4+1
$2658	$ECB1	F001			CALL	_mul_16x16_u
$265C	$0E00	    			MOVLW	0
$265E	$6E02	    			MOVWF	STACK_0+2, 0
$2660	$6E03	    			MOVWF	STACK_0+3, 0
$2662	$0102	    			MOVLB	2
$2664	$515E	    			MOVF	cf_fat16_BOOT_SECTOR, 0, 1
$2666	$2600	    			ADDWF	STACK_0, 1, 0
$2668	$515F	    			MOVF	cf_fat16_BOOT_SECTOR+1, 0, 1
$266A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$266C	$5160	    			MOVF	cf_fat16_BOOT_SECTOR+2, 0, 1
$266E	$2202	    			ADDWFC	STACK_0+2, 1, 0
$2670	$5161	    			MOVF	cf_fat16_BOOT_SECTOR+3, 0, 1
$2672	$2203	    			ADDWFC	STACK_0+3, 1, 0
$2674	$0108	    			MOVLB	8
$2676	$51E5	    			MOVF	FLOC_Cf_Fat_Init+12, 0, 1
$2678	$2400	    			ADDWF	STACK_0, 0, 0
$267A	$6FDF	    			MOVWF	FLOC_Cf_Fat_Init+6, 1
$267C	$51E6	    			MOVF	FLOC_Cf_Fat_Init+13, 0, 1
$267E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2680	$6FE0	    			MOVWF	FLOC_Cf_Fat_Init+7, 1
$2682	$0E00	    			MOVLW	0
$2684	$2002	    			ADDWFC	STACK_0+2, 0, 0
$2686	$6FE1	    			MOVWF	FLOC_Cf_Fat_Init+8, 1
$2688	$0E00	    			MOVLW	0
$268A	$2003	    			ADDWFC	STACK_0+3, 0, 0
$268C	$6FE2	    			MOVWF	FLOC_Cf_Fat_Init+9, 1
$268E	$C8DF	F241			MOVFF	FLOC_Cf_Fat_Init+6, cf_fat16_ROOT_START_SECTOR
$2692	$C8E0	F242			MOVFF	FLOC_Cf_Fat_Init+7, cf_fat16_ROOT_START_SECTOR+1
$2696	$C8E1	F243			MOVFF	FLOC_Cf_Fat_Init+8, cf_fat16_ROOT_START_SECTOR+2
$269A	$C8E2	F244			MOVFF	FLOC_Cf_Fat_Init+9, cf_fat16_ROOT_START_SECTOR+3
$269E	$0E08	    			MOVLW	8
$26A0	$6E04	    			MOVWF	STACK_4, 0
$26A2	$C040	F000			MOVFF	cf_fat16_data+18, STACK_0
$26A6	$0E00	    			MOVLW	0
$26A8	$6E01	    			MOVWF	STACK_0+1, 0
$26AA	$5004	    			MOVF	STACK_4, 0, 0
$26AC	$	L_Cf_Fat_Init_247:
$26AC	$0108	    			MOVLB	8
$26AE	$E005	    			BZ	L_Cf_Fat_Init_248
$26B0	$3600	    			RLCF	STACK_0, 1, 0
$26B2	$9000	    			BCF	STACK_0, 0, 0
$26B4	$3601	    			RLCF	STACK_0+1, 1, 0
$26B6	$0FFF	    			ADDLW	255
$26B8	$D7F9	    			BRA	L_Cf_Fat_Init_247
$26BA	$	L_Cf_Fat_Init_248:
$26BA	$0108	    			MOVLB	8
$26BC	$503F	    			MOVF	cf_fat16_data+17, 0, 0
$26BE	$1200	    			IORWF	STACK_0, 1, 0
$26C0	$0E00	    			MOVLW	0
$26C2	$1201	    			IORWF	STACK_0+1, 1, 0
$26C4	$C000	F259			MOVFF	STACK_0, cf_fat16_ROOT_ENTRIES
$26C8	$C001	F25A			MOVFF	STACK_0+1, cf_fat16_ROOT_ENTRIES+1
$26CC	$0E00	    			MOVLW	0
$26CE	$6E02	    			MOVWF	STACK_0+2, 0
$26D0	$6E03	    			MOVWF	STACK_0+3, 0
$26D2	$0E05	    			MOVLW	5
$26D4	$6E04	    			MOVWF	STACK_4, 0
$26D6	$5004	    			MOVF	STACK_4, 0, 0
$26D8	$	L_Cf_Fat_Init_249:
$26D8	$0108	    			MOVLB	8
$26DA	$E007	    			BZ	L_Cf_Fat_Init_250
$26DC	$3600	    			RLCF	STACK_0, 1, 0
$26DE	$9000	    			BCF	STACK_0, 0, 0
$26E0	$3601	    			RLCF	STACK_0+1, 1, 0
$26E2	$3602	    			RLCF	STACK_0+2, 1, 0
$26E4	$3603	    			RLCF	STACK_0+3, 1, 0
$26E6	$0FFF	    			ADDLW	255
$26E8	$D7F7	    			BRA	L_Cf_Fat_Init_249
$26EA	$	L_Cf_Fat_Init_250:
$26EA	$0108	    			MOVLB	8
$26EC	$51E7	    			MOVF	FLOC_Cf_Fat_Init+14, 0, 1
$26EE	$2400	    			ADDWF	STACK_0, 0, 0
$26F0	$6E08	    			MOVWF	STACK_8, 0
$26F2	$51E8	    			MOVF	FLOC_Cf_Fat_Init+15, 0, 1
$26F4	$2001	    			ADDWFC	STACK_0+1, 0, 0
$26F6	$6E09	    			MOVWF	STACK_8+1, 0
$26F8	$0E00	    			MOVLW	0
$26FA	$2002	    			ADDWFC	STACK_0+2, 0, 0
$26FC	$6E0A	    			MOVWF	STACK_8+2, 0
$26FE	$0E00	    			MOVLW	0
$2700	$2003	    			ADDWFC	STACK_0+3, 0, 0
$2702	$6E0B	    			MOVWF	STACK_8+3, 0
$2704	$0E01	    			MOVLW	1
$2706	$6E04	    			MOVWF	STACK_4, 0
$2708	$0E00	    			MOVLW	0
$270A	$6E05	    			MOVWF	STACK_4+1, 0
$270C	$6E06	    			MOVWF	STACK_4+2, 0
$270E	$6E07	    			MOVWF	STACK_4+3, 0
$2710	$C008	F000			MOVFF	STACK_8, STACK_0
$2714	$C009	F001			MOVFF	STACK_8+1, STACK_0+1
$2718	$C00A	F002			MOVFF	STACK_8+2, STACK_0+2
$271C	$C00B	F003			MOVFF	STACK_8+3, STACK_0+3
$2720	$5004	    			MOVF	STACK_4, 0, 0
$2722	$5E00	    			SUBWF	STACK_0, 1, 0
$2724	$5005	    			MOVF	STACK_4+1, 0, 0
$2726	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$2728	$5006	    			MOVF	STACK_4+2, 0, 0
$272A	$5A02	    			SUBWFB	STACK_0+2, 1, 0
$272C	$5007	    			MOVF	STACK_4+3, 0, 0
$272E	$5A03	    			SUBWFB	STACK_0+3, 1, 0
$2730	$C8E7	F004			MOVFF	FLOC_Cf_Fat_Init+14, STACK_4
$2734	$C8E8	F005			MOVFF	FLOC_Cf_Fat_Init+15, STACK_4+1
$2738	$0E00	    			MOVLW	0
$273A	$6E06	    			MOVWF	STACK_4+2, 0
$273C	$6E07	    			MOVWF	STACK_4+3, 0
$273E	$ECBA	F008			CALL	_div_32x32_s
$2742	$5000	    			MOVF	STACK_0, 0, 0
$2744	$0108	    			MOVLB	8
$2746	$25DF	    			ADDWF	FLOC_Cf_Fat_Init+6, 0, 1
$2748	$0102	    			MOVLB	2
$274A	$6F3D	    			MOVWF	cf_fat16_DATA_START_SECTOR, 1
$274C	$5001	    			MOVF	STACK_0+1, 0, 0
$274E	$0108	    			MOVLB	8
$2750	$21E0	    			ADDWFC	FLOC_Cf_Fat_Init+7, 0, 1
$2752	$0102	    			MOVLB	2
$2754	$6F3E	    			MOVWF	cf_fat16_DATA_START_SECTOR+1, 1
$2756	$5002	    			MOVF	STACK_0+2, 0, 0
$2758	$0108	    			MOVLB	8
$275A	$21E1	    			ADDWFC	FLOC_Cf_Fat_Init+8, 0, 1
$275C	$0102	    			MOVLB	2
$275E	$6F3F	    			MOVWF	cf_fat16_DATA_START_SECTOR+2, 1
$2760	$5003	    			MOVF	STACK_0+3, 0, 0
$2762	$0108	    			MOVLB	8
$2764	$21E2	    			ADDWFC	FLOC_Cf_Fat_Init+9, 0, 1
$2766	$0102	    			MOVLB	2
$2768	$6F40	    			MOVWF	cf_fat16_DATA_START_SECTOR+3, 1
$276A	$0108	    			MOVLB	8
$276C	$51E5	    			MOVF	FLOC_Cf_Fat_Init+12, 0, 1
$276E	$0102	    			MOVLB	2
$2770	$255E	    			ADDWF	cf_fat16_BOOT_SECTOR, 0, 1
$2772	$6E00	    			MOVWF	STACK_0, 0
$2774	$0108	    			MOVLB	8
$2776	$51E6	    			MOVF	FLOC_Cf_Fat_Init+13, 0, 1
$2778	$0102	    			MOVLB	2
$277A	$215F	    			ADDWFC	cf_fat16_BOOT_SECTOR+1, 0, 1
$277C	$6E01	    			MOVWF	STACK_0+1, 0
$277E	$0E00	    			MOVLW	0
$2780	$2160	    			ADDWFC	cf_fat16_BOOT_SECTOR+2, 0, 1
$2782	$6E02	    			MOVWF	STACK_0+2, 0
$2784	$0E00	    			MOVLW	0
$2786	$2161	    			ADDWFC	cf_fat16_BOOT_SECTOR+3, 0, 1
$2788	$6E03	    			MOVWF	STACK_0+3, 0
$278A	$C000	F02A			MOVFF	STACK_0, cf_fat16_FAT_START_SECTOR
$278E	$C001	F02B			MOVFF	STACK_0+1, cf_fat16_FAT_START_SECTOR+1
$2792	$C002	F02C			MOVFF	STACK_0+2, cf_fat16_FAT_START_SECTOR+2
$2796	$C003	F02D			MOVFF	STACK_0+3, cf_fat16_FAT_START_SECTOR+3
$279A	$0108	    			MOVLB	8
$279C	$51E3	    			MOVF	FLOC_Cf_Fat_Init+10, 0, 1
$279E	$2400	    			ADDWF	STACK_0, 0, 0
$27A0	$0102	    			MOVLB	2
$27A2	$6F30	    			MOVWF	cf_fat16_FAT2_START_SECTOR, 1
$27A4	$0108	    			MOVLB	8
$27A6	$51E4	    			MOVF	FLOC_Cf_Fat_Init+11, 0, 1
$27A8	$2001	    			ADDWFC	STACK_0+1, 0, 0
$27AA	$0102	    			MOVLB	2
$27AC	$6F31	    			MOVWF	cf_fat16_FAT2_START_SECTOR+1, 1
$27AE	$0E00	    			MOVLW	0
$27B0	$2002	    			ADDWFC	STACK_0+2, 0, 0
$27B2	$6F32	    			MOVWF	cf_fat16_FAT2_START_SECTOR+2, 1
$27B4	$0E00	    			MOVLW	0
$27B6	$2003	    			ADDWFC	STACK_0+3, 0, 0
$27B8	$6F33	    			MOVWF	cf_fat16_FAT2_START_SECTOR+3, 1
$27BA	$C8E7	F236			MOVFF	FLOC_Cf_Fat_Init+14, cf_fat16_CLUSTERS_PER_FAT_SECTOR
$27BE	$C8E8	F237			MOVFF	FLOC_Cf_Fat_Init+15, cf_fat16_CLUSTERS_PER_FAT_SECTOR+1
$27C2	$3337	    			RRCF	cf_fat16_CLUSTERS_PER_FAT_SECTOR+1, 1, 1
$27C4	$3336	    			RRCF	cf_fat16_CLUSTERS_PER_FAT_SECTOR, 1, 1
$27C6	$9F37	    			BCF	cf_fat16_CLUSTERS_PER_FAT_SECTOR+1, 7, 1
$27C8	$5044	    			MOVF	cf_fat16_data+22, 0, 0
$27CA	$1045	    			IORWF	cf_fat16_data+23, 0, 0
$27CC	$E055	    			BZ	L_Cf_Fat_Init_51
$27CE	$5042	    			MOVF	cf_fat16_data+20, 0, 0
$27D0	$1041	    			IORWF	cf_fat16_data+19, 0, 0
$27D2	$E005	    			BZ	L_Cf_Fat_Init_52
$27D4	$C041	F8D9			MOVFF	cf_fat16_data+19, Cf_Fat_Init_temp_L1
$27D8	$C042	F8DA			MOVFF	cf_fat16_data+20, Cf_Fat_Init_temp_L1+1
$27DC	$D008	    			BRA	L_Cf_Fat_Init_53
$27DE	$	L_Cf_Fat_Init_52:
$27DE	$C04E	F8D9			MOVFF	cf_fat16_data+32, Cf_Fat_Init_temp_L1
$27E2	$C04F	F8DA			MOVFF	cf_fat16_data+33, Cf_Fat_Init_temp_L1+1
$27E6	$C050	F8DB			MOVFF	cf_fat16_data+34, Cf_Fat_Init_temp_L1+2
$27EA	$C051	F8DC			MOVFF	cf_fat16_data+35, Cf_Fat_Init_temp_L1+3
$27EE	$	L_Cf_Fat_Init_53:
$27EE	$C8D9	F000			MOVFF	Cf_Fat_Init_temp_L1, STACK_0
$27F2	$C8DA	F001			MOVFF	Cf_Fat_Init_temp_L1+1, STACK_0+1
$27F6	$C8DB	F002			MOVFF	Cf_Fat_Init_temp_L1+2, STACK_0+2
$27FA	$C8DC	F003			MOVFF	Cf_Fat_Init_temp_L1+3, STACK_0+3
$27FE	$0102	    			MOVLB	2
$2800	$513D	    			MOVF	cf_fat16_DATA_START_SECTOR, 0, 1
$2802	$5E00	    			SUBWF	STACK_0, 1, 0
$2804	$513E	    			MOVF	cf_fat16_DATA_START_SECTOR+1, 0, 1
$2806	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$2808	$513F	    			MOVF	cf_fat16_DATA_START_SECTOR+2, 0, 1
$280A	$5A02	    			SUBWFB	STACK_0+2, 1, 0
$280C	$5140	    			MOVF	cf_fat16_DATA_START_SECTOR+3, 0, 1
$280E	$5A03	    			SUBWFB	STACK_0+3, 1, 0
$2810	$C23C	F004			MOVFF	cf_fat16_SECTORS_PER_CLUSTER, STACK_4
$2814	$0E00	    			MOVLW	0
$2816	$6E05	    			MOVWF	STACK_4+1, 0
$2818	$6E06	    			MOVWF	STACK_4+2, 0
$281A	$6E07	    			MOVWF	STACK_4+3, 0
$281C	$ECCE	F003			CALL	_div_32x32_u
$2820	$C000	F8D9			MOVFF	STACK_0, Cf_Fat_Init_temp_L1
$2824	$C001	F8DA			MOVFF	STACK_0+1, Cf_Fat_Init_temp_L1+1
$2828	$C002	F8DB			MOVFF	STACK_0+2, Cf_Fat_Init_temp_L1+2
$282C	$C003	F8DC			MOVFF	STACK_0+3, Cf_Fat_Init_temp_L1+3
$2830	$0E00	    			MOVLW	0
$2832	$5C03	    			SUBWF	STACK_0+3, 0, 0
$2834	$E108	    			BNZ	L_Cf_Fat_Init_251
$2836	$0E00	    			MOVLW	0
$2838	$5C02	    			SUBWF	STACK_0+2, 0, 0
$283A	$E105	    			BNZ	L_Cf_Fat_Init_251
$283C	$0E0F	    			MOVLW	15
$283E	$5C01	    			SUBWF	STACK_0+1, 0, 0
$2840	$E102	    			BNZ	L_Cf_Fat_Init_251
$2842	$0EF5	    			MOVLW	245
$2844	$5C00	    			SUBWF	STACK_0, 0, 0
$2846	$	L_Cf_Fat_Init_251:
$2846	$E204	    			BC	L_Cf_Fat_Init_54
$2848	$0E01	    			MOVLW	1
$284A	$0108	    			MOVLB	8
$284C	$6FDE	    			MOVWF	Cf_Fat_Init_rslt_L0, 1
$284E	$D013	    			BRA	L_Cf_Fat_Init_55
$2850	$	L_Cf_Fat_Init_54:
$2850	$0E00	    			MOVLW	0
$2852	$0108	    			MOVLB	8
$2854	$5DDC	    			SUBWF	Cf_Fat_Init_temp_L1+3, 0, 1
$2856	$E108	    			BNZ	L_Cf_Fat_Init_252
$2858	$0E00	    			MOVLW	0
$285A	$5DDB	    			SUBWF	Cf_Fat_Init_temp_L1+2, 0, 1
$285C	$E105	    			BNZ	L_Cf_Fat_Init_252
$285E	$0EFF	    			MOVLW	255
$2860	$5DDA	    			SUBWF	Cf_Fat_Init_temp_L1+1, 0, 1
$2862	$E102	    			BNZ	L_Cf_Fat_Init_252
$2864	$0EF5	    			MOVLW	245
$2866	$5DD9	    			SUBWF	Cf_Fat_Init_temp_L1, 0, 1
$2868	$	L_Cf_Fat_Init_252:
$2868	$E203	    			BC	L_Cf_Fat_Init_56
$286A	$0108	    			MOVLB	8
$286C	$6BDE	    			CLRF	Cf_Fat_Init_rslt_L0, 1
$286E	$D003	    			BRA	L_Cf_Fat_Init_57
$2870	$	L_Cf_Fat_Init_56:
$2870	$0E01	    			MOVLW	1
$2872	$0108	    			MOVLB	8
$2874	$6FDE	    			MOVWF	Cf_Fat_Init_rslt_L0, 1
$2876	$	L_Cf_Fat_Init_57:
$2876	$	L_Cf_Fat_Init_55:
$2876	$D004	    			BRA	L_Cf_Fat_Init_58
$2878	$	L_Cf_Fat_Init_51:
$2878	$0108	    			MOVLB	8
$287A	$0E01	    			MOVLW	1
$287C	$6E00	    			MOVWF	STACK_0, 0
$287E	$0012	    			RETURN
$2880	$	L_Cf_Fat_Init_58:
$2880	$	L_Cf_Fat_Init_50:
$2880	$0108	    			MOVLB	8
$2882	$C8DE	F000			MOVFF	Cf_Fat_Init_rslt_L0, STACK_0
$2886	$0012	    			RETURN
$2888	$	_Cf_Fat_Assign:
$2888	$0108	    			MOVLB	8
$288A	$6BD8	    			CLRF	Cf_Fat_Assign_j_L0, 1
$288C	$6BD9	    			CLRF	Cf_Fat_Assign_compare_L0, 1
$288E	$	L_Cf_Fat_Assign_75:
$288E	$0108	    			MOVLB	8
$2890	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2892	$25D5	    			ADDWF	FARG_Cf_Fat_Assign+0, 0, 1
$2894	$6EE9	    			MOVWF	FSR0L, 0
$2896	$0E00	    			MOVLW	0
$2898	$21D6	    			ADDWFC	FARG_Cf_Fat_Assign+1, 0, 1
$289A	$6EEA	    			MOVWF	FSR0L+1, 0
$289C	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$28A0	$5002	    			MOVF	STACK_2, 0, 0
$28A2	$0A00	    			XORLW	0
$28A4	$E04A	    			BZ	L_Cf_Fat_Assign_76
$28A6	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$28A8	$25D5	    			ADDWF	FARG_Cf_Fat_Assign+0, 0, 1
$28AA	$6EE9	    			MOVWF	FSR0L, 0
$28AC	$0E00	    			MOVLW	0
$28AE	$21D6	    			ADDWFC	FARG_Cf_Fat_Assign+1, 0, 1
$28B0	$6EEA	    			MOVWF	FSR0L+1, 0
$28B2	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$28B6	$5002	    			MOVF	STACK_2, 0, 0
$28B8	$0A2E	    			XORLW	46
$28BA	$E102	    			BNZ	L_Cf_Fat_Assign_77
$28BC	$C8D8	F8D9			MOVFF	Cf_Fat_Assign_j_L0, Cf_Fat_Assign_compare_L0
$28C0	$	L_Cf_Fat_Assign_77:
$28C0	$0108	    			MOVLB	8
$28C2	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$28C4	$25D5	    			ADDWF	FARG_Cf_Fat_Assign+0, 0, 1
$28C6	$6EE9	    			MOVWF	FSR0L, 0
$28C8	$0E00	    			MOVLW	0
$28CA	$21D6	    			ADDWFC	FARG_Cf_Fat_Assign+1, 0, 1
$28CC	$6EEA	    			MOVWF	FSR0L+1, 0
$28CE	$CFEE	F8EB			MOVFF	POSTINC0, FARG_islower+0
$28D2	$EC66	F009			CALL	_islower
$28D6	$5000	    			MOVF	STACK_0, 0, 0
$28D8	$1001	    			IORWF	STACK_0+1, 0, 0
$28DA	$E019	    			BZ	L_Cf_Fat_Assign_78
$28DC	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$28DE	$6FE9	    			MOVWF	FLOC_Cf_Fat_Assign+17, 1
$28E0	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$28E2	$6FEA	    			MOVWF	FLOC_Cf_Fat_Assign+18, 1
$28E4	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$28E6	$27E9	    			ADDWF	FLOC_Cf_Fat_Assign+17, 1, 1
$28E8	$B0D8	    			BTFSC	STATUS, C, 0
$28EA	$2BEA	    			INCF	FLOC_Cf_Fat_Assign+18, 1, 1
$28EC	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$28EE	$25D5	    			ADDWF	FARG_Cf_Fat_Assign+0, 0, 1
$28F0	$6EE9	    			MOVWF	FSR0L, 0
$28F2	$0E00	    			MOVLW	0
$28F4	$21D6	    			ADDWFC	FARG_Cf_Fat_Assign+1, 0, 1
$28F6	$6EEA	    			MOVWF	FSR0L+1, 0
$28F8	$CFEE	F8EB			MOVFF	POSTINC0, FARG_toupper+0
$28FC	$EC75	F009			CALL	_toupper
$2900	$C8E9	FFE1			MOVFF	FLOC_Cf_Fat_Assign+17, FSR1L
$2904	$C8EA	FFE2			MOVFF	FLOC_Cf_Fat_Assign+18, FSR1H
$2908	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$290C	$D013	    			BRA	L_Cf_Fat_Assign_79
$290E	$	L_Cf_Fat_Assign_78:
$290E	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$2910	$6EE1	    			MOVWF	FSR1L, 0
$2912	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$2914	$6EE2	    			MOVWF	FSR1L+1, 0
$2916	$0108	    			MOVLB	8
$2918	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$291A	$26E1	    			ADDWF	FSR1L, 1, 0
$291C	$B0D8	    			BTFSC	STATUS, C, 0
$291E	$2AE2	    			INCF	FSR1L+1, 1, 0
$2920	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2922	$25D5	    			ADDWF	FARG_Cf_Fat_Assign+0, 0, 1
$2924	$6EE9	    			MOVWF	FSR0L, 0
$2926	$0E00	    			MOVLW	0
$2928	$21D6	    			ADDWFC	FARG_Cf_Fat_Assign+1, 0, 1
$292A	$6EEA	    			MOVWF	FSR0L+1, 0
$292C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2930	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$2934	$	L_Cf_Fat_Assign_79:
$2934	$0108	    			MOVLB	8
$2936	$2BD8	    			INCF	Cf_Fat_Assign_j_L0, 1, 1
$2938	$D7AA	    			BRA	L_Cf_Fat_Assign_75
$293A	$	L_Cf_Fat_Assign_76:
$293A	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$293C	$6EE1	    			MOVWF	FSR1L, 0
$293E	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$2940	$6EE2	    			MOVWF	FSR1L+1, 0
$2942	$0108	    			MOVLB	8
$2944	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2946	$26E1	    			ADDWF	FSR1L, 1, 0
$2948	$B0D8	    			BTFSC	STATUS, C, 0
$294A	$2AE2	    			INCF	FSR1L+1, 1, 0
$294C	$6AE6	    			CLRF	POSTINC1, 0
$294E	$53D9	    			MOVF	Cf_Fat_Assign_compare_L0, 1, 1
$2950	$E05F	    			BZ	L_Cf_Fat_Assign_80
$2952	$C8D9	F8D8			MOVFF	Cf_Fat_Assign_compare_L0, Cf_Fat_Assign_j_L0
$2956	$	L_Cf_Fat_Assign_81:
$2956	$0E03	    			MOVLW	3
$2958	$0108	    			MOVLB	8
$295A	$25D9	    			ADDWF	Cf_Fat_Assign_compare_L0, 0, 1
$295C	$6E02	    			MOVWF	STACK_2, 0
$295E	$6A03	    			CLRF	STACK_2+1, 0
$2960	$0E00	    			MOVLW	0
$2962	$2203	    			ADDWFC	STACK_2+1, 1, 0
$2964	$0E80	    			MOVLW	128
$2966	$6E00	    			MOVWF	STACK_0, 0
$2968	$0E80	    			MOVLW	128
$296A	$1803	    			XORWF	STACK_2+1, 0, 0
$296C	$5C00	    			SUBWF	STACK_0, 0, 0
$296E	$E102	    			BNZ	L_Cf_Fat_Assign_254
$2970	$5002	    			MOVF	STACK_2, 0, 0
$2972	$5DD8	    			SUBWF	Cf_Fat_Assign_j_L0, 0, 1
$2974	$	L_Cf_Fat_Assign_254:
$2974	$E24D	    			BC	L_Cf_Fat_Assign_82
$2976	$0108	    			MOVLB	8
$2978	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$297A	$0F01	    			ADDLW	1
$297C	$6E00	    			MOVWF	STACK_0, 0
$297E	$6A01	    			CLRF	STACK_0+1, 0
$2980	$0E00	    			MOVLW	0
$2982	$2201	    			ADDWFC	STACK_0+1, 1, 0
$2984	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$2986	$2400	    			ADDWF	STACK_0, 0, 0
$2988	$6EE9	    			MOVWF	FSR0L, 0
$298A	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$298C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$298E	$6EEA	    			MOVWF	FSR0L+1, 0
$2990	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$2994	$5002	    			MOVF	STACK_2, 0, 0
$2996	$0A00	    			XORLW	0
$2998	$E11F	    			BNZ	L_Cf_Fat_Assign_84
$299A	$	L_Cf_Fat_Assign_85:
$299A	$0E02	    			MOVLW	2
$299C	$0108	    			MOVLB	8
$299E	$25D9	    			ADDWF	Cf_Fat_Assign_compare_L0, 0, 1
$29A0	$6E02	    			MOVWF	STACK_2, 0
$29A2	$6A03	    			CLRF	STACK_2+1, 0
$29A4	$0E00	    			MOVLW	0
$29A6	$2203	    			ADDWFC	STACK_2+1, 1, 0
$29A8	$0E80	    			MOVLW	128
$29AA	$1803	    			XORWF	STACK_2+1, 0, 0
$29AC	$6E00	    			MOVWF	STACK_0, 0
$29AE	$0E80	    			MOVLW	128
$29B0	$5C00	    			SUBWF	STACK_0, 0, 0
$29B2	$E102	    			BNZ	L_Cf_Fat_Assign_255
$29B4	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$29B6	$5C02	    			SUBWF	STACK_2, 0, 0
$29B8	$	L_Cf_Fat_Assign_255:
$29B8	$E30D	    			BNC	L_Cf_Fat_Assign_86
$29BA	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$29BC	$6EE1	    			MOVWF	FSR1L, 0
$29BE	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$29C0	$6EE2	    			MOVWF	FSR1L+1, 0
$29C2	$0108	    			MOVLB	8
$29C4	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$29C6	$26E1	    			ADDWF	FSR1L, 1, 0
$29C8	$B0D8	    			BTFSC	STATUS, C, 0
$29CA	$2AE2	    			INCF	FSR1L+1, 1, 0
$29CC	$0E20	    			MOVLW	32
$29CE	$6EE6	    			MOVWF	POSTINC1, 0
$29D0	$2BD8	    			INCF	Cf_Fat_Assign_j_L0, 1, 1
$29D2	$D7E3	    			BRA	L_Cf_Fat_Assign_85
$29D4	$	L_Cf_Fat_Assign_86:
$29D4	$0108	    			MOVLB	8
$29D6	$D01C	    			BRA	L_Cf_Fat_Assign_82
$29D8	$	L_Cf_Fat_Assign_84:
$29D8	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$29DA	$6EE1	    			MOVWF	FSR1L, 0
$29DC	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$29DE	$6EE2	    			MOVWF	FSR1L+1, 0
$29E0	$0108	    			MOVLB	8
$29E2	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$29E4	$26E1	    			ADDWF	FSR1L, 1, 0
$29E6	$B0D8	    			BTFSC	STATUS, C, 0
$29E8	$2AE2	    			INCF	FSR1L+1, 1, 0
$29EA	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$29EC	$0F01	    			ADDLW	1
$29EE	$6E00	    			MOVWF	STACK_0, 0
$29F0	$6A01	    			CLRF	STACK_0+1, 0
$29F2	$0E00	    			MOVLW	0
$29F4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$29F6	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$29F8	$2400	    			ADDWF	STACK_0, 0, 0
$29FA	$6EE9	    			MOVWF	FSR0L, 0
$29FC	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$29FE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2A00	$6EEA	    			MOVWF	FSR0L+1, 0
$2A02	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2A06	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$2A0A	$	L_Cf_Fat_Assign_83:
$2A0A	$0108	    			MOVLB	8
$2A0C	$2BD8	    			INCF	Cf_Fat_Assign_j_L0, 1, 1
$2A0E	$D7A3	    			BRA	L_Cf_Fat_Assign_81
$2A10	$	L_Cf_Fat_Assign_82:
$2A10	$	L_Cf_Fat_Assign_80:
$2A10	$0108	    			MOVLB	8
$2A12	$0108	    			MOVLB	8
$2A14	$07D8	    			DECF	Cf_Fat_Assign_j_L0, 1, 1
$2A16	$0E0A	    			MOVLW	10
$2A18	$5DD8	    			SUBWF	Cf_Fat_Assign_j_L0, 0, 1
$2A1A	$E230	    			BC	L_Cf_Fat_Assign_87
$2A1C	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$2A1E	$6EE9	    			MOVWF	FSR0L, 0
$2A20	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$2A22	$6EEA	    			MOVWF	FSR0L+1, 0
$2A24	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2A26	$26E9	    			ADDWF	FSR0L, 1, 0
$2A28	$B0D8	    			BTFSC	STATUS, C, 0
$2A2A	$2AEA	    			INCF	FSR0L+1, 1, 0
$2A2C	$CFEE	F8E7			MOVFF	POSTINC0, Cf_Fat_Assign_file_name_L0+10
$2A30	$07D8	    			DECF	Cf_Fat_Assign_j_L0, 1, 1
$2A32	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$2A34	$6EE9	    			MOVWF	FSR0L, 0
$2A36	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$2A38	$6EEA	    			MOVWF	FSR0L+1, 0
$2A3A	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2A3C	$26E9	    			ADDWF	FSR0L, 1, 0
$2A3E	$B0D8	    			BTFSC	STATUS, C, 0
$2A40	$2AEA	    			INCF	FSR0L+1, 1, 0
$2A42	$CFEE	F8E6			MOVFF	POSTINC0, Cf_Fat_Assign_file_name_L0+9
$2A46	$07D8	    			DECF	Cf_Fat_Assign_j_L0, 1, 1
$2A48	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$2A4A	$6EE9	    			MOVWF	FSR0L, 0
$2A4C	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$2A4E	$6EEA	    			MOVWF	FSR0L+1, 0
$2A50	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2A52	$26E9	    			ADDWF	FSR0L, 1, 0
$2A54	$B0D8	    			BTFSC	STATUS, C, 0
$2A56	$2AEA	    			INCF	FSR0L+1, 1, 0
$2A58	$CFEE	F8E5			MOVFF	POSTINC0, Cf_Fat_Assign_file_name_L0+8
$2A5C	$	L_Cf_Fat_Assign_88:
$2A5C	$0108	    			MOVLB	8
$2A5E	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2A60	$0807	    			SUBLW	7
$2A62	$E30C	    			BNC	L_Cf_Fat_Assign_89
$2A64	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$2A66	$6EE1	    			MOVWF	FSR1L, 0
$2A68	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$2A6A	$6EE2	    			MOVWF	FSR1L+1, 0
$2A6C	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2A6E	$26E1	    			ADDWF	FSR1L, 1, 0
$2A70	$B0D8	    			BTFSC	STATUS, C, 0
$2A72	$2AE2	    			INCF	FSR1L+1, 1, 0
$2A74	$0E20	    			MOVLW	32
$2A76	$6EE6	    			MOVWF	POSTINC1, 0
$2A78	$2BD8	    			INCF	Cf_Fat_Assign_j_L0, 1, 1
$2A7A	$D7F0	    			BRA	L_Cf_Fat_Assign_88
$2A7C	$	L_Cf_Fat_Assign_89:
$2A7C	$	L_Cf_Fat_Assign_87:
$2A7C	$0108	    			MOVLB	8
$2A7E	$6BE8	    			CLRF	Cf_Fat_Assign_file_name_L0+11, 1
$2A80	$0102	    			MOVLB	2
$2A82	$6B47	    			CLRF	cf_fat16_root_offset, 1
$2A84	$6B48	    			CLRF	cf_fat16_root_offset+1, 1
$2A86	$6B45	    			CLRF	cf_fat16_root_sector_pnt, 1
$2A88	$6B46	    			CLRF	cf_fat16_root_sector_pnt+1, 1
$2A8A	$C241	F901			MOVFF	cf_fat16_ROOT_START_SECTOR, FARG_Cf_Read_Sector+0
$2A8E	$C242	F902			MOVFF	cf_fat16_ROOT_START_SECTOR+1, FARG_Cf_Read_Sector+1
$2A92	$C243	F903			MOVFF	cf_fat16_ROOT_START_SECTOR+2, FARG_Cf_Read_Sector+2
$2A96	$C244	F904			MOVFF	cf_fat16_ROOT_START_SECTOR+3, FARG_Cf_Read_Sector+3
$2A9A	$0E2E	    			MOVLW	cf_fat16_data
$2A9C	$0109	    			MOVLB	9
$2A9E	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$2AA0	$0E00	    			MOVLW	@cf_fat16_data
$2AA2	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$2AA4	$EC5C	F001			CALL	_Cf_Read_Sector
$2AA8	$0108	    			MOVLB	8
$2AAA	$6BDA	    			CLRF	Cf_Fat_Assign_root_entry_cnt_L0, 1
$2AAC	$6BDB	    			CLRF	Cf_Fat_Assign_root_entry_cnt_L0+1, 1
$2AAE	$6BD9	    			CLRF	Cf_Fat_Assign_compare_L0, 1
$2AB0	$	L_Cf_Fat_Assign_90:
$2AB0	$0102	    			MOVLB	2
$2AB2	$5148	    			MOVF	cf_fat16_root_offset+1, 0, 1
$2AB4	$192F	    			XORWF	cf_fat16_BYTES_PER_SECTOR+1, 0, 1
$2AB6	$E102	    			BNZ	L_Cf_Fat_Assign_256
$2AB8	$512E	    			MOVF	cf_fat16_BYTES_PER_SECTOR, 0, 1
$2ABA	$1947	    			XORWF	cf_fat16_root_offset, 0, 1
$2ABC	$	L_Cf_Fat_Assign_256:
$2ABC	$E11E	    			BNZ	L_Cf_Fat_Assign_92
$2ABE	$0102	    			MOVLB	2
$2AC0	$6B47	    			CLRF	cf_fat16_root_offset, 1
$2AC2	$6B48	    			CLRF	cf_fat16_root_offset+1, 1
$2AC4	$4B45	    			INFSNZ	cf_fat16_root_sector_pnt, 1, 1
$2AC6	$2B46	    			INCF	cf_fat16_root_sector_pnt+1, 1, 1
$2AC8	$5145	    			MOVF	cf_fat16_root_sector_pnt, 0, 1
$2ACA	$2541	    			ADDWF	cf_fat16_ROOT_START_SECTOR, 0, 1
$2ACC	$0109	    			MOVLB	9
$2ACE	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$2AD0	$0102	    			MOVLB	2
$2AD2	$5146	    			MOVF	cf_fat16_root_sector_pnt+1, 0, 1
$2AD4	$2142	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+1, 0, 1
$2AD6	$0109	    			MOVLB	9
$2AD8	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$2ADA	$0E00	    			MOVLW	0
$2ADC	$0102	    			MOVLB	2
$2ADE	$2143	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+2, 0, 1
$2AE0	$0109	    			MOVLB	9
$2AE2	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$2AE4	$0E00	    			MOVLW	0
$2AE6	$0102	    			MOVLB	2
$2AE8	$2144	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+3, 0, 1
$2AEA	$0109	    			MOVLB	9
$2AEC	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$2AEE	$0E2E	    			MOVLW	cf_fat16_data
$2AF0	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$2AF2	$0E00	    			MOVLW	@cf_fat16_data
$2AF4	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$2AF6	$EC5C	F001			CALL	_Cf_Read_Sector
$2AFA	$	L_Cf_Fat_Assign_92:
$2AFA	$0108	    			MOVLB	8
$2AFC	$6BD9	    			CLRF	Cf_Fat_Assign_compare_L0, 1
$2AFE	$6BD8	    			CLRF	Cf_Fat_Assign_j_L0, 1
$2B00	$	L_Cf_Fat_Assign_93:
$2B00	$0108	    			MOVLB	8
$2B02	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2B04	$080A	    			SUBLW	10
$2B06	$E321	    			BNC	L_Cf_Fat_Assign_94
$2B08	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2B0A	$0102	    			MOVLB	2
$2B0C	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$2B0E	$6E00	    			MOVWF	STACK_0, 0
$2B10	$0E00	    			MOVLW	0
$2B12	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$2B14	$6E01	    			MOVWF	STACK_0+1, 0
$2B16	$0E2E	    			MOVLW	cf_fat16_data
$2B18	$2400	    			ADDWF	STACK_0, 0, 0
$2B1A	$6EE9	    			MOVWF	FSR0L, 0
$2B1C	$0E00	    			MOVLW	@cf_fat16_data
$2B1E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2B20	$6EEA	    			MOVWF	FSR0L+1, 0
$2B22	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$2B26	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$2B28	$6EE9	    			MOVWF	FSR0L, 0
$2B2A	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$2B2C	$6EEA	    			MOVWF	FSR0L+1, 0
$2B2E	$0108	    			MOVLB	8
$2B30	$51D8	    			MOVF	Cf_Fat_Assign_j_L0, 0, 1
$2B32	$26E9	    			ADDWF	FSR0L, 1, 0
$2B34	$B0D8	    			BTFSC	STATUS, C, 0
$2B36	$2AEA	    			INCF	FSR0L+1, 1, 0
$2B38	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$2B3C	$5004	    			MOVF	STACK_4, 0, 0
$2B3E	$1802	    			XORWF	STACK_2, 0, 0
$2B40	$B4D8	    			BTFSC	STATUS, Z, 0
$2B42	$2BD9	    			INCF	Cf_Fat_Assign_compare_L0, 1, 1
$2B44	$	L_Cf_Fat_Assign_96:
$2B44	$	L_Cf_Fat_Assign_95:
$2B44	$0108	    			MOVLB	8
$2B46	$2BD8	    			INCF	Cf_Fat_Assign_j_L0, 1, 1
$2B48	$D7DB	    			BRA	L_Cf_Fat_Assign_93
$2B4A	$	L_Cf_Fat_Assign_94:
$2B4A	$0108	    			MOVLB	8
$2B4C	$4BDA	    			INFSNZ	Cf_Fat_Assign_root_entry_cnt_L0, 1, 1
$2B4E	$2BDB	    			INCF	Cf_Fat_Assign_root_entry_cnt_L0+1, 1, 1
$2B50	$0E2E	    			MOVLW	cf_fat16_data
$2B52	$0102	    			MOVLB	2
$2B54	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$2B56	$6EE9	    			MOVWF	FSR0L, 0
$2B58	$0E00	    			MOVLW	@cf_fat16_data
$2B5A	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$2B5C	$6EEA	    			MOVWF	FSR0L+1, 0
$2B5E	$CFEE	F8DC			MOVFF	POSTINC0, Cf_Fat_Assign_from_data_L0
$2B62	$0E20	    			MOVLW	32
$2B64	$2747	    			ADDWF	cf_fat16_root_offset, 1, 1
$2B66	$0E00	    			MOVLW	0
$2B68	$2348	    			ADDWFC	cf_fat16_root_offset+1, 1, 1
$2B6A	$0108	    			MOVLB	8
$2B6C	$51D9	    			MOVF	Cf_Fat_Assign_compare_L0, 0, 1
$2B6E	$0A0B	    			XORLW	11
$2B70	$E011	    			BZ	L_Cf_Fat_Assign_97
$2B72	$51DB	    			MOVF	Cf_Fat_Assign_root_entry_cnt_L0+1, 0, 1
$2B74	$0102	    			MOVLB	2
$2B76	$195A	    			XORWF	cf_fat16_ROOT_ENTRIES+1, 0, 1
$2B78	$E103	    			BNZ	L_Cf_Fat_Assign_257
$2B7A	$5159	    			MOVF	cf_fat16_ROOT_ENTRIES, 0, 1
$2B7C	$0108	    			MOVLB	8
$2B7E	$19DA	    			XORWF	Cf_Fat_Assign_root_entry_cnt_L0, 0, 1
$2B80	$	L_Cf_Fat_Assign_257:
$2B80	$E103	    			BNZ	L_Cf_Fat_Assign_98
$2B82	$0E1E	    			MOVLW	30
$2B84	$0108	    			MOVLB	8
$2B86	$6FD9	    			MOVWF	Cf_Fat_Assign_compare_L0, 1
$2B88	$	L_Cf_Fat_Assign_98:
$2B88	$0108	    			MOVLB	8
$2B8A	$51DC	    			MOVF	Cf_Fat_Assign_from_data_L0, 0, 1
$2B8C	$0A00	    			XORLW	0
$2B8E	$E102	    			BNZ	L_Cf_Fat_Assign_99
$2B90	$0E19	    			MOVLW	25
$2B92	$6FD9	    			MOVWF	Cf_Fat_Assign_compare_L0, 1
$2B94	$	L_Cf_Fat_Assign_99:
$2B94	$	L_Cf_Fat_Assign_97:
$2B94	$0108	    			MOVLB	8
$2B96	$51D9	    			MOVF	Cf_Fat_Assign_compare_L0, 0, 1
$2B98	$080A	    			SUBLW	10
$2B9A	$E28A	    			BC	L_Cf_Fat_Assign_90
$2B9C	$	L_Cf_Fat_Assign_91:
$2B9C	$0E14	    			MOVLW	20
$2B9E	$0108	    			MOVLB	8
$2BA0	$5DD9	    			SUBWF	Cf_Fat_Assign_compare_L0, 0, 1
$2BA2	$E249	    			BC	L_Cf_Fat_Assign_100
$2BA4	$0E20	    			MOVLW	32
$2BA6	$0102	    			MOVLB	2
$2BA8	$5D47	    			SUBWF	cf_fat16_root_offset, 0, 1
$2BAA	$6E00	    			MOVWF	STACK_0, 0
$2BAC	$0E00	    			MOVLW	0
$2BAE	$5948	    			SUBWFB	cf_fat16_root_offset+1, 0, 1
$2BB0	$6E01	    			MOVWF	STACK_0+1, 0
$2BB2	$C000	F247			MOVFF	STACK_0, cf_fat16_root_offset
$2BB6	$C001	F248			MOVFF	STACK_0+1, cf_fat16_root_offset+1
$2BBA	$0E1A	    			MOVLW	26
$2BBC	$2600	    			ADDWF	STACK_0, 1, 0
$2BBE	$0E00	    			MOVLW	0
$2BC0	$2201	    			ADDWFC	STACK_0+1, 1, 0
$2BC2	$0E2E	    			MOVLW	cf_fat16_data
$2BC4	$2400	    			ADDWF	STACK_0, 0, 0
$2BC6	$6EE9	    			MOVWF	FSR0L, 0
$2BC8	$0E00	    			MOVLW	@cf_fat16_data
$2BCA	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2BCC	$6EEA	    			MOVWF	FSR0L+1, 0
$2BCE	$CFEE	F234			MOVFF	POSTINC0, cf_fat16_file_write_cluster
$2BD2	$CFEE	F235			MOVFF	POSTINC0, cf_fat16_file_write_cluster+1
$2BD6	$EC17	F006			CALL	cf_fat16_Set_File_Write_Sector
$2BDA	$0E1C	    			MOVLW	28
$2BDC	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$2BDE	$6E00	    			MOVWF	STACK_0, 0
$2BE0	$0E00	    			MOVLW	0
$2BE2	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$2BE4	$6E01	    			MOVWF	STACK_0+1, 0
$2BE6	$0E2E	    			MOVLW	cf_fat16_data
$2BE8	$2400	    			ADDWF	STACK_0, 0, 0
$2BEA	$6EE9	    			MOVWF	FSR0L, 0
$2BEC	$0E00	    			MOVLW	@cf_fat16_data
$2BEE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2BF0	$6EEA	    			MOVWF	FSR0L+1, 0
$2BF2	$CFEE	F24D			MOVFF	POSTINC0, cf_fat16_file_size_bytes
$2BF6	$CFEE	F24E			MOVFF	POSTINC0, cf_fat16_file_size_bytes+1
$2BFA	$CFEE	F24F			MOVFF	POSTINC0, cf_fat16_file_size_bytes+2
$2BFE	$CFEE	F250			MOVFF	POSTINC0, cf_fat16_file_size_bytes+3
$2C02	$EC80	F009			CALL	cf_fat16_Set_Fat_Start_Pos
$2C06	$0E0E	    			MOVLW	14
$2C08	$0102	    			MOVLB	2
$2C0A	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$2C0C	$6E00	    			MOVWF	STACK_0, 0
$2C0E	$0E00	    			MOVLW	0
$2C10	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$2C12	$6E01	    			MOVWF	STACK_0+1, 0
$2C14	$0E2E	    			MOVLW	cf_fat16_data
$2C16	$2400	    			ADDWF	STACK_0, 0, 0
$2C18	$6EE9	    			MOVWF	FSR0L, 0
$2C1A	$0E00	    			MOVLW	@cf_fat16_data
$2C1C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2C1E	$6EEA	    			MOVWF	FSR0L+1, 0
$2C20	$CFEE	F264			MOVFF	POSTINC0, cf_fat16_time
$2C24	$CFEE	F265			MOVFF	POSTINC0, cf_fat16_time+1
$2C28	$CFEE	F262			MOVFF	POSTINC0, cf_fat16_date
$2C2C	$CFEE	F263			MOVFF	POSTINC0, cf_fat16_date+1
$2C30	$0E01	    			MOVLW	1
$2C32	$6E00	    			MOVWF	STACK_0, 0
$2C34	$0012	    			RETURN
$2C36	$	L_Cf_Fat_Assign_100:
$2C36	$0108	    			MOVLB	8
$2C38	$AFD7	    			BTFSS	FARG_Cf_Fat_Assign+2, 7, 1
$2C3A	$D00C	    			BRA	L_Cf_Fat_Assign_102
$2C3C	$0EDD	    			MOVLW	Cf_Fat_Assign_file_name_L0
$2C3E	$6FEB	    			MOVWF	FARG_Cf_Fat_Create+0, 1
$2C40	$0E08	    			MOVLW	@Cf_Fat_Assign_file_name_L0
$2C42	$6FEC	    			MOVWF	FARG_Cf_Fat_Create+1, 1
$2C44	$0E7F	    			MOVLW	127
$2C46	$15D7	    			ANDWF	FARG_Cf_Fat_Assign+2, 0, 1
$2C48	$6FED	    			MOVWF	FARG_Cf_Fat_Create+2, 1
$2C4A	$ECC8	F009			CALL	_Cf_Fat_Create
$2C4E	$0E01	    			MOVLW	1
$2C50	$6E00	    			MOVWF	STACK_0, 0
$2C52	$0012	    			RETURN
$2C54	$	L_Cf_Fat_Assign_102:
$2C54	$6A00	    			CLRF	STACK_0, 0
$2C56	$0012	    			RETURN
$2C58	$	_Cf_Fat_Rewrite:
$2C58	$0EFF	    			MOVLW	255
$2C5A	$0108	    			MOVLB	8
$2C5C	$6FEB	    			MOVWF	FARG_cf_fat16_Reset_Fat_Chain+0, 1
$2C5E	$ECC2	F00A			CALL	cf_fat16_Reset_Fat_Chain
$2C62	$0102	    			MOVLB	2
$2C64	$6B49	    			CLRF	cf_fat16_file_offset, 1
$2C66	$6B4A	    			CLRF	cf_fat16_file_offset+1, 1
$2C68	$6B4B	    			CLRF	cf_fat16_file_offset+2, 1
$2C6A	$6B4C	    			CLRF	cf_fat16_file_offset+3, 1
$2C6C	$6B4D	    			CLRF	cf_fat16_file_size_bytes, 1
$2C6E	$6B4E	    			CLRF	cf_fat16_file_size_bytes+1, 1
$2C70	$6B4F	    			CLRF	cf_fat16_file_size_bytes+2, 1
$2C72	$6B50	    			CLRF	cf_fat16_file_size_bytes+3, 1
$2C74	$6B5B	    			CLRF	cf_fat16_sectors_in_cur_cluster, 1
$2C76	$ECFE	F005			CALL	cf_fat16_Set_File_Write_Cluster
$2C7A	$EC17	F006			CALL	cf_fat16_Set_File_Write_Sector
$2C7E	$5145	    			MOVF	cf_fat16_root_sector_pnt, 0, 1
$2C80	$2541	    			ADDWF	cf_fat16_ROOT_START_SECTOR, 0, 1
$2C82	$0109	    			MOVLB	9
$2C84	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$2C86	$0102	    			MOVLB	2
$2C88	$5146	    			MOVF	cf_fat16_root_sector_pnt+1, 0, 1
$2C8A	$2142	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+1, 0, 1
$2C8C	$0109	    			MOVLB	9
$2C8E	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$2C90	$0E00	    			MOVLW	0
$2C92	$0102	    			MOVLB	2
$2C94	$2143	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+2, 0, 1
$2C96	$0109	    			MOVLB	9
$2C98	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$2C9A	$0E00	    			MOVLW	0
$2C9C	$0102	    			MOVLB	2
$2C9E	$2144	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+3, 0, 1
$2CA0	$0109	    			MOVLB	9
$2CA2	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$2CA4	$0E2E	    			MOVLW	cf_fat16_data
$2CA6	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$2CA8	$0E00	    			MOVLW	@cf_fat16_data
$2CAA	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$2CAC	$EC5C	F001			CALL	_Cf_Read_Sector
$2CB0	$0E1C	    			MOVLW	28
$2CB2	$0102	    			MOVLB	2
$2CB4	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$2CB6	$6E00	    			MOVWF	STACK_0, 0
$2CB8	$0E00	    			MOVLW	0
$2CBA	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$2CBC	$6E01	    			MOVWF	STACK_0+1, 0
$2CBE	$0E2E	    			MOVLW	cf_fat16_data
$2CC0	$2400	    			ADDWF	STACK_0, 0, 0
$2CC2	$6EE1	    			MOVWF	FSR1L, 0
$2CC4	$0E00	    			MOVLW	@cf_fat16_data
$2CC6	$2001	    			ADDWFC	STACK_0+1, 0, 0
$2CC8	$6EE2	    			MOVWF	FSR1L+1, 0
$2CCA	$6AE6	    			CLRF	POSTINC1, 0
$2CCC	$6AE6	    			CLRF	POSTINC1, 0
$2CCE	$6AE6	    			CLRF	POSTINC1, 0
$2CD0	$6AE6	    			CLRF	POSTINC1, 0
$2CD2	$5145	    			MOVF	cf_fat16_root_sector_pnt, 0, 1
$2CD4	$2541	    			ADDWF	cf_fat16_ROOT_START_SECTOR, 0, 1
$2CD6	$0109	    			MOVLB	9
$2CD8	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$2CDA	$0102	    			MOVLB	2
$2CDC	$5146	    			MOVF	cf_fat16_root_sector_pnt+1, 0, 1
$2CDE	$2142	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+1, 0, 1
$2CE0	$0109	    			MOVLB	9
$2CE2	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$2CE4	$0E00	    			MOVLW	0
$2CE6	$0102	    			MOVLB	2
$2CE8	$2143	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+2, 0, 1
$2CEA	$0109	    			MOVLB	9
$2CEC	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$2CEE	$0E00	    			MOVLW	0
$2CF0	$0102	    			MOVLB	2
$2CF2	$2144	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+3, 0, 1
$2CF4	$0109	    			MOVLB	9
$2CF6	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$2CF8	$0E2E	    			MOVLW	cf_fat16_data
$2CFA	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$2CFC	$0E00	    			MOVLW	@cf_fat16_data
$2CFE	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$2D00	$EC89	F001			CALL	_Cf_Write_Sector
$2D04	$0012	    			RETURN
$2D06	$	_IntToStr:
$2D06	$0108	    			MOVLB	8
$2D08	$6BDA	    			CLRF	IntToStr_negative_L0, 1
$2D0A	$C8D5	F8DB			MOVFF	FARG_IntToStr+0, IntToStr_inword_L0
$2D0E	$C8D6	F8DC			MOVFF	FARG_IntToStr+1, IntToStr_inword_L0+1
$2D12	$0E80	    			MOVLW	128
$2D14	$19D6	    			XORWF	FARG_IntToStr+1, 0, 1
$2D16	$6E00	    			MOVWF	STACK_0, 0
$2D18	$0E80	    			MOVLW	128
$2D1A	$5C00	    			SUBWF	STACK_0, 0, 0
$2D1C	$E102	    			BNZ	L_IntToStr_52
$2D1E	$0E00	    			MOVLW	0
$2D20	$5DD5	    			SUBWF	FARG_IntToStr+0, 0, 1
$2D22	$	L_IntToStr_52:
$2D22	$E20A	    			BC	L_IntToStr_12
$2D24	$0E01	    			MOVLW	1
$2D26	$0108	    			MOVLB	8
$2D28	$6FDA	    			MOVWF	IntToStr_negative_L0, 1
$2D2A	$51D5	    			MOVF	FARG_IntToStr+0, 0, 1
$2D2C	$0800	    			SUBLW	0
$2D2E	$6FDB	    			MOVWF	IntToStr_inword_L0, 1
$2D30	$C8D6	F8DC			MOVFF	FARG_IntToStr+1, IntToStr_inword_L0+1
$2D34	$6AE8	    			CLRF	WREG, 0
$2D36	$57DC	    			SUBFWB	IntToStr_inword_L0+1, 1, 1
$2D38	$	L_IntToStr_12:
$2D38	$C8DB	F8EB			MOVFF	IntToStr_inword_L0, FARG_WordToStr+0
$2D3C	$C8DC	F8EC			MOVFF	IntToStr_inword_L0+1, FARG_WordToStr+1
$2D40	$C8D7	F8ED			MOVFF	FARG_IntToStr+2, FARG_WordToStr+2
$2D44	$C8D8	F8EE			MOVFF	FARG_IntToStr+3, FARG_WordToStr+3
$2D48	$ECE9	F00B			CALL	_WordToStr
$2D4C	$0E06	    			MOVLW	6
$2D4E	$0108	    			MOVLB	8
$2D50	$6FD9	    			MOVWF	IntToStr_i_L0, 1
$2D52	$	L_IntToStr_13:
$2D52	$0108	    			MOVLB	8
$2D54	$51D9	    			MOVF	IntToStr_i_L0, 0, 1
$2D56	$0800	    			SUBLW	0
$2D58	$E217	    			BC	L_IntToStr_14
$2D5A	$51D9	    			MOVF	IntToStr_i_L0, 0, 1
$2D5C	$25D7	    			ADDWF	FARG_IntToStr+2, 0, 1
$2D5E	$6EE1	    			MOVWF	FSR1L, 0
$2D60	$0E00	    			MOVLW	0
$2D62	$21D8	    			ADDWFC	FARG_IntToStr+3, 0, 1
$2D64	$6EE2	    			MOVWF	FSR1L+1, 0
$2D66	$05D9	    			DECF	IntToStr_i_L0, 0, 1
$2D68	$6E00	    			MOVWF	STACK_0, 0
$2D6A	$6A01	    			CLRF	STACK_0+1, 0
$2D6C	$0E00	    			MOVLW	0
$2D6E	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$2D70	$5000	    			MOVF	STACK_0, 0, 0
$2D72	$25D7	    			ADDWF	FARG_IntToStr+2, 0, 1
$2D74	$6EE9	    			MOVWF	FSR0L, 0
$2D76	$5001	    			MOVF	STACK_0+1, 0, 0
$2D78	$21D8	    			ADDWFC	FARG_IntToStr+3, 0, 1
$2D7A	$6EEA	    			MOVWF	FSR0L+1, 0
$2D7C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2D80	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$2D84	$07D9	    			DECF	IntToStr_i_L0, 1, 1
$2D86	$D7E5	    			BRA	L_IntToStr_13
$2D88	$	L_IntToStr_14:
$2D88	$C8D7	FFE1			MOVFF	FARG_IntToStr+2, FSR1L
$2D8C	$C8D8	FFE2			MOVFF	FARG_IntToStr+3, FSR1H
$2D90	$0E20	    			MOVLW	32
$2D92	$6EE6	    			MOVWF	POSTINC1, 0
$2D94	$0108	    			MOVLB	8
$2D96	$53DA	    			MOVF	IntToStr_negative_L0, 1, 1
$2D98	$E019	    			BZ	L_IntToStr_15
$2D9A	$6BD9	    			CLRF	IntToStr_i_L0, 1
$2D9C	$	L_IntToStr_16:
$2D9C	$0108	    			MOVLB	8
$2D9E	$51D9	    			MOVF	IntToStr_i_L0, 0, 1
$2DA0	$25D7	    			ADDWF	FARG_IntToStr+2, 0, 1
$2DA2	$6EE9	    			MOVWF	FSR0L, 0
$2DA4	$0E00	    			MOVLW	0
$2DA6	$21D8	    			ADDWFC	FARG_IntToStr+3, 0, 1
$2DA8	$6EEA	    			MOVWF	FSR0L+1, 0
$2DAA	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$2DAE	$5002	    			MOVF	STACK_2, 0, 0
$2DB0	$0A20	    			XORLW	32
$2DB2	$E102	    			BNZ	L_IntToStr_17
$2DB4	$2BD9	    			INCF	IntToStr_i_L0, 1, 1
$2DB6	$D7F2	    			BRA	L_IntToStr_16
$2DB8	$	L_IntToStr_17:
$2DB8	$0108	    			MOVLB	8
$2DBA	$07D9	    			DECF	IntToStr_i_L0, 1, 1
$2DBC	$51D9	    			MOVF	IntToStr_i_L0, 0, 1
$2DBE	$25D7	    			ADDWF	FARG_IntToStr+2, 0, 1
$2DC0	$6EE1	    			MOVWF	FSR1L, 0
$2DC2	$0E00	    			MOVLW	0
$2DC4	$21D8	    			ADDWFC	FARG_IntToStr+3, 0, 1
$2DC6	$6EE2	    			MOVWF	FSR1L+1, 0
$2DC8	$0E2D	    			MOVLW	45
$2DCA	$6EE6	    			MOVWF	POSTINC1, 0
$2DCC	$	L_IntToStr_15:
$2DCC	$0012	    			RETURN
$2DCE	$	_Cf_Fat_Reset:
$2DCE	$0102	    			MOVLB	2
$2DD0	$6B49	    			CLRF	cf_fat16_file_offset, 1
$2DD2	$6B4A	    			CLRF	cf_fat16_file_offset+1, 1
$2DD4	$6B4B	    			CLRF	cf_fat16_file_offset+2, 1
$2DD6	$6B4C	    			CLRF	cf_fat16_file_offset+3, 1
$2DD8	$C8D5	FFE1			MOVFF	FARG_Cf_Fat_Reset+0, FSR1L
$2DDC	$C8D6	FFE2			MOVFF	FARG_Cf_Fat_Reset+1, FSR1H
$2DE0	$C24D	FFE6			MOVFF	cf_fat16_file_size_bytes, POSTINC1
$2DE4	$C24E	FFE6			MOVFF	cf_fat16_file_size_bytes+1, POSTINC1
$2DE8	$C24F	FFE6			MOVFF	cf_fat16_file_size_bytes+2, POSTINC1
$2DEC	$C250	FFE6			MOVFF	cf_fat16_file_size_bytes+3, POSTINC1
$2DF0	$6B5B	    			CLRF	cf_fat16_sectors_in_cur_cluster, 1
$2DF2	$C238	F901			MOVFF	cf_fat16_file_write_sector, FARG_Cf_Read_Sector+0
$2DF6	$C239	F902			MOVFF	cf_fat16_file_write_sector+1, FARG_Cf_Read_Sector+1
$2DFA	$C23A	F903			MOVFF	cf_fat16_file_write_sector+2, FARG_Cf_Read_Sector+2
$2DFE	$C23B	F904			MOVFF	cf_fat16_file_write_sector+3, FARG_Cf_Read_Sector+3
$2E02	$0E2E	    			MOVLW	cf_fat16_data
$2E04	$0109	    			MOVLB	9
$2E06	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$2E08	$0E00	    			MOVLW	@cf_fat16_data
$2E0A	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$2E0C	$EC5C	F001			CALL	_Cf_Read_Sector
$2E10	$0012	    			RETURN
$2E12	$	_Cf_Fat_Read:
$2E12	$0E2E	    			MOVLW	cf_fat16_data
$2E14	$0102	    			MOVLB	2
$2E16	$2549	    			ADDWF	cf_fat16_file_offset, 0, 1
$2E18	$6EE9	    			MOVWF	FSR0L, 0
$2E1A	$0E00	    			MOVLW	@cf_fat16_data
$2E1C	$214A	    			ADDWFC	cf_fat16_file_offset+1, 0, 1
$2E1E	$6EEA	    			MOVWF	FSR0L+1, 0
$2E20	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2E24	$C8D5	FFE1			MOVFF	FARG_Cf_Fat_Read+0, FSR1L
$2E28	$C8D6	FFE2			MOVFF	FARG_Cf_Fat_Read+1, FSR1H
$2E2C	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$2E30	$0E01	    			MOVLW	1
$2E32	$2749	    			ADDWF	cf_fat16_file_offset, 1, 1
$2E34	$0E00	    			MOVLW	0
$2E36	$234A	    			ADDWFC	cf_fat16_file_offset+1, 1, 1
$2E38	$234B	    			ADDWFC	cf_fat16_file_offset+2, 1, 1
$2E3A	$234C	    			ADDWFC	cf_fat16_file_offset+3, 1, 1
$2E3C	$0E00	    			MOVLW	0
$2E3E	$6E00	    			MOVWF	STACK_0, 0
$2E40	$194C	    			XORWF	cf_fat16_file_offset+3, 0, 1
$2E42	$E108	    			BNZ	L_Cf_Fat_Read_258
$2E44	$5000	    			MOVF	STACK_0, 0, 0
$2E46	$194B	    			XORWF	cf_fat16_file_offset+2, 0, 1
$2E48	$E105	    			BNZ	L_Cf_Fat_Read_258
$2E4A	$512F	    			MOVF	cf_fat16_BYTES_PER_SECTOR+1, 0, 1
$2E4C	$194A	    			XORWF	cf_fat16_file_offset+1, 0, 1
$2E4E	$E102	    			BNZ	L_Cf_Fat_Read_258
$2E50	$5149	    			MOVF	cf_fat16_file_offset, 0, 1
$2E52	$192E	    			XORWF	cf_fat16_BYTES_PER_SECTOR, 0, 1
$2E54	$	L_Cf_Fat_Read_258:
$2E54	$E121	    			BNZ	L_Cf_Fat_Read_104
$2E56	$0E01	    			MOVLW	1
$2E58	$0102	    			MOVLB	2
$2E5A	$2738	    			ADDWF	cf_fat16_file_write_sector, 1, 1
$2E5C	$0E00	    			MOVLW	0
$2E5E	$2339	    			ADDWFC	cf_fat16_file_write_sector+1, 1, 1
$2E60	$233A	    			ADDWFC	cf_fat16_file_write_sector+2, 1, 1
$2E62	$233B	    			ADDWFC	cf_fat16_file_write_sector+3, 1, 1
$2E64	$6B49	    			CLRF	cf_fat16_file_offset, 1
$2E66	$6B4A	    			CLRF	cf_fat16_file_offset+1, 1
$2E68	$6B4B	    			CLRF	cf_fat16_file_offset+2, 1
$2E6A	$6B4C	    			CLRF	cf_fat16_file_offset+3, 1
$2E6C	$2B5B	    			INCF	cf_fat16_sectors_in_cur_cluster, 1, 1
$2E6E	$515B	    			MOVF	cf_fat16_sectors_in_cur_cluster, 0, 1
$2E70	$193C	    			XORWF	cf_fat16_SECTORS_PER_CLUSTER, 0, 1
$2E72	$E103	    			BNZ	L_Cf_Fat_Read_105
$2E74	$6B5B	    			CLRF	cf_fat16_sectors_in_cur_cluster, 1
$2E76	$EC4D	F00C			CALL	cf_fat16_Fat_Chain_Next
$2E7A	$	L_Cf_Fat_Read_105:
$2E7A	$C238	F901			MOVFF	cf_fat16_file_write_sector, FARG_Cf_Read_Sector+0
$2E7E	$C239	F902			MOVFF	cf_fat16_file_write_sector+1, FARG_Cf_Read_Sector+1
$2E82	$C23A	F903			MOVFF	cf_fat16_file_write_sector+2, FARG_Cf_Read_Sector+2
$2E86	$C23B	F904			MOVFF	cf_fat16_file_write_sector+3, FARG_Cf_Read_Sector+3
$2E8A	$0E2E	    			MOVLW	cf_fat16_data
$2E8C	$0109	    			MOVLB	9
$2E8E	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$2E90	$0E00	    			MOVLW	@cf_fat16_data
$2E92	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$2E94	$EC5C	F001			CALL	_Cf_Read_Sector
$2E98	$	L_Cf_Fat_Read_104:
$2E98	$0012	    			RETURN
$2E9A	$	_Num_to_0str:
;log.c,165 :: 			void Num_to_0str(unsigned char num, unsigned char *p_str)  // преобразует число (0..255) в строку из трех символов  лидирующие - нули
;log.c,167 :: 			ByteToStr(num, p_str) ;
$2E9A	$C8D5	F8EB			MOVFF	FARG_Num_to_0str+0, FARG_ByteToStr+0
$2E9E	$C8D6	F8EC			MOVFF	FARG_Num_to_0str+1, FARG_ByteToStr+1
$2EA2	$C8D7	F8ED			MOVFF	FARG_Num_to_0str+2, FARG_ByteToStr+2
$2EA6	$EC9F	F00C			CALL	_ByteToStr
;log.c,168 :: 			if (*p_str == ' ') *p_str = '0';
$2EAA	$C8D6	FFE9			MOVFF	FARG_Num_to_0str+1, FSR0L
$2EAE	$C8D7	FFEA			MOVFF	FARG_Num_to_0str+2, FSR0H
$2EB2	$CFEE	F001			MOVFF	POSTINC0, STACK_1
$2EB6	$5001	    			MOVF	STACK_1, 0, 0
$2EB8	$0A20	    			XORLW	32
$2EBA	$E106	    			BNZ	L_Num_to_0str_21
$2EBC	$C8D6	FFE1			MOVFF	FARG_Num_to_0str+1, FSR1L
$2EC0	$C8D7	FFE2			MOVFF	FARG_Num_to_0str+2, FSR1H
$2EC4	$0E30	    			MOVLW	48
$2EC6	$6EE6	    			MOVWF	POSTINC1, 0
$2EC8	$	L_Num_to_0str_21:
;log.c,169 :: 			if (*(p_str+1) == ' ') *(p_str+1) = '0';
$2EC8	$0E01	    			MOVLW	1
$2ECA	$0108	    			MOVLB	8
$2ECC	$25D6	    			ADDWF	FARG_Num_to_0str+1, 0, 1
$2ECE	$6EE9	    			MOVWF	FSR0L, 0
$2ED0	$0E00	    			MOVLW	0
$2ED2	$21D7	    			ADDWFC	FARG_Num_to_0str+2, 0, 1
$2ED4	$6EEA	    			MOVWF	FSR0L+1, 0
$2ED6	$CFEE	F001			MOVFF	POSTINC0, STACK_1
$2EDA	$5001	    			MOVF	STACK_1, 0, 0
$2EDC	$0A20	    			XORLW	32
$2EDE	$E108	    			BNZ	L_Num_to_0str_22
$2EE0	$0E01	    			MOVLW	1
$2EE2	$25D6	    			ADDWF	FARG_Num_to_0str+1, 0, 1
$2EE4	$6EE1	    			MOVWF	FSR1L, 0
$2EE6	$0E00	    			MOVLW	0
$2EE8	$21D7	    			ADDWFC	FARG_Num_to_0str+2, 0, 1
$2EEA	$6EE2	    			MOVWF	FSR1L+1, 0
$2EEC	$0E30	    			MOVLW	48
$2EEE	$6EE6	    			MOVWF	POSTINC1, 0
$2EF0	$	L_Num_to_0str_22:
;log.c,170 :: 			}
$2EF0	$0012	    			RETURN
$2EF2	$	_strncat:
$2EF2	$C8D5	F8DB			MOVFF	FARG_strncat+0, strncat_cp_L0
$2EF6	$C8D6	F8DC			MOVFF	FARG_strncat+1, strncat_cp_L0+1
$2EFA	$	L_strncat_35:
$2EFA	$C8DB	FFE9			MOVFF	strncat_cp_L0, FSR0L
$2EFE	$C8DC	FFEA			MOVFF	strncat_cp_L0+1, FSR0H
$2F02	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2F06	$5200	    			MOVF	STACK_0, 1, 0
$2F08	$E004	    			BZ	L_strncat_36
$2F0A	$0108	    			MOVLB	8
$2F0C	$4BDB	    			INFSNZ	strncat_cp_L0, 1, 1
$2F0E	$2BDC	    			INCF	strncat_cp_L0+1, 1, 1
$2F10	$D7F4	    			BRA	L_strncat_35
$2F12	$	L_strncat_36:
$2F12	$	L_strncat_37:
$2F12	$0108	    			MOVLB	8
$2F14	$0108	    			MOVLB	8
$2F16	$51D9	    			MOVF	FARG_strncat+4, 0, 1
$2F18	$11DA	    			IORWF	FARG_strncat+5, 0, 1
$2F1A	$E022	    			BZ	L_strncat_38
$2F1C	$C8DB	F002			MOVFF	strncat_cp_L0, STACK_2
$2F20	$C8DC	F003			MOVFF	strncat_cp_L0+1, STACK_2+1
$2F24	$4BDB	    			INFSNZ	strncat_cp_L0, 1, 1
$2F26	$2BDC	    			INCF	strncat_cp_L0+1, 1, 1
$2F28	$C8D7	FFE9			MOVFF	FARG_strncat+2, FSR0L
$2F2C	$C8D8	FFEA			MOVFF	FARG_strncat+3, FSR0L+1
$2F30	$4BD7	    			INFSNZ	FARG_strncat+2, 1, 1
$2F32	$2BD8	    			INCF	FARG_strncat+3, 1, 1
$2F34	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2F38	$C002	FFE1			MOVFF	STACK_2, FSR1L
$2F3C	$C003	FFE2			MOVFF	STACK_2+1, FSR1H
$2F40	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$2F44	$C002	FFE9			MOVFF	STACK_2, FSR0L
$2F48	$C003	FFEA			MOVFF	STACK_2+1, FSR0H
$2F4C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$2F50	$5200	    			MOVF	STACK_0, 1, 0
$2F52	$E006	    			BZ	L_strncat_38
$2F54	$	L237_ex_L_strncat_38:
$2F54	$0E01	    			MOVLW	1
$2F56	$0108	    			MOVLB	8
$2F58	$5FD9	    			SUBWF	FARG_strncat+4, 1, 1
$2F5A	$0E00	    			MOVLW	0
$2F5C	$5BDA	    			SUBWFB	FARG_strncat+5, 1, 1
$2F5E	$D7D9	    			BRA	L_strncat_37
$2F60	$	L_strncat_38:
$2F60	$0E00	    			MOVLW	0
$2F62	$0108	    			MOVLB	8
$2F64	$19DA	    			XORWF	FARG_strncat+5, 0, 1
$2F66	$E102	    			BNZ	L_strncat_80
$2F68	$0E00	    			MOVLW	0
$2F6A	$19D9	    			XORWF	FARG_strncat+4, 0, 1
$2F6C	$	L_strncat_80:
$2F6C	$E105	    			BNZ	L_strncat_41
$2F6E	$C8DB	FFE1			MOVFF	strncat_cp_L0, FSR1L
$2F72	$C8DC	FFE2			MOVFF	strncat_cp_L0+1, FSR1H
$2F76	$6AE6	    			CLRF	POSTINC1, 0
$2F78	$	L_strncat_41:
$2F78	$C8D5	F000			MOVFF	FARG_strncat+0, STACK_0
$2F7C	$C8D6	F001			MOVFF	FARG_strncat+1, STACK_0+1
$2F80	$0012	    			RETURN
$2F82	$	cf_fat16_Extend_Fat_Chain:
$2F82	$C026	F251			MOVFF	cf_fat16_fat_sector_pnt, cf_fat16_fat_sector_pnt_prev
$2F86	$C027	F252			MOVFF	cf_fat16_fat_sector_pnt+1, cf_fat16_fat_sector_pnt_prev+1
$2F8A	$C028	F253			MOVFF	cf_fat16_fat_offset, cf_fat16_fat_offset_prev
$2F8E	$C029	F254			MOVFF	cf_fat16_fat_offset+1, cf_fat16_fat_offset_prev+1
$2F92	$EC58	F005			CALL	cf_fat16_Get_Free_Fat_Entry
$2F96	$ECBA	F005			CALL	cf_fat16_Occupy_Current_Fat_Entry
$2F9A	$ECFE	F005			CALL	cf_fat16_Set_File_Write_Cluster
$2F9E	$0102	    			MOVLB	2
$2FA0	$5151	    			MOVF	cf_fat16_fat_sector_pnt_prev, 0, 1
$2FA2	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$2FA4	$0109	    			MOVLB	9
$2FA6	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$2FA8	$0102	    			MOVLB	2
$2FAA	$5152	    			MOVF	cf_fat16_fat_sector_pnt_prev+1, 0, 1
$2FAC	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$2FAE	$0109	    			MOVLB	9
$2FB0	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$2FB2	$0E00	    			MOVLW	0
$2FB4	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$2FB6	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$2FB8	$0E00	    			MOVLW	0
$2FBA	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$2FBC	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$2FBE	$0E2E	    			MOVLW	cf_fat16_data
$2FC0	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$2FC2	$0E00	    			MOVLW	@cf_fat16_data
$2FC4	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$2FC6	$EC5C	F001			CALL	_Cf_Read_Sector
$2FCA	$0E2E	    			MOVLW	cf_fat16_data
$2FCC	$0102	    			MOVLB	2
$2FCE	$2553	    			ADDWF	cf_fat16_fat_offset_prev, 0, 1
$2FD0	$6EE1	    			MOVWF	FSR1L, 0
$2FD2	$0E00	    			MOVLW	@cf_fat16_data
$2FD4	$2154	    			ADDWFC	cf_fat16_fat_offset_prev+1, 0, 1
$2FD6	$6EE2	    			MOVWF	FSR1L+1, 0
$2FD8	$C234	FFE6			MOVFF	cf_fat16_file_write_cluster, POSTINC1
$2FDC	$C235	FFE6			MOVFF	cf_fat16_file_write_cluster+1, POSTINC1
$2FE0	$5151	    			MOVF	cf_fat16_fat_sector_pnt_prev, 0, 1
$2FE2	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$2FE4	$0109	    			MOVLB	9
$2FE6	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$2FE8	$0102	    			MOVLB	2
$2FEA	$5152	    			MOVF	cf_fat16_fat_sector_pnt_prev+1, 0, 1
$2FEC	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$2FEE	$0109	    			MOVLB	9
$2FF0	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$2FF2	$0E00	    			MOVLW	0
$2FF4	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$2FF6	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$2FF8	$0E00	    			MOVLW	0
$2FFA	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$2FFC	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$2FFE	$0E2E	    			MOVLW	cf_fat16_data
$3000	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$3002	$0E00	    			MOVLW	@cf_fat16_data
$3004	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$3006	$EC89	F001			CALL	_Cf_Write_Sector
$300A	$0102	    			MOVLB	2
$300C	$5151	    			MOVF	cf_fat16_fat_sector_pnt_prev, 0, 1
$300E	$2530	    			ADDWF	cf_fat16_FAT2_START_SECTOR, 0, 1
$3010	$0109	    			MOVLB	9
$3012	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$3014	$0102	    			MOVLB	2
$3016	$5152	    			MOVF	cf_fat16_fat_sector_pnt_prev+1, 0, 1
$3018	$2131	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+1, 0, 1
$301A	$0109	    			MOVLB	9
$301C	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$301E	$0E00	    			MOVLW	0
$3020	$0102	    			MOVLB	2
$3022	$2132	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+2, 0, 1
$3024	$0109	    			MOVLB	9
$3026	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$3028	$0E00	    			MOVLW	0
$302A	$0102	    			MOVLB	2
$302C	$2133	    			ADDWFC	cf_fat16_FAT2_START_SECTOR+3, 0, 1
$302E	$0109	    			MOVLB	9
$3030	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$3032	$0E2E	    			MOVLW	cf_fat16_data
$3034	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$3036	$0E00	    			MOVLW	@cf_fat16_data
$3038	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$303A	$EC89	F001			CALL	_Cf_Write_Sector
$303E	$EC17	F006			CALL	cf_fat16_Set_File_Write_Sector
$3042	$0012	    			RETURN
$3044	$	_isdigit:
$3044	$0108	    			MOVLB	8
$3046	$51D5	    			MOVF	FARG_isdigit+0, 0, 1
$3048	$0839	    			SUBLW	57
$304A	$E307	    			BNC	L_isdigit_9
$304C	$0E30	    			MOVLW	48
$304E	$5DD5	    			SUBWF	FARG_isdigit+0, 0, 1
$3050	$E304	    			BNC	L_isdigit_9
$3052	$0E01	    			MOVLW	1
$3054	$6E00	    			MOVWF	STACK_0, 0
$3056	$EF2E	F018			GOTO	L_isdigit_8
$305A	$	L_isdigit_9:
$305A	$6A00	    			CLRF	STACK_0, 0
$305C	$	L_isdigit_8:
$305C	$0012	    			RETURN
$305E	$	doprntf_scale:
$305E	$0E80	    			MOVLW	128
$3060	$0108	    			MOVLB	8
$3062	$19D5	    			XORWF	FARG_doprntf_scale+0, 0, 1
$3064	$6E00	    			MOVWF	STACK_0, 0
$3066	$0E80	    			MOVLW	128
$3068	$0A00	    			XORLW	0
$306A	$5C00	    			SUBWF	STACK_0, 0, 0
$306C	$B0D8	    			BTFSC	STATUS, C, 0
$306E	$D181	    			BRA	L_doprntf_scale_3
$3070	$51D5	    			MOVF	FARG_doprntf_scale+0, 0, 1
$3072	$0800	    			SUBLW	0
$3074	$6E04	    			MOVWF	STACK_4, 0
$3076	$C004	F8D5			MOVFF	STACK_4, FARG_doprntf_scale+0
$307A	$0E80	    			MOVLW	128
$307C	$1804	    			XORWF	STACK_4, 0, 0
$307E	$6E00	    			MOVWF	STACK_0, 0
$3080	$0E80	    			MOVLW	128
$3082	$0A6E	    			XORLW	110
$3084	$5C00	    			SUBWF	STACK_0, 0, 0
$3086	$A0D8	    			BTFSS	STATUS, C, 0
$3088	$D0C6	    			BRA	L_doprntf_scale_4
$308A	$0E64	    			MOVLW	100
$308C	$6E04	    			MOVWF	STACK_4, 0
$308E	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$3092	$ECDA	F00C			CALL	_div_8x8_s
$3096	$0E12	    			MOVLW	18
$3098	$2600	    			ADDWF	STACK_0, 1, 0
$309A	$0E00	    			MOVLW	0
$309C	$BE00	    			BTFSC	STACK_0, 7, 0
$309E	$0EFF	    			MOVLW	255
$30A0	$6E01	    			MOVWF	STACK_0+1, 0
$30A2	$0E00	    			MOVLW	0
$30A4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$30A6	$0E02	    			MOVLW	2
$30A8	$6E04	    			MOVWF	STACK_4, 0
$30AA	$0E00	    			MOVLW	0
$30AC	$BE01	    			BTFSC	STACK_0+1, 7, 0
$30AE	$0EFF	    			MOVLW	255
$30B0	$6E02	    			MOVWF	STACK_0+2, 0
$30B2	$6E03	    			MOVWF	STACK_0+3, 0
$30B4	$5004	    			MOVF	STACK_4, 0, 0
$30B6	$	L_scale_303:
$30B6	$0100	    			MOVLB	0
$30B8	$E007	    			BZ	L_scale_304
$30BA	$3600	    			RLCF	STACK_0, 1, 0
$30BC	$9000	    			BCF	STACK_0, 0, 0
$30BE	$3601	    			RLCF	STACK_0+1, 1, 0
$30C0	$3602	    			RLCF	STACK_0+2, 1, 0
$30C2	$3603	    			RLCF	STACK_0+3, 1, 0
$30C4	$0FFF	    			ADDLW	255
$30C6	$D7F7	    			BRA	L_scale_303
$30C8	$	L_scale_304:
$30C8	$0100	    			MOVLB	0
$30CA	$0E76	    			MOVLW	#doprntf__npowers_
$30CC	$2600	    			ADDWF	STACK_0, 1, 0
$30CE	$0ED0	    			MOVLW	@#doprntf__npowers_
$30D0	$2201	    			ADDWFC	STACK_0+1, 1, 0
$30D2	$0E00	    			MOVLW	@@#doprntf__npowers_
$30D4	$2202	    			ADDWFC	STACK_0+2, 1, 0
$30D6	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$30DA	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$30DE	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$30E2	$0009	    			TBLRD*+
$30E4	$CFF5	F8D6			MOVFF	TABLAT, FLOC_doprntf_scale+0
$30E8	$0009	    			TBLRD*+
$30EA	$CFF5	F8D7			MOVFF	TABLAT, FLOC_doprntf_scale+1
$30EE	$0009	    			TBLRD*+
$30F0	$CFF5	F8D8			MOVFF	TABLAT, FLOC_doprntf_scale+2
$30F4	$0009	    			TBLRD*+
$30F6	$CFF5	F8D9			MOVFF	TABLAT, FLOC_doprntf_scale+3
$30FA	$0E64	    			MOVLW	100
$30FC	$6E04	    			MOVWF	STACK_4, 0
$30FE	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$3102	$ECDA	F00C			CALL	_div_8x8_s
$3106	$C008	F000			MOVFF	STACK_8, STACK_0
$310A	$0E0A	    			MOVLW	10
$310C	$6E04	    			MOVWF	STACK_4, 0
$310E	$ECDA	F00C			CALL	_div_8x8_s
$3112	$0E09	    			MOVLW	9
$3114	$2600	    			ADDWF	STACK_0, 1, 0
$3116	$0E00	    			MOVLW	0
$3118	$BE00	    			BTFSC	STACK_0, 7, 0
$311A	$0EFF	    			MOVLW	255
$311C	$6E01	    			MOVWF	STACK_0+1, 0
$311E	$0E00	    			MOVLW	0
$3120	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3122	$0E02	    			MOVLW	2
$3124	$6E04	    			MOVWF	STACK_4, 0
$3126	$0E00	    			MOVLW	0
$3128	$BE01	    			BTFSC	STACK_0+1, 7, 0
$312A	$0EFF	    			MOVLW	255
$312C	$6E02	    			MOVWF	STACK_0+2, 0
$312E	$6E03	    			MOVWF	STACK_0+3, 0
$3130	$5004	    			MOVF	STACK_4, 0, 0
$3132	$	L_scale_305:
$3132	$0100	    			MOVLB	0
$3134	$E007	    			BZ	L_scale_306
$3136	$3600	    			RLCF	STACK_0, 1, 0
$3138	$9000	    			BCF	STACK_0, 0, 0
$313A	$3601	    			RLCF	STACK_0+1, 1, 0
$313C	$3602	    			RLCF	STACK_0+2, 1, 0
$313E	$3603	    			RLCF	STACK_0+3, 1, 0
$3140	$0FFF	    			ADDLW	255
$3142	$D7F7	    			BRA	L_scale_305
$3144	$	L_scale_306:
$3144	$0100	    			MOVLB	0
$3146	$0E76	    			MOVLW	#doprntf__npowers_
$3148	$2600	    			ADDWF	STACK_0, 1, 0
$314A	$0ED0	    			MOVLW	@#doprntf__npowers_
$314C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$314E	$0E00	    			MOVLW	@@#doprntf__npowers_
$3150	$2202	    			ADDWFC	STACK_0+2, 1, 0
$3152	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$3156	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$315A	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$315E	$0009	    			TBLRD*+
$3160	$CFF5	F000			MOVFF	TABLAT, STACK_0
$3164	$0009	    			TBLRD*+
$3166	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$316A	$0009	    			TBLRD*+
$316C	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$3170	$0009	    			TBLRD*+
$3172	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$3176	$C8D6	F004			MOVFF	FLOC_doprntf_scale+0, STACK_4
$317A	$C8D7	F005			MOVFF	FLOC_doprntf_scale+1, STACK_4+1
$317E	$C8D8	F006			MOVFF	FLOC_doprntf_scale+2, STACK_4+2
$3182	$C8D9	F007			MOVFF	FLOC_doprntf_scale+3, STACK_4+3
$3186	$EC35	F00D			CALL	_mul_32x32_fp
$318A	$C000	F8D6			MOVFF	STACK_0, FLOC_doprntf_scale+0
$318E	$C001	F8D7			MOVFF	STACK_0+1, FLOC_doprntf_scale+1
$3192	$C002	F8D8			MOVFF	STACK_0+2, FLOC_doprntf_scale+2
$3196	$C003	F8D9			MOVFF	STACK_0+3, FLOC_doprntf_scale+3
$319A	$0E0A	    			MOVLW	10
$319C	$6E04	    			MOVWF	STACK_4, 0
$319E	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$31A2	$ECDA	F00C			CALL	_div_8x8_s
$31A6	$C008	F000			MOVFF	STACK_8, STACK_0
$31AA	$0E02	    			MOVLW	2
$31AC	$6E04	    			MOVWF	STACK_4, 0
$31AE	$0E00	    			MOVLW	0
$31B0	$BE00	    			BTFSC	STACK_0, 7, 0
$31B2	$0EFF	    			MOVLW	255
$31B4	$6E01	    			MOVWF	STACK_0+1, 0
$31B6	$6E02	    			MOVWF	STACK_0+2, 0
$31B8	$6E03	    			MOVWF	STACK_0+3, 0
$31BA	$5004	    			MOVF	STACK_4, 0, 0
$31BC	$	L_scale_307:
$31BC	$0100	    			MOVLB	0
$31BE	$E007	    			BZ	L_scale_308
$31C0	$3600	    			RLCF	STACK_0, 1, 0
$31C2	$9000	    			BCF	STACK_0, 0, 0
$31C4	$3601	    			RLCF	STACK_0+1, 1, 0
$31C6	$3602	    			RLCF	STACK_0+2, 1, 0
$31C8	$3603	    			RLCF	STACK_0+3, 1, 0
$31CA	$0FFF	    			ADDLW	255
$31CC	$D7F7	    			BRA	L_scale_307
$31CE	$	L_scale_308:
$31CE	$0100	    			MOVLB	0
$31D0	$0E76	    			MOVLW	#doprntf__npowers_
$31D2	$2600	    			ADDWF	STACK_0, 1, 0
$31D4	$0ED0	    			MOVLW	@#doprntf__npowers_
$31D6	$2201	    			ADDWFC	STACK_0+1, 1, 0
$31D8	$0E00	    			MOVLW	@@#doprntf__npowers_
$31DA	$2202	    			ADDWFC	STACK_0+2, 1, 0
$31DC	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$31E0	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$31E4	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$31E8	$0009	    			TBLRD*+
$31EA	$CFF5	F000			MOVFF	TABLAT, STACK_0
$31EE	$0009	    			TBLRD*+
$31F0	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$31F4	$0009	    			TBLRD*+
$31F6	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$31FA	$0009	    			TBLRD*+
$31FC	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$3200	$C8D6	F004			MOVFF	FLOC_doprntf_scale+0, STACK_4
$3204	$C8D7	F005			MOVFF	FLOC_doprntf_scale+1, STACK_4+1
$3208	$C8D8	F006			MOVFF	FLOC_doprntf_scale+2, STACK_4+2
$320C	$C8D9	F007			MOVFF	FLOC_doprntf_scale+3, STACK_4+3
$3210	$EC35	F00D			CALL	_mul_32x32_fp
$3214	$0012	    			RETURN
$3216	$	L_doprntf_scale_4:
$3216	$0E80	    			MOVLW	128
$3218	$0A0A	    			XORLW	10
$321A	$6E00	    			MOVWF	STACK_0, 0
$321C	$0E80	    			MOVLW	128
$321E	$0108	    			MOVLB	8
$3220	$19D5	    			XORWF	FARG_doprntf_scale+0, 0, 1
$3222	$5C00	    			SUBWF	STACK_0, 0, 0
$3224	$E276	    			BC	L_doprntf_scale_6
$3226	$0E0A	    			MOVLW	10
$3228	$6E04	    			MOVWF	STACK_4, 0
$322A	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$322E	$ECDA	F00C			CALL	_div_8x8_s
$3232	$0E09	    			MOVLW	9
$3234	$2600	    			ADDWF	STACK_0, 1, 0
$3236	$0E00	    			MOVLW	0
$3238	$BE00	    			BTFSC	STACK_0, 7, 0
$323A	$0EFF	    			MOVLW	255
$323C	$6E01	    			MOVWF	STACK_0+1, 0
$323E	$0E00	    			MOVLW	0
$3240	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3242	$0E02	    			MOVLW	2
$3244	$6E04	    			MOVWF	STACK_4, 0
$3246	$0E00	    			MOVLW	0
$3248	$BE01	    			BTFSC	STACK_0+1, 7, 0
$324A	$0EFF	    			MOVLW	255
$324C	$6E02	    			MOVWF	STACK_0+2, 0
$324E	$6E03	    			MOVWF	STACK_0+3, 0
$3250	$5004	    			MOVF	STACK_4, 0, 0
$3252	$	L_scale_309:
$3252	$0100	    			MOVLB	0
$3254	$E007	    			BZ	L_scale_310
$3256	$3600	    			RLCF	STACK_0, 1, 0
$3258	$9000	    			BCF	STACK_0, 0, 0
$325A	$3601	    			RLCF	STACK_0+1, 1, 0
$325C	$3602	    			RLCF	STACK_0+2, 1, 0
$325E	$3603	    			RLCF	STACK_0+3, 1, 0
$3260	$0FFF	    			ADDLW	255
$3262	$D7F7	    			BRA	L_scale_309
$3264	$	L_scale_310:
$3264	$0100	    			MOVLB	0
$3266	$0E76	    			MOVLW	#doprntf__npowers_
$3268	$2600	    			ADDWF	STACK_0, 1, 0
$326A	$0ED0	    			MOVLW	@#doprntf__npowers_
$326C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$326E	$0E00	    			MOVLW	@@#doprntf__npowers_
$3270	$2202	    			ADDWFC	STACK_0+2, 1, 0
$3272	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$3276	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$327A	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$327E	$0009	    			TBLRD*+
$3280	$CFF5	F8D6			MOVFF	TABLAT, FLOC_doprntf_scale+0
$3284	$0009	    			TBLRD*+
$3286	$CFF5	F8D7			MOVFF	TABLAT, FLOC_doprntf_scale+1
$328A	$0009	    			TBLRD*+
$328C	$CFF5	F8D8			MOVFF	TABLAT, FLOC_doprntf_scale+2
$3290	$0009	    			TBLRD*+
$3292	$CFF5	F8D9			MOVFF	TABLAT, FLOC_doprntf_scale+3
$3296	$0E0A	    			MOVLW	10
$3298	$6E04	    			MOVWF	STACK_4, 0
$329A	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$329E	$ECDA	F00C			CALL	_div_8x8_s
$32A2	$C008	F000			MOVFF	STACK_8, STACK_0
$32A6	$0E02	    			MOVLW	2
$32A8	$6E04	    			MOVWF	STACK_4, 0
$32AA	$0E00	    			MOVLW	0
$32AC	$BE00	    			BTFSC	STACK_0, 7, 0
$32AE	$0EFF	    			MOVLW	255
$32B0	$6E01	    			MOVWF	STACK_0+1, 0
$32B2	$6E02	    			MOVWF	STACK_0+2, 0
$32B4	$6E03	    			MOVWF	STACK_0+3, 0
$32B6	$5004	    			MOVF	STACK_4, 0, 0
$32B8	$	L_scale_311:
$32B8	$0100	    			MOVLB	0
$32BA	$E007	    			BZ	L_scale_312
$32BC	$3600	    			RLCF	STACK_0, 1, 0
$32BE	$9000	    			BCF	STACK_0, 0, 0
$32C0	$3601	    			RLCF	STACK_0+1, 1, 0
$32C2	$3602	    			RLCF	STACK_0+2, 1, 0
$32C4	$3603	    			RLCF	STACK_0+3, 1, 0
$32C6	$0FFF	    			ADDLW	255
$32C8	$D7F7	    			BRA	L_scale_311
$32CA	$	L_scale_312:
$32CA	$0100	    			MOVLB	0
$32CC	$0E76	    			MOVLW	#doprntf__npowers_
$32CE	$2600	    			ADDWF	STACK_0, 1, 0
$32D0	$0ED0	    			MOVLW	@#doprntf__npowers_
$32D2	$2201	    			ADDWFC	STACK_0+1, 1, 0
$32D4	$0E00	    			MOVLW	@@#doprntf__npowers_
$32D6	$2202	    			ADDWFC	STACK_0+2, 1, 0
$32D8	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$32DC	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$32E0	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$32E4	$0009	    			TBLRD*+
$32E6	$CFF5	F000			MOVFF	TABLAT, STACK_0
$32EA	$0009	    			TBLRD*+
$32EC	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$32F0	$0009	    			TBLRD*+
$32F2	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$32F6	$0009	    			TBLRD*+
$32F8	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$32FC	$C8D6	F004			MOVFF	FLOC_doprntf_scale+0, STACK_4
$3300	$C8D7	F005			MOVFF	FLOC_doprntf_scale+1, STACK_4+1
$3304	$C8D8	F006			MOVFF	FLOC_doprntf_scale+2, STACK_4+2
$3308	$C8D9	F007			MOVFF	FLOC_doprntf_scale+3, STACK_4+3
$330C	$EC35	F00D			CALL	_mul_32x32_fp
$3310	$0012	    			RETURN
$3312	$	L_doprntf_scale_6:
$3312	$	L_doprntf_scale_5:
$3312	$0100	    			MOVLB	0
$3314	$0E02	    			MOVLW	2
$3316	$6E04	    			MOVWF	STACK_4, 0
$3318	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$331C	$0E00	    			MOVLW	0
$331E	$0108	    			MOVLB	8
$3320	$BFD5	    			BTFSC	FARG_doprntf_scale+0, 7, 1
$3322	$0EFF	    			MOVLW	255
$3324	$6E01	    			MOVWF	STACK_0+1, 0
$3326	$6E02	    			MOVWF	STACK_0+2, 0
$3328	$6E03	    			MOVWF	STACK_0+3, 0
$332A	$5004	    			MOVF	STACK_4, 0, 0
$332C	$	L_scale_313:
$332C	$0108	    			MOVLB	8
$332E	$E007	    			BZ	L_scale_314
$3330	$3600	    			RLCF	STACK_0, 1, 0
$3332	$9000	    			BCF	STACK_0, 0, 0
$3334	$3601	    			RLCF	STACK_0+1, 1, 0
$3336	$3602	    			RLCF	STACK_0+2, 1, 0
$3338	$3603	    			RLCF	STACK_0+3, 1, 0
$333A	$0FFF	    			ADDLW	255
$333C	$D7F7	    			BRA	L_scale_313
$333E	$	L_scale_314:
$333E	$0108	    			MOVLB	8
$3340	$0E76	    			MOVLW	#doprntf__npowers_
$3342	$2600	    			ADDWF	STACK_0, 1, 0
$3344	$0ED0	    			MOVLW	@#doprntf__npowers_
$3346	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3348	$0E00	    			MOVLW	@@#doprntf__npowers_
$334A	$2202	    			ADDWFC	STACK_0+2, 1, 0
$334C	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$3350	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$3354	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$3358	$0009	    			TBLRD*+
$335A	$CFF5	F000			MOVFF	TABLAT, STACK_0
$335E	$0009	    			TBLRD*+
$3360	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$3364	$0009	    			TBLRD*+
$3366	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$336A	$0009	    			TBLRD*+
$336C	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$3370	$0012	    			RETURN
$3372	$	L_doprntf_scale_3:
$3372	$0E80	    			MOVLW	128
$3374	$0108	    			MOVLB	8
$3376	$19D5	    			XORWF	FARG_doprntf_scale+0, 0, 1
$3378	$6E00	    			MOVWF	STACK_0, 0
$337A	$0E80	    			MOVLW	128
$337C	$0A6E	    			XORLW	110
$337E	$5C00	    			SUBWF	STACK_0, 0, 0
$3380	$A0D8	    			BTFSS	STATUS, C, 0
$3382	$D0C6	    			BRA	L_doprntf_scale_7
$3384	$0E64	    			MOVLW	100
$3386	$6E04	    			MOVWF	STACK_4, 0
$3388	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$338C	$ECDA	F00C			CALL	_div_8x8_s
$3390	$0E12	    			MOVLW	18
$3392	$2600	    			ADDWF	STACK_0, 1, 0
$3394	$0E00	    			MOVLW	0
$3396	$BE00	    			BTFSC	STACK_0, 7, 0
$3398	$0EFF	    			MOVLW	255
$339A	$6E01	    			MOVWF	STACK_0+1, 0
$339C	$0E00	    			MOVLW	0
$339E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$33A0	$0E02	    			MOVLW	2
$33A2	$6E04	    			MOVWF	STACK_4, 0
$33A4	$0E00	    			MOVLW	0
$33A6	$BE01	    			BTFSC	STACK_0+1, 7, 0
$33A8	$0EFF	    			MOVLW	255
$33AA	$6E02	    			MOVWF	STACK_0+2, 0
$33AC	$6E03	    			MOVWF	STACK_0+3, 0
$33AE	$5004	    			MOVF	STACK_4, 0, 0
$33B0	$	L_scale_315:
$33B0	$0100	    			MOVLB	0
$33B2	$E007	    			BZ	L_scale_316
$33B4	$3600	    			RLCF	STACK_0, 1, 0
$33B6	$9000	    			BCF	STACK_0, 0, 0
$33B8	$3601	    			RLCF	STACK_0+1, 1, 0
$33BA	$3602	    			RLCF	STACK_0+2, 1, 0
$33BC	$3603	    			RLCF	STACK_0+3, 1, 0
$33BE	$0FFF	    			ADDLW	255
$33C0	$D7F7	    			BRA	L_scale_315
$33C2	$	L_scale_316:
$33C2	$0100	    			MOVLB	0
$33C4	$0EAA	    			MOVLW	#doprntf__powers_
$33C6	$2600	    			ADDWF	STACK_0, 1, 0
$33C8	$0ED0	    			MOVLW	@#doprntf__powers_
$33CA	$2201	    			ADDWFC	STACK_0+1, 1, 0
$33CC	$0E00	    			MOVLW	@@#doprntf__powers_
$33CE	$2202	    			ADDWFC	STACK_0+2, 1, 0
$33D0	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$33D4	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$33D8	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$33DC	$0009	    			TBLRD*+
$33DE	$CFF5	F8D6			MOVFF	TABLAT, FLOC_doprntf_scale+0
$33E2	$0009	    			TBLRD*+
$33E4	$CFF5	F8D7			MOVFF	TABLAT, FLOC_doprntf_scale+1
$33E8	$0009	    			TBLRD*+
$33EA	$CFF5	F8D8			MOVFF	TABLAT, FLOC_doprntf_scale+2
$33EE	$0009	    			TBLRD*+
$33F0	$CFF5	F8D9			MOVFF	TABLAT, FLOC_doprntf_scale+3
$33F4	$0E64	    			MOVLW	100
$33F6	$6E04	    			MOVWF	STACK_4, 0
$33F8	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$33FC	$ECDA	F00C			CALL	_div_8x8_s
$3400	$C008	F000			MOVFF	STACK_8, STACK_0
$3404	$0E0A	    			MOVLW	10
$3406	$6E04	    			MOVWF	STACK_4, 0
$3408	$ECDA	F00C			CALL	_div_8x8_s
$340C	$0E09	    			MOVLW	9
$340E	$2600	    			ADDWF	STACK_0, 1, 0
$3410	$0E00	    			MOVLW	0
$3412	$BE00	    			BTFSC	STACK_0, 7, 0
$3414	$0EFF	    			MOVLW	255
$3416	$6E01	    			MOVWF	STACK_0+1, 0
$3418	$0E00	    			MOVLW	0
$341A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$341C	$0E02	    			MOVLW	2
$341E	$6E04	    			MOVWF	STACK_4, 0
$3420	$0E00	    			MOVLW	0
$3422	$BE01	    			BTFSC	STACK_0+1, 7, 0
$3424	$0EFF	    			MOVLW	255
$3426	$6E02	    			MOVWF	STACK_0+2, 0
$3428	$6E03	    			MOVWF	STACK_0+3, 0
$342A	$5004	    			MOVF	STACK_4, 0, 0
$342C	$	L_scale_317:
$342C	$0100	    			MOVLB	0
$342E	$E007	    			BZ	L_scale_318
$3430	$3600	    			RLCF	STACK_0, 1, 0
$3432	$9000	    			BCF	STACK_0, 0, 0
$3434	$3601	    			RLCF	STACK_0+1, 1, 0
$3436	$3602	    			RLCF	STACK_0+2, 1, 0
$3438	$3603	    			RLCF	STACK_0+3, 1, 0
$343A	$0FFF	    			ADDLW	255
$343C	$D7F7	    			BRA	L_scale_317
$343E	$	L_scale_318:
$343E	$0100	    			MOVLB	0
$3440	$0EAA	    			MOVLW	#doprntf__powers_
$3442	$2600	    			ADDWF	STACK_0, 1, 0
$3444	$0ED0	    			MOVLW	@#doprntf__powers_
$3446	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3448	$0E00	    			MOVLW	@@#doprntf__powers_
$344A	$2202	    			ADDWFC	STACK_0+2, 1, 0
$344C	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$3450	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$3454	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$3458	$0009	    			TBLRD*+
$345A	$CFF5	F000			MOVFF	TABLAT, STACK_0
$345E	$0009	    			TBLRD*+
$3460	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$3464	$0009	    			TBLRD*+
$3466	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$346A	$0009	    			TBLRD*+
$346C	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$3470	$C8D6	F004			MOVFF	FLOC_doprntf_scale+0, STACK_4
$3474	$C8D7	F005			MOVFF	FLOC_doprntf_scale+1, STACK_4+1
$3478	$C8D8	F006			MOVFF	FLOC_doprntf_scale+2, STACK_4+2
$347C	$C8D9	F007			MOVFF	FLOC_doprntf_scale+3, STACK_4+3
$3480	$EC35	F00D			CALL	_mul_32x32_fp
$3484	$C000	F8D6			MOVFF	STACK_0, FLOC_doprntf_scale+0
$3488	$C001	F8D7			MOVFF	STACK_0+1, FLOC_doprntf_scale+1
$348C	$C002	F8D8			MOVFF	STACK_0+2, FLOC_doprntf_scale+2
$3490	$C003	F8D9			MOVFF	STACK_0+3, FLOC_doprntf_scale+3
$3494	$0E0A	    			MOVLW	10
$3496	$6E04	    			MOVWF	STACK_4, 0
$3498	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$349C	$ECDA	F00C			CALL	_div_8x8_s
$34A0	$C008	F000			MOVFF	STACK_8, STACK_0
$34A4	$0E02	    			MOVLW	2
$34A6	$6E04	    			MOVWF	STACK_4, 0
$34A8	$0E00	    			MOVLW	0
$34AA	$BE00	    			BTFSC	STACK_0, 7, 0
$34AC	$0EFF	    			MOVLW	255
$34AE	$6E01	    			MOVWF	STACK_0+1, 0
$34B0	$6E02	    			MOVWF	STACK_0+2, 0
$34B2	$6E03	    			MOVWF	STACK_0+3, 0
$34B4	$5004	    			MOVF	STACK_4, 0, 0
$34B6	$	L_scale_319:
$34B6	$0100	    			MOVLB	0
$34B8	$E007	    			BZ	L_scale_320
$34BA	$3600	    			RLCF	STACK_0, 1, 0
$34BC	$9000	    			BCF	STACK_0, 0, 0
$34BE	$3601	    			RLCF	STACK_0+1, 1, 0
$34C0	$3602	    			RLCF	STACK_0+2, 1, 0
$34C2	$3603	    			RLCF	STACK_0+3, 1, 0
$34C4	$0FFF	    			ADDLW	255
$34C6	$D7F7	    			BRA	L_scale_319
$34C8	$	L_scale_320:
$34C8	$0100	    			MOVLB	0
$34CA	$0EAA	    			MOVLW	#doprntf__powers_
$34CC	$2600	    			ADDWF	STACK_0, 1, 0
$34CE	$0ED0	    			MOVLW	@#doprntf__powers_
$34D0	$2201	    			ADDWFC	STACK_0+1, 1, 0
$34D2	$0E00	    			MOVLW	@@#doprntf__powers_
$34D4	$2202	    			ADDWFC	STACK_0+2, 1, 0
$34D6	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$34DA	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$34DE	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$34E2	$0009	    			TBLRD*+
$34E4	$CFF5	F000			MOVFF	TABLAT, STACK_0
$34E8	$0009	    			TBLRD*+
$34EA	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$34EE	$0009	    			TBLRD*+
$34F0	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$34F4	$0009	    			TBLRD*+
$34F6	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$34FA	$C8D6	F004			MOVFF	FLOC_doprntf_scale+0, STACK_4
$34FE	$C8D7	F005			MOVFF	FLOC_doprntf_scale+1, STACK_4+1
$3502	$C8D8	F006			MOVFF	FLOC_doprntf_scale+2, STACK_4+2
$3506	$C8D9	F007			MOVFF	FLOC_doprntf_scale+3, STACK_4+3
$350A	$EC35	F00D			CALL	_mul_32x32_fp
$350E	$0012	    			RETURN
$3510	$	L_doprntf_scale_7:
$3510	$0E80	    			MOVLW	128
$3512	$0A0A	    			XORLW	10
$3514	$6E00	    			MOVWF	STACK_0, 0
$3516	$0E80	    			MOVLW	128
$3518	$0108	    			MOVLB	8
$351A	$19D5	    			XORWF	FARG_doprntf_scale+0, 0, 1
$351C	$5C00	    			SUBWF	STACK_0, 0, 0
$351E	$E276	    			BC	L_doprntf_scale_9
$3520	$0E0A	    			MOVLW	10
$3522	$6E04	    			MOVWF	STACK_4, 0
$3524	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$3528	$ECDA	F00C			CALL	_div_8x8_s
$352C	$0E09	    			MOVLW	9
$352E	$2600	    			ADDWF	STACK_0, 1, 0
$3530	$0E00	    			MOVLW	0
$3532	$BE00	    			BTFSC	STACK_0, 7, 0
$3534	$0EFF	    			MOVLW	255
$3536	$6E01	    			MOVWF	STACK_0+1, 0
$3538	$0E00	    			MOVLW	0
$353A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$353C	$0E02	    			MOVLW	2
$353E	$6E04	    			MOVWF	STACK_4, 0
$3540	$0E00	    			MOVLW	0
$3542	$BE01	    			BTFSC	STACK_0+1, 7, 0
$3544	$0EFF	    			MOVLW	255
$3546	$6E02	    			MOVWF	STACK_0+2, 0
$3548	$6E03	    			MOVWF	STACK_0+3, 0
$354A	$5004	    			MOVF	STACK_4, 0, 0
$354C	$	L_scale_321:
$354C	$0100	    			MOVLB	0
$354E	$E007	    			BZ	L_scale_322
$3550	$3600	    			RLCF	STACK_0, 1, 0
$3552	$9000	    			BCF	STACK_0, 0, 0
$3554	$3601	    			RLCF	STACK_0+1, 1, 0
$3556	$3602	    			RLCF	STACK_0+2, 1, 0
$3558	$3603	    			RLCF	STACK_0+3, 1, 0
$355A	$0FFF	    			ADDLW	255
$355C	$D7F7	    			BRA	L_scale_321
$355E	$	L_scale_322:
$355E	$0100	    			MOVLB	0
$3560	$0EAA	    			MOVLW	#doprntf__powers_
$3562	$2600	    			ADDWF	STACK_0, 1, 0
$3564	$0ED0	    			MOVLW	@#doprntf__powers_
$3566	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3568	$0E00	    			MOVLW	@@#doprntf__powers_
$356A	$2202	    			ADDWFC	STACK_0+2, 1, 0
$356C	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$3570	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$3574	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$3578	$0009	    			TBLRD*+
$357A	$CFF5	F8D6			MOVFF	TABLAT, FLOC_doprntf_scale+0
$357E	$0009	    			TBLRD*+
$3580	$CFF5	F8D7			MOVFF	TABLAT, FLOC_doprntf_scale+1
$3584	$0009	    			TBLRD*+
$3586	$CFF5	F8D8			MOVFF	TABLAT, FLOC_doprntf_scale+2
$358A	$0009	    			TBLRD*+
$358C	$CFF5	F8D9			MOVFF	TABLAT, FLOC_doprntf_scale+3
$3590	$0E0A	    			MOVLW	10
$3592	$6E04	    			MOVWF	STACK_4, 0
$3594	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$3598	$ECDA	F00C			CALL	_div_8x8_s
$359C	$C008	F000			MOVFF	STACK_8, STACK_0
$35A0	$0E02	    			MOVLW	2
$35A2	$6E04	    			MOVWF	STACK_4, 0
$35A4	$0E00	    			MOVLW	0
$35A6	$BE00	    			BTFSC	STACK_0, 7, 0
$35A8	$0EFF	    			MOVLW	255
$35AA	$6E01	    			MOVWF	STACK_0+1, 0
$35AC	$6E02	    			MOVWF	STACK_0+2, 0
$35AE	$6E03	    			MOVWF	STACK_0+3, 0
$35B0	$5004	    			MOVF	STACK_4, 0, 0
$35B2	$	L_scale_323:
$35B2	$0100	    			MOVLB	0
$35B4	$E007	    			BZ	L_scale_324
$35B6	$3600	    			RLCF	STACK_0, 1, 0
$35B8	$9000	    			BCF	STACK_0, 0, 0
$35BA	$3601	    			RLCF	STACK_0+1, 1, 0
$35BC	$3602	    			RLCF	STACK_0+2, 1, 0
$35BE	$3603	    			RLCF	STACK_0+3, 1, 0
$35C0	$0FFF	    			ADDLW	255
$35C2	$D7F7	    			BRA	L_scale_323
$35C4	$	L_scale_324:
$35C4	$0100	    			MOVLB	0
$35C6	$0EAA	    			MOVLW	#doprntf__powers_
$35C8	$2600	    			ADDWF	STACK_0, 1, 0
$35CA	$0ED0	    			MOVLW	@#doprntf__powers_
$35CC	$2201	    			ADDWFC	STACK_0+1, 1, 0
$35CE	$0E00	    			MOVLW	@@#doprntf__powers_
$35D0	$2202	    			ADDWFC	STACK_0+2, 1, 0
$35D2	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$35D6	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$35DA	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$35DE	$0009	    			TBLRD*+
$35E0	$CFF5	F000			MOVFF	TABLAT, STACK_0
$35E4	$0009	    			TBLRD*+
$35E6	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$35EA	$0009	    			TBLRD*+
$35EC	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$35F0	$0009	    			TBLRD*+
$35F2	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$35F6	$C8D6	F004			MOVFF	FLOC_doprntf_scale+0, STACK_4
$35FA	$C8D7	F005			MOVFF	FLOC_doprntf_scale+1, STACK_4+1
$35FE	$C8D8	F006			MOVFF	FLOC_doprntf_scale+2, STACK_4+2
$3602	$C8D9	F007			MOVFF	FLOC_doprntf_scale+3, STACK_4+3
$3606	$EC35	F00D			CALL	_mul_32x32_fp
$360A	$0012	    			RETURN
$360C	$	L_doprntf_scale_9:
$360C	$	L_doprntf_scale_8:
$360C	$0100	    			MOVLB	0
$360E	$0E02	    			MOVLW	2
$3610	$6E04	    			MOVWF	STACK_4, 0
$3612	$C8D5	F000			MOVFF	FARG_doprntf_scale+0, STACK_0
$3616	$0E00	    			MOVLW	0
$3618	$0108	    			MOVLB	8
$361A	$BFD5	    			BTFSC	FARG_doprntf_scale+0, 7, 1
$361C	$0EFF	    			MOVLW	255
$361E	$6E01	    			MOVWF	STACK_0+1, 0
$3620	$6E02	    			MOVWF	STACK_0+2, 0
$3622	$6E03	    			MOVWF	STACK_0+3, 0
$3624	$5004	    			MOVF	STACK_4, 0, 0
$3626	$	L_scale_325:
$3626	$0108	    			MOVLB	8
$3628	$E007	    			BZ	L_scale_326
$362A	$3600	    			RLCF	STACK_0, 1, 0
$362C	$9000	    			BCF	STACK_0, 0, 0
$362E	$3601	    			RLCF	STACK_0+1, 1, 0
$3630	$3602	    			RLCF	STACK_0+2, 1, 0
$3632	$3603	    			RLCF	STACK_0+3, 1, 0
$3634	$0FFF	    			ADDLW	255
$3636	$D7F7	    			BRA	L_scale_325
$3638	$	L_scale_326:
$3638	$0EAA	    			MOVLW	#doprntf__powers_
$363A	$2600	    			ADDWF	STACK_0, 1, 0
$363C	$0ED0	    			MOVLW	@#doprntf__powers_
$363E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3640	$0E00	    			MOVLW	@@#doprntf__powers_
$3642	$2202	    			ADDWFC	STACK_0+2, 1, 0
$3644	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$3648	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$364C	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$3650	$0009	    			TBLRD*+
$3652	$CFF5	F000			MOVFF	TABLAT, STACK_0
$3656	$0009	    			TBLRD*+
$3658	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$365C	$0009	    			TBLRD*+
$365E	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$3662	$0009	    			TBLRD*+
$3664	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$3668	$0012	    			RETURN
$366A	$	doprntf_fround:
$366A	$0E6E	    			MOVLW	110
$366C	$0108	    			MOVLB	8
$366E	$5DD5	    			SUBWF	FARG_doprntf_fround+0, 0, 1
$3670	$A0D8	    			BTFSS	STATUS, C, 0
$3672	$D0D0	    			BRA	L_doprntf_fround_0
$3674	$0E64	    			MOVLW	100
$3676	$6E04	    			MOVWF	STACK_4, 0
$3678	$C8D5	F000			MOVFF	FARG_doprntf_fround+0, STACK_0
$367C	$EC5D	F006			CALL	_div_8x8_u
$3680	$0E12	    			MOVLW	18
$3682	$2600	    			ADDWF	STACK_0, 1, 0
$3684	$6A01	    			CLRF	STACK_0+1, 0
$3686	$0E00	    			MOVLW	0
$3688	$2201	    			ADDWFC	STACK_0+1, 1, 0
$368A	$0E02	    			MOVLW	2
$368C	$6E04	    			MOVWF	STACK_4, 0
$368E	$0E00	    			MOVLW	0
$3690	$BE01	    			BTFSC	STACK_0+1, 7, 0
$3692	$0EFF	    			MOVLW	255
$3694	$6E02	    			MOVWF	STACK_0+2, 0
$3696	$6E03	    			MOVWF	STACK_0+3, 0
$3698	$5004	    			MOVF	STACK_4, 0, 0
$369A	$	L_fround_291:
$369A	$0100	    			MOVLB	0
$369C	$E007	    			BZ	L_fround_292
$369E	$3600	    			RLCF	STACK_0, 1, 0
$36A0	$9000	    			BCF	STACK_0, 0, 0
$36A2	$3601	    			RLCF	STACK_0+1, 1, 0
$36A4	$3602	    			RLCF	STACK_0+2, 1, 0
$36A6	$3603	    			RLCF	STACK_0+3, 1, 0
$36A8	$0FFF	    			ADDLW	255
$36AA	$D7F7	    			BRA	L_fround_291
$36AC	$	L_fround_292:
$36AC	$0100	    			MOVLB	0
$36AE	$0E76	    			MOVLW	#doprntf__npowers_
$36B0	$2600	    			ADDWF	STACK_0, 1, 0
$36B2	$0ED0	    			MOVLW	@#doprntf__npowers_
$36B4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$36B6	$0E00	    			MOVLW	@@#doprntf__npowers_
$36B8	$2202	    			ADDWFC	STACK_0+2, 1, 0
$36BA	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$36BE	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$36C2	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$36C6	$0009	    			TBLRD*+
$36C8	$CFF5	F000			MOVFF	TABLAT, STACK_0
$36CC	$0009	    			TBLRD*+
$36CE	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$36D2	$0009	    			TBLRD*+
$36D4	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$36D8	$0009	    			TBLRD*+
$36DA	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$36DE	$0E00	    			MOVLW	0
$36E0	$6E04	    			MOVWF	STACK_4, 0
$36E2	$0E00	    			MOVLW	0
$36E4	$6E05	    			MOVWF	STACK_4+1, 0
$36E6	$0E00	    			MOVLW	0
$36E8	$6E06	    			MOVWF	STACK_4+2, 0
$36EA	$0E7E	    			MOVLW	126
$36EC	$6E07	    			MOVWF	STACK_4+3, 0
$36EE	$EC35	F00D			CALL	_mul_32x32_fp
$36F2	$C000	F8D6			MOVFF	STACK_0, FLOC_doprntf_fround+0
$36F6	$C001	F8D7			MOVFF	STACK_0+1, FLOC_doprntf_fround+1
$36FA	$C002	F8D8			MOVFF	STACK_0+2, FLOC_doprntf_fround+2
$36FE	$C003	F8D9			MOVFF	STACK_0+3, FLOC_doprntf_fround+3
$3702	$0E64	    			MOVLW	100
$3704	$6E04	    			MOVWF	STACK_4, 0
$3706	$C8D5	F000			MOVFF	FARG_doprntf_fround+0, STACK_0
$370A	$EC5D	F006			CALL	_div_8x8_u
$370E	$C008	F000			MOVFF	STACK_8, STACK_0
$3712	$0E0A	    			MOVLW	10
$3714	$6E04	    			MOVWF	STACK_4, 0
$3716	$EC5D	F006			CALL	_div_8x8_u
$371A	$0E09	    			MOVLW	9
$371C	$2600	    			ADDWF	STACK_0, 1, 0
$371E	$6A01	    			CLRF	STACK_0+1, 0
$3720	$0E00	    			MOVLW	0
$3722	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3724	$0E02	    			MOVLW	2
$3726	$6E04	    			MOVWF	STACK_4, 0
$3728	$0E00	    			MOVLW	0
$372A	$BE01	    			BTFSC	STACK_0+1, 7, 0
$372C	$0EFF	    			MOVLW	255
$372E	$6E02	    			MOVWF	STACK_0+2, 0
$3730	$6E03	    			MOVWF	STACK_0+3, 0
$3732	$5004	    			MOVF	STACK_4, 0, 0
$3734	$	L_fround_293:
$3734	$0100	    			MOVLB	0
$3736	$E007	    			BZ	L_fround_294
$3738	$3600	    			RLCF	STACK_0, 1, 0
$373A	$9000	    			BCF	STACK_0, 0, 0
$373C	$3601	    			RLCF	STACK_0+1, 1, 0
$373E	$3602	    			RLCF	STACK_0+2, 1, 0
$3740	$3603	    			RLCF	STACK_0+3, 1, 0
$3742	$0FFF	    			ADDLW	255
$3744	$D7F7	    			BRA	L_fround_293
$3746	$	L_fround_294:
$3746	$0100	    			MOVLB	0
$3748	$0E76	    			MOVLW	#doprntf__npowers_
$374A	$2600	    			ADDWF	STACK_0, 1, 0
$374C	$0ED0	    			MOVLW	@#doprntf__npowers_
$374E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3750	$0E00	    			MOVLW	@@#doprntf__npowers_
$3752	$2202	    			ADDWFC	STACK_0+2, 1, 0
$3754	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$3758	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$375C	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$3760	$0009	    			TBLRD*+
$3762	$CFF5	F000			MOVFF	TABLAT, STACK_0
$3766	$0009	    			TBLRD*+
$3768	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$376C	$0009	    			TBLRD*+
$376E	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$3772	$0009	    			TBLRD*+
$3774	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$3778	$C8D6	F004			MOVFF	FLOC_doprntf_fround+0, STACK_4
$377C	$C8D7	F005			MOVFF	FLOC_doprntf_fround+1, STACK_4+1
$3780	$C8D8	F006			MOVFF	FLOC_doprntf_fround+2, STACK_4+2
$3784	$C8D9	F007			MOVFF	FLOC_doprntf_fround+3, STACK_4+3
$3788	$EC35	F00D			CALL	_mul_32x32_fp
$378C	$C000	F8D6			MOVFF	STACK_0, FLOC_doprntf_fround+0
$3790	$C001	F8D7			MOVFF	STACK_0+1, FLOC_doprntf_fround+1
$3794	$C002	F8D8			MOVFF	STACK_0+2, FLOC_doprntf_fround+2
$3798	$C003	F8D9			MOVFF	STACK_0+3, FLOC_doprntf_fround+3
$379C	$0E0A	    			MOVLW	10
$379E	$6E04	    			MOVWF	STACK_4, 0
$37A0	$C8D5	F000			MOVFF	FARG_doprntf_fround+0, STACK_0
$37A4	$EC5D	F006			CALL	_div_8x8_u
$37A8	$C008	F000			MOVFF	STACK_8, STACK_0
$37AC	$0E02	    			MOVLW	2
$37AE	$6E04	    			MOVWF	STACK_4, 0
$37B0	$0E00	    			MOVLW	0
$37B2	$6E01	    			MOVWF	STACK_0+1, 0
$37B4	$6E02	    			MOVWF	STACK_0+2, 0
$37B6	$6E03	    			MOVWF	STACK_0+3, 0
$37B8	$5004	    			MOVF	STACK_4, 0, 0
$37BA	$	L_fround_295:
$37BA	$0100	    			MOVLB	0
$37BC	$E007	    			BZ	L_fround_296
$37BE	$3600	    			RLCF	STACK_0, 1, 0
$37C0	$9000	    			BCF	STACK_0, 0, 0
$37C2	$3601	    			RLCF	STACK_0+1, 1, 0
$37C4	$3602	    			RLCF	STACK_0+2, 1, 0
$37C6	$3603	    			RLCF	STACK_0+3, 1, 0
$37C8	$0FFF	    			ADDLW	255
$37CA	$D7F7	    			BRA	L_fround_295
$37CC	$	L_fround_296:
$37CC	$0100	    			MOVLB	0
$37CE	$0E76	    			MOVLW	#doprntf__npowers_
$37D0	$2600	    			ADDWF	STACK_0, 1, 0
$37D2	$0ED0	    			MOVLW	@#doprntf__npowers_
$37D4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$37D6	$0E00	    			MOVLW	@@#doprntf__npowers_
$37D8	$2202	    			ADDWFC	STACK_0+2, 1, 0
$37DA	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$37DE	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$37E2	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$37E6	$0009	    			TBLRD*+
$37E8	$CFF5	F000			MOVFF	TABLAT, STACK_0
$37EC	$0009	    			TBLRD*+
$37EE	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$37F2	$0009	    			TBLRD*+
$37F4	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$37F8	$0009	    			TBLRD*+
$37FA	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$37FE	$C8D6	F004			MOVFF	FLOC_doprntf_fround+0, STACK_4
$3802	$C8D7	F005			MOVFF	FLOC_doprntf_fround+1, STACK_4+1
$3806	$C8D8	F006			MOVFF	FLOC_doprntf_fround+2, STACK_4+2
$380A	$C8D9	F007			MOVFF	FLOC_doprntf_fround+3, STACK_4+3
$380E	$EC35	F00D			CALL	_mul_32x32_fp
$3812	$0012	    			RETURN
$3814	$	L_doprntf_fround_0:
$3814	$0108	    			MOVLB	8
$3816	$51D5	    			MOVF	FARG_doprntf_fround+0, 0, 1
$3818	$080A	    			SUBLW	10
$381A	$B0D8	    			BTFSC	STATUS, C, 0
$381C	$D083	    			BRA	L_doprntf_fround_2
$381E	$0E0A	    			MOVLW	10
$3820	$6E04	    			MOVWF	STACK_4, 0
$3822	$C8D5	F000			MOVFF	FARG_doprntf_fround+0, STACK_0
$3826	$EC5D	F006			CALL	_div_8x8_u
$382A	$0E09	    			MOVLW	9
$382C	$2600	    			ADDWF	STACK_0, 1, 0
$382E	$6A01	    			CLRF	STACK_0+1, 0
$3830	$0E00	    			MOVLW	0
$3832	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3834	$0E02	    			MOVLW	2
$3836	$6E04	    			MOVWF	STACK_4, 0
$3838	$0E00	    			MOVLW	0
$383A	$BE01	    			BTFSC	STACK_0+1, 7, 0
$383C	$0EFF	    			MOVLW	255
$383E	$6E02	    			MOVWF	STACK_0+2, 0
$3840	$6E03	    			MOVWF	STACK_0+3, 0
$3842	$5004	    			MOVF	STACK_4, 0, 0
$3844	$	L_fround_297:
$3844	$0100	    			MOVLB	0
$3846	$E007	    			BZ	L_fround_298
$3848	$3600	    			RLCF	STACK_0, 1, 0
$384A	$9000	    			BCF	STACK_0, 0, 0
$384C	$3601	    			RLCF	STACK_0+1, 1, 0
$384E	$3602	    			RLCF	STACK_0+2, 1, 0
$3850	$3603	    			RLCF	STACK_0+3, 1, 0
$3852	$0FFF	    			ADDLW	255
$3854	$D7F7	    			BRA	L_fround_297
$3856	$	L_fround_298:
$3856	$0100	    			MOVLB	0
$3858	$0E76	    			MOVLW	#doprntf__npowers_
$385A	$2600	    			ADDWF	STACK_0, 1, 0
$385C	$0ED0	    			MOVLW	@#doprntf__npowers_
$385E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3860	$0E00	    			MOVLW	@@#doprntf__npowers_
$3862	$2202	    			ADDWFC	STACK_0+2, 1, 0
$3864	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$3868	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$386C	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$3870	$0009	    			TBLRD*+
$3872	$CFF5	F000			MOVFF	TABLAT, STACK_0
$3876	$0009	    			TBLRD*+
$3878	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$387C	$0009	    			TBLRD*+
$387E	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$3882	$0009	    			TBLRD*+
$3884	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$3888	$0E00	    			MOVLW	0
$388A	$6E04	    			MOVWF	STACK_4, 0
$388C	$0E00	    			MOVLW	0
$388E	$6E05	    			MOVWF	STACK_4+1, 0
$3890	$0E00	    			MOVLW	0
$3892	$6E06	    			MOVWF	STACK_4+2, 0
$3894	$0E7E	    			MOVLW	126
$3896	$6E07	    			MOVWF	STACK_4+3, 0
$3898	$EC35	F00D			CALL	_mul_32x32_fp
$389C	$C000	F8D6			MOVFF	STACK_0, FLOC_doprntf_fround+0
$38A0	$C001	F8D7			MOVFF	STACK_0+1, FLOC_doprntf_fround+1
$38A4	$C002	F8D8			MOVFF	STACK_0+2, FLOC_doprntf_fround+2
$38A8	$C003	F8D9			MOVFF	STACK_0+3, FLOC_doprntf_fround+3
$38AC	$0E0A	    			MOVLW	10
$38AE	$6E04	    			MOVWF	STACK_4, 0
$38B0	$C8D5	F000			MOVFF	FARG_doprntf_fround+0, STACK_0
$38B4	$EC5D	F006			CALL	_div_8x8_u
$38B8	$C008	F000			MOVFF	STACK_8, STACK_0
$38BC	$0E02	    			MOVLW	2
$38BE	$6E04	    			MOVWF	STACK_4, 0
$38C0	$0E00	    			MOVLW	0
$38C2	$6E01	    			MOVWF	STACK_0+1, 0
$38C4	$6E02	    			MOVWF	STACK_0+2, 0
$38C6	$6E03	    			MOVWF	STACK_0+3, 0
$38C8	$5004	    			MOVF	STACK_4, 0, 0
$38CA	$	L_fround_299:
$38CA	$0100	    			MOVLB	0
$38CC	$E007	    			BZ	L_fround_300
$38CE	$3600	    			RLCF	STACK_0, 1, 0
$38D0	$9000	    			BCF	STACK_0, 0, 0
$38D2	$3601	    			RLCF	STACK_0+1, 1, 0
$38D4	$3602	    			RLCF	STACK_0+2, 1, 0
$38D6	$3603	    			RLCF	STACK_0+3, 1, 0
$38D8	$0FFF	    			ADDLW	255
$38DA	$D7F7	    			BRA	L_fround_299
$38DC	$	L_fround_300:
$38DC	$0100	    			MOVLB	0
$38DE	$0E76	    			MOVLW	#doprntf__npowers_
$38E0	$2600	    			ADDWF	STACK_0, 1, 0
$38E2	$0ED0	    			MOVLW	@#doprntf__npowers_
$38E4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$38E6	$0E00	    			MOVLW	@@#doprntf__npowers_
$38E8	$2202	    			ADDWFC	STACK_0+2, 1, 0
$38EA	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$38EE	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$38F2	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$38F6	$0009	    			TBLRD*+
$38F8	$CFF5	F000			MOVFF	TABLAT, STACK_0
$38FC	$0009	    			TBLRD*+
$38FE	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$3902	$0009	    			TBLRD*+
$3904	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$3908	$0009	    			TBLRD*+
$390A	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$390E	$C8D6	F004			MOVFF	FLOC_doprntf_fround+0, STACK_4
$3912	$C8D7	F005			MOVFF	FLOC_doprntf_fround+1, STACK_4+1
$3916	$C8D8	F006			MOVFF	FLOC_doprntf_fround+2, STACK_4+2
$391A	$C8D9	F007			MOVFF	FLOC_doprntf_fround+3, STACK_4+3
$391E	$EC35	F00D			CALL	_mul_32x32_fp
$3922	$0012	    			RETURN
$3924	$	L_doprntf_fround_2:
$3924	$	L_doprntf_fround_1:
$3924	$0100	    			MOVLB	0
$3926	$0E02	    			MOVLW	2
$3928	$6E04	    			MOVWF	STACK_4, 0
$392A	$C8D5	F000			MOVFF	FARG_doprntf_fround+0, STACK_0
$392E	$0E00	    			MOVLW	0
$3930	$6E01	    			MOVWF	STACK_0+1, 0
$3932	$6E02	    			MOVWF	STACK_0+2, 0
$3934	$6E03	    			MOVWF	STACK_0+3, 0
$3936	$5004	    			MOVF	STACK_4, 0, 0
$3938	$	L_fround_301:
$3938	$0100	    			MOVLB	0
$393A	$E007	    			BZ	L_fround_302
$393C	$3600	    			RLCF	STACK_0, 1, 0
$393E	$9000	    			BCF	STACK_0, 0, 0
$3940	$3601	    			RLCF	STACK_0+1, 1, 0
$3942	$3602	    			RLCF	STACK_0+2, 1, 0
$3944	$3603	    			RLCF	STACK_0+3, 1, 0
$3946	$0FFF	    			ADDLW	255
$3948	$D7F7	    			BRA	L_fround_301
$394A	$	L_fround_302:
$394A	$0E76	    			MOVLW	#doprntf__npowers_
$394C	$2600	    			ADDWF	STACK_0, 1, 0
$394E	$0ED0	    			MOVLW	@#doprntf__npowers_
$3950	$2201	    			ADDWFC	STACK_0+1, 1, 0
$3952	$0E00	    			MOVLW	@@#doprntf__npowers_
$3954	$2202	    			ADDWFC	STACK_0+2, 1, 0
$3956	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$395A	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$395E	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$3962	$0009	    			TBLRD*+
$3964	$CFF5	F000			MOVFF	TABLAT, STACK_0
$3968	$0009	    			TBLRD*+
$396A	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$396E	$0009	    			TBLRD*+
$3970	$CFF5	F002			MOVFF	TABLAT, STACK_0+2
$3974	$0009	    			TBLRD*+
$3976	$CFF5	F003			MOVFF	TABLAT, STACK_0+3
$397A	$0E00	    			MOVLW	0
$397C	$6E04	    			MOVWF	STACK_4, 0
$397E	$0E00	    			MOVLW	0
$3980	$6E05	    			MOVWF	STACK_4+1, 0
$3982	$0E00	    			MOVLW	0
$3984	$6E06	    			MOVWF	STACK_4+2, 0
$3986	$0E7E	    			MOVLW	126
$3988	$6E07	    			MOVWF	STACK_4+3, 0
$398A	$EC35	F00D			CALL	_mul_32x32_fp
$398E	$0012	    			RETURN
$3990	$	_Mul_16x16_S:
$3990	$0100	    			MOVLB	0
$3992	$5000	    			MOVF	STACK_0, W, 0
$3994	$0204	    			MULWF	STACK_4, 0
$3996	$CFF4	F009			MOVFF	PRODH, STACK_9
$399A	$CFF3	F008			MOVFF	PRODL, STACK_8
$399E	$5001	    			MOVF	STACK_1, W, 0
$39A0	$0205	    			MULWF	STACK_5, 0
$39A2	$CFF4	F00B			MOVFF	PRODH, STACK_11
$39A6	$CFF3	F00A			MOVFF	PRODL, STACK_10
$39AA	$5000	    			MOVF	STACK_0, W, 0
$39AC	$0205	    			MULWF	STACK_5, 0
$39AE	$50F3	    			MOVF	PRODL, W, 0
$39B0	$2609	    			ADDWF	STACK_9, F, 0
$39B2	$50F4	    			MOVF	PRODH, W, 0
$39B4	$220A	    			ADDWFC	STACK_10, F, 0
$39B6	$6AE8	    			CLRF	WREG, 0
$39B8	$220B	    			ADDWFC	STACK_11, F, 0
$39BA	$5001	    			MOVF	STACK_1, W, 0
$39BC	$0204	    			MULWF	STACK_4, 0
$39BE	$50F3	    			MOVF	PRODL, W, 0
$39C0	$2609	    			ADDWF	STACK_9, F, 0
$39C2	$50F4	    			MOVF	PRODH, W, 0
$39C4	$220A	    			ADDWFC	STACK_10, F, 0
$39C6	$6AE8	    			CLRF	WREG, 0
$39C8	$220B	    			ADDWFC	STACK_11, F, 0
$39CA	$AE05	    			BTFSS	STACK_5, 7, 0
$39CC	$EFEC	F01C			GOTO	$+5
$39D0	$5000	    			MOVF	STACK_0, W, 0
$39D2	$5C0A	    			SUBWF	STACK_10, W, 0
$39D4	$5001	    			MOVF	STACK_1, W, 0
$39D6	$580B	    			SUBWFB	STACK_11, W, 0
$39D8	$AE01	    			BTFSS	STACK_1, 7, 0
$39DA	$EFF3	F01C			GOTO	$+5
$39DE	$5004	    			MOVF	STACK_4, W, 0
$39E0	$5C0A	    			SUBWF	STACK_10, W, 0
$39E2	$5005	    			MOVF	STACK_5, W, 0
$39E4	$580B	    			SUBWFB	STACK_11, W, 0
$39E6	$C008	F000			MOVFF	STACK_8, STACK_0
$39EA	$C009	F001			MOVFF	STACK_9, STACK_1
$39EE	$C00A	F002			MOVFF	STACK_10, STACK_2
$39F2	$C00B	F003			MOVFF	STACK_11, STACK_3
$39F6	$0012	    			RETURN
$39F8	$	_Compare_Double:
$39F8	$0100	    			MOVLB	0
$39FA	$6A0A	    			CLRF	STACK_10, 0
$39FC	$5003	    			MOVF	STACK_3, W, 0
$39FE	$A4D8	    			BTFSS	STATUS, Z, 0
$3A00	$800A	    			BSF	STACK_10, 0, 0
$3A02	$5007	    			MOVF	STACK_7, W, 0
$3A04	$A4D8	    			BTFSS	STATUS, Z, 0
$3A06	$820A	    			BSF	STACK_10, 1, 0
$3A08	$500A	    			MOVF	STACK_10, W, 0
$3A0A	$B4D8	    			BTFSC	STATUS, Z, 0
$3A0C	$EF60	F01D			GOTO	COMPARE_EQU
$3A10	$0A03	    			XORLW	0x03
$3A12	$B4D8	    			BTFSC	STATUS, Z, 0
$3A14	$EF19	F01D			GOTO	COMPARE_NOTZERO
$3A18	$B00A	    			BTFSC	STACK_10, 0, 0
$3A1A	$EF14	F01D			GOTO	COMPARE_XNOTZERO
$3A1E	$	COMPARE_YNOTZERO:
$3A1E	$AE06	    			BTFSS	STACK_6, 7, 0
$3A20	$EF5E	F01D			GOTO	COMPARE_LT
$3A24	$EF5C	F01D			GOTO	COMPARE_GT
$3A28	$	COMPARE_XNOTZERO:
$3A28	$AE02	    			BTFSS	STACK_2, 7, 0
$3A2A	$EF5C	F01D			GOTO	COMPARE_GT
$3A2E	$EF5E	F01D			GOTO	COMPARE_LT
$3A32	$	COMPARE_NOTZERO:
$3A32	$5002	    			MOVF	STACK_2, W, 0
$3A34	$0B80	    			ANDLW	0x80
$3A36	$6E0A	    			MOVWF	STACK_10, 0
$3A38	$9E02	    			BCF	STACK_2, 7, 0
$3A3A	$5006	    			MOVF	STACK_6, W, 0
$3A3C	$0B80	    			ANDLW	0x80
$3A3E	$9E06	    			BCF	STACK_6, 7, 0
$3A40	$180A	    			XORWF	STACK_10, W, 0
$3A42	$B4D8	    			BTFSC	STATUS, Z, 0
$3A44	$EF2A	F01D			GOTO	COMPARE_TESTALL
$3A48	$500A	    			MOVF	STACK_10, W, 0
$3A4A	$B4D8	    			BTFSC	STATUS, Z, 0
$3A4C	$EF5C	F01D			GOTO	COMPARE_GT
$3A50	$EF5E	F01D			GOTO	COMPARE_LT
$3A54	$	COMPARE_TESTALL:
$3A54	$5007	    			MOVF	STACK_7, W, 0
$3A56	$5C03	    			SUBWF	STACK_3, W, 0
$3A58	$B4D8	    			BTFSC	STATUS, Z, 0
$3A5A	$EF34	F01D			GOTO	COMPARE_C1
$3A5E	$A0D8	    			BTFSS	STATUS, C, 0
$3A60	$EF50	F01D			GOTO	GT_FALSE
$3A64	$EF56	F01D			GOTO	GT_TRUE
$3A68	$	COMPARE_C1:
$3A68	$5006	    			MOVF	STACK_6, W, 0
$3A6A	$5C02	    			SUBWF	STACK_2, W, 0
$3A6C	$B4D8	    			BTFSC	STATUS, Z, 0
$3A6E	$EF3E	F01D			GOTO	COMPARE_C2
$3A72	$A0D8	    			BTFSS	STATUS, C, 0
$3A74	$EF50	F01D			GOTO	GT_FALSE
$3A78	$EF56	F01D			GOTO	GT_TRUE
$3A7C	$	COMPARE_C2:
$3A7C	$5005	    			MOVF	STACK_5, W, 0
$3A7E	$5C01	    			SUBWF	STACK_1, W, 0
$3A80	$B4D8	    			BTFSC	STATUS, Z, 0
$3A82	$EF48	F01D			GOTO	COMPARE_C3
$3A86	$A0D8	    			BTFSS	STATUS, C, 0
$3A88	$EF50	F01D			GOTO	GT_FALSE
$3A8C	$EF56	F01D			GOTO	GT_TRUE
$3A90	$	COMPARE_C3:
$3A90	$5004	    			MOVF	STACK_4, W, 0
$3A92	$5C00	    			SUBWF	STACK_0, W, 0
$3A94	$B4D8	    			BTFSC	STATUS, Z, 0
$3A96	$EF60	F01D			GOTO	COMPARE_EQU
$3A9A	$B0D8	    			BTFSC	STATUS, C, 0
$3A9C	$EF56	F01D			GOTO	GT_TRUE
$3AA0	$	GT_FALSE:
$3AA0	$520A	    			MOVF	STACK_10, F, 0
$3AA2	$B4D8	    			BTFSC	STATUS, Z, 0
$3AA4	$EF5E	F01D			GOTO	COMPARE_LT
$3AA8	$EF5C	F01D			GOTO	COMPARE_GT
$3AAC	$	GT_TRUE:
$3AAC	$520A	    			MOVF	STACK_10, F, 0
$3AAE	$B4D8	    			BTFSC	STATUS, Z, 0
$3AB0	$EF5C	F01D			GOTO	COMPARE_GT
$3AB4	$EF5E	F01D			GOTO	COMPARE_LT
$3AB8	$	COMPARE_GT:
$3AB8	$80D8	    			BSF	STATUS, C, 0
$3ABA	$0012	    			RETURN
$3ABC	$	COMPARE_LT:
$3ABC	$90D8	    			BCF	STATUS, C, 0
$3ABE	$0012	    			RETURN
$3AC0	$	COMPARE_EQU:
$3AC0	$80D8	    			BSF	STATUS, C, 0
$3AC2	$84D8	    			BSF	STATUS, Z, 0
$3AC4	$0012	    			RETURN
$3AC6	$0012	    			RETURN
$3AC8	$	_Equals_Double:
$3AC8	$0100	    			MOVLB	0
$3ACA	$5003	    			MOVF	STACK_3, W, 0
$3ACC	$1807	    			XORWF	STACK_7, W, 0
$3ACE	$A4D8	    			BTFSS	STATUS, Z, 0
$3AD0	$EF79	F01D			GOTO	EQU_FALSE
$3AD4	$5002	    			MOVF	STACK_2, W, 0
$3AD6	$1806	    			XORWF	STACK_6, W, 0
$3AD8	$A4D8	    			BTFSS	STATUS, Z, 0
$3ADA	$EF79	F01D			GOTO	EQU_FALSE
$3ADE	$5001	    			MOVF	STACK_1, W, 0
$3AE0	$1805	    			XORWF	STACK_5, W, 0
$3AE2	$A4D8	    			BTFSS	STATUS, Z, 0
$3AE4	$EF79	F01D			GOTO	EQU_FALSE
$3AE8	$5000	    			MOVF	STACK_0, W, 0
$3AEA	$1804	    			XORWF	STACK_4, W, 0
$3AEC	$B4D8	    			BTFSC	STATUS, Z, 0
$3AEE	$84D8	    			BSF	STATUS, Z, 0
$3AF0	$0012	    			RETURN
$3AF2	$	EQU_FALSE:
$3AF2	$94D8	    			BCF	STATUS, Z, 0
$3AF4	$0012	    			RETURN
$3AF6	$0012	    			RETURN
$3AF8	$	_Div_32x32_FP:
$3AF8	$0100	    			MOVLB	0
$3AFA	$	FPD32:
$3AFA	$6A08	    			CLRF	STACK_8, 0
$3AFC	$6A09	    			CLRF	STACK_9, 0
$3AFE	$5007	    			MOVF	STACK_7, W, 0
$3B00	$B4D8	    			BTFSC	STATUS, Z, 0
$3B02	$EF13	F01E			GOTO	JPDSETFDZ32
$3B06	$5003	    			MOVF	STACK_3, W, 0
$3B08	$B4D8	    			BTFSC	STATUS, Z, 0
$3B0A	$EF18	F01E			GOTO	JPDRES032
$3B0E	$	D32BNE0:
$3B0E	$5002	    			MOVF	STACK_2, W, 0
$3B10	$1806	    			XORWF	STACK_6, W, 0
$3B12	$6E0A	    			MOVWF	STACK_10, 0
$3B14	$8E02	    			BSF	STACK_2, 7, 0
$3B16	$8E06	    			BSF	STACK_6, 7, 0
$3B18	$	TALIGN32:
$3B18	$6A0E	    			CLRF	STACK_14, 0
$3B1A	$C002	F008			MOVFF	STACK_2, STACK_8
$3B1E	$C001	F00C			MOVFF	STACK_1, STACK_12
$3B22	$C000	F00D			MOVFF	STACK_0, STACK_13
$3B26	$5004	    			MOVF	STACK_4, W, 0
$3B28	$5E0D	    			SUBWF	STACK_13, F, 0
$3B2A	$5005	    			MOVF	STACK_5, W, 0
$3B2C	$A0D8	    			BTFSS	STATUS, C, 0
$3B2E	$3C05	    			INCFSZ	STACK_5, W, 0
$3B30	$	TS1ALIGN32:
$3B30	$5E0C	    			SUBWF	STACK_12, F, 0
$3B32	$5006	    			MOVF	STACK_6, W, 0
$3B34	$A0D8	    			BTFSS	STATUS, C, 0
$3B36	$3C06	    			INCFSZ	STACK_6, W, 0
$3B38	$	TS2ALIGN32:
$3B38	$5E08	    			SUBWF	STACK_8, F, 0
$3B3A	$6A08	    			CLRF	STACK_8, 0
$3B3C	$6A0C	    			CLRF	STACK_12, 0
$3B3E	$6A0D	    			CLRF	STACK_13, 0
$3B40	$A0D8	    			BTFSS	STATUS, C, 0
$3B42	$EFAA	F01D			GOTO	DALIGN32OK
$3B46	$90D8	    			BCF	STATUS, C, 0
$3B48	$3202	    			RRCF	STACK_2, F, 0
$3B4A	$3201	    			RRCF	STACK_1, F, 0
$3B4C	$3200	    			RRCF	STACK_0, F, 0
$3B4E	$3208	    			RRCF	STACK_8, F, 0
$3B50	$0E01	    			MOVLW	0x01
$3B52	$6E0E	    			MOVWF	STACK_14, 0
$3B54	$	DALIGN32OK:
$3B54	$5007	    			MOVF	STACK_7, W, 0
$3B56	$5E03	    			SUBWF	STACK_3, F, 0
$3B58	$A0D8	    			BTFSS	STATUS, C, 0
$3B5A	$EFB7	F01D			GOTO	ALTB32
$3B5E	$	AGEB32:
$3B5E	$0E7E	    			MOVLW	126
$3B60	$240E	    			ADDWF	STACK_14, W, 0
$3B62	$2603	    			ADDWF	STACK_3, F, 0
$3B64	$B0D8	    			BTFSC	STATUS, C, 0
$3B66	$EF1D	F01E			GOTO	JPDSETFOV32
$3B6A	$EFBD	F01D			GOTO	DARGOK32
$3B6E	$	ALTB32:
$3B6E	$0E7E	    			MOVLW	126
$3B70	$240E	    			ADDWF	STACK_14, W, 0
$3B72	$2603	    			ADDWF	STACK_3, F, 0
$3B74	$A0D8	    			BTFSS	STATUS, C, 0
$3B76	$EF22	F01E			GOTO	JPDSETFUN32
$3B7A	$	DARGOK32:
$3B7A	$0E18	    			MOVLW	24
$3B7C	$6E0B	    			MOVWF	STACK_11, 0
$3B7E	$	DLOOP32:
$3B7E	$360D	    			RLCF	STACK_13, F, 0
$3B80	$360C	    			RLCF	STACK_12, F, 0
$3B82	$3608	    			RLCF	STACK_8, F, 0
$3B84	$3600	    			RLCF	STACK_0, F, 0
$3B86	$3601	    			RLCF	STACK_1, F, 0
$3B88	$3602	    			RLCF	STACK_2, F, 0
$3B8A	$360E	    			RLCF	STACK_14, F, 0
$3B8C	$5004	    			MOVF	STACK_4, W, 0
$3B8E	$5E00	    			SUBWF	STACK_0, F, 0
$3B90	$5005	    			MOVF	STACK_5, W, 0
$3B92	$A0D8	    			BTFSS	STATUS, C, 0
$3B94	$3C05	    			INCFSZ	STACK_5, W, 0
$3B96	$	DS132:
$3B96	$5E01	    			SUBWF	STACK_1, F, 0
$3B98	$5006	    			MOVF	STACK_6, W, 0
$3B9A	$A0D8	    			BTFSS	STATUS, C, 0
$3B9C	$3C06	    			INCFSZ	STACK_6, W, 0
$3B9E	$	DS232:
$3B9E	$5E02	    			SUBWF	STACK_2, F, 0
$3BA0	$3406	    			RLCF	STACK_6, W, 0
$3BA2	$120E	    			IORWF	STACK_14, F, 0
$3BA4	$A00E	    			BTFSS	STACK_14, 0, 0
$3BA6	$EFD8	F01D			GOTO	DREST32
$3BAA	$800D	    			BSF	STACK_13, 0, 0
$3BAC	$EFE3	F01D			GOTO	DOK32
$3BB0	$	DREST32:
$3BB0	$5004	    			MOVF	STACK_4, W, 0
$3BB2	$2600	    			ADDWF	STACK_0, F, 0
$3BB4	$5005	    			MOVF	STACK_5, W, 0
$3BB6	$B0D8	    			BTFSC	STATUS, C, 0
$3BB8	$3C05	    			INCFSZ	STACK_5, W, 0
$3BBA	$	DAREST32:
$3BBA	$2601	    			ADDWF	STACK_1, F, 0
$3BBC	$5006	    			MOVF	STACK_6, W, 0
$3BBE	$B0D8	    			BTFSC	STATUS, C, 0
$3BC0	$2806	    			INCF	STACK_6, W, 0
$3BC2	$2602	    			ADDWF	STACK_2, F, 0
$3BC4	$900D	    			BCF	STACK_13, 0, 0
$3BC6	$	DOK32:
$3BC6	$2E0B	    			DECFSZ	STACK_11, F, 0
$3BC8	$EFBF	F01D			GOTO	DLOOP32
$3BCC	$	DROUND32:
$3BCC	$EF09	F01E			GOTO	DIV32OK
$3BD0	$90D8	    			BCF	STATUS, C, 0
$3BD2	$3600	    			RLCF	STACK_0, F, 0
$3BD4	$3601	    			RLCF	STACK_1, F, 0
$3BD6	$3602	    			RLCF	STACK_2, F, 0
$3BD8	$360E	    			RLCF	STACK_14, F, 0
$3BDA	$5004	    			MOVF	STACK_4, W, 0
$3BDC	$5E00	    			SUBWF	STACK_0, F, 0
$3BDE	$5005	    			MOVF	STACK_5, W, 0
$3BE0	$A0D8	    			BTFSS	STATUS, C, 0
$3BE2	$3C05	    			INCFSZ	STACK_5, W, 0
$3BE4	$5E01	    			SUBWF	STACK_1, F, 0
$3BE6	$5006	    			MOVF	STACK_6, W, 0
$3BE8	$A0D8	    			BTFSS	STATUS, C, 0
$3BEA	$3C06	    			INCFSZ	STACK_6, W, 0
$3BEC	$5E02	    			SUBWF	STACK_2, F, 0
$3BEE	$3406	    			RLCF	STACK_6, W, 0
$3BF0	$100E	    			IORWF	STACK_14, W, 0
$3BF2	$0B01	    			ANDLW	0x01
$3BF4	$260D	    			ADDWF	STACK_13, F, 0
$3BF6	$B0D8	    			BTFSC	STATUS, C, 0
$3BF8	$2A0C	    			INCF	STACK_12, F, 0
$3BFA	$B4D8	    			BTFSC	STATUS, Z, 0
$3BFC	$2A08	    			INCF	STACK_8, F, 0
$3BFE	$A4D8	    			BTFSS	STATUS, Z, 0
$3C00	$EF09	F01E			GOTO	DIV32OK
$3C04	$3208	    			RRCF	STACK_8, F, 0
$3C06	$320C	    			RRCF	STACK_12, F, 0
$3C08	$320D	    			RRCF	STACK_13, F, 0
$3C0A	$2A03	    			INCF	STACK_3, F, 0
$3C0C	$B4D8	    			BTFSC	STATUS, Z, 0
$3C0E	$EF1D	F01E			GOTO	JPDSETFOV32
$3C12	$	DIV32OK:
$3C12	$AE0A	    			BTFSS	STACK_10, 7, 0
$3C14	$9E08	    			BCF	STACK_8, 7, 0
$3C16	$5008	    			MOVF	STACK_8, W, 0
$3C18	$6E02	    			MOVWF	STACK_2, 0
$3C1A	$500C	    			MOVF	STACK_12, W, 0
$3C1C	$6E01	    			MOVWF	STACK_1, 0
$3C1E	$500D	    			MOVF	STACK_13, W, 0
$3C20	$6E00	    			MOVWF	STACK_0, 0
$3C22	$EF25	F01E			GOTO	DIV32EEE
$3C26	$	JPDSETFDZ32:
$3C26	$0E01	    			MOVLW	0x01
$3C28	$ECC9	F00D			CALL	_SETFDZ32
$3C2C	$EF25	F01E			GOTO	DIV32EEE
$3C30	$	JPDRES032:
$3C30	$0E02	    			MOVLW	0x02
$3C32	$EC5F	F002			CALL	_RES032
$3C36	$EF25	F01E			GOTO	DIV32EEE
$3C3A	$	JPDSETFOV32:
$3C3A	$0E04	    			MOVLW	0x04
$3C3C	$EC52	F002			CALL	_SETFOV32
$3C40	$EF25	F01E			GOTO	DIV32EEE
$3C44	$	JPDSETFUN32:
$3C44	$0E08	    			MOVLW	0x08
$3C46	$EC3F	F002			CALL	_SETFUN32
$3C4A	$	DIV32EEE:
$3C4A	$0012	    			RETURN
$3C4C	$	_Double2Longword:
$3C4C	$0100	    			MOVLB	0
$3C4E	$	INT3232U:
$3C4E	$6A0B	    			CLRF	STACK_11, 0
$3C50	$6A0C	    			CLRF	STACK_12, 0
$3C52	$6A0A	    			CLRF	STACK_10, 0
$3C54	$6A08	    			CLRF	STACK_8, 0
$3C56	$5003	    			MOVF	STACK_3, W, 0
$3C58	$B4D8	    			BTFSC	STATUS, Z, 0
$3C5A	$EFAF	F01E			GOTO	INT3232UEOK
$3C5E	$8E02	    			BSF	STACK_2, 7, 0
$3C60	$0E9E	    			MOVLW	158
$3C62	$5E03	    			SUBWF	STACK_3, F, 0
$3C64	$BE03	    			BTFSC	STACK_3, 7, 0
$3C66	$EF3A	F01E			GOTO	SETEXP32U
$3C6A	$B4D8	    			BTFSC	STATUS, Z, 0
$3C6C	$EF3A	F01E			GOTO	SETEXP32U
$3C70	$EF9F	F01E			GOTO	SETIOV32U
$3C74	$	SETEXP32U:
$3C74	$6C03	    			NEGF	STACK_3, 0
$3C76	$0E08	    			MOVLW	8
$3C78	$5C03	    			SUBWF	STACK_3, W, 0
$3C7A	$A0D8	    			BTFSS	STATUS, C, 0
$3C7C	$EF6C	F01E			GOTO	TSHIFT3232U
$3C80	$6E03	    			MOVWF	STACK_3, 0
$3C82	$3608	    			RLCF	STACK_8, F, 0
$3C84	$C000	F008			MOVFF	STACK_0, STACK_8
$3C88	$C001	F000			MOVFF	STACK_1, STACK_0
$3C8C	$C002	F001			MOVFF	STACK_2, STACK_1
$3C90	$6A02	    			CLRF	STACK_2, 0
$3C92	$0E08	    			MOVLW	8
$3C94	$5C03	    			SUBWF	STACK_3, W, 0
$3C96	$A0D8	    			BTFSS	STATUS, C, 0
$3C98	$EF6C	F01E			GOTO	TSHIFT3232U
$3C9C	$6E03	    			MOVWF	STACK_3, 0
$3C9E	$3608	    			RLCF	STACK_8, F, 0
$3CA0	$C000	F008			MOVFF	STACK_0, STACK_8
$3CA4	$C001	F000			MOVFF	STACK_1, STACK_0
$3CA8	$6A01	    			CLRF	STACK_1, 0
$3CAA	$0E08	    			MOVLW	8
$3CAC	$5C03	    			SUBWF	STACK_3, W, 0
$3CAE	$A0D8	    			BTFSS	STATUS, C, 0
$3CB0	$EF6C	F01E			GOTO	TSHIFT3232U
$3CB4	$6E03	    			MOVWF	STACK_3, 0
$3CB6	$3608	    			RLCF	STACK_8, F, 0
$3CB8	$C000	F008			MOVFF	STACK_0, STACK_8
$3CBC	$6A00	    			CLRF	STACK_0, 0
$3CBE	$0E08	    			MOVLW	8
$3CC0	$5C03	    			SUBWF	STACK_3, W, 0
$3CC2	$A0D8	    			BTFSS	STATUS, C, 0
$3CC4	$EF6C	F01E			GOTO	TSHIFT3232U
$3CC8	$6E03	    			MOVWF	STACK_3, 0
$3CCA	$3608	    			RLCF	STACK_8, F, 0
$3CCC	$6A08	    			CLRF	STACK_8, 0
$3CCE	$5003	    			MOVF	STACK_3, W, 0
$3CD0	$A4D8	    			BTFSS	STATUS, Z, 0
$3CD2	$90D8	    			BCF	STATUS, C, 0
$3CD4	$EF78	F01E			GOTO	SHIFT3232UOK
$3CD8	$	TSHIFT3232U:
$3CD8	$5003	    			MOVF	STACK_3, W, 0
$3CDA	$B4D8	    			BTFSC	STATUS, Z, 0
$3CDC	$EF78	F01E			GOTO	SHIFT3232UOK
$3CE0	$	SHIFT3232U:
$3CE0	$90D8	    			BCF	STATUS, C, 0
$3CE2	$3202	    			RRCF	STACK_2, F, 0
$3CE4	$3201	    			RRCF	STACK_1, F, 0
$3CE6	$3200	    			RRCF	STACK_0, F, 0
$3CE8	$3208	    			RRCF	STACK_8, F, 0
$3CEA	$2E03	    			DECFSZ	STACK_3, F, 0
$3CEC	$EF70	F01E			GOTO	SHIFT3232U
$3CF0	$	SHIFT3232UOK:
$3CF0	$BC0B	    			BTFSC	STACK_11, 6, 0
$3CF2	$A008	    			BTFSS	STACK_8, 0, 0
$3CF4	$EF89	F01E			GOTO	INT3232UOK
$3CF8	$A0D8	    			BTFSS	STATUS, C, 0
$3CFA	$EF89	F01E			GOTO	INT3232UOK
$3CFE	$2A08	    			INCF	STACK_8, F, 0
$3D00	$B4D8	    			BTFSC	STATUS, Z, 0
$3D02	$2A00	    			INCF	STACK_0, F, 0
$3D04	$B4D8	    			BTFSC	STATUS, Z, 0
$3D06	$2A01	    			INCF	STACK_1, F, 0
$3D08	$B4D8	    			BTFSC	STATUS, Z, 0
$3D0A	$2A02	    			INCF	STACK_2, F, 0
$3D0C	$BE02	    			BTFSC	STACK_2, 7, 0
$3D0E	$EFB3	F01E			GOTO	JPLSETIOV3224
$3D12	$	INT3232UOK:
$3D12	$AE0A	    			BTFSS	STACK_10, 7, 0
$3D14	$EFAF	F01E			GOTO	INT3232UEOK
$3D18	$1E02	    			COMF	STACK_2, F, 0
$3D1A	$1E01	    			COMF	STACK_1, F, 0
$3D1C	$1E00	    			COMF	STACK_0, F, 0
$3D1E	$1E08	    			COMF	STACK_8, F, 0
$3D20	$2A08	    			INCF	STACK_8, F, 0
$3D22	$B4D8	    			BTFSC	STATUS, Z, 0
$3D24	$2A00	    			INCF	STACK_0, F, 0
$3D26	$B4D8	    			BTFSC	STATUS, Z, 0
$3D28	$2A01	    			INCF	STACK_1, F, 0
$3D2A	$B4D8	    			BTFSC	STATUS, Z, 0
$3D2C	$2A02	    			INCF	STACK_2, F, 0
$3D2E	$EFAF	F01E			GOTO	INT3232UEOK
$3D32	$	IRES032U:
$3D32	$6A02	    			CLRF	STACK_2, 0
$3D34	$6A01	    			CLRF	STACK_1, 0
$3D36	$6A00	    			CLRF	STACK_0, 0
$3D38	$6A08	    			CLRF	STACK_8, 0
$3D3A	$EFAF	F01E			GOTO	INT3232UEOK
$3D3E	$	SETIOV32U:
$3D3E	$800B	    			BSF	STACK_11, 0, 0
$3D40	$AE0B	    			BTFSS	STACK_11, 7, 0
$3D42	$EFB9	F01E			GOTO	INT3232UEER
$3D46	$6A02	    			CLRF	STACK_2, 0
$3D48	$AE0A	    			BTFSS	STACK_10, 7, 0
$3D4A	$EFB9	F01E			GOTO	INT3232UEER
$3D4E	$6E02	    			MOVWF	STACK_2, 0
$3D50	$6E01	    			MOVWF	STACK_1, 0
$3D52	$6E00	    			MOVWF	STACK_0, 0
$3D54	$6E08	    			MOVWF	STACK_8, 0
$3D56	$360A	    			RLCF	STACK_10, F, 0
$3D58	$3202	    			RRCF	STACK_2, F, 0
$3D5A	$EFB9	F01E			GOTO	INT3232UEER
$3D5E	$	INT3232UEOK:
$3D5E	$0E00	    			MOVLW	0x00
$3D60	$6A0C	    			CLRF	STACK_12, 0
$3D62	$EFBA	F01E			GOTO	INT3232UEEE
$3D66	$	JPLSETIOV3224:
$3D66	$0E01	    			MOVLW	0x01
$3D68	$6E0C	    			MOVWF	STACK_12, 0
$3D6A	$ECCE	F00D			CALL	_SETIOV3224
$3D6E	$EFBA	F01E			GOTO	INT3232UEEE
$3D72	$	INT3232UEER:
$3D72	$0EFF	    			MOVLW	0xFF
$3D74	$	INT3232UEEE:
$3D74	$5002	    			MOVF	STACK_2, W, 0
$3D76	$6E03	    			MOVWF	STACK_3, 0
$3D78	$5001	    			MOVF	STACK_1, W, 0
$3D7A	$6E02	    			MOVWF	STACK_2, 0
$3D7C	$5000	    			MOVF	STACK_0, W, 0
$3D7E	$6E01	    			MOVWF	STACK_1, 0
$3D80	$5008	    			MOVF	STACK_8, W, 0
$3D82	$6E00	    			MOVWF	STACK_0, 0
$3D84	$0012	    			RETURN
$3D86	$	_Longword2Double:
$3D86	$0100	    			MOVLB	0
$3D88	$5000	    			MOVF	STACK_0, W, 0
$3D8A	$6E08	    			MOVWF	STACK_8, 0
$3D8C	$5001	    			MOVF	STACK_1, W, 0
$3D8E	$6E00	    			MOVWF	STACK_0, 0
$3D90	$5002	    			MOVF	STACK_2, W, 0
$3D92	$6E01	    			MOVWF	STACK_1, 0
$3D94	$5003	    			MOVF	STACK_3, W, 0
$3D96	$6E02	    			MOVWF	STACK_2, 0
$3D98	$6A03	    			CLRF	STACK_3, 0
$3D9A	$	FLO32U32:
$3D9A	$6A0B	    			CLRF	STACK_11, 0
$3D9C	$6A0C	    			CLRF	STACK_12, 0
$3D9E	$0E9E	    			MOVLW	0x9E
$3DA0	$6E03	    			MOVWF	STACK_3, 0
$3DA2	$6A0A	    			CLRF	STACK_10, 0
$3DA4	$0E02	    			MOVLW	0x02
$3DA6	$6E0C	    			MOVWF	STACK_12, 0
$3DA8	$ECD4	F006			CALL	_NRM4032
$3DAC	$0012	    			RETURN
$3DAE	$	_Sub_32x32_FP:
$3DAE	$0100	    			MOVLB	0
$3DB0	$	FPS32:
$3DB0	$7E06	    			BTG	STACK_6, 7, 0
$3DB2	$ECDD	F00D			CALL	_Add_32x32_FP
$3DB6	$0012	    			RETURN
$3DB8	$	_Double2Longint:
$3DB8	$0100	    			MOVLB	0
$3DBA	$	INT3232:
$3DBA	$6A0B	    			CLRF	STACK_11, 0
$3DBC	$6A0C	    			CLRF	STACK_12, 0
$3DBE	$6A08	    			CLRF	STACK_8, 0
$3DC0	$5003	    			MOVF	STACK_3, W, 0
$3DC2	$B4D8	    			BTFSC	STATUS, Z, 0
$3DC4	$EF61	F01F			GOTO	INT3232EOK
$3DC8	$C002	F00A			MOVFF	STACK_2, STACK_10
$3DCC	$8E02	    			BSF	STACK_2, 7, 0
$3DCE	$0E9E	    			MOVLW	158
$3DD0	$5E03	    			SUBWF	STACK_3, F, 0
$3DD2	$AE03	    			BTFSS	STACK_3, 7, 0
$3DD4	$EF51	F01F			GOTO	SETIOV32
$3DD8	$6C03	    			NEGF	STACK_3, 0
$3DDA	$0E08	    			MOVLW	8
$3DDC	$5C03	    			SUBWF	STACK_3, W, 0
$3DDE	$A0D8	    			BTFSS	STATUS, C, 0
$3DE0	$EF1E	F01F			GOTO	TSHIFT3232
$3DE4	$6E03	    			MOVWF	STACK_3, 0
$3DE6	$3608	    			RLCF	STACK_8, F, 0
$3DE8	$C000	F008			MOVFF	STACK_0, STACK_8
$3DEC	$C001	F000			MOVFF	STACK_1, STACK_0
$3DF0	$C002	F001			MOVFF	STACK_2, STACK_1
$3DF4	$6A02	    			CLRF	STACK_2, 0
$3DF6	$0E08	    			MOVLW	8
$3DF8	$5C03	    			SUBWF	STACK_3, W, 0
$3DFA	$A0D8	    			BTFSS	STATUS, C, 0
$3DFC	$EF1E	F01F			GOTO	TSHIFT3232
$3E00	$6E03	    			MOVWF	STACK_3, 0
$3E02	$3608	    			RLCF	STACK_8, F, 0
$3E04	$C000	F008			MOVFF	STACK_0, STACK_8
$3E08	$C001	F000			MOVFF	STACK_1, STACK_0
$3E0C	$6A01	    			CLRF	STACK_1, 0
$3E0E	$0E08	    			MOVLW	8
$3E10	$5C03	    			SUBWF	STACK_3, W, 0
$3E12	$A0D8	    			BTFSS	STATUS, C, 0
$3E14	$EF1E	F01F			GOTO	TSHIFT3232
$3E18	$6E03	    			MOVWF	STACK_3, 0
$3E1A	$3608	    			RLCF	STACK_8, F, 0
$3E1C	$C000	F008			MOVFF	STACK_0, STACK_8
$3E20	$6A00	    			CLRF	STACK_0, 0
$3E22	$0E08	    			MOVLW	8
$3E24	$5C03	    			SUBWF	STACK_3, W, 0
$3E26	$A0D8	    			BTFSS	STATUS, C, 0
$3E28	$EF1E	F01F			GOTO	TSHIFT3232
$3E2C	$6E03	    			MOVWF	STACK_3, 0
$3E2E	$3608	    			RLCF	STACK_8, F, 0
$3E30	$6A08	    			CLRF	STACK_8, 0
$3E32	$5003	    			MOVF	STACK_3, W, 0
$3E34	$A4D8	    			BTFSS	STATUS, Z, 0
$3E36	$90D8	    			BCF	STATUS, C, 0
$3E38	$EF2A	F01F			GOTO	SHIFT3232OK
$3E3C	$	TSHIFT3232:
$3E3C	$5003	    			MOVF	STACK_3, W, 0
$3E3E	$B4D8	    			BTFSC	STATUS, Z, 0
$3E40	$EF2A	F01F			GOTO	SHIFT3232OK
$3E44	$	SHIFT3232:
$3E44	$90D8	    			BCF	STATUS, C, 0
$3E46	$3202	    			RRCF	STACK_2, F, 0
$3E48	$3201	    			RRCF	STACK_1, F, 0
$3E4A	$3200	    			RRCF	STACK_0, F, 0
$3E4C	$3208	    			RRCF	STACK_8, F, 0
$3E4E	$2E03	    			DECFSZ	STACK_3, F, 0
$3E50	$EF22	F01F			GOTO	SHIFT3232
$3E54	$	SHIFT3232OK:
$3E54	$BC0B	    			BTFSC	STACK_11, 6, 0
$3E56	$A008	    			BTFSS	STACK_8, 0, 0
$3E58	$EF3B	F01F			GOTO	INT3232OK
$3E5C	$A0D8	    			BTFSS	STATUS, C, 0
$3E5E	$EF3B	F01F			GOTO	INT3232OK
$3E62	$2A08	    			INCF	STACK_8, F, 0
$3E64	$B4D8	    			BTFSC	STATUS, Z, 0
$3E66	$2A00	    			INCF	STACK_0, F, 0
$3E68	$B4D8	    			BTFSC	STATUS, Z, 0
$3E6A	$2A01	    			INCF	STACK_1, F, 0
$3E6C	$B4D8	    			BTFSC	STATUS, Z, 0
$3E6E	$2A02	    			INCF	STACK_2, F, 0
$3E70	$BE02	    			BTFSC	STACK_2, 7, 0
$3E72	$EF65	F01F			GOTO	JPISETIOV3224
$3E76	$	INT3232OK:
$3E76	$AE0A	    			BTFSS	STACK_10, 7, 0
$3E78	$EF61	F01F			GOTO	INT3232EOK
$3E7C	$1E02	    			COMF	STACK_2, F, 0
$3E7E	$1E01	    			COMF	STACK_1, F, 0
$3E80	$1E00	    			COMF	STACK_0, F, 0
$3E82	$1E08	    			COMF	STACK_8, F, 0
$3E84	$2A08	    			INCF	STACK_8, F, 0
$3E86	$B4D8	    			BTFSC	STATUS, Z, 0
$3E88	$2A00	    			INCF	STACK_0, F, 0
$3E8A	$B4D8	    			BTFSC	STATUS, Z, 0
$3E8C	$2A01	    			INCF	STACK_1, F, 0
$3E8E	$B4D8	    			BTFSC	STATUS, Z, 0
$3E90	$2A02	    			INCF	STACK_2, F, 0
$3E92	$EF61	F01F			GOTO	INT3232EOK
$3E96	$	IRES032:
$3E96	$6A02	    			CLRF	STACK_2, 0
$3E98	$6A01	    			CLRF	STACK_1, 0
$3E9A	$6A00	    			CLRF	STACK_0, 0
$3E9C	$6A08	    			CLRF	STACK_8, 0
$3E9E	$EF61	F01F			GOTO	INT3232EOK
$3EA2	$	SETIOV32:
$3EA2	$800B	    			BSF	STACK_11, 0, 0
$3EA4	$AE0B	    			BTFSS	STACK_11, 7, 0
$3EA6	$EF6C	F01F			GOTO	INT3232EER
$3EAA	$6A02	    			CLRF	STACK_2, 0
$3EAC	$AE0A	    			BTFSS	STACK_10, 7, 0
$3EAE	$EF6C	F01F			GOTO	INT3232EER
$3EB2	$6E02	    			MOVWF	STACK_2, 0
$3EB4	$6E01	    			MOVWF	STACK_1, 0
$3EB6	$6E00	    			MOVWF	STACK_0, 0
$3EB8	$6E08	    			MOVWF	STACK_8, 0
$3EBA	$360A	    			RLCF	STACK_10, F, 0
$3EBC	$3202	    			RRCF	STACK_2, F, 0
$3EBE	$EF6C	F01F			GOTO	INT3232EER
$3EC2	$	INT3232EOK:
$3EC2	$6A0C	    			CLRF	STACK_12, 0
$3EC4	$0E00	    			MOVLW	0x00
$3EC6	$EF6D	F01F			GOTO	INT3232EEE
$3ECA	$	JPISETIOV3224:
$3ECA	$0E01	    			MOVLW	0x01
$3ECC	$6E0C	    			MOVWF	STACK_12, 0
$3ECE	$0E00	    			MOVLW	0x00
$3ED0	$ECCE	F00D			CALL	_SETIOV3224
$3ED4	$EF6D	F01F			GOTO	INT3232EEE
$3ED8	$	INT3232EER:
$3ED8	$0EFF	    			MOVLW	0xFF
$3EDA	$	INT3232EEE:
$3EDA	$5002	    			MOVF	STACK_2, W, 0
$3EDC	$6E03	    			MOVWF	STACK_3, 0
$3EDE	$5001	    			MOVF	STACK_1, W, 0
$3EE0	$6E02	    			MOVWF	STACK_2, 0
$3EE2	$5000	    			MOVF	STACK_0, W, 0
$3EE4	$6E01	    			MOVWF	STACK_1, 0
$3EE6	$5008	    			MOVF	STACK_8, W, 0
$3EE8	$6E00	    			MOVWF	STACK_0, 0
$3EEA	$0012	    			RETURN
$3EEC	$	_form_num:
;rtc.c,11 :: 			void form_num (unsigned char num)   //запись в строку  tnum числа  num, замена пробелов на 0
;rtc.c,13 :: 			ByteToStr(num, tnum) ;
$3EEC	$C8D5	F8EB			MOVFF	FARG_form_num+0, FARG_ByteToStr+0
$3EF0	$0E6C	    			MOVLW	_tnum
$3EF2	$0108	    			MOVLB	8
$3EF4	$6FEC	    			MOVWF	FARG_ByteToStr+1, 1
$3EF6	$0E02	    			MOVLW	@_tnum
$3EF8	$6FED	    			MOVWF	FARG_ByteToStr+2, 1
$3EFA	$EC9F	F00C			CALL	_ByteToStr
;rtc.c,14 :: 			if (tnum[0] == ' ')  tnum[0] = '0';
$3EFE	$0102	    			MOVLB	2
$3F00	$516C	    			MOVF	_tnum, 0, 1
$3F02	$0A20	    			XORLW	32
$3F04	$E102	    			BNZ	L_form_num_0
$3F06	$0E30	    			MOVLW	48
$3F08	$6F6C	    			MOVWF	_tnum, 1
$3F0A	$	L_form_num_0:
;rtc.c,15 :: 			if (tnum[1] == ' ')  tnum[1] = '0';
$3F0A	$0102	    			MOVLB	2
$3F0C	$516D	    			MOVF	_tnum+1, 0, 1
$3F0E	$0A20	    			XORLW	32
$3F10	$E102	    			BNZ	L_form_num_1
$3F12	$0E30	    			MOVLW	48
$3F14	$6F6D	    			MOVWF	_tnum+1, 1
$3F16	$	L_form_num_1:
;rtc.c,16 :: 			tnum[3] = '\0';
$3F16	$0102	    			MOVLB	2
$3F18	$6B6F	    			CLRF	_tnum+3, 1
;rtc.c,17 :: 			}
$3F1A	$0012	    			RETURN
$3F1C	$	_OneWireOff:
;termo.c,25 :: 			void OneWireOff (void)
;termo.c,27 :: 			LATD.F7 = 0;
$3F1C	$9E8C	    			BCF	LATD, 7, 0
;termo.c,28 :: 			}
$3F1E	$0012	    			RETURN
$3F20	$	_OneWireDirOut:
;termo.c,13 :: 			void OneWireDirOut (void)
;termo.c,15 :: 			TRISD.F7 = 0;
$3F20	$9E95	    			BCF	TRISD, 7, 0
;termo.c,16 :: 			}
$3F22	$0012	    			RETURN
$3F24	$	_OneWireDirIn:
;termo.c,17 :: 			void OneWireDirIn (void)
;termo.c,19 :: 			TRISD.F7 = 1;
$3F24	$8E95	    			BSF	TRISD, 7, 0
;termo.c,20 :: 			}
$3F26	$0012	    			RETURN
$3F28	$	_OneWireLevel:
;termo.c,29 :: 			unsigned int OneWireLevel (void)
;termo.c,31 :: 			if(PORTD.F7==0) return 0;
$3F28	$6A02	    			CLRF	STACK_2, 0
$3F2A	$BE83	    			BTFSC	PORTD, 7, 0
$3F2C	$2A02	    			INCF	STACK_2, 1, 0
$3F2E	$5002	    			MOVF	STACK_2, 0, 0
$3F30	$0A00	    			XORLW	0
$3F32	$E103	    			BNZ	L_OneWireLevel_0
$3F34	$6A00	    			CLRF	STACK_0, 0
$3F36	$6A01	    			CLRF	STACK_0+1, 0
$3F38	$0012	    			RETURN
$3F3A	$	L_OneWireLevel_0:
;termo.c,32 :: 			if(PORTD.F7!=0) return 1;
$3F3A	$6A02	    			CLRF	STACK_2, 0
$3F3C	$BE83	    			BTFSC	PORTD, 7, 0
$3F3E	$2A02	    			INCF	STACK_2, 1, 0
$3F40	$5002	    			MOVF	STACK_2, 0, 0
$3F42	$0A00	    			XORLW	0
$3F44	$E005	    			BZ	L_OneWireLevel_1
$3F46	$0E01	    			MOVLW	1
$3F48	$6E00	    			MOVWF	STACK_0, 0
$3F4A	$0E00	    			MOVLW	0
$3F4C	$6E01	    			MOVWF	STACK_0+1, 0
$3F4E	$0012	    			RETURN
$3F50	$	L_OneWireLevel_1:
;termo.c,33 :: 			}
$3F50	$0012	    			RETURN
$3F52	$	_Ethernet_putConstBytes:
$3F52	$	L_Ethernet_putConstBytes_226:
$3F52	$C8AF	F000			MOVFF	FARG_Ethernet_putConstBytes+3, STACK_0
$3F56	$0108	    			MOVLB	8
$3F58	$07AF	    			DECF	FARG_Ethernet_putConstBytes+3, 1, 1
$3F5A	$5200	    			MOVF	STACK_0, 1, 0
$3F5C	$E00F	    			BZ	L_Ethernet_putConstBytes_227
$3F5E	$C8AC	FFF6			MOVFF	FARG_Ethernet_putConstBytes+0, TBLPTRL
$3F62	$C8AD	FFF7			MOVFF	FARG_Ethernet_putConstBytes+1, TBLPTRH
$3F66	$C8AE	FFF8			MOVFF	FARG_Ethernet_putConstBytes+2, TBLPTRU
$3F6A	$0009	    			TBLRD*+
$3F6C	$CFF5	FF61			MOVFF	TABLAT, EDATA
$3F70	$0E01	    			MOVLW	1
$3F72	$27AC	    			ADDWF	FARG_Ethernet_putConstBytes+0, 1, 1
$3F74	$0E00	    			MOVLW	0
$3F76	$23AD	    			ADDWFC	FARG_Ethernet_putConstBytes+1, 1, 1
$3F78	$23AE	    			ADDWFC	FARG_Ethernet_putConstBytes+2, 1, 1
$3F7A	$D7EB	    			BRA	L_Ethernet_putConstBytes_226
$3F7C	$	L_Ethernet_putConstBytes_227:
$3F7C	$0012	    			RETURN
$3F7E	$	_Ethernet_sendUDP2:
$3F7E	$0EAF	    			MOVLW	175
$3F80	$0108	    			MOVLB	8
$3F82	$6FD5	    			MOVWF	FARG_Ethernet_memcpy+0, 1
$3F84	$0E19	    			MOVLW	25
$3F86	$6FD6	    			MOVWF	FARG_Ethernet_memcpy+1, 1
$3F88	$C8AC	F8D7			MOVFF	FARG_Ethernet_sendUDP2+0, FARG_Ethernet_memcpy+2
$3F8C	$C8AD	F8D8			MOVFF	FARG_Ethernet_sendUDP2+1, FARG_Ethernet_memcpy+3
$3F90	$0E06	    			MOVLW	6
$3F92	$6FD9	    			MOVWF	FARG_Ethernet_memcpy+4, 1
$3F94	$ECF1	F00F			CALL	_Ethernet_memcpy
$3F98	$0E70	    			MOVLW	_Ethernet_macAddr
$3F9A	$0108	    			MOVLB	8
$3F9C	$6FD5	    			MOVWF	FARG_Ethernet_putBytes+0, 1
$3F9E	$0E02	    			MOVLW	@_Ethernet_macAddr
$3FA0	$6FD6	    			MOVWF	FARG_Ethernet_putBytes+1, 1
$3FA2	$0E06	    			MOVLW	6
$3FA4	$6FD7	    			MOVWF	FARG_Ethernet_putBytes+2, 1
$3FA6	$EC0A	F010			CALL	_Ethernet_putBytes
$3FAA	$0E00	    			MOVLW	0
$3FAC	$0108	    			MOVLB	8
$3FAE	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory2+0, 1
$3FB0	$0E08	    			MOVLW	8
$3FB2	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory2+1, 1
$3FB4	$EC1A	F010			CALL	_Ethernet_writeMemory2
$3FB8	$0E1C	    			MOVLW	28
$3FBA	$0108	    			MOVLB	8
$3FBC	$25B4	    			ADDWF	FARG_Ethernet_sendUDP2+8, 0, 1
$3FBE	$6FB7	    			MOVWF	Ethernet_sendUDP2_totlen_L0, 1
$3FC0	$0E00	    			MOVLW	0
$3FC2	$21B5	    			ADDWFC	FARG_Ethernet_sendUDP2+9, 0, 1
$3FC4	$6FB8	    			MOVWF	Ethernet_sendUDP2_totlen_L0+1, 1
$3FC6	$0E00	    			MOVLW	0
$3FC8	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory2+0, 1
$3FCA	$0E45	    			MOVLW	69
$3FCC	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory2+1, 1
$3FCE	$EC1A	F010			CALL	_Ethernet_writeMemory2
$3FD2	$C8B7	F8D5			MOVFF	Ethernet_sendUDP2_totlen_L0, FARG_Ethernet_writeMemory2+0
$3FD6	$C8B8	F8D6			MOVFF	Ethernet_sendUDP2_totlen_L0+1, FARG_Ethernet_writeMemory2+1
$3FDA	$EC1A	F010			CALL	_Ethernet_writeMemory2
$3FDE	$C5CD	F8D5			MOVFF	Ethernet_sendUDP2_idUniq_L0, FARG_Ethernet_writeMemory2+0
$3FE2	$C5CE	F8D6			MOVFF	Ethernet_sendUDP2_idUniq_L0+1, FARG_Ethernet_writeMemory2+1
$3FE6	$EC1A	F010			CALL	_Ethernet_writeMemory2
$3FEA	$0105	    			MOVLB	5
$3FEC	$4BCD	    			INFSNZ	Ethernet_sendUDP2_idUniq_L0, 1, 1
$3FEE	$2BCE	    			INCF	Ethernet_sendUDP2_idUniq_L0+1, 1, 1
$3FF0	$0108	    			MOVLB	8
$3FF2	$6BD5	    			CLRF	FARG_Ethernet_writeMemory2+0, 1
$3FF4	$6BD6	    			CLRF	FARG_Ethernet_writeMemory2+1, 1
$3FF6	$EC1A	F010			CALL	_Ethernet_writeMemory2
$3FFA	$0E11	    			MOVLW	17
$3FFC	$0108	    			MOVLB	8
$3FFE	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory2+0, 1
$4000	$0E80	    			MOVLW	128
$4002	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory2+1, 1
$4004	$EC1A	F010			CALL	_Ethernet_writeMemory2
$4008	$0108	    			MOVLB	8
$400A	$6BD5	    			CLRF	FARG_Ethernet_writeMemory2+0, 1
$400C	$6BD6	    			CLRF	FARG_Ethernet_writeMemory2+1, 1
$400E	$EC1A	F010			CALL	_Ethernet_writeMemory2
$4012	$0E76	    			MOVLW	_Ethernet_ipAddr
$4014	$0108	    			MOVLB	8
$4016	$6FD5	    			MOVWF	FARG_Ethernet_putBytes+0, 1
$4018	$0E02	    			MOVLW	@_Ethernet_ipAddr
$401A	$6FD6	    			MOVWF	FARG_Ethernet_putBytes+1, 1
$401C	$0E04	    			MOVLW	4
$401E	$6FD7	    			MOVWF	FARG_Ethernet_putBytes+2, 1
$4020	$EC0A	F010			CALL	_Ethernet_putBytes
$4024	$C8AE	F8D5			MOVFF	FARG_Ethernet_sendUDP2+2, FARG_Ethernet_putBytes+0
$4028	$C8AF	F8D6			MOVFF	FARG_Ethernet_sendUDP2+3, FARG_Ethernet_putBytes+1
$402C	$0E04	    			MOVLW	4
$402E	$0108	    			MOVLB	8
$4030	$6FD7	    			MOVWF	FARG_Ethernet_putBytes+2, 1
$4032	$EC0A	F010			CALL	_Ethernet_putBytes
$4036	$0E08	    			MOVLW	8
$4038	$0108	    			MOVLB	8
$403A	$25B4	    			ADDWF	FARG_Ethernet_sendUDP2+8, 0, 1
$403C	$6FB7	    			MOVWF	Ethernet_sendUDP2_totlen_L0, 1
$403E	$0E00	    			MOVLW	0
$4040	$21B5	    			ADDWFC	FARG_Ethernet_sendUDP2+9, 0, 1
$4042	$6FB8	    			MOVWF	Ethernet_sendUDP2_totlen_L0+1, 1
$4044	$C8B0	F8D5			MOVFF	FARG_Ethernet_sendUDP2+4, FARG_Ethernet_writeMemory2+0
$4048	$C8B1	F8D6			MOVFF	FARG_Ethernet_sendUDP2+5, FARG_Ethernet_writeMemory2+1
$404C	$EC1A	F010			CALL	_Ethernet_writeMemory2
$4050	$C8B2	F8D5			MOVFF	FARG_Ethernet_sendUDP2+6, FARG_Ethernet_writeMemory2+0
$4054	$C8B3	F8D6			MOVFF	FARG_Ethernet_sendUDP2+7, FARG_Ethernet_writeMemory2+1
$4058	$EC1A	F010			CALL	_Ethernet_writeMemory2
$405C	$C8B7	F8D5			MOVFF	Ethernet_sendUDP2_totlen_L0, FARG_Ethernet_writeMemory2+0
$4060	$C8B8	F8D6			MOVFF	Ethernet_sendUDP2_totlen_L0+1, FARG_Ethernet_writeMemory2+1
$4064	$EC1A	F010			CALL	_Ethernet_writeMemory2
$4068	$0108	    			MOVLB	8
$406A	$6BD5	    			CLRF	FARG_Ethernet_writeMemory2+0, 1
$406C	$6BD6	    			CLRF	FARG_Ethernet_writeMemory2+1, 1
$406E	$EC1A	F010			CALL	_Ethernet_writeMemory2
$4072	$0EBD	    			MOVLW	189
$4074	$0108	    			MOVLB	8
$4076	$6FD5	    			MOVWF	FARG_Ethernet_checksum+0, 1
$4078	$0E19	    			MOVLW	25
$407A	$6FD6	    			MOVWF	FARG_Ethernet_checksum+1, 1
$407C	$0E14	    			MOVLW	20
$407E	$6FD7	    			MOVWF	FARG_Ethernet_checksum+2, 1
$4080	$0E00	    			MOVLW	0
$4082	$6FD8	    			MOVWF	FARG_Ethernet_checksum+3, 1
$4084	$EC21	F010			CALL	_Ethernet_checksum
$4088	$0EF6	    			MOVLW	EDMACS
$408A	$0108	    			MOVLB	8
$408C	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$408E	$0E0E	    			MOVLW	@EDMACS
$4090	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$4092	$ECCA	F007			CALL	_Ethernet_readReg2
$4096	$C000	F8B9			MOVFF	STACK_0, FLOC_Ethernet_sendUDP2+3
$409A	$0EF7	    			MOVLW	EDMACSH
$409C	$0108	    			MOVLB	8
$409E	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$40A0	$0E0E	    			MOVLW	@EDMACSH
$40A2	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$40A4	$ECCA	F007			CALL	_Ethernet_readReg2
$40A8	$C000	F8D7			MOVFF	STACK_0, FARG_Ethernet_writeMemory+2
$40AC	$0EC7	    			MOVLW	199
$40AE	$0108	    			MOVLB	8
$40B0	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$40B2	$0E19	    			MOVLW	25
$40B4	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$40B6	$C8B9	F8D8			MOVFF	FLOC_Ethernet_sendUDP2+3, FARG_Ethernet_writeMemory+3
$40BA	$EC4D	F010			CALL	_Ethernet_writeMemory
$40BE	$0E01	    			MOVLW	1
$40C0	$0108	    			MOVLB	8
$40C2	$15B7	    			ANDWF	Ethernet_sendUDP2_totlen_L0, 0, 1
$40C4	$6FB6	    			MOVWF	Ethernet_sendUDP2_align_L0, 1
$40C6	$0ED9	    			MOVLW	217
$40C8	$25B4	    			ADDWF	FARG_Ethernet_sendUDP2+8, 0, 1
$40CA	$6FEB	    			MOVWF	FARG_Ethernet_writeMem+0, 1
$40CC	$0E19	    			MOVLW	25
$40CE	$21B5	    			ADDWFC	FARG_Ethernet_sendUDP2+9, 0, 1
$40D0	$6FEC	    			MOVWF	FARG_Ethernet_writeMem+1, 1
$40D2	$6BED	    			CLRF	FARG_Ethernet_writeMem+2, 1
$40D4	$ECD1	F007			CALL	_Ethernet_writeMem
$40D8	$0EC9	    			MOVLW	201
$40DA	$0108	    			MOVLB	8
$40DC	$6FD5	    			MOVWF	FARG_Ethernet_RAMcopy+0, 1
$40DE	$0E19	    			MOVLW	25
$40E0	$6FD6	    			MOVWF	FARG_Ethernet_RAMcopy+1, 1
$40E2	$0ED1	    			MOVLW	209
$40E4	$6FD7	    			MOVWF	FARG_Ethernet_RAMcopy+2, 1
$40E6	$0E19	    			MOVLW	25
$40E8	$6FD8	    			MOVWF	FARG_Ethernet_RAMcopy+3, 1
$40EA	$0ED9	    			MOVLW	217
$40EC	$25B4	    			ADDWF	FARG_Ethernet_sendUDP2+8, 0, 1
$40EE	$6FD9	    			MOVWF	FARG_Ethernet_RAMcopy+4, 1
$40F0	$0E19	    			MOVLW	25
$40F2	$21B5	    			ADDWFC	FARG_Ethernet_sendUDP2+9, 0, 1
$40F4	$6FDA	    			MOVWF	FARG_Ethernet_RAMcopy+5, 1
$40F6	$51B6	    			MOVF	Ethernet_sendUDP2_align_L0, 0, 1
$40F8	$27D9	    			ADDWF	FARG_Ethernet_RAMcopy+4, 1, 1
$40FA	$B0D8	    			BTFSC	STATUS, C, 0
$40FC	$2BDA	    			INCF	FARG_Ethernet_RAMcopy+5, 1, 1
$40FE	$6BDB	    			CLRF	FARG_Ethernet_RAMcopy+6, 1
$4100	$EC5A	F010			CALL	_Ethernet_RAMcopy
$4104	$0ED9	    			MOVLW	217
$4106	$0108	    			MOVLB	8
$4108	$25B4	    			ADDWF	FARG_Ethernet_sendUDP2+8, 0, 1
$410A	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$410C	$0E19	    			MOVLW	25
$410E	$21B5	    			ADDWFC	FARG_Ethernet_sendUDP2+9, 0, 1
$4110	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$4112	$51B6	    			MOVF	Ethernet_sendUDP2_align_L0, 0, 1
$4114	$27D5	    			ADDWF	FARG_Ethernet_writeMemory+0, 1, 1
$4116	$B0D8	    			BTFSC	STATUS, C, 0
$4118	$2BD6	    			INCF	FARG_Ethernet_writeMemory+1, 1, 1
$411A	$0E08	    			MOVLW	8
$411C	$27D5	    			ADDWF	FARG_Ethernet_writeMemory+0, 1, 1
$411E	$0E00	    			MOVLW	0
$4120	$23D6	    			ADDWFC	FARG_Ethernet_writeMemory+1, 1, 1
$4122	$6BD7	    			CLRF	FARG_Ethernet_writeMemory+2, 1
$4124	$0E11	    			MOVLW	17
$4126	$6FD8	    			MOVWF	FARG_Ethernet_writeMemory+3, 1
$4128	$EC4D	F010			CALL	_Ethernet_writeMemory
$412C	$C8B8	F8EB			MOVFF	Ethernet_sendUDP2_totlen_L0+1, FARG_Ethernet_putByte+0
$4130	$ECDF	F007			CALL	_Ethernet_putByte
$4134	$C8B7	F8EB			MOVFF	Ethernet_sendUDP2_totlen_L0, FARG_Ethernet_putByte+0
$4138	$ECDF	F007			CALL	_Ethernet_putByte
$413C	$0ED1	    			MOVLW	209
$413E	$0108	    			MOVLB	8
$4140	$6FD5	    			MOVWF	FARG_Ethernet_checksum+0, 1
$4142	$0E19	    			MOVLW	25
$4144	$6FD6	    			MOVWF	FARG_Ethernet_checksum+1, 1
$4146	$0E0C	    			MOVLW	12
$4148	$25B7	    			ADDWF	Ethernet_sendUDP2_totlen_L0, 0, 1
$414A	$6FD7	    			MOVWF	FARG_Ethernet_checksum+2, 1
$414C	$0E00	    			MOVLW	0
$414E	$21B8	    			ADDWFC	Ethernet_sendUDP2_totlen_L0+1, 0, 1
$4150	$6FD8	    			MOVWF	FARG_Ethernet_checksum+3, 1
$4152	$51B6	    			MOVF	Ethernet_sendUDP2_align_L0, 0, 1
$4154	$27D7	    			ADDWF	FARG_Ethernet_checksum+2, 1, 1
$4156	$B0D8	    			BTFSC	STATUS, C, 0
$4158	$2BD8	    			INCF	FARG_Ethernet_checksum+3, 1, 1
$415A	$EC21	F010			CALL	_Ethernet_checksum
$415E	$0EF6	    			MOVLW	EDMACS
$4160	$0108	    			MOVLB	8
$4162	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$4164	$0E0E	    			MOVLW	@EDMACS
$4166	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$4168	$ECCA	F007			CALL	_Ethernet_readReg2
$416C	$C000	F8B9			MOVFF	STACK_0, FLOC_Ethernet_sendUDP2+3
$4170	$0EF7	    			MOVLW	EDMACSH
$4172	$0108	    			MOVLB	8
$4174	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$4176	$0E0E	    			MOVLW	@EDMACSH
$4178	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$417A	$ECCA	F007			CALL	_Ethernet_readReg2
$417E	$C000	F8D7			MOVFF	STACK_0, FARG_Ethernet_writeMemory+2
$4182	$0ED7	    			MOVLW	215
$4184	$0108	    			MOVLB	8
$4186	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$4188	$0E19	    			MOVLW	25
$418A	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$418C	$C8B9	F8D8			MOVFF	FLOC_Ethernet_sendUDP2+3, FARG_Ethernet_writeMemory+3
$4190	$EC4D	F010			CALL	_Ethernet_writeMemory
$4194	$0E2A	    			MOVLW	42
$4196	$0108	    			MOVLB	8
$4198	$25B4	    			ADDWF	FARG_Ethernet_sendUDP2+8, 0, 1
$419A	$6FD5	    			MOVWF	FARG_Ethernet_TXpacket+0, 1
$419C	$0E00	    			MOVLW	0
$419E	$21B5	    			ADDWFC	FARG_Ethernet_sendUDP2+9, 0, 1
$41A0	$6FD6	    			MOVWF	FARG_Ethernet_TXpacket+1, 1
$41A2	$ECEE	F010			CALL	_Ethernet_TXpacket
$41A6	$0012	    			RETURN
$41A8	$	_Ethernet_getByte:
$41A8	$CF61	F000			MOVFF	EDATA, STACK_0
$41AC	$0012	    			RETURN
$41AE	$	_Ethernet_getBytes:
$41AE	$0108	    			MOVLB	8
$41B0	$51AF	    			MOVF	FARG_Ethernet_getBytes+3, 0, 1
$41B2	$0AFF	    			XORLW	255
$41B4	$E102	    			BNZ	L_Ethernet_getBytes_238
$41B6	$0EFF	    			MOVLW	255
$41B8	$19AE	    			XORWF	FARG_Ethernet_getBytes+2, 0, 1
$41BA	$	L_Ethernet_getBytes_238:
$41BA	$E00B	    			BZ	L_Ethernet_getBytes_11
$41BC	$0E7A	    			MOVLW	ERDPT
$41BE	$0108	    			MOVLB	8
$41C0	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$41C2	$0E0F	    			MOVLW	@ERDPT
$41C4	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$41C6	$C8AE	F8FA			MOVFF	FARG_Ethernet_getBytes+2, FARG_Ethernet_writeAddr2+2
$41CA	$C8AF	F8FB			MOVFF	FARG_Ethernet_getBytes+3, FARG_Ethernet_writeAddr2+3
$41CE	$EC67	F002			CALL	_Ethernet_writeAddr2
$41D2	$	L_Ethernet_getBytes_11:
$41D2	$	L_Ethernet_getBytes_12:
$41D2	$C8B0	F000			MOVFF	FARG_Ethernet_getBytes+4, STACK_0
$41D6	$0108	    			MOVLB	8
$41D8	$07B0	    			DECF	FARG_Ethernet_getBytes+4, 1, 1
$41DA	$5200	    			MOVF	STACK_0, 1, 0
$41DC	$E009	    			BZ	L_Ethernet_getBytes_13
$41DE	$C8AC	FFE1			MOVFF	FARG_Ethernet_getBytes+0, FSR1L
$41E2	$C8AD	FFE2			MOVFF	FARG_Ethernet_getBytes+1, FSR1H
$41E6	$CF61	FFE6			MOVFF	EDATA, POSTINC1
$41EA	$4BAC	    			INFSNZ	FARG_Ethernet_getBytes+0, 1, 1
$41EC	$2BAD	    			INCF	FARG_Ethernet_getBytes+1, 1, 1
$41EE	$D7F1	    			BRA	L_Ethernet_getBytes_12
$41F0	$	L_Ethernet_getBytes_13:
$41F0	$0012	    			RETURN
$41F2	$	_memcpy:
$41F2	$C8AE	F8B4			MOVFF	FARG_memcpy+2, memcpy_ss_L0
$41F6	$C8AF	F8B5			MOVFF	FARG_memcpy+3, memcpy_ss_L0+1
$41FA	$C8AC	F8B2			MOVFF	FARG_memcpy+0, memcpy_dd_L0
$41FE	$C8AD	F8B3			MOVFF	FARG_memcpy+1, memcpy_dd_L0+1
$4202	$	L_memcpy_7:
$4202	$C8B0	F000			MOVFF	FARG_memcpy+4, STACK_0
$4206	$C8B1	F001			MOVFF	FARG_memcpy+5, STACK_0+1
$420A	$0E01	    			MOVLW	1
$420C	$0108	    			MOVLB	8
$420E	$5FB0	    			SUBWF	FARG_memcpy+4, 1, 1
$4210	$0E00	    			MOVLW	0
$4212	$5BB1	    			SUBWFB	FARG_memcpy+5, 1, 1
$4214	$5000	    			MOVF	STACK_0, 0, 0
$4216	$1001	    			IORWF	STACK_0+1, 0, 0
$4218	$E011	    			BZ	L_memcpy_8
$421A	$C8B4	FFE9			MOVFF	memcpy_ss_L0, FSR0L
$421E	$C8B5	FFEA			MOVFF	memcpy_ss_L0+1, FSR0H
$4222	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$4226	$C8B2	FFE1			MOVFF	memcpy_dd_L0, FSR1L
$422A	$C8B3	FFE2			MOVFF	memcpy_dd_L0+1, FSR1H
$422E	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$4232	$4BB2	    			INFSNZ	memcpy_dd_L0, 1, 1
$4234	$2BB3	    			INCF	memcpy_dd_L0+1, 1, 1
$4236	$4BB4	    			INFSNZ	memcpy_ss_L0, 1, 1
$4238	$2BB5	    			INCF	memcpy_ss_L0+1, 1, 1
$423A	$D7E3	    			BRA	L_memcpy_7
$423C	$	L_memcpy_8:
$423C	$C8AC	F000			MOVFF	FARG_memcpy+0, STACK_0
$4240	$C8AD	F001			MOVFF	FARG_memcpy+1, STACK_0+1
$4244	$0012	    			RETURN
$4246	$	_memcmp:
$4246	$	L_memcmp_4:
$4246	$C8B0	F002			MOVFF	FARG_memcmp+4, STACK_2
$424A	$C8B1	F003			MOVFF	FARG_memcmp+5, STACK_2+1
$424E	$0E01	    			MOVLW	1
$4250	$0108	    			MOVLB	8
$4252	$5FB0	    			SUBWF	FARG_memcmp+4, 1, 1
$4254	$0E00	    			MOVLW	0
$4256	$5BB1	    			SUBWFB	FARG_memcmp+5, 1, 1
$4258	$0E00	    			MOVLW	0
$425A	$1803	    			XORWF	STACK_2+1, 0, 0
$425C	$E102	    			BNZ	L_memcmp_77
$425E	$0E00	    			MOVLW	0
$4260	$1802	    			XORWF	STACK_2, 0, 0
$4262	$	L_memcmp_77:
$4262	$E028	    			BZ	L_memcmp_5
$4264	$C8AC	FFE9			MOVFF	FARG_memcmp+0, FSR0L
$4268	$C8AD	FFEA			MOVFF	FARG_memcmp+1, FSR0H
$426C	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$4270	$C8AE	FFE9			MOVFF	FARG_memcmp+2, FSR0L
$4274	$C8AF	FFEA			MOVFF	FARG_memcmp+3, FSR0H
$4278	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$427C	$5004	    			MOVF	STACK_4, 0, 0
$427E	$1802	    			XORWF	STACK_2, 0, 0
$4280	$E013	    			BZ	L_memcmp_6
$4282	$C8AC	FFE9			MOVFF	FARG_memcmp+0, FSR0L
$4286	$C8AD	FFEA			MOVFF	FARG_memcmp+1, FSR0H
$428A	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$428E	$C8AE	FFE9			MOVFF	FARG_memcmp+2, FSR0L
$4292	$C8AF	FFEA			MOVFF	FARG_memcmp+3, FSR0H
$4296	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$429A	$5000	    			MOVF	STACK_0, 0, 0
$429C	$5C02	    			SUBWF	STACK_2, 0, 0
$429E	$6E00	    			MOVWF	STACK_0, 0
$42A0	$6A01	    			CLRF	STACK_0+1, 0
$42A2	$0E00	    			MOVLW	0
$42A4	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$42A6	$0012	    			RETURN
$42A8	$	L_memcmp_6:
$42A8	$0108	    			MOVLB	8
$42AA	$4BAC	    			INFSNZ	FARG_memcmp+0, 1, 1
$42AC	$2BAD	    			INCF	FARG_memcmp+1, 1, 1
$42AE	$4BAE	    			INFSNZ	FARG_memcmp+2, 1, 1
$42B0	$2BAF	    			INCF	FARG_memcmp+3, 1, 1
$42B2	$D7C9	    			BRA	L_memcmp_4
$42B4	$	L_memcmp_5:
$42B4	$6A00	    			CLRF	STACK_0, 0
$42B6	$6A01	    			CLRF	STACK_0+1, 0
$42B8	$0012	    			RETURN
$42BA	$	_Set_fnum:
$42BA	$0E4C	    			MOVLW	76
$42BC	$0108	    			MOVLB	8
$42BE	$6FB4	    			MOVWF	Set_fnum_LOG_TXT_L0+0, 1
$42C0	$0E4F	    			MOVLW	79
$42C2	$6FB5	    			MOVWF	Set_fnum_LOG_TXT_L0+1, 1
$42C4	$0E47	    			MOVLW	71
$42C6	$6FB6	    			MOVWF	Set_fnum_LOG_TXT_L0+2, 1
$42C8	$0E5F	    			MOVLW	95
$42CA	$6FB7	    			MOVWF	Set_fnum_LOG_TXT_L0+3, 1
$42CC	$0E5F	    			MOVLW	95
$42CE	$6FB8	    			MOVWF	Set_fnum_LOG_TXT_L0+4, 1
$42D0	$0E30	    			MOVLW	48
$42D2	$6FB9	    			MOVWF	Set_fnum_LOG_TXT_L0+5, 1
$42D4	$0E30	    			MOVLW	48
$42D6	$6FBA	    			MOVWF	Set_fnum_LOG_TXT_L0+6, 1
$42D8	$0E31	    			MOVLW	49
$42DA	$6FBB	    			MOVWF	Set_fnum_LOG_TXT_L0+7, 1
$42DC	$0E2E	    			MOVLW	46
$42DE	$6FBC	    			MOVWF	Set_fnum_LOG_TXT_L0+8, 1
$42E0	$0E54	    			MOVLW	84
$42E2	$6FBD	    			MOVWF	Set_fnum_LOG_TXT_L0+9, 1
$42E4	$0E58	    			MOVLW	88
$42E6	$6FBE	    			MOVWF	Set_fnum_LOG_TXT_L0+10, 1
$42E8	$0E54	    			MOVLW	84
$42EA	$6FBF	    			MOVWF	Set_fnum_LOG_TXT_L0+11, 1
$42EC	$6BC0	    			CLRF	Set_fnum_LOG_TXT_L0+12, 1
$42EE	$0E20	    			MOVLW	32
$42F0	$6FC1	    			MOVWF	Set_fnum_NUM_TXT_L0+0, 1
$42F2	$0E20	    			MOVLW	32
$42F4	$6FC2	    			MOVWF	Set_fnum_NUM_TXT_L0+1, 1
$42F6	$0E20	    			MOVLW	32
$42F8	$6FC3	    			MOVWF	Set_fnum_NUM_TXT_L0+2, 1
$42FA	$0E30	    			MOVLW	48
$42FC	$6FC4	    			MOVWF	Set_fnum_NUM_TXT_L0+3, 1
$42FE	$0E30	    			MOVLW	48
$4300	$6FC5	    			MOVWF	Set_fnum_NUM_TXT_L0+4, 1
$4302	$0E31	    			MOVLW	49
$4304	$6FC6	    			MOVWF	Set_fnum_NUM_TXT_L0+5, 1
$4306	$6BC7	    			CLRF	Set_fnum_NUM_TXT_L0+6, 1
;set_fnum.c,27 :: 			unsigned char Set_fnum(void)    // обновление номера файла журнала =0-err, =1-файл пуст, =2-год соответствует текущему, =3-прошлогодний
;set_fnum.c,36 :: 			Read_Time();    //Reads time and date information from RTC
$4308	$EC25	F011			CALL	_Read_Time
;set_fnum.c,37 :: 			if ( year & 0x03  ) visocosny =0;  // два младших бита year =0 -> год високосный
$430C	$0E03	    			MOVLW	3
$430E	$156B	    			ANDWF	_year, 0, 1
$4310	$6E00	    			MOVWF	STACK_0, 0
$4312	$E002	    			BZ	L_Set_fnum_0
$4314	$6B7A	    			CLRF	_visocosny, 1
$4316	$D003	    			BRA	L_Set_fnum_1
$4318	$	L_Set_fnum_0:
;set_fnum.c,38 :: 			else  visocosny =1;
$4318	$0E01	    			MOVLW	1
$431A	$0102	    			MOVLB	2
$431C	$6F7A	    			MOVWF	_visocosny, 1
$431E	$	L_Set_fnum_1:
;set_fnum.c,39 :: 			date_num = date + pred_sum [visocosny] [month-1];
$431E	$C27A	F000			MOVFF	_visocosny, STACK_0
$4322	$0E00	    			MOVLW	0
$4324	$6E01	    			MOVWF	STACK_0+1, 0
$4326	$6E02	    			MOVWF	STACK_0+2, 0
$4328	$6E03	    			MOVWF	STACK_0+3, 0
$432A	$0E18	    			MOVLW	24
$432C	$6E04	    			MOVWF	STACK_4, 0
$432E	$0E00	    			MOVLW	0
$4330	$6E05	    			MOVWF	STACK_4+1, 0
$4332	$6E06	    			MOVWF	STACK_4+2, 0
$4334	$6E07	    			MOVWF	STACK_4+3, 0
$4336	$EC2E	F001			CALL	_mul_32x32_u
$433A	$0EDE	    			MOVLW	#_pred_sum
$433C	$2400	    			ADDWF	STACK_0, 0, 0
$433E	$0108	    			MOVLB	8
$4340	$6FC9	    			MOVWF	FLOC_Set_fnum+29, 1
$4342	$0ED0	    			MOVLW	@#_pred_sum
$4344	$2001	    			ADDWFC	STACK_0+1, 0, 0
$4346	$6FCA	    			MOVWF	FLOC_Set_fnum+30, 1
$4348	$0E00	    			MOVLW	@@#_pred_sum
$434A	$2002	    			ADDWFC	STACK_0+2, 0, 0
$434C	$6FCB	    			MOVWF	FLOC_Set_fnum+31, 1
$434E	$0E00	    			MOVLW	0
$4350	$0102	    			MOVLB	2
$4352	$056A	    			DECF	_month, 0, 1
$4354	$6E00	    			MOVWF	STACK_0, 0
$4356	$6A01	    			CLRF	STACK_0+1, 0
$4358	$0E00	    			MOVLW	0
$435A	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$435C	$0E01	    			MOVLW	1
$435E	$6E04	    			MOVWF	STACK_4, 0
$4360	$0E00	    			MOVLW	0
$4362	$BE01	    			BTFSC	STACK_0+1, 7, 0
$4364	$0EFF	    			MOVLW	255
$4366	$6E02	    			MOVWF	STACK_0+2, 0
$4368	$6E03	    			MOVWF	STACK_0+3, 0
$436A	$5004	    			MOVF	STACK_4, 0, 0
$436C	$	L_Set_fnum_21:
$436C	$0102	    			MOVLB	2
$436E	$E007	    			BZ	L_Set_fnum_22
$4370	$3600	    			RLCF	STACK_0, 1, 0
$4372	$9000	    			BCF	STACK_0, 0, 0
$4374	$3601	    			RLCF	STACK_0+1, 1, 0
$4376	$3602	    			RLCF	STACK_0+2, 1, 0
$4378	$3603	    			RLCF	STACK_0+3, 1, 0
$437A	$0FFF	    			ADDLW	255
$437C	$D7F7	    			BRA	L_Set_fnum_21
$437E	$	L_Set_fnum_22:
$437E	$0108	    			MOVLB	8
$4380	$51C9	    			MOVF	FLOC_Set_fnum+29, 0, 1
$4382	$2600	    			ADDWF	STACK_0, 1, 0
$4384	$51CA	    			MOVF	FLOC_Set_fnum+30, 0, 1
$4386	$2201	    			ADDWFC	STACK_0+1, 1, 0
$4388	$51CB	    			MOVF	FLOC_Set_fnum+31, 0, 1
$438A	$2202	    			ADDWFC	STACK_0+2, 1, 0
$438C	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$4390	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$4394	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$4398	$0009	    			TBLRD*+
$439A	$CFF5	F000			MOVFF	TABLAT, STACK_0
$439E	$0009	    			TBLRD*+
$43A0	$CFF5	F001			MOVFF	TABLAT, STACK_0+1
$43A4	$0102	    			MOVLB	2
$43A6	$5169	    			MOVF	_date, 0, 1
$43A8	$2400	    			ADDWF	STACK_0, 0, 0
$43AA	$6E04	    			MOVWF	STACK_4, 0
$43AC	$0E00	    			MOVLW	0
$43AE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$43B0	$6E05	    			MOVWF	STACK_4+1, 0
$43B2	$C004	F8AC			MOVFF	STACK_4, Set_fnum_date_num_L0
$43B6	$C005	F8AD			MOVFF	STACK_4+1, Set_fnum_date_num_L0+1
;set_fnum.c,41 :: 			if( file_number != date_num )
$43BA	$517C	    			MOVF	_file_number+1, 0, 1
$43BC	$1805	    			XORWF	STACK_4+1, 0, 0
$43BE	$E102	    			BNZ	L_Set_fnum_23
$43C0	$5004	    			MOVF	STACK_4, 0, 0
$43C2	$197B	    			XORWF	_file_number, 0, 1
$43C4	$	L_Set_fnum_23:
$43C4	$B4D8	    			BTFSC	STATUS, Z, 0
$43C6	$D0C0	    			BRA	L_Set_fnum_2
;set_fnum.c,43 :: 			flag_read_fat = 0;  // FAT в состоянии read =1, иначе 0
$43C8	$0102	    			MOVLB	2
$43CA	$6B7D	    			CLRF	_flag_read_fat, 1
;set_fnum.c,44 :: 			file_number = date_num ;
$43CC	$C8AC	F27B			MOVFF	Set_fnum_date_num_L0, _file_number
$43D0	$C8AD	F27C			MOVFF	Set_fnum_date_num_L0+1, _file_number+1
;set_fnum.c,46 :: 			if( !visocosny && (file_number==365) )
$43D4	$537A	    			MOVF	_visocosny, 1, 1
$43D6	$E130	    			BNZ	L_Set_fnum_5
$43D8	$517C	    			MOVF	_file_number+1, 0, 1
$43DA	$0A01	    			XORLW	1
$43DC	$E102	    			BNZ	L_Set_fnum_24
$43DE	$0E6D	    			MOVLW	109
$43E0	$197B	    			XORWF	_file_number, 0, 1
$43E2	$	L_Set_fnum_24:
$43E2	$E12A	    			BNZ	L_Set_fnum_5
$43E4	$	L30_ex_L_Set_fnum_5:
;set_fnum.c,48 :: 			LOG_TXT[5] = '3';
$43E4	$0E33	    			MOVLW	51
$43E6	$0108	    			MOVLB	8
$43E8	$6FB9	    			MOVWF	Set_fnum_LOG_TXT_L0+5, 1
;set_fnum.c,49 :: 			LOG_TXT[6] = '6';
$43EA	$0E36	    			MOVLW	54
$43EC	$6FBA	    			MOVWF	Set_fnum_LOG_TXT_L0+6, 1
;set_fnum.c,50 :: 			LOG_TXT[7] = '6';
$43EE	$0E36	    			MOVLW	54
$43F0	$6FBB	    			MOVWF	Set_fnum_LOG_TXT_L0+7, 1
;set_fnum.c,51 :: 			tmp =  Cf_Fat_Init(&PORTH,&PORTE);
$43F2	$0E87	    			MOVLW	PORTH
$43F4	$6FD5	    			MOVWF	FARG_Cf_Fat_Init+0, 1
$43F6	$0E0F	    			MOVLW	@PORTH
$43F8	$6FD6	    			MOVWF	FARG_Cf_Fat_Init+1, 1
$43FA	$0E84	    			MOVLW	PORTE
$43FC	$6FD7	    			MOVWF	FARG_Cf_Fat_Init+2, 1
$43FE	$0E0F	    			MOVLW	@PORTE
$4400	$6FD8	    			MOVWF	FARG_Cf_Fat_Init+3, 1
$4402	$ECFC	F011			CALL	_Cf_Fat_Init
$4406	$C000	F8AF			MOVFF	STACK_0, Set_fnum_tmp_L0
;set_fnum.c,52 :: 			if ( tmp != 0 ) return 0;
$440A	$5000	    			MOVF	STACK_0, 0, 0
$440C	$0A00	    			XORLW	0
$440E	$E002	    			BZ	L_Set_fnum_6
$4410	$6A00	    			CLRF	STACK_0, 0
$4412	$0012	    			RETURN
$4414	$	L_Set_fnum_6:
;set_fnum.c,53 :: 			tmp = Cf_Fat_Assign(LOG_TXT,0xA0);
$4414	$0EB4	    			MOVLW	Set_fnum_LOG_TXT_L0
$4416	$0108	    			MOVLB	8
$4418	$6FD5	    			MOVWF	FARG_Cf_Fat_Assign+0, 1
$441A	$0E08	    			MOVLW	@Set_fnum_LOG_TXT_L0
$441C	$6FD6	    			MOVWF	FARG_Cf_Fat_Assign+1, 1
$441E	$0EA0	    			MOVLW	160
$4420	$6FD7	    			MOVWF	FARG_Cf_Fat_Assign+2, 1
$4422	$EC44	F014			CALL	_Cf_Fat_Assign
$4426	$C000	F8AF			MOVFF	STACK_0, Set_fnum_tmp_L0
;set_fnum.c,54 :: 			if ( tmp != 1 ) return 0;
$442A	$5000	    			MOVF	STACK_0, 0, 0
$442C	$0A01	    			XORLW	1
$442E	$E002	    			BZ	L_Set_fnum_7
$4430	$6A00	    			CLRF	STACK_0, 0
$4432	$0012	    			RETURN
$4434	$	L_Set_fnum_7:
;set_fnum.c,55 :: 			Cf_Fat_Rewrite();
$4434	$EC2C	F016			CALL	_Cf_Fat_Rewrite
;set_fnum.c,57 :: 			}
$4438	$	L_Set_fnum_5:
;set_fnum.c,61 :: 			IntToStr(file_number, NUM_TXT) ;
$4438	$C27B	F8D5			MOVFF	_file_number, FARG_IntToStr+0
$443C	$C27C	F8D6			MOVFF	_file_number+1, FARG_IntToStr+1
$4440	$0EC1	    			MOVLW	Set_fnum_NUM_TXT_L0
$4442	$0108	    			MOVLB	8
$4444	$6FD7	    			MOVWF	FARG_IntToStr+2, 1
$4446	$0E08	    			MOVLW	@Set_fnum_NUM_TXT_L0
$4448	$6FD8	    			MOVWF	FARG_IntToStr+3, 1
$444A	$EC83	F016			CALL	_IntToStr
;set_fnum.c,62 :: 			if (NUM_TXT[3]==' ')  NUM_TXT[3] = '0';
$444E	$0108	    			MOVLB	8
$4450	$51C4	    			MOVF	Set_fnum_NUM_TXT_L0+3, 0, 1
$4452	$0A20	    			XORLW	32
$4454	$E102	    			BNZ	L_Set_fnum_8
$4456	$0E30	    			MOVLW	48
$4458	$6FC4	    			MOVWF	Set_fnum_NUM_TXT_L0+3, 1
$445A	$	L_Set_fnum_8:
;set_fnum.c,63 :: 			if (NUM_TXT[4]==' ')  NUM_TXT[4] = '0';
$445A	$0108	    			MOVLB	8
$445C	$51C5	    			MOVF	Set_fnum_NUM_TXT_L0+4, 0, 1
$445E	$0A20	    			XORLW	32
$4460	$E102	    			BNZ	L_Set_fnum_9
$4462	$0E30	    			MOVLW	48
$4464	$6FC5	    			MOVWF	Set_fnum_NUM_TXT_L0+4, 1
$4466	$	L_Set_fnum_9:
;set_fnum.c,64 :: 			LOG_TXT[5] = NUM_TXT[3];
$4466	$C8C4	F8B9			MOVFF	Set_fnum_NUM_TXT_L0+3, Set_fnum_LOG_TXT_L0+5
;set_fnum.c,65 :: 			LOG_TXT[6] = NUM_TXT[4];
$446A	$C8C5	F8BA			MOVFF	Set_fnum_NUM_TXT_L0+4, Set_fnum_LOG_TXT_L0+6
;set_fnum.c,66 :: 			LOG_TXT[7] = NUM_TXT[5];
$446E	$C8C6	F8BB			MOVFF	Set_fnum_NUM_TXT_L0+5, Set_fnum_LOG_TXT_L0+7
;set_fnum.c,67 :: 			tmp =  Cf_Fat_Init(&PORTH,&PORTE);
$4472	$0E87	    			MOVLW	PORTH
$4474	$0108	    			MOVLB	8
$4476	$6FD5	    			MOVWF	FARG_Cf_Fat_Init+0, 1
$4478	$0E0F	    			MOVLW	@PORTH
$447A	$6FD6	    			MOVWF	FARG_Cf_Fat_Init+1, 1
$447C	$0E84	    			MOVLW	PORTE
$447E	$6FD7	    			MOVWF	FARG_Cf_Fat_Init+2, 1
$4480	$0E0F	    			MOVLW	@PORTE
$4482	$6FD8	    			MOVWF	FARG_Cf_Fat_Init+3, 1
$4484	$ECFC	F011			CALL	_Cf_Fat_Init
$4488	$C000	F8AF			MOVFF	STACK_0, Set_fnum_tmp_L0
;set_fnum.c,68 :: 			if ( tmp != 0 ) return 0;      // init error
$448C	$5000	    			MOVF	STACK_0, 0, 0
$448E	$0A00	    			XORLW	0
$4490	$E002	    			BZ	L_Set_fnum_10
$4492	$6A00	    			CLRF	STACK_0, 0
$4494	$0012	    			RETURN
$4496	$	L_Set_fnum_10:
;set_fnum.c,69 :: 			tmp = Cf_Fat_Assign(LOG_TXT,0xA0);
$4496	$0EB4	    			MOVLW	Set_fnum_LOG_TXT_L0
$4498	$0108	    			MOVLB	8
$449A	$6FD5	    			MOVWF	FARG_Cf_Fat_Assign+0, 1
$449C	$0E08	    			MOVLW	@Set_fnum_LOG_TXT_L0
$449E	$6FD6	    			MOVWF	FARG_Cf_Fat_Assign+1, 1
$44A0	$0EA0	    			MOVLW	160
$44A2	$6FD7	    			MOVWF	FARG_Cf_Fat_Assign+2, 1
$44A4	$EC44	F014			CALL	_Cf_Fat_Assign
$44A8	$C000	F8AF			MOVFF	STACK_0, Set_fnum_tmp_L0
;set_fnum.c,70 :: 			if ( tmp != 1 ) return 0;      //  assign error
$44AC	$5000	    			MOVF	STACK_0, 0, 0
$44AE	$0A01	    			XORLW	1
$44B0	$E002	    			BZ	L_Set_fnum_11
$44B2	$6A00	    			CLRF	STACK_0, 0
$44B4	$0012	    			RETURN
$44B6	$	L_Set_fnum_11:
;set_fnum.c,71 :: 			Cf_Fat_Reset(&size);            // To read file, procedure returns size of file
$44B6	$0EB0	    			MOVLW	Set_fnum_size_L0
$44B8	$0108	    			MOVLB	8
$44BA	$6FD5	    			MOVWF	FARG_Cf_Fat_Reset+0, 1
$44BC	$0E08	    			MOVLW	@Set_fnum_size_L0
$44BE	$6FD6	    			MOVWF	FARG_Cf_Fat_Reset+1, 1
$44C0	$ECE7	F016			CALL	_Cf_Fat_Reset
;set_fnum.c,72 :: 			if (size == 0)  return 1;     // пустой файл, Rewrite или Append
$44C4	$0E00	    			MOVLW	0
$44C6	$6E00	    			MOVWF	STACK_0, 0
$44C8	$0108	    			MOVLB	8
$44CA	$19B3	    			XORWF	Set_fnum_size_L0+3, 0, 1
$44CC	$E108	    			BNZ	L_Set_fnum_25
$44CE	$5000	    			MOVF	STACK_0, 0, 0
$44D0	$19B2	    			XORWF	Set_fnum_size_L0+2, 0, 1
$44D2	$E105	    			BNZ	L_Set_fnum_25
$44D4	$5000	    			MOVF	STACK_0, 0, 0
$44D6	$19B1	    			XORWF	Set_fnum_size_L0+1, 0, 1
$44D8	$E102	    			BNZ	L_Set_fnum_25
$44DA	$51B0	    			MOVF	Set_fnum_size_L0, 0, 1
$44DC	$0A00	    			XORLW	0
$44DE	$	L_Set_fnum_25:
$44DE	$E103	    			BNZ	L_Set_fnum_12
$44E0	$0E01	    			MOVLW	1
$44E2	$6E00	    			MOVWF	STACK_0, 0
$44E4	$0012	    			RETURN
$44E6	$	L_Set_fnum_12:
;set_fnum.c,73 :: 			for (i = 1; i < 26 ; i++)  // год - в 24 и 25 позициях
$44E6	$0E01	    			MOVLW	1
$44E8	$0108	    			MOVLB	8
$44EA	$6FAE	    			MOVWF	Set_fnum_i_L0, 1
$44EC	$	L_Set_fnum_13:
$44EC	$0E1A	    			MOVLW	26
$44EE	$0108	    			MOVLB	8
$44F0	$5DAE	    			SUBWF	Set_fnum_i_L0, 0, 1
$44F2	$E21F	    			BC	L_Set_fnum_14
;set_fnum.c,75 :: 			Cf_Fat_Read(&caracter);    // пройти уже считанное
$44F4	$0EC8	    			MOVLW	Set_fnum_caracter_L0
$44F6	$6FD5	    			MOVWF	FARG_Cf_Fat_Read+0, 1
$44F8	$0E08	    			MOVLW	@Set_fnum_caracter_L0
$44FA	$6FD6	    			MOVWF	FARG_Cf_Fat_Read+1, 1
$44FC	$EC09	F017			CALL	_Cf_Fat_Read
;set_fnum.c,76 :: 			if(i==24) tmp = (caracter - '0')*10;      //
$4500	$0108	    			MOVLB	8
$4502	$51AE	    			MOVF	Set_fnum_i_L0, 0, 1
$4504	$0A18	    			XORLW	24
$4506	$E109	    			BNZ	L_Set_fnum_16
$4508	$0E30	    			MOVLW	48
$450A	$5DC8	    			SUBWF	Set_fnum_caracter_L0, 0, 1
$450C	$6E00	    			MOVWF	STACK_0, 0
$450E	$0E0A	    			MOVLW	10
$4510	$0200	    			MULWF	STACK_0, 0
$4512	$CFF3	F000			MOVFF	PRODL, STACK_0
$4516	$C000	F8AF			MOVFF	STACK_0, Set_fnum_tmp_L0
$451A	$	L_Set_fnum_16:
;set_fnum.c,77 :: 			if(i==25) tmp += caracter - '0';      //
$451A	$0108	    			MOVLB	8
$451C	$51AE	    			MOVF	Set_fnum_i_L0, 0, 1
$451E	$0A19	    			XORLW	25
$4520	$E105	    			BNZ	L_Set_fnum_17
$4522	$0E30	    			MOVLW	48
$4524	$5DC8	    			SUBWF	Set_fnum_caracter_L0, 0, 1
$4526	$6E00	    			MOVWF	STACK_0, 0
$4528	$5000	    			MOVF	STACK_0, 0, 0
$452A	$27AF	    			ADDWF	Set_fnum_tmp_L0, 1, 1
$452C	$	L_Set_fnum_17:
;set_fnum.c,78 :: 			}
$452C	$	L_Set_fnum_15:
;set_fnum.c,73 :: 			for (i = 1; i < 26 ; i++)  // год - в 24 и 25 позициях
$452C	$0108	    			MOVLB	8
$452E	$2BAE	    			INCF	Set_fnum_i_L0, 1, 1
;set_fnum.c,78 :: 			}
$4530	$D7DD	    			BRA	L_Set_fnum_13
$4532	$	L_Set_fnum_14:
;set_fnum.c,79 :: 			if ( tmp == year ) return 2;     // год соответствует текущему, Append
$4532	$0108	    			MOVLB	8
$4534	$51AF	    			MOVF	Set_fnum_tmp_L0, 0, 1
$4536	$0102	    			MOVLB	2
$4538	$196B	    			XORWF	_year, 0, 1
$453A	$E103	    			BNZ	L_Set_fnum_18
$453C	$0E02	    			MOVLW	2
$453E	$6E00	    			MOVWF	STACK_0, 0
$4540	$0012	    			RETURN
$4542	$	L_Set_fnum_18:
;set_fnum.c,80 :: 			else  return 3;     // год не соответствует текущему, Rewrite
$4542	$0E03	    			MOVLW	3
$4544	$6E00	    			MOVWF	STACK_0, 0
$4546	$0012	    			RETURN
;set_fnum.c,81 :: 			} //
$4548	$	L_Set_fnum_2:
;set_fnum.c,83 :: 			file_number = date_num ;
$4548	$0102	    			MOVLB	2
$454A	$C8AC	F27B			MOVFF	Set_fnum_date_num_L0, _file_number
$454E	$C8AD	F27C			MOVFF	Set_fnum_date_num_L0+1, _file_number+1
$4552	$	L_Set_fnum_20:
;set_fnum.c,84 :: 			return 2;
$4552	$0E02	    			MOVLW	2
$4554	$6E00	    			MOVWF	STACK_0, 0
;set_fnum.c,86 :: 			}
$4556	$0012	    			RETURN
$4558	$	_Get_Ip_Time:
$4558	$0E2E	    			MOVLW	46
$455A	$0108	    			MOVLB	8
$455C	$6FAC	    			MOVWF	lstr12_log+0, 1
$455E	$6BAD	    			CLRF	lstr12_log+1, 1
$4560	$0E2E	    			MOVLW	46
$4562	$6FAE	    			MOVWF	lstr13_log+0, 1
$4564	$6BAF	    			CLRF	lstr13_log+1, 1
$4566	$0E2E	    			MOVLW	46
$4568	$6FB0	    			MOVWF	lstr14_log+0, 1
$456A	$6BB1	    			CLRF	lstr14_log+1, 1
$456C	$0E20	    			MOVLW	32
$456E	$6FB2	    			MOVWF	lstr15_log+0, 1
$4570	$6BB3	    			CLRF	lstr15_log+1, 1
;log.c,175 :: 			void Get_Ip_Time(void )
;log.c,178 :: 			Read_Time();      // read time from RTC
$4572	$EC25	F011			CALL	_Read_Time
;log.c,180 :: 			ip_string[0] = 0;
$4576	$6B7E	    			CLRF	_ip_string, 1
;log.c,181 :: 			Num_to_0str(myIpAddr[0],tmp_string);
$4578	$C28F	F8D5			MOVFF	_myIpAddr, FARG_Num_to_0str+0
$457C	$0E93	    			MOVLW	_tmp_string
$457E	$0108	    			MOVLB	8
$4580	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$4582	$0E02	    			MOVLW	@_tmp_string
$4584	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$4586	$EC4D	F017			CALL	_Num_to_0str
;log.c,182 :: 			strncat (ip_string, tmp_string, 3);
$458A	$0E7E	    			MOVLW	_ip_string
$458C	$0108	    			MOVLB	8
$458E	$6FD5	    			MOVWF	FARG_strncat+0, 1
$4590	$0E02	    			MOVLW	@_ip_string
$4592	$6FD6	    			MOVWF	FARG_strncat+1, 1
$4594	$0E93	    			MOVLW	_tmp_string
$4596	$6FD7	    			MOVWF	FARG_strncat+2, 1
$4598	$0E02	    			MOVLW	@_tmp_string
$459A	$6FD8	    			MOVWF	FARG_strncat+3, 1
$459C	$0E03	    			MOVLW	3
$459E	$6FD9	    			MOVWF	FARG_strncat+4, 1
$45A0	$0E00	    			MOVLW	0
$45A2	$6FDA	    			MOVWF	FARG_strncat+5, 1
$45A4	$EC79	F017			CALL	_strncat
;log.c,183 :: 			strncat (ip_string, ".", 1);
$45A8	$0E7E	    			MOVLW	_ip_string
$45AA	$0108	    			MOVLB	8
$45AC	$6FD5	    			MOVWF	FARG_strncat+0, 1
$45AE	$0E02	    			MOVLW	@_ip_string
$45B0	$6FD6	    			MOVWF	FARG_strncat+1, 1
$45B2	$0EAC	    			MOVLW	lstr12_log
$45B4	$6FD7	    			MOVWF	FARG_strncat+2, 1
$45B6	$0E08	    			MOVLW	@lstr12_log
$45B8	$6FD8	    			MOVWF	FARG_strncat+3, 1
$45BA	$0E01	    			MOVLW	1
$45BC	$6FD9	    			MOVWF	FARG_strncat+4, 1
$45BE	$0E00	    			MOVLW	0
$45C0	$6FDA	    			MOVWF	FARG_strncat+5, 1
$45C2	$EC79	F017			CALL	_strncat
;log.c,185 :: 			Num_to_0str(myIpAddr[1],tmp_string);
$45C6	$C290	F8D5			MOVFF	_myIpAddr+1, FARG_Num_to_0str+0
$45CA	$0E93	    			MOVLW	_tmp_string
$45CC	$0108	    			MOVLB	8
$45CE	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$45D0	$0E02	    			MOVLW	@_tmp_string
$45D2	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$45D4	$EC4D	F017			CALL	_Num_to_0str
;log.c,186 :: 			strncat (ip_string, tmp_string, 3);
$45D8	$0E7E	    			MOVLW	_ip_string
$45DA	$0108	    			MOVLB	8
$45DC	$6FD5	    			MOVWF	FARG_strncat+0, 1
$45DE	$0E02	    			MOVLW	@_ip_string
$45E0	$6FD6	    			MOVWF	FARG_strncat+1, 1
$45E2	$0E93	    			MOVLW	_tmp_string
$45E4	$6FD7	    			MOVWF	FARG_strncat+2, 1
$45E6	$0E02	    			MOVLW	@_tmp_string
$45E8	$6FD8	    			MOVWF	FARG_strncat+3, 1
$45EA	$0E03	    			MOVLW	3
$45EC	$6FD9	    			MOVWF	FARG_strncat+4, 1
$45EE	$0E00	    			MOVLW	0
$45F0	$6FDA	    			MOVWF	FARG_strncat+5, 1
$45F2	$EC79	F017			CALL	_strncat
;log.c,187 :: 			strncat (ip_string, ".", 1);
$45F6	$0E7E	    			MOVLW	_ip_string
$45F8	$0108	    			MOVLB	8
$45FA	$6FD5	    			MOVWF	FARG_strncat+0, 1
$45FC	$0E02	    			MOVLW	@_ip_string
$45FE	$6FD6	    			MOVWF	FARG_strncat+1, 1
$4600	$0EAE	    			MOVLW	lstr13_log
$4602	$6FD7	    			MOVWF	FARG_strncat+2, 1
$4604	$0E08	    			MOVLW	@lstr13_log
$4606	$6FD8	    			MOVWF	FARG_strncat+3, 1
$4608	$0E01	    			MOVLW	1
$460A	$6FD9	    			MOVWF	FARG_strncat+4, 1
$460C	$0E00	    			MOVLW	0
$460E	$6FDA	    			MOVWF	FARG_strncat+5, 1
$4610	$EC79	F017			CALL	_strncat
;log.c,189 :: 			Num_to_0str(myIpAddr[2],tmp_string);
$4614	$C291	F8D5			MOVFF	_myIpAddr+2, FARG_Num_to_0str+0
$4618	$0E93	    			MOVLW	_tmp_string
$461A	$0108	    			MOVLB	8
$461C	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$461E	$0E02	    			MOVLW	@_tmp_string
$4620	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$4622	$EC4D	F017			CALL	_Num_to_0str
;log.c,190 :: 			strncat (ip_string, tmp_string, 3);
$4626	$0E7E	    			MOVLW	_ip_string
$4628	$0108	    			MOVLB	8
$462A	$6FD5	    			MOVWF	FARG_strncat+0, 1
$462C	$0E02	    			MOVLW	@_ip_string
$462E	$6FD6	    			MOVWF	FARG_strncat+1, 1
$4630	$0E93	    			MOVLW	_tmp_string
$4632	$6FD7	    			MOVWF	FARG_strncat+2, 1
$4634	$0E02	    			MOVLW	@_tmp_string
$4636	$6FD8	    			MOVWF	FARG_strncat+3, 1
$4638	$0E03	    			MOVLW	3
$463A	$6FD9	    			MOVWF	FARG_strncat+4, 1
$463C	$0E00	    			MOVLW	0
$463E	$6FDA	    			MOVWF	FARG_strncat+5, 1
$4640	$EC79	F017			CALL	_strncat
;log.c,191 :: 			strncat (ip_string, ".", 1);
$4644	$0E7E	    			MOVLW	_ip_string
$4646	$0108	    			MOVLB	8
$4648	$6FD5	    			MOVWF	FARG_strncat+0, 1
$464A	$0E02	    			MOVLW	@_ip_string
$464C	$6FD6	    			MOVWF	FARG_strncat+1, 1
$464E	$0EB0	    			MOVLW	lstr14_log
$4650	$6FD7	    			MOVWF	FARG_strncat+2, 1
$4652	$0E08	    			MOVLW	@lstr14_log
$4654	$6FD8	    			MOVWF	FARG_strncat+3, 1
$4656	$0E01	    			MOVLW	1
$4658	$6FD9	    			MOVWF	FARG_strncat+4, 1
$465A	$0E00	    			MOVLW	0
$465C	$6FDA	    			MOVWF	FARG_strncat+5, 1
$465E	$EC79	F017			CALL	_strncat
;log.c,193 :: 			Num_to_0str(myIpAddr[3],tmp_string);
$4662	$C292	F8D5			MOVFF	_myIpAddr+3, FARG_Num_to_0str+0
$4666	$0E93	    			MOVLW	_tmp_string
$4668	$0108	    			MOVLB	8
$466A	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$466C	$0E02	    			MOVLW	@_tmp_string
$466E	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$4670	$EC4D	F017			CALL	_Num_to_0str
;log.c,194 :: 			strncat (ip_string, tmp_string, 3);
$4674	$0E7E	    			MOVLW	_ip_string
$4676	$0108	    			MOVLB	8
$4678	$6FD5	    			MOVWF	FARG_strncat+0, 1
$467A	$0E02	    			MOVLW	@_ip_string
$467C	$6FD6	    			MOVWF	FARG_strncat+1, 1
$467E	$0E93	    			MOVLW	_tmp_string
$4680	$6FD7	    			MOVWF	FARG_strncat+2, 1
$4682	$0E02	    			MOVLW	@_tmp_string
$4684	$6FD8	    			MOVWF	FARG_strncat+3, 1
$4686	$0E03	    			MOVLW	3
$4688	$6FD9	    			MOVWF	FARG_strncat+4, 1
$468A	$0E00	    			MOVLW	0
$468C	$6FDA	    			MOVWF	FARG_strncat+5, 1
$468E	$EC79	F017			CALL	_strncat
;log.c,195 :: 			strncat (ip_string, " ", 1);
$4692	$0E7E	    			MOVLW	_ip_string
$4694	$0108	    			MOVLB	8
$4696	$6FD5	    			MOVWF	FARG_strncat+0, 1
$4698	$0E02	    			MOVLW	@_ip_string
$469A	$6FD6	    			MOVWF	FARG_strncat+1, 1
$469C	$0EB2	    			MOVLW	lstr15_log
$469E	$6FD7	    			MOVWF	FARG_strncat+2, 1
$46A0	$0E08	    			MOVLW	@lstr15_log
$46A2	$6FD8	    			MOVWF	FARG_strncat+3, 1
$46A4	$0E01	    			MOVLW	1
$46A6	$6FD9	    			MOVWF	FARG_strncat+4, 1
$46A8	$0E00	    			MOVLW	0
$46AA	$6FDA	    			MOVWF	FARG_strncat+5, 1
$46AC	$EC79	F017			CALL	_strncat
;log.c,197 :: 			date_string[0] = 0;
$46B0	$0102	    			MOVLB	2
$46B2	$6BBB	    			CLRF	_date_string, 1
;log.c,198 :: 			Num_to_0str(date,tmp_string);
$46B4	$C269	F8D5			MOVFF	_date, FARG_Num_to_0str+0
$46B8	$0E93	    			MOVLW	_tmp_string
$46BA	$0108	    			MOVLB	8
$46BC	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$46BE	$0E02	    			MOVLW	@_tmp_string
$46C0	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$46C2	$EC4D	F017			CALL	_Num_to_0str
;log.c,199 :: 			strncat (date_string, tmp_string, 3);
$46C6	$0EBB	    			MOVLW	_date_string
$46C8	$0108	    			MOVLB	8
$46CA	$6FD5	    			MOVWF	FARG_strncat+0, 1
$46CC	$0E02	    			MOVLW	@_date_string
$46CE	$6FD6	    			MOVWF	FARG_strncat+1, 1
$46D0	$0E93	    			MOVLW	_tmp_string
$46D2	$6FD7	    			MOVWF	FARG_strncat+2, 1
$46D4	$0E02	    			MOVLW	@_tmp_string
$46D6	$6FD8	    			MOVWF	FARG_strncat+3, 1
$46D8	$0E03	    			MOVLW	3
$46DA	$6FD9	    			MOVWF	FARG_strncat+4, 1
$46DC	$0E00	    			MOVLW	0
$46DE	$6FDA	    			MOVWF	FARG_strncat+5, 1
$46E0	$EC79	F017			CALL	_strncat
;log.c,200 :: 			date_string[0] =  ' ' ;
$46E4	$0E20	    			MOVLW	32
$46E6	$0102	    			MOVLB	2
$46E8	$6FBB	    			MOVWF	_date_string, 1
;log.c,202 :: 			Num_to_0str(month,tmp_string);
$46EA	$C26A	F8D5			MOVFF	_month, FARG_Num_to_0str+0
$46EE	$0E93	    			MOVLW	_tmp_string
$46F0	$0108	    			MOVLB	8
$46F2	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$46F4	$0E02	    			MOVLW	@_tmp_string
$46F6	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$46F8	$EC4D	F017			CALL	_Num_to_0str
;log.c,203 :: 			strncat (date_string, tmp_string, 3);
$46FC	$0EBB	    			MOVLW	_date_string
$46FE	$0108	    			MOVLB	8
$4700	$6FD5	    			MOVWF	FARG_strncat+0, 1
$4702	$0E02	    			MOVLW	@_date_string
$4704	$6FD6	    			MOVWF	FARG_strncat+1, 1
$4706	$0E93	    			MOVLW	_tmp_string
$4708	$6FD7	    			MOVWF	FARG_strncat+2, 1
$470A	$0E02	    			MOVLW	@_tmp_string
$470C	$6FD8	    			MOVWF	FARG_strncat+3, 1
$470E	$0E03	    			MOVLW	3
$4710	$6FD9	    			MOVWF	FARG_strncat+4, 1
$4712	$0E00	    			MOVLW	0
$4714	$6FDA	    			MOVWF	FARG_strncat+5, 1
$4716	$EC79	F017			CALL	_strncat
;log.c,204 :: 			date_string[3] =  '/' ;
$471A	$0E2F	    			MOVLW	47
$471C	$0102	    			MOVLB	2
$471E	$6FBE	    			MOVWF	_date_string+3, 1
;log.c,206 :: 			Num_to_0str(year,tmp_string);
$4720	$C26B	F8D5			MOVFF	_year, FARG_Num_to_0str+0
$4724	$0E93	    			MOVLW	_tmp_string
$4726	$0108	    			MOVLB	8
$4728	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$472A	$0E02	    			MOVLW	@_tmp_string
$472C	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$472E	$EC4D	F017			CALL	_Num_to_0str
;log.c,207 :: 			strncat (date_string, tmp_string, 3);
$4732	$0EBB	    			MOVLW	_date_string
$4734	$0108	    			MOVLB	8
$4736	$6FD5	    			MOVWF	FARG_strncat+0, 1
$4738	$0E02	    			MOVLW	@_date_string
$473A	$6FD6	    			MOVWF	FARG_strncat+1, 1
$473C	$0E93	    			MOVLW	_tmp_string
$473E	$6FD7	    			MOVWF	FARG_strncat+2, 1
$4740	$0E02	    			MOVLW	@_tmp_string
$4742	$6FD8	    			MOVWF	FARG_strncat+3, 1
$4744	$0E03	    			MOVLW	3
$4746	$6FD9	    			MOVWF	FARG_strncat+4, 1
$4748	$0E00	    			MOVLW	0
$474A	$6FDA	    			MOVWF	FARG_strncat+5, 1
$474C	$EC79	F017			CALL	_strncat
;log.c,208 :: 			date_string[6] =  '/' ;
$4750	$0E2F	    			MOVLW	47
$4752	$0102	    			MOVLB	2
$4754	$6FC1	    			MOVWF	_date_string+6, 1
;log.c,210 :: 			time_string[0] = 0;
$4756	$6BC5	    			CLRF	_time_string, 1
;log.c,211 :: 			Num_to_0str(hour,tmp_string);
$4758	$C268	F8D5			MOVFF	_hour, FARG_Num_to_0str+0
$475C	$0E93	    			MOVLW	_tmp_string
$475E	$0108	    			MOVLB	8
$4760	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$4762	$0E02	    			MOVLW	@_tmp_string
$4764	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$4766	$EC4D	F017			CALL	_Num_to_0str
;log.c,212 :: 			strncat (time_string, tmp_string, 3);
$476A	$0EC5	    			MOVLW	_time_string
$476C	$0108	    			MOVLB	8
$476E	$6FD5	    			MOVWF	FARG_strncat+0, 1
$4770	$0E02	    			MOVLW	@_time_string
$4772	$6FD6	    			MOVWF	FARG_strncat+1, 1
$4774	$0E93	    			MOVLW	_tmp_string
$4776	$6FD7	    			MOVWF	FARG_strncat+2, 1
$4778	$0E02	    			MOVLW	@_tmp_string
$477A	$6FD8	    			MOVWF	FARG_strncat+3, 1
$477C	$0E03	    			MOVLW	3
$477E	$6FD9	    			MOVWF	FARG_strncat+4, 1
$4780	$0E00	    			MOVLW	0
$4782	$6FDA	    			MOVWF	FARG_strncat+5, 1
$4784	$EC79	F017			CALL	_strncat
;log.c,213 :: 			time_string[0] =  ' ' ;
$4788	$0E20	    			MOVLW	32
$478A	$0102	    			MOVLB	2
$478C	$6FC5	    			MOVWF	_time_string, 1
;log.c,215 :: 			Num_to_0str(minute,tmp_string);
$478E	$C267	F8D5			MOVFF	_minute, FARG_Num_to_0str+0
$4792	$0E93	    			MOVLW	_tmp_string
$4794	$0108	    			MOVLB	8
$4796	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$4798	$0E02	    			MOVLW	@_tmp_string
$479A	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$479C	$EC4D	F017			CALL	_Num_to_0str
;log.c,216 :: 			strncat (time_string, tmp_string, 3);
$47A0	$0EC5	    			MOVLW	_time_string
$47A2	$0108	    			MOVLB	8
$47A4	$6FD5	    			MOVWF	FARG_strncat+0, 1
$47A6	$0E02	    			MOVLW	@_time_string
$47A8	$6FD6	    			MOVWF	FARG_strncat+1, 1
$47AA	$0E93	    			MOVLW	_tmp_string
$47AC	$6FD7	    			MOVWF	FARG_strncat+2, 1
$47AE	$0E02	    			MOVLW	@_tmp_string
$47B0	$6FD8	    			MOVWF	FARG_strncat+3, 1
$47B2	$0E03	    			MOVLW	3
$47B4	$6FD9	    			MOVWF	FARG_strncat+4, 1
$47B6	$0E00	    			MOVLW	0
$47B8	$6FDA	    			MOVWF	FARG_strncat+5, 1
$47BA	$EC79	F017			CALL	_strncat
;log.c,217 :: 			time_string[3] = ':' ;
$47BE	$0E3A	    			MOVLW	58
$47C0	$0102	    			MOVLB	2
$47C2	$6FC8	    			MOVWF	_time_string+3, 1
;log.c,219 :: 			Num_to_0str(second,tmp_string);
$47C4	$C266	F8D5			MOVFF	_second, FARG_Num_to_0str+0
$47C8	$0E93	    			MOVLW	_tmp_string
$47CA	$0108	    			MOVLB	8
$47CC	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$47CE	$0E02	    			MOVLW	@_tmp_string
$47D0	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$47D2	$EC4D	F017			CALL	_Num_to_0str
;log.c,220 :: 			strncat (time_string, tmp_string, 3);
$47D6	$0EC5	    			MOVLW	_time_string
$47D8	$0108	    			MOVLB	8
$47DA	$6FD5	    			MOVWF	FARG_strncat+0, 1
$47DC	$0E02	    			MOVLW	@_time_string
$47DE	$6FD6	    			MOVWF	FARG_strncat+1, 1
$47E0	$0E93	    			MOVLW	_tmp_string
$47E2	$6FD7	    			MOVWF	FARG_strncat+2, 1
$47E4	$0E02	    			MOVLW	@_tmp_string
$47E6	$6FD8	    			MOVWF	FARG_strncat+3, 1
$47E8	$0E03	    			MOVLW	3
$47EA	$6FD9	    			MOVWF	FARG_strncat+4, 1
$47EC	$0E00	    			MOVLW	0
$47EE	$6FDA	    			MOVWF	FARG_strncat+5, 1
$47F0	$EC79	F017			CALL	_strncat
;log.c,221 :: 			time_string[6] =  ':' ;
$47F4	$0E3A	    			MOVLW	58
$47F6	$0102	    			MOVLB	2
$47F8	$6FCB	    			MOVWF	_time_string+6, 1
;log.c,223 :: 			}//~
$47FA	$0012	    			RETURN
$47FC	$	_Cf_Fat_Append:
$47FC	$5026	    			MOVF	cf_fat16_fat_sector_pnt, 0, 0
$47FE	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$4800	$0109	    			MOVLB	9
$4802	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$4804	$5027	    			MOVF	cf_fat16_fat_sector_pnt+1, 0, 0
$4806	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$4808	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$480A	$0E00	    			MOVLW	0
$480C	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$480E	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$4810	$0E00	    			MOVLW	0
$4812	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$4814	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$4816	$0E2E	    			MOVLW	cf_fat16_data
$4818	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$481A	$0E00	    			MOVLW	@cf_fat16_data
$481C	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$481E	$EC5C	F001			CALL	_Cf_Read_Sector
$4822	$0E2E	    			MOVLW	cf_fat16_data
$4824	$2428	    			ADDWF	cf_fat16_fat_offset, 0, 0
$4826	$6EE9	    			MOVWF	FSR0L, 0
$4828	$0E00	    			MOVLW	@cf_fat16_data
$482A	$2029	    			ADDWFC	cf_fat16_fat_offset+1, 0, 0
$482C	$6EEA	    			MOVWF	FSR0L+1, 0
$482E	$CFEE	F8AC			MOVFF	POSTINC0, Cf_Fat_Append_next_cluster_L0
$4832	$0E00	    			MOVLW	0
$4834	$0108	    			MOVLB	8
$4836	$6FAD	    			MOVWF	Cf_Fat_Append_next_cluster_L0+1, 1
$4838	$6FAE	    			MOVWF	Cf_Fat_Append_next_cluster_L0+2, 1
$483A	$6FAF	    			MOVWF	Cf_Fat_Append_next_cluster_L0+3, 1
$483C	$0E00	    			MOVLW	0
$483E	$6FAD	    			MOVWF	Cf_Fat_Append_next_cluster_L0+1, 1
$4840	$6FAE	    			MOVWF	Cf_Fat_Append_next_cluster_L0+2, 1
$4842	$6FAF	    			MOVWF	Cf_Fat_Append_next_cluster_L0+3, 1
$4844	$CFEE	F8AD			MOVFF	POSTINC0, Cf_Fat_Append_next_cluster_L0+1
$4848	$	L_Cf_Fat_Append_106:
$4848	$0E00	    			MOVLW	0
$484A	$6E00	    			MOVWF	STACK_0, 0
$484C	$0108	    			MOVLB	8
$484E	$19AF	    			XORWF	Cf_Fat_Append_next_cluster_L0+3, 0, 1
$4850	$E108	    			BNZ	L_Cf_Fat_Append_259
$4852	$5000	    			MOVF	STACK_0, 0, 0
$4854	$19AE	    			XORWF	Cf_Fat_Append_next_cluster_L0+2, 0, 1
$4856	$E105	    			BNZ	L_Cf_Fat_Append_259
$4858	$0EFF	    			MOVLW	255
$485A	$19AD	    			XORWF	Cf_Fat_Append_next_cluster_L0+1, 0, 1
$485C	$E102	    			BNZ	L_Cf_Fat_Append_259
$485E	$51AC	    			MOVF	Cf_Fat_Append_next_cluster_L0, 0, 1
$4860	$0AFF	    			XORLW	255
$4862	$	L_Cf_Fat_Append_259:
$4862	$E071	    			BZ	L_Cf_Fat_Append_107
$4864	$C8AC	F8B4			MOVFF	Cf_Fat_Append_next_cluster_L0, FLOC_Cf_Fat_Append+8
$4868	$C8AD	F8B5			MOVFF	Cf_Fat_Append_next_cluster_L0+1, FLOC_Cf_Fat_Append+9
$486C	$C8AE	F8B6			MOVFF	Cf_Fat_Append_next_cluster_L0+2, FLOC_Cf_Fat_Append+10
$4870	$C8AF	F8B7			MOVFF	Cf_Fat_Append_next_cluster_L0+3, FLOC_Cf_Fat_Append+11
$4874	$0108	    			MOVLB	8
$4876	$37B4	    			RLCF	FLOC_Cf_Fat_Append+8, 1, 1
$4878	$91B4	    			BCF	FLOC_Cf_Fat_Append+8, 0, 1
$487A	$37B5	    			RLCF	FLOC_Cf_Fat_Append+9, 1, 1
$487C	$37B6	    			RLCF	FLOC_Cf_Fat_Append+10, 1, 1
$487E	$37B7	    			RLCF	FLOC_Cf_Fat_Append+11, 1, 1
$4880	$C8B4	F8AC			MOVFF	FLOC_Cf_Fat_Append+8, Cf_Fat_Append_next_cluster_L0
$4884	$C8B5	F8AD			MOVFF	FLOC_Cf_Fat_Append+9, Cf_Fat_Append_next_cluster_L0+1
$4888	$C8B6	F8AE			MOVFF	FLOC_Cf_Fat_Append+10, Cf_Fat_Append_next_cluster_L0+2
$488C	$C8B7	F8AF			MOVFF	FLOC_Cf_Fat_Append+11, Cf_Fat_Append_next_cluster_L0+3
$4890	$C22E	F004			MOVFF	cf_fat16_BYTES_PER_SECTOR, STACK_4
$4894	$C22F	F005			MOVFF	cf_fat16_BYTES_PER_SECTOR+1, STACK_4+1
$4898	$0E00	    			MOVLW	0
$489A	$6E06	    			MOVWF	STACK_4+2, 0
$489C	$6E07	    			MOVWF	STACK_4+3, 0
$489E	$C8B4	F000			MOVFF	FLOC_Cf_Fat_Append+8, STACK_0
$48A2	$C8B5	F001			MOVFF	FLOC_Cf_Fat_Append+9, STACK_0+1
$48A6	$C8B6	F002			MOVFF	FLOC_Cf_Fat_Append+10, STACK_0+2
$48AA	$C8B7	F003			MOVFF	FLOC_Cf_Fat_Append+11, STACK_0+3
$48AE	$ECCE	F003			CALL	_div_32x32_u
$48B2	$C000	F8B0			MOVFF	STACK_0, FLOC_Cf_Fat_Append+4
$48B6	$C001	F8B1			MOVFF	STACK_0+1, FLOC_Cf_Fat_Append+5
$48BA	$C002	F8B2			MOVFF	STACK_0+2, FLOC_Cf_Fat_Append+6
$48BE	$C003	F8B3			MOVFF	STACK_0+3, FLOC_Cf_Fat_Append+7
$48C2	$C8B0	F026			MOVFF	FLOC_Cf_Fat_Append+4, cf_fat16_fat_sector_pnt
$48C6	$C8B1	F027			MOVFF	FLOC_Cf_Fat_Append+5, cf_fat16_fat_sector_pnt+1
$48CA	$C22E	F004			MOVFF	cf_fat16_BYTES_PER_SECTOR, STACK_4
$48CE	$C22F	F005			MOVFF	cf_fat16_BYTES_PER_SECTOR+1, STACK_4+1
$48D2	$0E00	    			MOVLW	0
$48D4	$6E06	    			MOVWF	STACK_4+2, 0
$48D6	$6E07	    			MOVWF	STACK_4+3, 0
$48D8	$C8B4	F000			MOVFF	FLOC_Cf_Fat_Append+8, STACK_0
$48DC	$C8B5	F001			MOVFF	FLOC_Cf_Fat_Append+9, STACK_0+1
$48E0	$C8B6	F002			MOVFF	FLOC_Cf_Fat_Append+10, STACK_0+2
$48E4	$C8B7	F003			MOVFF	FLOC_Cf_Fat_Append+11, STACK_0+3
$48E8	$ECCE	F003			CALL	_div_32x32_u
$48EC	$C008	F000			MOVFF	STACK_8, STACK_0
$48F0	$C009	F001			MOVFF	STACK_9, STACK_1
$48F4	$C00A	F002			MOVFF	STACK_10, STACK_2
$48F8	$C00B	F003			MOVFF	STACK_11, STACK_3
$48FC	$C000	F028			MOVFF	STACK_0, cf_fat16_fat_offset
$4900	$C001	F029			MOVFF	STACK_0+1, cf_fat16_fat_offset+1
$4904	$0108	    			MOVLB	8
$4906	$51B0	    			MOVF	FLOC_Cf_Fat_Append+4, 0, 1
$4908	$242A	    			ADDWF	cf_fat16_FAT_START_SECTOR, 0, 0
$490A	$0109	    			MOVLB	9
$490C	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$490E	$0108	    			MOVLB	8
$4910	$51B1	    			MOVF	FLOC_Cf_Fat_Append+5, 0, 1
$4912	$202B	    			ADDWFC	cf_fat16_FAT_START_SECTOR+1, 0, 0
$4914	$0109	    			MOVLB	9
$4916	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$4918	$0E00	    			MOVLW	0
$491A	$202C	    			ADDWFC	cf_fat16_FAT_START_SECTOR+2, 0, 0
$491C	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$491E	$0E00	    			MOVLW	0
$4920	$202D	    			ADDWFC	cf_fat16_FAT_START_SECTOR+3, 0, 0
$4922	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$4924	$0E2E	    			MOVLW	cf_fat16_data
$4926	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$4928	$0E00	    			MOVLW	@cf_fat16_data
$492A	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$492C	$EC5C	F001			CALL	_Cf_Read_Sector
$4930	$0E2E	    			MOVLW	cf_fat16_data
$4932	$2428	    			ADDWF	cf_fat16_fat_offset, 0, 0
$4934	$6EE9	    			MOVWF	FSR0L, 0
$4936	$0E00	    			MOVLW	@cf_fat16_data
$4938	$2029	    			ADDWFC	cf_fat16_fat_offset+1, 0, 0
$493A	$6EEA	    			MOVWF	FSR0L+1, 0
$493C	$CFEE	F8AC			MOVFF	POSTINC0, Cf_Fat_Append_next_cluster_L0
$4940	$CFEE	F8AD			MOVFF	POSTINC0, Cf_Fat_Append_next_cluster_L0+1
$4944	$D781	    			BRA	L_Cf_Fat_Append_106
$4946	$	L_Cf_Fat_Append_107:
$4946	$ECFE	F005			CALL	cf_fat16_Set_File_Write_Cluster
$494A	$EC17	F006			CALL	cf_fat16_Set_File_Write_Sector
$494E	$C23C	F000			MOVFF	cf_fat16_SECTORS_PER_CLUSTER, STACK_0
$4952	$0E00	    			MOVLW	0
$4954	$6E01	    			MOVWF	STACK_0+1, 0
$4956	$6E02	    			MOVWF	STACK_0+2, 0
$4958	$6E03	    			MOVWF	STACK_0+3, 0
$495A	$C22E	F004			MOVFF	cf_fat16_BYTES_PER_SECTOR, STACK_4
$495E	$C22F	F005			MOVFF	cf_fat16_BYTES_PER_SECTOR+1, STACK_4+1
$4962	$0E00	    			MOVLW	0
$4964	$6E06	    			MOVWF	STACK_4+2, 0
$4966	$6E07	    			MOVWF	STACK_4+3, 0
$4968	$ECDA	F001			CALL	_mul_32x32_s
$496C	$C000	F004			MOVFF	STACK_0, STACK_4
$4970	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$4974	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$4978	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$497C	$C24D	F000			MOVFF	cf_fat16_file_size_bytes, STACK_0
$4980	$C24E	F001			MOVFF	cf_fat16_file_size_bytes+1, STACK_0+1
$4984	$C24F	F002			MOVFF	cf_fat16_file_size_bytes+2, STACK_0+2
$4988	$C250	F003			MOVFF	cf_fat16_file_size_bytes+3, STACK_0+3
$498C	$ECCE	F003			CALL	_div_32x32_u
$4990	$C008	F000			MOVFF	STACK_8, STACK_0
$4994	$C009	F001			MOVFF	STACK_9, STACK_1
$4998	$C00A	F002			MOVFF	STACK_10, STACK_2
$499C	$C00B	F003			MOVFF	STACK_11, STACK_3
$49A0	$C22E	F004			MOVFF	cf_fat16_BYTES_PER_SECTOR, STACK_4
$49A4	$C22F	F005			MOVFF	cf_fat16_BYTES_PER_SECTOR+1, STACK_4+1
$49A8	$0E00	    			MOVLW	0
$49AA	$6E06	    			MOVWF	STACK_4+2, 0
$49AC	$6E07	    			MOVWF	STACK_4+3, 0
$49AE	$ECCE	F003			CALL	_div_32x32_u
$49B2	$C000	F25B			MOVFF	STACK_0, cf_fat16_sectors_in_cur_cluster
$49B6	$5000	    			MOVF	STACK_0, 0, 0
$49B8	$0102	    			MOVLB	2
$49BA	$2738	    			ADDWF	cf_fat16_file_write_sector, 1, 1
$49BC	$0E00	    			MOVLW	0
$49BE	$2339	    			ADDWFC	cf_fat16_file_write_sector+1, 1, 1
$49C0	$233A	    			ADDWFC	cf_fat16_file_write_sector+2, 1, 1
$49C2	$233B	    			ADDWFC	cf_fat16_file_write_sector+3, 1, 1
$49C4	$C22E	F004			MOVFF	cf_fat16_BYTES_PER_SECTOR, STACK_4
$49C8	$C22F	F005			MOVFF	cf_fat16_BYTES_PER_SECTOR+1, STACK_4+1
$49CC	$0E00	    			MOVLW	0
$49CE	$6E06	    			MOVWF	STACK_4+2, 0
$49D0	$6E07	    			MOVWF	STACK_4+3, 0
$49D2	$C24D	F000			MOVFF	cf_fat16_file_size_bytes, STACK_0
$49D6	$C24E	F001			MOVFF	cf_fat16_file_size_bytes+1, STACK_0+1
$49DA	$C24F	F002			MOVFF	cf_fat16_file_size_bytes+2, STACK_0+2
$49DE	$C250	F003			MOVFF	cf_fat16_file_size_bytes+3, STACK_0+3
$49E2	$ECCE	F003			CALL	_div_32x32_u
$49E6	$C008	F000			MOVFF	STACK_8, STACK_0
$49EA	$C009	F001			MOVFF	STACK_9, STACK_1
$49EE	$C00A	F002			MOVFF	STACK_10, STACK_2
$49F2	$C00B	F003			MOVFF	STACK_11, STACK_3
$49F6	$C000	F249			MOVFF	STACK_0, cf_fat16_file_offset
$49FA	$C001	F24A			MOVFF	STACK_0+1, cf_fat16_file_offset+1
$49FE	$C002	F24B			MOVFF	STACK_0+2, cf_fat16_file_offset+2
$4A02	$C003	F24C			MOVFF	STACK_0+3, cf_fat16_file_offset+3
$4A06	$0012	    			RETURN
$4A08	$	_Cf_Fat_Write:
$4A08	$C238	F901			MOVFF	cf_fat16_file_write_sector, FARG_Cf_Read_Sector+0
$4A0C	$C239	F902			MOVFF	cf_fat16_file_write_sector+1, FARG_Cf_Read_Sector+1
$4A10	$C23A	F903			MOVFF	cf_fat16_file_write_sector+2, FARG_Cf_Read_Sector+2
$4A14	$C23B	F904			MOVFF	cf_fat16_file_write_sector+3, FARG_Cf_Read_Sector+3
$4A18	$0E2E	    			MOVLW	cf_fat16_data
$4A1A	$0109	    			MOVLB	9
$4A1C	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$4A1E	$0E00	    			MOVLW	@cf_fat16_data
$4A20	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$4A22	$EC5C	F001			CALL	_Cf_Read_Sector
$4A26	$0108	    			MOVLB	8
$4A28	$6BB0	    			CLRF	Cf_Fat_Write_i_L0, 1
$4A2A	$6BB1	    			CLRF	Cf_Fat_Write_i_L0+1, 1
$4A2C	$	L_Cf_Fat_Write_108:
$4A2C	$0108	    			MOVLB	8
$4A2E	$51AF	    			MOVF	FARG_Cf_Fat_Write+3, 0, 1
$4A30	$5DB1	    			SUBWF	Cf_Fat_Write_i_L0+1, 0, 1
$4A32	$E102	    			BNZ	L_Cf_Fat_Write_260
$4A34	$51AE	    			MOVF	FARG_Cf_Fat_Write+2, 0, 1
$4A36	$5DB0	    			SUBWF	Cf_Fat_Write_i_L0, 0, 1
$4A38	$	L_Cf_Fat_Write_260:
$4A38	$E25A	    			BC	L_Cf_Fat_Write_109
$4A3A	$0E2E	    			MOVLW	cf_fat16_data
$4A3C	$0102	    			MOVLB	2
$4A3E	$2549	    			ADDWF	cf_fat16_file_offset, 0, 1
$4A40	$6EE1	    			MOVWF	FSR1L, 0
$4A42	$0E00	    			MOVLW	@cf_fat16_data
$4A44	$214A	    			ADDWFC	cf_fat16_file_offset+1, 0, 1
$4A46	$6EE2	    			MOVWF	FSR1L+1, 0
$4A48	$0108	    			MOVLB	8
$4A4A	$51B0	    			MOVF	Cf_Fat_Write_i_L0, 0, 1
$4A4C	$25AC	    			ADDWF	FARG_Cf_Fat_Write+0, 0, 1
$4A4E	$6EE9	    			MOVWF	FSR0L, 0
$4A50	$51B1	    			MOVF	Cf_Fat_Write_i_L0+1, 0, 1
$4A52	$21AD	    			ADDWFC	FARG_Cf_Fat_Write+1, 0, 1
$4A54	$6EEA	    			MOVWF	FSR0L+1, 0
$4A56	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$4A5A	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$4A5E	$0E01	    			MOVLW	1
$4A60	$0102	    			MOVLB	2
$4A62	$2749	    			ADDWF	cf_fat16_file_offset, 1, 1
$4A64	$0E00	    			MOVLW	0
$4A66	$234A	    			ADDWFC	cf_fat16_file_offset+1, 1, 1
$4A68	$234B	    			ADDWFC	cf_fat16_file_offset+2, 1, 1
$4A6A	$234C	    			ADDWFC	cf_fat16_file_offset+3, 1, 1
$4A6C	$0E00	    			MOVLW	0
$4A6E	$6E00	    			MOVWF	STACK_0, 0
$4A70	$194C	    			XORWF	cf_fat16_file_offset+3, 0, 1
$4A72	$E108	    			BNZ	L_Cf_Fat_Write_261
$4A74	$5000	    			MOVF	STACK_0, 0, 0
$4A76	$194B	    			XORWF	cf_fat16_file_offset+2, 0, 1
$4A78	$E105	    			BNZ	L_Cf_Fat_Write_261
$4A7A	$512F	    			MOVF	cf_fat16_BYTES_PER_SECTOR+1, 0, 1
$4A7C	$194A	    			XORWF	cf_fat16_file_offset+1, 0, 1
$4A7E	$E102	    			BNZ	L_Cf_Fat_Write_261
$4A80	$5149	    			MOVF	cf_fat16_file_offset, 0, 1
$4A82	$192E	    			XORWF	cf_fat16_BYTES_PER_SECTOR, 0, 1
$4A84	$	L_Cf_Fat_Write_261:
$4A84	$E130	    			BNZ	L_Cf_Fat_Write_111
$4A86	$C238	F901			MOVFF	cf_fat16_file_write_sector, FARG_Cf_Write_Sector+0
$4A8A	$C239	F902			MOVFF	cf_fat16_file_write_sector+1, FARG_Cf_Write_Sector+1
$4A8E	$C23A	F903			MOVFF	cf_fat16_file_write_sector+2, FARG_Cf_Write_Sector+2
$4A92	$C23B	F904			MOVFF	cf_fat16_file_write_sector+3, FARG_Cf_Write_Sector+3
$4A96	$0E2E	    			MOVLW	cf_fat16_data
$4A98	$0109	    			MOVLB	9
$4A9A	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$4A9C	$0E00	    			MOVLW	@cf_fat16_data
$4A9E	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$4AA0	$EC89	F001			CALL	_Cf_Write_Sector
$4AA4	$0E01	    			MOVLW	1
$4AA6	$0102	    			MOVLB	2
$4AA8	$2738	    			ADDWF	cf_fat16_file_write_sector, 1, 1
$4AAA	$0E00	    			MOVLW	0
$4AAC	$2339	    			ADDWFC	cf_fat16_file_write_sector+1, 1, 1
$4AAE	$233A	    			ADDWFC	cf_fat16_file_write_sector+2, 1, 1
$4AB0	$233B	    			ADDWFC	cf_fat16_file_write_sector+3, 1, 1
$4AB2	$6B49	    			CLRF	cf_fat16_file_offset, 1
$4AB4	$6B4A	    			CLRF	cf_fat16_file_offset+1, 1
$4AB6	$6B4B	    			CLRF	cf_fat16_file_offset+2, 1
$4AB8	$6B4C	    			CLRF	cf_fat16_file_offset+3, 1
$4ABA	$2B5B	    			INCF	cf_fat16_sectors_in_cur_cluster, 1, 1
$4ABC	$515B	    			MOVF	cf_fat16_sectors_in_cur_cluster, 0, 1
$4ABE	$193C	    			XORWF	cf_fat16_SECTORS_PER_CLUSTER, 0, 1
$4AC0	$E103	    			BNZ	L_Cf_Fat_Write_112
$4AC2	$6B5B	    			CLRF	cf_fat16_sectors_in_cur_cluster, 1
$4AC4	$ECC1	F017			CALL	cf_fat16_Extend_Fat_Chain
$4AC8	$	L_Cf_Fat_Write_112:
$4AC8	$C238	F901			MOVFF	cf_fat16_file_write_sector, FARG_Cf_Read_Sector+0
$4ACC	$C239	F902			MOVFF	cf_fat16_file_write_sector+1, FARG_Cf_Read_Sector+1
$4AD0	$C23A	F903			MOVFF	cf_fat16_file_write_sector+2, FARG_Cf_Read_Sector+2
$4AD4	$C23B	F904			MOVFF	cf_fat16_file_write_sector+3, FARG_Cf_Read_Sector+3
$4AD8	$0E2E	    			MOVLW	cf_fat16_data
$4ADA	$0109	    			MOVLB	9
$4ADC	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$4ADE	$0E00	    			MOVLW	@cf_fat16_data
$4AE0	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$4AE2	$EC5C	F001			CALL	_Cf_Read_Sector
$4AE6	$	L_Cf_Fat_Write_111:
$4AE6	$	L_Cf_Fat_Write_110:
$4AE6	$0108	    			MOVLB	8
$4AE8	$4BB0	    			INFSNZ	Cf_Fat_Write_i_L0, 1, 1
$4AEA	$2BB1	    			INCF	Cf_Fat_Write_i_L0+1, 1, 1
$4AEC	$D79F	    			BRA	L_Cf_Fat_Write_108
$4AEE	$	L_Cf_Fat_Write_109:
$4AEE	$C238	F901			MOVFF	cf_fat16_file_write_sector, FARG_Cf_Write_Sector+0
$4AF2	$C239	F902			MOVFF	cf_fat16_file_write_sector+1, FARG_Cf_Write_Sector+1
$4AF6	$C23A	F903			MOVFF	cf_fat16_file_write_sector+2, FARG_Cf_Write_Sector+2
$4AFA	$C23B	F904			MOVFF	cf_fat16_file_write_sector+3, FARG_Cf_Write_Sector+3
$4AFE	$0E2E	    			MOVLW	cf_fat16_data
$4B00	$0109	    			MOVLB	9
$4B02	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$4B04	$0E00	    			MOVLW	@cf_fat16_data
$4B06	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$4B08	$EC89	F001			CALL	_Cf_Write_Sector
$4B0C	$0108	    			MOVLB	8
$4B0E	$51B0	    			MOVF	Cf_Fat_Write_i_L0, 0, 1
$4B10	$0102	    			MOVLB	2
$4B12	$274D	    			ADDWF	cf_fat16_file_size_bytes, 1, 1
$4B14	$0108	    			MOVLB	8
$4B16	$51B1	    			MOVF	Cf_Fat_Write_i_L0+1, 0, 1
$4B18	$0102	    			MOVLB	2
$4B1A	$234E	    			ADDWFC	cf_fat16_file_size_bytes+1, 1, 1
$4B1C	$0E00	    			MOVLW	0
$4B1E	$234F	    			ADDWFC	cf_fat16_file_size_bytes+2, 1, 1
$4B20	$2350	    			ADDWFC	cf_fat16_file_size_bytes+3, 1, 1
$4B22	$5145	    			MOVF	cf_fat16_root_sector_pnt, 0, 1
$4B24	$2541	    			ADDWF	cf_fat16_ROOT_START_SECTOR, 0, 1
$4B26	$0109	    			MOVLB	9
$4B28	$6F01	    			MOVWF	FARG_Cf_Read_Sector+0, 1
$4B2A	$0102	    			MOVLB	2
$4B2C	$5146	    			MOVF	cf_fat16_root_sector_pnt+1, 0, 1
$4B2E	$2142	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+1, 0, 1
$4B30	$0109	    			MOVLB	9
$4B32	$6F02	    			MOVWF	FARG_Cf_Read_Sector+1, 1
$4B34	$0E00	    			MOVLW	0
$4B36	$0102	    			MOVLB	2
$4B38	$2143	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+2, 0, 1
$4B3A	$0109	    			MOVLB	9
$4B3C	$6F03	    			MOVWF	FARG_Cf_Read_Sector+2, 1
$4B3E	$0E00	    			MOVLW	0
$4B40	$0102	    			MOVLB	2
$4B42	$2144	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+3, 0, 1
$4B44	$0109	    			MOVLB	9
$4B46	$6F04	    			MOVWF	FARG_Cf_Read_Sector+3, 1
$4B48	$0E2E	    			MOVLW	cf_fat16_data
$4B4A	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$4B4C	$0E00	    			MOVLW	@cf_fat16_data
$4B4E	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$4B50	$EC5C	F001			CALL	_Cf_Read_Sector
$4B54	$0E0E	    			MOVLW	14
$4B56	$0102	    			MOVLB	2
$4B58	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$4B5A	$6E00	    			MOVWF	STACK_0, 0
$4B5C	$0E00	    			MOVLW	0
$4B5E	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$4B60	$6E01	    			MOVWF	STACK_0+1, 0
$4B62	$0E2E	    			MOVLW	cf_fat16_data
$4B64	$2400	    			ADDWF	STACK_0, 0, 0
$4B66	$6EE1	    			MOVWF	FSR1L, 0
$4B68	$0E00	    			MOVLW	@cf_fat16_data
$4B6A	$2001	    			ADDWFC	STACK_0+1, 0, 0
$4B6C	$6EE2	    			MOVWF	FSR1L+1, 0
$4B6E	$C264	FFE6			MOVFF	cf_fat16_time, POSTINC1
$4B72	$C265	FFE6			MOVFF	cf_fat16_time+1, POSTINC1
$4B76	$C262	FFE6			MOVFF	cf_fat16_date, POSTINC1
$4B7A	$C263	FFE6			MOVFF	cf_fat16_date+1, POSTINC1
$4B7E	$C262	FFE6			MOVFF	cf_fat16_date, POSTINC1
$4B82	$C263	FFE6			MOVFF	cf_fat16_date+1, POSTINC1
$4B86	$6AE6	    			CLRF	POSTINC1, 0
$4B88	$6AE6	    			CLRF	POSTINC1, 0
$4B8A	$C264	FFE6			MOVFF	cf_fat16_time, POSTINC1
$4B8E	$C265	FFE6			MOVFF	cf_fat16_time+1, POSTINC1
$4B92	$C262	FFE6			MOVFF	cf_fat16_date, POSTINC1
$4B96	$C263	FFE6			MOVFF	cf_fat16_date+1, POSTINC1
$4B9A	$0E1C	    			MOVLW	28
$4B9C	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$4B9E	$6E00	    			MOVWF	STACK_0, 0
$4BA0	$0E00	    			MOVLW	0
$4BA2	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$4BA4	$6E01	    			MOVWF	STACK_0+1, 0
$4BA6	$0E2E	    			MOVLW	cf_fat16_data
$4BA8	$2400	    			ADDWF	STACK_0, 0, 0
$4BAA	$6EE1	    			MOVWF	FSR1L, 0
$4BAC	$0E00	    			MOVLW	@cf_fat16_data
$4BAE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$4BB0	$6EE2	    			MOVWF	FSR1L+1, 0
$4BB2	$C24D	FFE6			MOVFF	cf_fat16_file_size_bytes, POSTINC1
$4BB6	$C24E	FFE6			MOVFF	cf_fat16_file_size_bytes+1, POSTINC1
$4BBA	$C24F	FFE6			MOVFF	cf_fat16_file_size_bytes+2, POSTINC1
$4BBE	$C250	FFE6			MOVFF	cf_fat16_file_size_bytes+3, POSTINC1
$4BC2	$5145	    			MOVF	cf_fat16_root_sector_pnt, 0, 1
$4BC4	$2541	    			ADDWF	cf_fat16_ROOT_START_SECTOR, 0, 1
$4BC6	$0109	    			MOVLB	9
$4BC8	$6F01	    			MOVWF	FARG_Cf_Write_Sector+0, 1
$4BCA	$0102	    			MOVLB	2
$4BCC	$5146	    			MOVF	cf_fat16_root_sector_pnt+1, 0, 1
$4BCE	$2142	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+1, 0, 1
$4BD0	$0109	    			MOVLB	9
$4BD2	$6F02	    			MOVWF	FARG_Cf_Write_Sector+1, 1
$4BD4	$0E00	    			MOVLW	0
$4BD6	$0102	    			MOVLB	2
$4BD8	$2143	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+2, 0, 1
$4BDA	$0109	    			MOVLB	9
$4BDC	$6F03	    			MOVWF	FARG_Cf_Write_Sector+2, 1
$4BDE	$0E00	    			MOVLW	0
$4BE0	$0102	    			MOVLB	2
$4BE2	$2144	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+3, 0, 1
$4BE4	$0109	    			MOVLB	9
$4BE6	$6F04	    			MOVWF	FARG_Cf_Write_Sector+3, 1
$4BE8	$0E2E	    			MOVLW	cf_fat16_data
$4BEA	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$4BEC	$0E00	    			MOVLW	@cf_fat16_data
$4BEE	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$4BF0	$EC89	F001			CALL	_Cf_Write_Sector
$4BF4	$0012	    			RETURN
$4BF6	$	_Ethernet_putString:
$4BF6	$0108	    			MOVLB	8
$4BF8	$6BAF	    			CLRF	Ethernet_putString_ctr_L0, 1
$4BFA	$6BB0	    			CLRF	Ethernet_putString_ctr_L0+1, 1
$4BFC	$	L_Ethernet_putString_228:
$4BFC	$C8AC	FFE9			MOVFF	FARG_Ethernet_putString+0, FSR0L
$4C00	$C8AD	FFEA			MOVFF	FARG_Ethernet_putString+1, FSR0L+1
$4C04	$0108	    			MOVLB	8
$4C06	$4BAC	    			INFSNZ	FARG_Ethernet_putString+0, 1, 1
$4C08	$2BAD	    			INCF	FARG_Ethernet_putString+1, 1, 1
$4C0A	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$4C0E	$C000	F8AE			MOVFF	STACK_0, Ethernet_putString_temp_L0
$4C12	$5200	    			MOVF	STACK_0, 1, 0
$4C14	$E005	    			BZ	L_Ethernet_putString_229
$4C16	$C8AE	FF61			MOVFF	Ethernet_putString_temp_L0, EDATA
$4C1A	$4BAF	    			INFSNZ	Ethernet_putString_ctr_L0, 1, 1
$4C1C	$2BB0	    			INCF	Ethernet_putString_ctr_L0+1, 1, 1
$4C1E	$D7EE	    			BRA	L_Ethernet_putString_228
$4C20	$	L_Ethernet_putString_229:
$4C20	$C8AF	F000			MOVFF	Ethernet_putString_ctr_L0, STACK_0
$4C24	$C8B0	F001			MOVFF	Ethernet_putString_ctr_L0+1, STACK_0+1
$4C28	$0012	    			RETURN
$4C2A	$	__doprntf:
$4C2A	$0E28	    			MOVLW	40
$4C2C	$0108	    			MOVLB	8
$4C2E	$6FB3	    			MOVWF	lstr1_doprntf+0, 1
$4C30	$0E6E	    			MOVLW	110
$4C32	$6FB4	    			MOVWF	lstr1_doprntf+1, 1
$4C34	$0E75	    			MOVLW	117
$4C36	$6FB5	    			MOVWF	lstr1_doprntf+2, 1
$4C38	$0E6C	    			MOVLW	108
$4C3A	$6FB6	    			MOVWF	lstr1_doprntf+3, 1
$4C3C	$0E6C	    			MOVLW	108
$4C3E	$6FB7	    			MOVWF	lstr1_doprntf+4, 1
$4C40	$0E29	    			MOVLW	41
$4C42	$6FB8	    			MOVWF	lstr1_doprntf+5, 1
$4C44	$6BB9	    			CLRF	lstr1_doprntf+6, 1
$4C46	$6BC1	    			CLRF	_doprntf_ccnt_L0, 1
$4C48	$6BC2	    			CLRF	_doprntf_ccnt_L0+1, 1
$4C4A	$6BBF	    			CLRF	_doprntf_flag_L0, 1
$4C4C	$6BC0	    			CLRF	_doprntf_flag_L0+1, 1
$4C4E	$	L__doprntf_10:
$4C4E	$C8AE	F000			MOVFF	FARG__doprntf+2, STACK_0
$4C52	$C8AF	F001			MOVFF	FARG__doprntf+3, STACK_0+1
$4C56	$C8B0	F002			MOVFF	FARG__doprntf+4, STACK_0+2
$4C5A	$0E01	    			MOVLW	1
$4C5C	$0108	    			MOVLB	8
$4C5E	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4C60	$0E00	    			MOVLW	0
$4C62	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4C64	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4C66	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$4C6A	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$4C6E	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$4C72	$0009	    			TBLRD*+
$4C74	$CFF5	F000			MOVFF	TABLAT, STACK_0
$4C78	$C000	F8BC			MOVFF	STACK_0, _doprntf_c_L0
$4C7C	$5200	    			MOVF	STACK_0, 1, 0
$4C7E	$B4D8	    			BTFSC	STATUS, Z, 0
$4C80	$EF8F	F037			GOTO	L__doprntf_11
$4C84	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$4C86	$0A25	    			XORLW	37
$4C88	$E00B	    			BZ	L__doprntf_12
$4C8A	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$4C8E	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$4C92	$C8BC	FFE6			MOVFF	_doprntf_c_L0, POSTINC1
$4C96	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$4C98	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$4C9A	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$4C9C	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$4C9E	$D7D7	    			BRA	L__doprntf_10
$4CA0	$	L__doprntf_12:
$4CA0	$0108	    			MOVLB	8
$4CA2	$6BBD	    			CLRF	_doprntf_width_L0, 1
$4CA4	$6BBE	    			CLRF	_doprntf_width_L0+1, 1
$4CA6	$6BBF	    			CLRF	_doprntf_flag_L0, 1
$4CA8	$6BC0	    			CLRF	_doprntf_flag_L0+1, 1
$4CAA	$	L__doprntf_13:
$4CAA	$0108	    			MOVLB	8
$4CAC	$D028	    			BRA	L__doprntf_16
$4CAE	$	L__doprntf_18:
$4CAE	$0108	    			MOVLB	8
$4CB0	$87BF	    			BSF	_doprntf_flag_L0, 3, 1
$4CB2	$0E01	    			MOVLW	1
$4CB4	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4CB6	$0E00	    			MOVLW	0
$4CB8	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4CBA	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4CBC	$D05E	    			BRA	L__doprntf_15
$4CBE	$	L__doprntf_19:
$4CBE	$0108	    			MOVLB	8
$4CC0	$81BF	    			BSF	_doprntf_flag_L0, 0, 1
$4CC2	$0E01	    			MOVLW	1
$4CC4	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4CC6	$0E00	    			MOVLW	0
$4CC8	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4CCA	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4CCC	$D056	    			BRA	L__doprntf_15
$4CCE	$	L__doprntf_20:
$4CCE	$0108	    			MOVLB	8
$4CD0	$83BF	    			BSF	_doprntf_flag_L0, 1, 1
$4CD2	$0E01	    			MOVLW	1
$4CD4	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4CD6	$0E00	    			MOVLW	0
$4CD8	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4CDA	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4CDC	$D04E	    			BRA	L__doprntf_15
$4CDE	$	L__doprntf_21:
$4CDE	$0108	    			MOVLB	8
$4CE0	$87C0	    			BSF	_doprntf_flag_L0+1, 3, 1
$4CE2	$0E01	    			MOVLW	1
$4CE4	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4CE6	$0E00	    			MOVLW	0
$4CE8	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4CEA	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4CEC	$D046	    			BRA	L__doprntf_15
$4CEE	$	L__doprntf_22:
$4CEE	$0108	    			MOVLB	8
$4CF0	$85BF	    			BSF	_doprntf_flag_L0, 2, 1
$4CF2	$0E01	    			MOVLW	1
$4CF4	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4CF6	$0E00	    			MOVLW	0
$4CF8	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4CFA	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4CFC	$D03E	    			BRA	L__doprntf_15
$4CFE	$	L__doprntf_16:
$4CFE	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4D02	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4D06	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4D0A	$0009	    			TBLRD*+
$4D0C	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4D10	$0108	    			MOVLB	8
$4D12	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4D14	$0A2D	    			XORLW	45
$4D16	$E0CB	    			BZ	L__doprntf_18
$4D18	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4D1C	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4D20	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4D24	$0009	    			TBLRD*+
$4D26	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4D2A	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4D2C	$0A20	    			XORLW	32
$4D2E	$E0C7	    			BZ	L__doprntf_19
$4D30	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4D34	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4D38	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4D3C	$0009	    			TBLRD*+
$4D3E	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4D42	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4D44	$0A2B	    			XORLW	43
$4D46	$E0C3	    			BZ	L__doprntf_20
$4D48	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4D4C	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4D50	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4D54	$0009	    			TBLRD*+
$4D56	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4D5A	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4D5C	$0A23	    			XORLW	35
$4D5E	$E0BF	    			BZ	L__doprntf_21
$4D60	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4D64	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4D68	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4D6C	$0009	    			TBLRD*+
$4D6E	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4D72	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4D74	$0A30	    			XORLW	48
$4D76	$E0BB	    			BZ	L__doprntf_22
$4D78	$	L__doprntf_17:
$4D78	$D001	    			BRA	L__doprntf_14
$4D7A	$	L__doprntf_15:
$4D7A	$D797	    			BRA	L__doprntf_13
$4D7C	$	L__doprntf_14:
$4D7C	$0108	    			MOVLB	8
$4D7E	$B3BF	    			BTFSC	_doprntf_flag_L0, 1, 1
$4D80	$91BF	    			BCF	_doprntf_flag_L0, 0, 1
$4D82	$	L__doprntf_23:
$4D82	$0108	    			MOVLB	8
$4D84	$B7BF	    			BTFSC	_doprntf_flag_L0, 3, 1
$4D86	$95BF	    			BCF	_doprntf_flag_L0, 2, 1
$4D88	$	L__doprntf_24:
$4D88	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4D8C	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4D90	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4D94	$0009	    			TBLRD*+
$4D96	$CFF5	F000			MOVFF	TABLAT, STACK_0
$4D9A	$0E00	    			MOVLW	0
$4D9C	$6E01	    			MOVWF	STACK_0+1, 0
$4D9E	$C000	F8D5			MOVFF	STACK_0, FARG_isdigit+0
$4DA2	$EC22	F018			CALL	_isdigit
$4DA6	$5200	    			MOVF	STACK_0, 1, 0
$4DA8	$E038	    			BZ	L__doprntf_25
$4DAA	$0108	    			MOVLB	8
$4DAC	$6BBD	    			CLRF	_doprntf_width_L0, 1
$4DAE	$6BBE	    			CLRF	_doprntf_width_L0+1, 1
$4DB0	$	L__doprntf_26:
$4DB0	$C8BD	F000			MOVFF	_doprntf_width_L0, STACK_0
$4DB4	$C8BE	F001			MOVFF	_doprntf_width_L0+1, STACK_0+1
$4DB8	$0E0A	    			MOVLW	10
$4DBA	$6E04	    			MOVWF	STACK_4, 0
$4DBC	$0E00	    			MOVLW	0
$4DBE	$6E05	    			MOVWF	STACK_4+1, 0
$4DC0	$ECC8	F01C			CALL	_mul_16x16_s
$4DC4	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4DC8	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4DCC	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4DD0	$0009	    			TBLRD*+
$4DD2	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4DD6	$0108	    			MOVLB	8
$4DD8	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4DDA	$2400	    			ADDWF	STACK_0, 0, 0
$4DDC	$6FBD	    			MOVWF	_doprntf_width_L0, 1
$4DDE	$0E00	    			MOVLW	0
$4DE0	$2001	    			ADDWFC	STACK_0+1, 0, 0
$4DE2	$6FBE	    			MOVWF	_doprntf_width_L0+1, 1
$4DE4	$0E30	    			MOVLW	48
$4DE6	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$4DE8	$0E00	    			MOVLW	0
$4DEA	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$4DEC	$0E01	    			MOVLW	1
$4DEE	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4DF0	$0E00	    			MOVLW	0
$4DF2	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4DF4	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4DF6	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4DFA	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4DFE	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4E02	$0009	    			TBLRD*+
$4E04	$CFF5	F000			MOVFF	TABLAT, STACK_0
$4E08	$0E00	    			MOVLW	0
$4E0A	$6E01	    			MOVWF	STACK_0+1, 0
$4E0C	$C000	F8D5			MOVFF	STACK_0, FARG_isdigit+0
$4E10	$EC22	F018			CALL	_isdigit
$4E14	$5200	    			MOVF	STACK_0, 1, 0
$4E16	$E1CC	    			BNZ	L__doprntf_26
$4E18	$	L__doprntf_27:
$4E18	$D036	    			BRA	L__doprntf_28
$4E1A	$	L__doprntf_25:
$4E1A	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4E1E	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4E22	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4E26	$0009	    			TBLRD*+
$4E28	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4E2C	$0108	    			MOVLB	8
$4E2E	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4E30	$0A2A	    			XORLW	42
$4E32	$E129	    			BNZ	L__doprntf_29
$4E34	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$4E38	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$4E3C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$4E40	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$4E44	$C000	FFE9			MOVFF	STACK_0, FSR0L
$4E48	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$4E4C	$CFEE	F8BD			MOVFF	POSTINC0, _doprntf_width_L0
$4E50	$CFEE	F8BE			MOVFF	POSTINC0, _doprntf_width_L0+1
$4E54	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$4E58	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$4E5C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$4E60	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$4E64	$0E02	    			MOVLW	2
$4E66	$2600	    			ADDWF	STACK_0, 1, 0
$4E68	$0E00	    			MOVLW	0
$4E6A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$4E6C	$C8B1	FFE1			MOVFF	FARG__doprntf+5, FSR1L
$4E70	$C8B2	FFE2			MOVFF	FARG__doprntf+6, FSR1H
$4E74	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$4E78	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$4E7C	$0E01	    			MOVLW	1
$4E7E	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4E80	$0E00	    			MOVLW	0
$4E82	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4E84	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4E86	$	L__doprntf_29:
$4E86	$	L__doprntf_28:
$4E86	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4E8A	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4E8E	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4E92	$0009	    			TBLRD*+
$4E94	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4E98	$0108	    			MOVLB	8
$4E9A	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4E9C	$0A2E	    			XORLW	46
$4E9E	$E175	    			BNZ	L__doprntf_30
$4EA0	$0E01	    			MOVLW	1
$4EA2	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4EA4	$0E00	    			MOVLW	0
$4EA6	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4EA8	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4EAA	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4EAE	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4EB2	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4EB6	$0009	    			TBLRD*+
$4EB8	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4EBC	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4EBE	$0A2A	    			XORLW	42
$4EC0	$E12A	    			BNZ	L__doprntf_31
$4EC2	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$4EC6	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$4ECA	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$4ECE	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$4ED2	$C000	FFE9			MOVFF	STACK_0, FSR0L
$4ED6	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$4EDA	$CFEE	F8BA			MOVFF	POSTINC0, _doprntf_prec_L0
$4EDE	$CFEE	F8BB			MOVFF	POSTINC0, _doprntf_prec_L0+1
$4EE2	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$4EE6	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$4EEA	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$4EEE	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$4EF2	$0E02	    			MOVLW	2
$4EF4	$2600	    			ADDWF	STACK_0, 1, 0
$4EF6	$0E00	    			MOVLW	0
$4EF8	$2201	    			ADDWFC	STACK_0+1, 1, 0
$4EFA	$C8B1	FFE1			MOVFF	FARG__doprntf+5, FSR1L
$4EFE	$C8B2	FFE2			MOVFF	FARG__doprntf+6, FSR1H
$4F02	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$4F06	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$4F0A	$0E01	    			MOVLW	1
$4F0C	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4F0E	$0E00	    			MOVLW	0
$4F10	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4F12	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4F14	$D038	    			BRA	L__doprntf_32
$4F16	$	L__doprntf_31:
$4F16	$0108	    			MOVLB	8
$4F18	$6BBA	    			CLRF	_doprntf_prec_L0, 1
$4F1A	$6BBB	    			CLRF	_doprntf_prec_L0+1, 1
$4F1C	$	L__doprntf_33:
$4F1C	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4F20	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4F24	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4F28	$0009	    			TBLRD*+
$4F2A	$CFF5	F000			MOVFF	TABLAT, STACK_0
$4F2E	$0E00	    			MOVLW	0
$4F30	$6E01	    			MOVWF	STACK_0+1, 0
$4F32	$C000	F8D5			MOVFF	STACK_0, FARG_isdigit+0
$4F36	$EC22	F018			CALL	_isdigit
$4F3A	$5200	    			MOVF	STACK_0, 1, 0
$4F3C	$E024	    			BZ	L__doprntf_34
$4F3E	$C8BA	F000			MOVFF	_doprntf_prec_L0, STACK_0
$4F42	$C8BB	F001			MOVFF	_doprntf_prec_L0+1, STACK_0+1
$4F46	$0E0A	    			MOVLW	10
$4F48	$6E04	    			MOVWF	STACK_4, 0
$4F4A	$0E00	    			MOVLW	0
$4F4C	$6E05	    			MOVWF	STACK_4+1, 0
$4F4E	$ECC8	F01C			CALL	_mul_16x16_s
$4F52	$C8AE	FFF6			MOVFF	FARG__doprntf+2, TBLPTRL
$4F56	$C8AF	FFF7			MOVFF	FARG__doprntf+3, TBLPTRH
$4F5A	$C8B0	FFF8			MOVFF	FARG__doprntf+4, TBLPTRU
$4F5E	$0009	    			TBLRD*+
$4F60	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$4F64	$0108	    			MOVLB	8
$4F66	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$4F68	$2400	    			ADDWF	STACK_0, 0, 0
$4F6A	$6FBA	    			MOVWF	_doprntf_prec_L0, 1
$4F6C	$0E00	    			MOVLW	0
$4F6E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$4F70	$6FBB	    			MOVWF	_doprntf_prec_L0+1, 1
$4F72	$0E30	    			MOVLW	48
$4F74	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$4F76	$0E00	    			MOVLW	0
$4F78	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$4F7A	$0E01	    			MOVLW	1
$4F7C	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4F7E	$0E00	    			MOVLW	0
$4F80	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4F82	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4F84	$D7CB	    			BRA	L__doprntf_33
$4F86	$	L__doprntf_34:
$4F86	$	L__doprntf_32:
$4F86	$0108	    			MOVLB	8
$4F88	$D004	    			BRA	L__doprntf_35
$4F8A	$	L__doprntf_30:
$4F8A	$0108	    			MOVLB	8
$4F8C	$6BBA	    			CLRF	_doprntf_prec_L0, 1
$4F8E	$6BBB	    			CLRF	_doprntf_prec_L0+1, 1
$4F90	$89C0	    			BSF	_doprntf_flag_L0+1, 4, 1
$4F92	$	L__doprntf_35:
$4F92	$	____doprntf_loop:
$4F92	$0108	    			MOVLB	8
$4F94	$C8AE	F000			MOVFF	FARG__doprntf+2, STACK_0
$4F98	$C8AF	F001			MOVFF	FARG__doprntf+3, STACK_0+1
$4F9C	$C8B0	F002			MOVFF	FARG__doprntf+4, STACK_0+2
$4FA0	$0E01	    			MOVLW	1
$4FA2	$0108	    			MOVLB	8
$4FA4	$27AE	    			ADDWF	FARG__doprntf+2, 1, 1
$4FA6	$0E00	    			MOVLW	0
$4FA8	$23AF	    			ADDWFC	FARG__doprntf+3, 1, 1
$4FAA	$23B0	    			ADDWFC	FARG__doprntf+4, 1, 1
$4FAC	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$4FB0	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$4FB4	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$4FB8	$0009	    			TBLRD*+
$4FBA	$CFF5	F8BC			MOVFF	TABLAT, _doprntf_c_L0
$4FBE	$D101	    			BRA	L__doprntf_36
$4FC0	$	L__doprntf_38:
$4FC0	$C8C1	F000			MOVFF	_doprntf_ccnt_L0, STACK_0
$4FC4	$C8C2	F001			MOVFF	_doprntf_ccnt_L0+1, STACK_0+1
$4FC8	$0012	    			RETURN
$4FCA	$	L__doprntf_39:
$4FCA	$0108	    			MOVLB	8
$4FCC	$89BF	    			BSF	_doprntf_flag_L0, 4, 1
$4FCE	$D7E1	    			BRA	____doprntf_loop
$4FD0	$	L__doprntf_40:
$4FD0	$0108	    			MOVLB	8
$4FD2	$85C0	    			BSF	_doprntf_flag_L0+1, 2, 1
$4FD4	$D132	    			BRA	L__doprntf_37
$4FD6	$	L__doprntf_41:
$4FD6	$0108	    			MOVLB	8
$4FD8	$8BBF	    			BSF	_doprntf_flag_L0, 5, 1
$4FDA	$	L__doprntf_42:
$4FDA	$0108	    			MOVLB	8
$4FDC	$81C0	    			BSF	_doprntf_flag_L0+1, 0, 1
$4FDE	$D12D	    			BRA	L__doprntf_37
$4FE0	$	L__doprntf_43:
$4FE0	$0108	    			MOVLB	8
$4FE2	$83C0	    			BSF	_doprntf_flag_L0+1, 1, 1
$4FE4	$D12A	    			BRA	L__doprntf_37
$4FE6	$	L__doprntf_44:
$4FE6	$0108	    			MOVLB	8
$4FE8	$8DBF	    			BSF	_doprntf_flag_L0, 6, 1
$4FEA	$D127	    			BRA	L__doprntf_37
$4FEC	$	L__doprntf_45:
$4FEC	$	L__doprntf_46:
$4FEC	$D126	    			BRA	L__doprntf_37
$4FEE	$	L__doprntf_47:
$4FEE	$	L__doprntf_48:
$4FEE	$0108	    			MOVLB	8
$4FF0	$8BBF	    			BSF	_doprntf_flag_L0, 5, 1
$4FF2	$	L__doprntf_49:
$4FF2	$0108	    			MOVLB	8
$4FF4	$8FBF	    			BSF	_doprntf_flag_L0, 7, 1
$4FF6	$D121	    			BRA	L__doprntf_37
$4FF8	$	L__doprntf_50:
$4FF8	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$4FFC	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$5000	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$5004	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$5008	$C000	FFE9			MOVFF	STACK_0, FSR0L
$500C	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$5010	$CFEE	F8C9			MOVFF	POSTINC0, _doprntf__val_L0+0
$5014	$CFEE	F8CA			MOVFF	POSTINC0, _doprntf__val_L0+1
$5018	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$501C	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$5020	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$5024	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$5028	$0E02	    			MOVLW	2
$502A	$2600	    			ADDWF	STACK_0, 1, 0
$502C	$0E00	    			MOVLW	0
$502E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$5030	$C8B1	FFE1			MOVFF	FARG__doprntf+5, FSR1L
$5034	$C8B2	FFE2			MOVFF	FARG__doprntf+6, FSR1H
$5038	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$503C	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$5040	$0E00	    			MOVLW	0
$5042	$0108	    			MOVLB	8
$5044	$19CA	    			XORWF	_doprntf__val_L0+1, 0, 1
$5046	$E102	    			BNZ	L__doprntf_327
$5048	$0E00	    			MOVLW	0
$504A	$19C9	    			XORWF	_doprntf__val_L0+0, 0, 1
$504C	$	L__doprntf_327:
$504C	$E105	    			BNZ	L__doprntf_51
$504E	$0EB3	    			MOVLW	lstr1_doprntf
$5050	$0108	    			MOVLB	8
$5052	$6FC9	    			MOVWF	_doprntf__val_L0+0, 1
$5054	$0E08	    			MOVLW	@lstr1_doprntf
$5056	$6FCA	    			MOVWF	_doprntf__val_L0+1, 1
$5058	$	L__doprntf_51:
$5058	$0108	    			MOVLB	8
$505A	$6BCB	    			CLRF	_doprntf__val_L0+2, 1
$505C	$6BCC	    			CLRF	_doprntf__val_L0+3, 1
$505E	$	L__doprntf_52:
$505E	$0108	    			MOVLB	8
$5060	$51CB	    			MOVF	_doprntf__val_L0+2, 0, 1
$5062	$25C9	    			ADDWF	_doprntf__val_L0+0, 0, 1
$5064	$6EE9	    			MOVWF	FSR0L, 0
$5066	$51CC	    			MOVF	_doprntf__val_L0+3, 0, 1
$5068	$21CA	    			ADDWFC	_doprntf__val_L0+1, 0, 1
$506A	$6EEA	    			MOVWF	FSR0L+1, 0
$506C	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$5070	$5200	    			MOVF	STACK_0, 1, 0
$5072	$E003	    			BZ	L__doprntf_53
$5074	$4BCB	    			INFSNZ	_doprntf__val_L0+2, 1, 1
$5076	$2BCC	    			INCF	_doprntf__val_L0+3, 1, 1
$5078	$D7F2	    			BRA	L__doprntf_52
$507A	$	L__doprntf_53:
$507A	$	____doprntf_dostring:
$507A	$0108	    			MOVLB	8
$507C	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$507E	$11BB	    			IORWF	_doprntf_prec_L0+1, 0, 1
$5080	$E00A	    			BZ	L__doprntf_56
$5082	$51CC	    			MOVF	_doprntf__val_L0+3, 0, 1
$5084	$5DBB	    			SUBWF	_doprntf_prec_L0+1, 0, 1
$5086	$E102	    			BNZ	L__doprntf_328
$5088	$51CB	    			MOVF	_doprntf__val_L0+2, 0, 1
$508A	$5DBA	    			SUBWF	_doprntf_prec_L0, 0, 1
$508C	$	L__doprntf_328:
$508C	$E204	    			BC	L__doprntf_56
$508E	$	L372_ex_L__doprntf_56:
$508E	$C8BA	F8CB			MOVFF	_doprntf_prec_L0, _doprntf__val_L0+2
$5092	$C8BB	F8CC			MOVFF	_doprntf_prec_L0+1, _doprntf__val_L0+3
$5096	$	L__doprntf_56:
$5096	$0108	    			MOVLB	8
$5098	$51BE	    			MOVF	_doprntf_width_L0+1, 0, 1
$509A	$5DCC	    			SUBWF	_doprntf__val_L0+3, 0, 1
$509C	$E102	    			BNZ	L__doprntf_329
$509E	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$50A0	$5DCB	    			SUBWF	_doprntf__val_L0+2, 0, 1
$50A2	$	L__doprntf_329:
$50A2	$E206	    			BC	L__doprntf_57
$50A4	$0108	    			MOVLB	8
$50A6	$51CB	    			MOVF	_doprntf__val_L0+2, 0, 1
$50A8	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$50AA	$51CC	    			MOVF	_doprntf__val_L0+3, 0, 1
$50AC	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$50AE	$D003	    			BRA	L__doprntf_58
$50B0	$	L__doprntf_57:
$50B0	$0108	    			MOVLB	8
$50B2	$6BBD	    			CLRF	_doprntf_width_L0, 1
$50B4	$6BBE	    			CLRF	_doprntf_width_L0+1, 1
$50B6	$	L__doprntf_58:
$50B6	$0108	    			MOVLB	8
$50B8	$B7BF	    			BTFSC	_doprntf_flag_L0, 3, 1
$50BA	$D017	    			BRA	L__doprntf_59
$50BC	$	L__doprntf_60:
$50BC	$C8BD	F000			MOVFF	_doprntf_width_L0, STACK_0
$50C0	$C8BE	F001			MOVFF	_doprntf_width_L0+1, STACK_0+1
$50C4	$0E01	    			MOVLW	1
$50C6	$0108	    			MOVLB	8
$50C8	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$50CA	$0E00	    			MOVLW	0
$50CC	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$50CE	$5000	    			MOVF	STACK_0, 0, 0
$50D0	$1001	    			IORWF	STACK_0+1, 0, 0
$50D2	$E00B	    			BZ	L__doprntf_61
$50D4	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$50D8	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$50DC	$0E20	    			MOVLW	32
$50DE	$6EE6	    			MOVWF	POSTINC1, 0
$50E0	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$50E2	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$50E4	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$50E6	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$50E8	$D7E9	    			BRA	L__doprntf_60
$50EA	$	L__doprntf_61:
$50EA	$	L__doprntf_59:
$50EA	$	L__doprntf_62:
$50EA	$C8CB	F000			MOVFF	_doprntf__val_L0+2, STACK_0
$50EE	$C8CC	F001			MOVFF	_doprntf__val_L0+3, STACK_0+1
$50F2	$0E01	    			MOVLW	1
$50F4	$0108	    			MOVLB	8
$50F6	$5FCB	    			SUBWF	_doprntf__val_L0+2, 1, 1
$50F8	$0E00	    			MOVLW	0
$50FA	$5BCC	    			SUBWFB	_doprntf__val_L0+3, 1, 1
$50FC	$5000	    			MOVF	STACK_0, 0, 0
$50FE	$1001	    			IORWF	STACK_0+1, 0, 0
$5100	$E013	    			BZ	L__doprntf_63
$5102	$C8C9	FFE9			MOVFF	_doprntf__val_L0+0, FSR0L
$5106	$C8CA	FFEA			MOVFF	_doprntf__val_L0+1, FSR0H
$510A	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$510E	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5112	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5116	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$511A	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$511C	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$511E	$4BC9	    			INFSNZ	_doprntf__val_L0+0, 1, 1
$5120	$2BCA	    			INCF	_doprntf__val_L0+1, 1, 1
$5122	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5124	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5126	$D7E1	    			BRA	L__doprntf_62
$5128	$	L__doprntf_63:
$5128	$0108	    			MOVLB	8
$512A	$A7BF	    			BTFSS	_doprntf_flag_L0, 3, 1
$512C	$D017	    			BRA	L__doprntf_64
$512E	$	L__doprntf_65:
$512E	$C8BD	F000			MOVFF	_doprntf_width_L0, STACK_0
$5132	$C8BE	F001			MOVFF	_doprntf_width_L0+1, STACK_0+1
$5136	$0E01	    			MOVLW	1
$5138	$0108	    			MOVLB	8
$513A	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$513C	$0E00	    			MOVLW	0
$513E	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$5140	$5000	    			MOVF	STACK_0, 0, 0
$5142	$1001	    			IORWF	STACK_0+1, 0, 0
$5144	$E00B	    			BZ	L__doprntf_66
$5146	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$514A	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$514E	$0E20	    			MOVLW	32
$5150	$6EE6	    			MOVWF	POSTINC1, 0
$5152	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5154	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5156	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5158	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$515A	$D7E9	    			BRA	L__doprntf_65
$515C	$	L__doprntf_66:
$515C	$	L__doprntf_64:
$515C	$D578	    			BRA	L__doprntf_10
$515E	$	L__doprntf_67:
$515E	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$5162	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$5166	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$516A	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$516E	$C000	FFE9			MOVFF	STACK_0, FSR0L
$5172	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$5176	$CFEE	F8BC			MOVFF	POSTINC0, _doprntf_c_L0
$517A	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$517E	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$5182	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$5186	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$518A	$0E02	    			MOVLW	2
$518C	$2600	    			ADDWF	STACK_0, 1, 0
$518E	$0E00	    			MOVLW	0
$5190	$2201	    			ADDWFC	STACK_0+1, 1, 0
$5192	$C8B1	FFE1			MOVFF	FARG__doprntf+5, FSR1L
$5196	$C8B2	FFE2			MOVFF	FARG__doprntf+6, FSR1H
$519A	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$519E	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$51A2	$	L__doprntf_68:
$51A2	$0EBC	    			MOVLW	_doprntf_c_L0
$51A4	$0108	    			MOVLB	8
$51A6	$6FC9	    			MOVWF	_doprntf__val_L0+0, 1
$51A8	$0E08	    			MOVLW	@_doprntf_c_L0
$51AA	$6FCA	    			MOVWF	_doprntf__val_L0+1, 1
$51AC	$0E01	    			MOVLW	1
$51AE	$6FCB	    			MOVWF	_doprntf__val_L0+2, 1
$51B0	$0E00	    			MOVLW	0
$51B2	$6FCC	    			MOVWF	_doprntf__val_L0+3, 1
$51B4	$D762	    			BRA	____doprntf_dostring
$51B6	$	L__doprntf_69:
$51B6	$0EC0	    			MOVLW	192
$51B8	$0108	    			MOVLB	8
$51BA	$13BF	    			IORWF	_doprntf_flag_L0, 1, 1
$51BC	$0E00	    			MOVLW	0
$51BE	$13C0	    			IORWF	_doprntf_flag_L0+1, 1, 1
$51C0	$D03C	    			BRA	L__doprntf_37
$51C2	$	L__doprntf_36:
$51C2	$0108	    			MOVLB	8
$51C4	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$51C6	$0A00	    			XORLW	0
$51C8	$B4D8	    			BTFSC	STATUS, Z, 0
$51CA	$D6FA	    			BRA	L__doprntf_38
$51CC	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$51CE	$0A6C	    			XORLW	108
$51D0	$B4D8	    			BTFSC	STATUS, Z, 0
$51D2	$D6FB	    			BRA	L__doprntf_39
$51D4	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$51D6	$0A66	    			XORLW	102
$51D8	$B4D8	    			BTFSC	STATUS, Z, 0
$51DA	$D6FA	    			BRA	L__doprntf_40
$51DC	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$51DE	$0A45	    			XORLW	69
$51E0	$B4D8	    			BTFSC	STATUS, Z, 0
$51E2	$D6F9	    			BRA	L__doprntf_41
$51E4	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$51E6	$0A65	    			XORLW	101
$51E8	$B4D8	    			BTFSC	STATUS, Z, 0
$51EA	$D6F7	    			BRA	L__doprntf_42
$51EC	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$51EE	$0A67	    			XORLW	103
$51F0	$B4D8	    			BTFSC	STATUS, Z, 0
$51F2	$D6F6	    			BRA	L__doprntf_43
$51F4	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$51F6	$0A6F	    			XORLW	111
$51F8	$B4D8	    			BTFSC	STATUS, Z, 0
$51FA	$D6F5	    			BRA	L__doprntf_44
$51FC	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$51FE	$0A64	    			XORLW	100
$5200	$B4D8	    			BTFSC	STATUS, Z, 0
$5202	$D6F4	    			BRA	L__doprntf_45
$5204	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$5206	$0A69	    			XORLW	105
$5208	$B4D8	    			BTFSC	STATUS, Z, 0
$520A	$D6F0	    			BRA	L__doprntf_46
$520C	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$520E	$0A70	    			XORLW	112
$5210	$B4D8	    			BTFSC	STATUS, Z, 0
$5212	$D6ED	    			BRA	L__doprntf_47
$5214	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$5216	$0A58	    			XORLW	88
$5218	$B4D8	    			BTFSC	STATUS, Z, 0
$521A	$D6E9	    			BRA	L__doprntf_48
$521C	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$521E	$0A78	    			XORLW	120
$5220	$B4D8	    			BTFSC	STATUS, Z, 0
$5222	$D6E7	    			BRA	L__doprntf_49
$5224	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$5226	$0A73	    			XORLW	115
$5228	$B4D8	    			BTFSC	STATUS, Z, 0
$522A	$D6E6	    			BRA	L__doprntf_50
$522C	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$522E	$0A63	    			XORLW	99
$5230	$E096	    			BZ	L__doprntf_67
$5232	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$5234	$0A75	    			XORLW	117
$5236	$E0BF	    			BZ	L__doprntf_69
$5238	$D7B4	    			BRA	L__doprntf_68
$523A	$	L__doprntf_37:
$523A	$0E00	    			MOVLW	0
$523C	$0108	    			MOVLB	8
$523E	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$5240	$6E00	    			MOVWF	STACK_0, 0
$5242	$51C0	    			MOVF	_doprntf_flag_L0+1, 0, 1
$5244	$0B07	    			ANDLW	7
$5246	$6E01	    			MOVWF	STACK_0+1, 0
$5248	$5000	    			MOVF	STACK_0, 0, 0
$524A	$1001	    			IORWF	STACK_0+1, 0, 0
$524C	$B4D8	    			BTFSC	STATUS, Z, 0
$524E	$EFC3	F032			GOTO	L__doprntf_70
$5252	$A9C0	    			BTFSS	_doprntf_flag_L0+1, 4, 1
$5254	$D004	    			BRA	L__doprntf_71
$5256	$0E06	    			MOVLW	6
$5258	$6FBA	    			MOVWF	_doprntf_prec_L0, 1
$525A	$0E00	    			MOVLW	0
$525C	$6FBB	    			MOVWF	_doprntf_prec_L0+1, 1
$525E	$	L__doprntf_71:
$525E	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$5262	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$5266	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$526A	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$526E	$C000	FFE9			MOVFF	STACK_0, FSR0L
$5272	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$5276	$CFEE	F8C3			MOVFF	POSTINC0, _doprntf_fval_L0
$527A	$CFEE	F8C4			MOVFF	POSTINC0, _doprntf_fval_L0+1
$527E	$CFEE	F8C5			MOVFF	POSTINC0, _doprntf_fval_L0+2
$5282	$CFEE	F8C6			MOVFF	POSTINC0, _doprntf_fval_L0+3
$5286	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$528A	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$528E	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$5292	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$5296	$0E04	    			MOVLW	4
$5298	$2600	    			ADDWF	STACK_0, 1, 0
$529A	$0E00	    			MOVLW	0
$529C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$529E	$C8B1	FFE1			MOVFF	FARG__doprntf+5, FSR1L
$52A2	$C8B2	FFE2			MOVFF	FARG__doprntf+6, FSR1H
$52A6	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$52AA	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$52AE	$6A04	    			CLRF	STACK_4, 0
$52B0	$6A05	    			CLRF	STACK_4+1, 0
$52B2	$6A06	    			CLRF	STACK_4+2, 0
$52B4	$6A07	    			CLRF	STACK_4+3, 0
$52B6	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$52BA	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$52BE	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$52C2	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$52C6	$ECFC	F01C			CALL	_compare_double
$52CA	$0E01	    			MOVLW	1
$52CC	$B0D8	    			BTFSC	STATUS, C, 0
$52CE	$0E00	    			MOVLW	0
$52D0	$6E00	    			MOVWF	STACK_0, 0
$52D2	$5200	    			MOVF	STACK_0, 1, 0
$52D4	$E006	    			BZ	L__doprntf_72
$52D6	$0108	    			MOVLB	8
$52D8	$7FC5	    			BTG	_doprntf_fval_L0+2, 7, 1
$52DA	$0E03	    			MOVLW	3
$52DC	$13BF	    			IORWF	_doprntf_flag_L0, 1, 1
$52DE	$0E00	    			MOVLW	0
$52E0	$13C0	    			IORWF	_doprntf_flag_L0+1, 1, 1
$52E2	$	L__doprntf_72:
$52E2	$0108	    			MOVLB	8
$52E4	$6BC7	    			CLRF	_doprntf_exp_L0, 1
$52E6	$6BC8	    			CLRF	_doprntf_exp_L0+1, 1
$52E8	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$52EC	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$52F0	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$52F4	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$52F8	$6A04	    			CLRF	STACK_4, 0
$52FA	$6A05	    			CLRF	STACK_4+1, 0
$52FC	$6A06	    			CLRF	STACK_4+2, 0
$52FE	$6A07	    			CLRF	STACK_4+3, 0
$5300	$EC64	F01D			CALL	_equals_double
$5304	$0E00	    			MOVLW	0
$5306	$A4D8	    			BTFSS	STATUS, Z, 0
$5308	$0E01	    			MOVLW	1
$530A	$6E00	    			MOVWF	STACK_0, 0
$530C	$5200	    			MOVF	STACK_0, 1, 0
$530E	$B4D8	    			BTFSC	STATUS, Z, 0
$5310	$D09A	    			BRA	L__doprntf_73
$5312	$C8C6	F000			MOVFF	_doprntf_fval_L0+3, STACK_0
$5316	$6A01	    			CLRF	STACK_0+1, 0
$5318	$6A02	    			CLRF	STACK_0+2, 0
$531A	$6A03	    			CLRF	STACK_0+3, 0
$531C	$0EFF	    			MOVLW	255
$531E	$1400	    			ANDWF	STACK_0, 0, 0
$5320	$0108	    			MOVLB	8
$5322	$6FD1	    			MOVWF	FLOC__doprntf+30, 1
$5324	$0E00	    			MOVLW	0
$5326	$6FD2	    			MOVWF	FLOC__doprntf+31, 1
$5328	$0E00	    			MOVLW	0
$532A	$17D2	    			ANDWF	FLOC__doprntf+31, 1, 1
$532C	$0E7E	    			MOVLW	126
$532E	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$5330	$0E00	    			MOVLW	0
$5332	$6FCE	    			MOVWF	FLOC__doprntf+27, 1
$5334	$6FCF	    			MOVWF	FLOC__doprntf+28, 1
$5336	$6FD0	    			MOVWF	FLOC__doprntf+29, 1
$5338	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$533A	$5DD1	    			SUBWF	FLOC__doprntf+30, 0, 1
$533C	$6E00	    			MOVWF	STACK_0, 0
$533E	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$5340	$59D2	    			SUBWFB	FLOC__doprntf+31, 0, 1
$5342	$6E01	    			MOVWF	STACK_0+1, 0
$5344	$C000	F8C7			MOVFF	STACK_0, _doprntf_exp_L0
$5348	$C001	F8C8			MOVFF	STACK_0+1, _doprntf_exp_L0+1
$534C	$0E01	    			MOVLW	1
$534E	$5C00	    			SUBWF	STACK_0, 0, 0
$5350	$6FC7	    			MOVWF	_doprntf_exp_L0, 1
$5352	$0E00	    			MOVLW	0
$5354	$5801	    			SUBWFB	STACK_0+1, 0, 0
$5356	$6FC8	    			MOVWF	_doprntf_exp_L0+1, 1
$5358	$C8C7	F000			MOVFF	_doprntf_exp_L0, STACK_0
$535C	$C8C8	F001			MOVFF	_doprntf_exp_L0+1, STACK_0+1
$5360	$0E03	    			MOVLW	3
$5362	$6E04	    			MOVWF	STACK_4, 0
$5364	$0E00	    			MOVLW	0
$5366	$6E05	    			MOVWF	STACK_4+1, 0
$5368	$ECC8	F01C			CALL	_mul_16x16_s
$536C	$C000	F8C7			MOVFF	STACK_0, _doprntf_exp_L0
$5370	$C001	F8C8			MOVFF	STACK_0+1, _doprntf_exp_L0+1
$5374	$0E0A	    			MOVLW	10
$5376	$6E04	    			MOVWF	STACK_4, 0
$5378	$0E00	    			MOVLW	0
$537A	$6E05	    			MOVWF	STACK_4+1, 0
$537C	$EC6F	F006			CALL	_div_16x16_s
$5380	$C000	F8C7			MOVFF	STACK_0, _doprntf_exp_L0
$5384	$C001	F8C8			MOVFF	STACK_0+1, _doprntf_exp_L0+1
$5388	$0E80	    			MOVLW	128
$538A	$1801	    			XORWF	STACK_0+1, 0, 0
$538C	$0108	    			MOVLB	8
$538E	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$5390	$0E80	    			MOVLW	128
$5392	$5DCD	    			SUBWF	FLOC__doprntf+26, 0, 1
$5394	$E102	    			BNZ	L__doprntf_330
$5396	$0E00	    			MOVLW	0
$5398	$5C00	    			SUBWF	STACK_0, 0, 0
$539A	$	L__doprntf_330:
$539A	$E204	    			BC	L__doprntf_74
$539C	$0E01	    			MOVLW	1
$539E	$5FC7	    			SUBWF	_doprntf_exp_L0, 1, 1
$53A0	$0E00	    			MOVLW	0
$53A2	$5BC8	    			SUBWFB	_doprntf_exp_L0+1, 1, 1
$53A4	$	L__doprntf_74:
$53A4	$0108	    			MOVLB	8
$53A6	$51C7	    			MOVF	_doprntf_exp_L0, 0, 1
$53A8	$0800	    			SUBLW	0
$53AA	$6FD5	    			MOVWF	FARG_doprntf_scale+0, 1
$53AC	$EC2F	F018			CALL	doprntf_scale
$53B0	$C8C3	F004			MOVFF	_doprntf_fval_L0, STACK_4
$53B4	$C8C4	F005			MOVFF	_doprntf_fval_L0+1, STACK_4+1
$53B8	$C8C5	F006			MOVFF	_doprntf_fval_L0+2, STACK_4+2
$53BC	$C8C6	F007			MOVFF	_doprntf_fval_L0+3, STACK_4+3
$53C0	$EC35	F00D			CALL	_mul_32x32_fp
$53C4	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$53C8	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$53CC	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$53D0	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$53D4	$0E00	    			MOVLW	0
$53D6	$6E04	    			MOVWF	STACK_4, 0
$53D8	$0E00	    			MOVLW	0
$53DA	$6E05	    			MOVWF	STACK_4+1, 0
$53DC	$0E00	    			MOVLW	0
$53DE	$6E06	    			MOVWF	STACK_4+2, 0
$53E0	$0E7F	    			MOVLW	127
$53E2	$6E07	    			MOVWF	STACK_4+3, 0
$53E4	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$53E8	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$53EC	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$53F0	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$53F4	$ECFC	F01C			CALL	_compare_double
$53F8	$0E01	    			MOVLW	1
$53FA	$B0D8	    			BTFSC	STATUS, C, 0
$53FC	$0E00	    			MOVLW	0
$53FE	$6E00	    			MOVWF	STACK_0, 0
$5400	$5200	    			MOVF	STACK_0, 1, 0
$5402	$E006	    			BZ	L__doprntf_75
$5404	$0E01	    			MOVLW	1
$5406	$0108	    			MOVLB	8
$5408	$5FC7	    			SUBWF	_doprntf_exp_L0, 1, 1
$540A	$0E00	    			MOVLW	0
$540C	$5BC8	    			SUBWFB	_doprntf_exp_L0+1, 1, 1
$540E	$D01B	    			BRA	L__doprntf_76
$5410	$	L__doprntf_75:
$5410	$0E00	    			MOVLW	0
$5412	$6E04	    			MOVWF	STACK_4, 0
$5414	$0E00	    			MOVLW	0
$5416	$6E05	    			MOVWF	STACK_4+1, 0
$5418	$0E20	    			MOVLW	32
$541A	$6E06	    			MOVWF	STACK_4+2, 0
$541C	$0E82	    			MOVLW	130
$541E	$6E07	    			MOVWF	STACK_4+3, 0
$5420	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$5424	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$5428	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$542C	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$5430	$ECFC	F01C			CALL	_compare_double
$5434	$0E00	    			MOVLW	0
$5436	$B0D8	    			BTFSC	STATUS, C, 0
$5438	$0E01	    			MOVLW	1
$543A	$6E00	    			MOVWF	STACK_0, 0
$543C	$5200	    			MOVF	STACK_0, 1, 0
$543E	$E003	    			BZ	L__doprntf_77
$5440	$0108	    			MOVLB	8
$5442	$4BC7	    			INFSNZ	_doprntf_exp_L0, 1, 1
$5444	$2BC8	    			INCF	_doprntf_exp_L0+1, 1, 1
$5446	$	L__doprntf_77:
$5446	$	L__doprntf_76:
$5446	$	L__doprntf_73:
$5446	$0108	    			MOVLB	8
$5448	$0E80	    			MOVLW	128
$544A	$6E00	    			MOVWF	STACK_0, 0
$544C	$0E80	    			MOVLW	128
$544E	$0108	    			MOVLB	8
$5450	$19C8	    			XORWF	_doprntf_exp_L0+1, 0, 1
$5452	$5C00	    			SUBWF	STACK_0, 0, 0
$5454	$E102	    			BNZ	L__doprntf_331
$5456	$51C7	    			MOVF	_doprntf_exp_L0, 0, 1
$5458	$0800	    			SUBLW	0
$545A	$	L__doprntf_331:
$545A	$E304	    			BNC	L__doprntf_78
$545C	$0E01	    			MOVLW	1
$545E	$0108	    			MOVLB	8
$5460	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$5462	$D003	    			BRA	L__doprntf_79
$5464	$	L__doprntf_78:
$5464	$0108	    			MOVLB	8
$5466	$C8C7	F8BC			MOVFF	_doprntf_exp_L0, _doprntf_c_L0
$546A	$	L__doprntf_79:
$546A	$0108	    			MOVLB	8
$546C	$B1C0	    			BTFSC	_doprntf_flag_L0+1, 0, 1
$546E	$D01B	    			BRA	L570_ex_L__doprntf_86
$5470	$A3C0	    			BTFSS	_doprntf_flag_L0+1, 1, 1
$5472	$D016	    			BRA	L563_ex_L570_ex_L__doprntf_86
$5474	$0E80	    			MOVLW	128
$5476	$19C8	    			XORWF	_doprntf_exp_L0+1, 0, 1
$5478	$6E00	    			MOVWF	STACK_0, 0
$547A	$0E7F	    			MOVLW	127
$547C	$5C00	    			SUBWF	STACK_0, 0, 0
$547E	$E102	    			BNZ	L__doprntf_332
$5480	$0EFC	    			MOVLW	252
$5482	$5DC7	    			SUBWF	_doprntf_exp_L0, 0, 1
$5484	$	L__doprntf_332:
$5484	$E30B	    			BNC	L556_ex_L563_ex_L570_ex_L__doprntf_86
$5486	$0E80	    			MOVLW	128
$5488	$0108	    			MOVLB	8
$548A	$19C8	    			XORWF	_doprntf_exp_L0+1, 0, 1
$548C	$6E00	    			MOVWF	STACK_0, 0
$548E	$0E80	    			MOVLW	128
$5490	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$5492	$5C00	    			SUBWF	STACK_0, 0, 0
$5494	$E102	    			BNZ	L__doprntf_333
$5496	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$5498	$5DC7	    			SUBWF	_doprntf_exp_L0, 0, 1
$549A	$	L__doprntf_333:
$549A	$E302	    			BNC	L563_ex_L570_ex_L__doprntf_86
$549C	$	L556_ex_L563_ex_L570_ex_L__doprntf_86:
$549C	$0108	    			MOVLB	8
$549E	$D003	    			BRA	L570_ex_L__doprntf_86
$54A0	$	L563_ex_L570_ex_L__doprntf_86:
$54A0	$0108	    			MOVLB	8
$54A2	$EFAC	F02E			GOTO	L__doprntf_86
$54A6	$	L570_ex_L__doprntf_86:
$54A6	$0108	    			MOVLB	8
$54A8	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$54AA	$11BB	    			IORWF	_doprntf_prec_L0+1, 0, 1
$54AC	$E007	    			BZ	L__doprntf_89
$54AE	$A3C0	    			BTFSS	_doprntf_flag_L0+1, 1, 1
$54B0	$D005	    			BRA	L__doprntf_89
$54B2	$	L580_ex_L__doprntf_89:
$54B2	$0E01	    			MOVLW	1
$54B4	$0108	    			MOVLB	8
$54B6	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$54B8	$0E00	    			MOVLW	0
$54BA	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$54BC	$	L__doprntf_89:
$54BC	$0E00	    			MOVLW	0
$54BE	$6E00	    			MOVWF	STACK_0, 0
$54C0	$0108	    			MOVLB	8
$54C2	$51BB	    			MOVF	_doprntf_prec_L0+1, 0, 1
$54C4	$5C00	    			SUBWF	STACK_0, 0, 0
$54C6	$E102	    			BNZ	L__doprntf_334
$54C8	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$54CA	$0808	    			SUBLW	8
$54CC	$	L__doprntf_334:
$54CC	$E204	    			BC	L__doprntf_90
$54CE	$0E08	    			MOVLW	8
$54D0	$0108	    			MOVLB	8
$54D2	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$54D4	$D003	    			BRA	L__doprntf_91
$54D6	$	L__doprntf_90:
$54D6	$0108	    			MOVLB	8
$54D8	$C8BA	F8BC			MOVFF	_doprntf_prec_L0, _doprntf_c_L0
$54DC	$	L__doprntf_91:
$54DC	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$54E0	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$54E4	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$54E8	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$54EC	$6A04	    			CLRF	STACK_4, 0
$54EE	$6A05	    			CLRF	STACK_4+1, 0
$54F0	$6A06	    			CLRF	STACK_4+2, 0
$54F2	$6A07	    			CLRF	STACK_4+3, 0
$54F4	$EC64	F01D			CALL	_equals_double
$54F8	$0E00	    			MOVLW	0
$54FA	$A4D8	    			BTFSS	STATUS, Z, 0
$54FC	$0E01	    			MOVLW	1
$54FE	$6E00	    			MOVWF	STACK_0, 0
$5500	$5200	    			MOVF	STACK_0, 1, 0
$5502	$B4D8	    			BTFSC	STATUS, Z, 0
$5504	$D164	    			BRA	L__doprntf_92
$5506	$C8C7	F8D5			MOVFF	_doprntf_exp_L0, FARG_doprntf_scale+0
$550A	$EC2F	F018			CALL	doprntf_scale
$550E	$C000	F004			MOVFF	STACK_0, STACK_4
$5512	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$5516	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$551A	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$551E	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5522	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5526	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$552A	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$552E	$EC7C	F01D			CALL	_div_32x32_fp
$5532	$C000	F8C3			MOVFF	STACK_0, _doprntf_fval_L0
$5536	$C001	F8C4			MOVFF	STACK_0+1, _doprntf_fval_L0+1
$553A	$C002	F8C5			MOVFF	STACK_0+2, _doprntf_fval_L0+2
$553E	$C003	F8C6			MOVFF	STACK_0+3, _doprntf_fval_L0+3
$5542	$0108	    			MOVLB	8
$5544	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$5546	$0800	    			SUBLW	0
$5548	$6FD5	    			MOVWF	FARG_doprntf_scale+0, 1
$554A	$EC2F	F018			CALL	doprntf_scale
$554E	$C000	F004			MOVFF	STACK_0, STACK_4
$5552	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$5556	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$555A	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$555E	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5562	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5566	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$556A	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$556E	$EC7C	F01D			CALL	_div_32x32_fp
$5572	$C000	F8CD			MOVFF	STACK_0, FLOC__doprntf+26
$5576	$C001	F8CE			MOVFF	STACK_0+1, FLOC__doprntf+27
$557A	$C002	F8CF			MOVFF	STACK_0+2, FLOC__doprntf+28
$557E	$C003	F8D0			MOVFF	STACK_0+3, FLOC__doprntf+29
$5582	$C8CD	F8C3			MOVFF	FLOC__doprntf+26, _doprntf_fval_L0
$5586	$C8CE	F8C4			MOVFF	FLOC__doprntf+27, _doprntf_fval_L0+1
$558A	$C8CF	F8C5			MOVFF	FLOC__doprntf+28, _doprntf_fval_L0+2
$558E	$C8D0	F8C6			MOVFF	FLOC__doprntf+29, _doprntf_fval_L0+3
$5592	$C8CD	F000			MOVFF	FLOC__doprntf+26, STACK_0
$5596	$C8CE	F001			MOVFF	FLOC__doprntf+27, STACK_0+1
$559A	$C8CF	F002			MOVFF	FLOC__doprntf+28, STACK_0+2
$559E	$C8D0	F003			MOVFF	FLOC__doprntf+29, STACK_0+3
$55A2	$EC26	F01E			CALL	_double2longword
$55A6	$ECC3	F01E			CALL	_longword2double
$55AA	$C000	F004			MOVFF	STACK_0, STACK_4
$55AE	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$55B2	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$55B6	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$55BA	$C8CD	F000			MOVFF	FLOC__doprntf+26, STACK_0
$55BE	$C8CE	F001			MOVFF	FLOC__doprntf+27, STACK_0+1
$55C2	$C8CF	F002			MOVFF	FLOC__doprntf+28, STACK_0+2
$55C6	$C8D0	F003			MOVFF	FLOC__doprntf+29, STACK_0+3
$55CA	$ECD7	F01E			CALL	_sub_32x32_fp
$55CE	$0E00	    			MOVLW	0
$55D0	$6E04	    			MOVWF	STACK_4, 0
$55D2	$0E00	    			MOVLW	0
$55D4	$6E05	    			MOVWF	STACK_4+1, 0
$55D6	$0E00	    			MOVLW	0
$55D8	$6E06	    			MOVWF	STACK_4+2, 0
$55DA	$0E7E	    			MOVLW	126
$55DC	$6E07	    			MOVWF	STACK_4+3, 0
$55DE	$ECFC	F01C			CALL	_compare_double
$55E2	$0E00	    			MOVLW	0
$55E4	$B0D8	    			BTFSC	STATUS, C, 0
$55E6	$0E01	    			MOVLW	1
$55E8	$6E00	    			MOVWF	STACK_0, 0
$55EA	$5200	    			MOVF	STACK_0, 1, 0
$55EC	$E01A	    			BZ	L__doprntf_93
$55EE	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$55F2	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$55F6	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$55FA	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$55FE	$0E00	    			MOVLW	0
$5600	$6E04	    			MOVWF	STACK_4, 0
$5602	$0E00	    			MOVLW	0
$5604	$6E05	    			MOVWF	STACK_4+1, 0
$5606	$0E00	    			MOVLW	0
$5608	$6E06	    			MOVWF	STACK_4+2, 0
$560A	$0E7E	    			MOVLW	126
$560C	$6E07	    			MOVWF	STACK_4+3, 0
$560E	$ECDD	F00D			CALL	_add_32x32_fp
$5612	$C000	F8C3			MOVFF	STACK_0, _doprntf_fval_L0
$5616	$C001	F8C4			MOVFF	STACK_0+1, _doprntf_fval_L0+1
$561A	$C002	F8C5			MOVFF	STACK_0+2, _doprntf_fval_L0+2
$561E	$C003	F8C6			MOVFF	STACK_0+3, _doprntf_fval_L0+3
$5622	$	L__doprntf_93:
$5622	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5626	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$562A	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$562E	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$5632	$EC26	F01E			CALL	_double2longword
$5636	$C000	F8D1			MOVFF	STACK_0, FLOC__doprntf+30
$563A	$C001	F8D2			MOVFF	STACK_0+1, FLOC__doprntf+31
$563E	$C002	F8D3			MOVFF	STACK_0+2, FLOC__doprntf+32
$5642	$C003	F8D4			MOVFF	STACK_0+3, FLOC__doprntf+33
$5646	$0108	    			MOVLB	8
$5648	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$564A	$0F01	    			ADDLW	1
$564C	$6E00	    			MOVWF	STACK_0, 0
$564E	$6A01	    			CLRF	STACK_0+1, 0
$5650	$0E00	    			MOVLW	0
$5652	$2201	    			ADDWFC	STACK_0+1, 1, 0
$5654	$0E02	    			MOVLW	2
$5656	$6E04	    			MOVWF	STACK_4, 0
$5658	$0E00	    			MOVLW	0
$565A	$BE01	    			BTFSC	STACK_0+1, 7, 0
$565C	$0EFF	    			MOVLW	255
$565E	$6E02	    			MOVWF	STACK_0+2, 0
$5660	$6E03	    			MOVWF	STACK_0+3, 0
$5662	$5004	    			MOVF	STACK_4, 0, 0
$5664	$	L__doprntf_335:
$5664	$0108	    			MOVLB	8
$5666	$E007	    			BZ	L__doprntf_336
$5668	$3600	    			RLCF	STACK_0, 1, 0
$566A	$9000	    			BCF	STACK_0, 0, 0
$566C	$3601	    			RLCF	STACK_0+1, 1, 0
$566E	$3602	    			RLCF	STACK_0+2, 1, 0
$5670	$3603	    			RLCF	STACK_0+3, 1, 0
$5672	$0FFF	    			ADDLW	255
$5674	$D7F7	    			BRA	L__doprntf_335
$5676	$	L__doprntf_336:
$5676	$0108	    			MOVLB	8
$5678	$0E0E	    			MOVLW	#doprntf_dpowers
$567A	$2600	    			ADDWF	STACK_0, 1, 0
$567C	$0ED1	    			MOVLW	@#doprntf_dpowers
$567E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$5680	$0E00	    			MOVLW	@@#doprntf_dpowers
$5682	$2202	    			ADDWFC	STACK_0+2, 1, 0
$5684	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$5688	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$568C	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$5690	$0009	    			TBLRD*+
$5692	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$5696	$0009	    			TBLRD*+
$5698	$CFF5	F8CE			MOVFF	TABLAT, FLOC__doprntf+27
$569C	$0009	    			TBLRD*+
$569E	$CFF5	F8CF			MOVFF	TABLAT, FLOC__doprntf+28
$56A2	$0009	    			TBLRD*+
$56A4	$CFF5	F8D0			MOVFF	TABLAT, FLOC__doprntf+29
$56A8	$51D0	    			MOVF	FLOC__doprntf+29, 0, 1
$56AA	$5DD4	    			SUBWF	FLOC__doprntf+33, 0, 1
$56AC	$E108	    			BNZ	L__doprntf_337
$56AE	$51CF	    			MOVF	FLOC__doprntf+28, 0, 1
$56B0	$5DD3	    			SUBWF	FLOC__doprntf+32, 0, 1
$56B2	$E105	    			BNZ	L__doprntf_337
$56B4	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$56B6	$5DD2	    			SUBWF	FLOC__doprntf+31, 0, 1
$56B8	$E102	    			BNZ	L__doprntf_337
$56BA	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$56BC	$5DD1	    			SUBWF	FLOC__doprntf+30, 0, 1
$56BE	$	L__doprntf_337:
$56BE	$E31E	    			BNC	L__doprntf_94
$56C0	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$56C4	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$56C8	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$56CC	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$56D0	$0ECD	    			MOVLW	205
$56D2	$6E04	    			MOVWF	STACK_4, 0
$56D4	$0ECC	    			MOVLW	204
$56D6	$6E05	    			MOVWF	STACK_4+1, 0
$56D8	$0E4C	    			MOVLW	76
$56DA	$6E06	    			MOVWF	STACK_4+2, 0
$56DC	$0E7B	    			MOVLW	123
$56DE	$6E07	    			MOVWF	STACK_4+3, 0
$56E0	$EC35	F00D			CALL	_mul_32x32_fp
$56E4	$C000	F8C3			MOVFF	STACK_0, _doprntf_fval_L0
$56E8	$C001	F8C4			MOVFF	STACK_0+1, _doprntf_fval_L0+1
$56EC	$C002	F8C5			MOVFF	STACK_0+2, _doprntf_fval_L0+2
$56F0	$C003	F8C6			MOVFF	STACK_0+3, _doprntf_fval_L0+3
$56F4	$0108	    			MOVLB	8
$56F6	$4BC7	    			INFSNZ	_doprntf_exp_L0, 1, 1
$56F8	$2BC8	    			INCF	_doprntf_exp_L0+1, 1, 1
$56FA	$D069	    			BRA	L__doprntf_95
$56FC	$	L__doprntf_94:
$56FC	$0108	    			MOVLB	8
$56FE	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5702	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5706	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$570A	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$570E	$EC26	F01E			CALL	_double2longword
$5712	$C000	F8D1			MOVFF	STACK_0, FLOC__doprntf+30
$5716	$C001	F8D2			MOVFF	STACK_0+1, FLOC__doprntf+31
$571A	$C002	F8D3			MOVFF	STACK_0+2, FLOC__doprntf+32
$571E	$C003	F8D4			MOVFF	STACK_0+3, FLOC__doprntf+33
$5722	$0E02	    			MOVLW	2
$5724	$6E04	    			MOVWF	STACK_4, 0
$5726	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$572A	$0E00	    			MOVLW	0
$572C	$6E01	    			MOVWF	STACK_0+1, 0
$572E	$6E02	    			MOVWF	STACK_0+2, 0
$5730	$6E03	    			MOVWF	STACK_0+3, 0
$5732	$5004	    			MOVF	STACK_4, 0, 0
$5734	$	L__doprntf_338:
$5734	$0100	    			MOVLB	0
$5736	$E007	    			BZ	L__doprntf_339
$5738	$3600	    			RLCF	STACK_0, 1, 0
$573A	$9000	    			BCF	STACK_0, 0, 0
$573C	$3601	    			RLCF	STACK_0+1, 1, 0
$573E	$3602	    			RLCF	STACK_0+2, 1, 0
$5740	$3603	    			RLCF	STACK_0+3, 1, 0
$5742	$0FFF	    			ADDLW	255
$5744	$D7F7	    			BRA	L__doprntf_338
$5746	$	L__doprntf_339:
$5746	$0E0E	    			MOVLW	#doprntf_dpowers
$5748	$2600	    			ADDWF	STACK_0, 1, 0
$574A	$0ED1	    			MOVLW	@#doprntf_dpowers
$574C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$574E	$0E00	    			MOVLW	@@#doprntf_dpowers
$5750	$2202	    			ADDWFC	STACK_0+2, 1, 0
$5752	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$5756	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$575A	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$575E	$0009	    			TBLRD*+
$5760	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$5764	$0009	    			TBLRD*+
$5766	$CFF5	F8CE			MOVFF	TABLAT, FLOC__doprntf+27
$576A	$0009	    			TBLRD*+
$576C	$CFF5	F8CF			MOVFF	TABLAT, FLOC__doprntf+28
$5770	$0009	    			TBLRD*+
$5772	$CFF5	F8D0			MOVFF	TABLAT, FLOC__doprntf+29
$5776	$0108	    			MOVLB	8
$5778	$51D0	    			MOVF	FLOC__doprntf+29, 0, 1
$577A	$5DD4	    			SUBWF	FLOC__doprntf+33, 0, 1
$577C	$E108	    			BNZ	L__doprntf_340
$577E	$51CF	    			MOVF	FLOC__doprntf+28, 0, 1
$5780	$5DD3	    			SUBWF	FLOC__doprntf+32, 0, 1
$5782	$E105	    			BNZ	L__doprntf_340
$5784	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$5786	$5DD2	    			SUBWF	FLOC__doprntf+31, 0, 1
$5788	$E102	    			BNZ	L__doprntf_340
$578A	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$578C	$5DD1	    			SUBWF	FLOC__doprntf+30, 0, 1
$578E	$	L__doprntf_340:
$578E	$E21F	    			BC	L__doprntf_96
$5790	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5794	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5798	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$579C	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$57A0	$0E00	    			MOVLW	0
$57A2	$6E04	    			MOVWF	STACK_4, 0
$57A4	$0E00	    			MOVLW	0
$57A6	$6E05	    			MOVWF	STACK_4+1, 0
$57A8	$0E20	    			MOVLW	32
$57AA	$6E06	    			MOVWF	STACK_4+2, 0
$57AC	$0E82	    			MOVLW	130
$57AE	$6E07	    			MOVWF	STACK_4+3, 0
$57B0	$EC35	F00D			CALL	_mul_32x32_fp
$57B4	$C000	F8C3			MOVFF	STACK_0, _doprntf_fval_L0
$57B8	$C001	F8C4			MOVFF	STACK_0+1, _doprntf_fval_L0+1
$57BC	$C002	F8C5			MOVFF	STACK_0+2, _doprntf_fval_L0+2
$57C0	$C003	F8C6			MOVFF	STACK_0+3, _doprntf_fval_L0+3
$57C4	$0E01	    			MOVLW	1
$57C6	$0108	    			MOVLB	8
$57C8	$5FC7	    			SUBWF	_doprntf_exp_L0, 1, 1
$57CA	$0E00	    			MOVLW	0
$57CC	$5BC8	    			SUBWFB	_doprntf_exp_L0+1, 1, 1
$57CE	$	L__doprntf_96:
$57CE	$	L__doprntf_95:
$57CE	$	L__doprntf_92:
$57CE	$0108	    			MOVLB	8
$57D0	$0108	    			MOVLB	8
$57D2	$A3C0	    			BTFSS	_doprntf_flag_L0+1, 1, 1
$57D4	$D09B	    			BRA	L__doprntf_99
$57D6	$B7C0	    			BTFSC	_doprntf_flag_L0+1, 3, 1
$57D8	$D099	    			BRA	L__doprntf_99
$57DA	$	L647_ex_L__doprntf_99:
$57DA	$0E80	    			MOVLW	128
$57DC	$0A00	    			XORLW	0
$57DE	$6E00	    			MOVWF	STACK_0, 0
$57E0	$0E80	    			MOVLW	128
$57E2	$0108	    			MOVLB	8
$57E4	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$57E6	$5C00	    			SUBWF	STACK_0, 0, 0
$57E8	$E102	    			BNZ	L__doprntf_341
$57EA	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$57EC	$080A	    			SUBLW	10
$57EE	$	L__doprntf_341:
$57EE	$E205	    			BC	L__doprntf_100
$57F0	$0E0A	    			MOVLW	10
$57F2	$0108	    			MOVLB	8
$57F4	$6FBA	    			MOVWF	_doprntf_prec_L0, 1
$57F6	$0E00	    			MOVLW	0
$57F8	$6FBB	    			MOVWF	_doprntf_prec_L0+1, 1
$57FA	$	L__doprntf_100:
$57FA	$0108	    			MOVLB	8
$57FC	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5800	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5804	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$5808	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$580C	$EC26	F01E			CALL	_double2longword
$5810	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$5814	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$5818	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$581C	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$5820	$	L__doprntf_101:
$5820	$0108	    			MOVLB	8
$5822	$51C9	    			MOVF	_doprntf__val_L0, 0, 1
$5824	$11CA	    			IORWF	_doprntf__val_L0+1, 0, 1
$5826	$11CB	    			IORWF	_doprntf__val_L0+2, 0, 1
$5828	$11CC	    			IORWF	_doprntf__val_L0+3, 0, 1
$582A	$E044	    			BZ	L__doprntf_102
$582C	$0E0A	    			MOVLW	10
$582E	$6E04	    			MOVWF	STACK_4, 0
$5830	$0E00	    			MOVLW	0
$5832	$6E05	    			MOVWF	STACK_4+1, 0
$5834	$6E06	    			MOVWF	STACK_4+2, 0
$5836	$6E07	    			MOVWF	STACK_4+3, 0
$5838	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$583C	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$5840	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$5844	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$5848	$ECCE	F003			CALL	_div_32x32_u
$584C	$C008	F000			MOVFF	STACK_8, STACK_0
$5850	$C009	F001			MOVFF	STACK_9, STACK_1
$5854	$C00A	F002			MOVFF	STACK_10, STACK_2
$5858	$C00B	F003			MOVFF	STACK_11, STACK_3
$585C	$0E00	    			MOVLW	0
$585E	$0108	    			MOVLB	8
$5860	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$5862	$1803	    			XORWF	STACK_0+3, 0, 0
$5864	$E108	    			BNZ	L__doprntf_342
$5866	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$5868	$1802	    			XORWF	STACK_0+2, 0, 0
$586A	$E105	    			BNZ	L__doprntf_342
$586C	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$586E	$1801	    			XORWF	STACK_0+1, 0, 0
$5870	$E102	    			BNZ	L__doprntf_342
$5872	$5000	    			MOVF	STACK_0, 0, 0
$5874	$0A00	    			XORLW	0
$5876	$	L__doprntf_342:
$5876	$E11E	    			BNZ	L__doprntf_102
$5878	$	L665_ex_L__doprntf_102:
$5878	$0E01	    			MOVLW	1
$587A	$0108	    			MOVLB	8
$587C	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$587E	$0E00	    			MOVLW	0
$5880	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$5882	$0E0A	    			MOVLW	10
$5884	$6E04	    			MOVWF	STACK_4, 0
$5886	$0E00	    			MOVLW	0
$5888	$6E05	    			MOVWF	STACK_4+1, 0
$588A	$6E06	    			MOVWF	STACK_4+2, 0
$588C	$6E07	    			MOVWF	STACK_4+3, 0
$588E	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$5892	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$5896	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$589A	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$589E	$ECCE	F003			CALL	_div_32x32_u
$58A2	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$58A6	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$58AA	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$58AE	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$58B2	$D7B6	    			BRA	L__doprntf_101
$58B4	$	L__doprntf_102:
$58B4	$0E80	    			MOVLW	128
$58B6	$0108	    			MOVLB	8
$58B8	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$58BA	$6E00	    			MOVWF	STACK_0, 0
$58BC	$0E80	    			MOVLW	128
$58BE	$5C00	    			SUBWF	STACK_0, 0, 0
$58C0	$E102	    			BNZ	L__doprntf_343
$58C2	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$58C4	$5DBA	    			SUBWF	_doprntf_prec_L0, 0, 1
$58C6	$	L__doprntf_343:
$58C6	$E222	    			BC	L__doprntf_105
$58C8	$0108	    			MOVLB	8
$58CA	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$58CC	$5DBC	    			SUBWF	_doprntf_c_L0, 0, 1
$58CE	$6FD5	    			MOVWF	FARG_doprntf_scale+0, 1
$58D0	$EC2F	F018			CALL	doprntf_scale
$58D4	$C000	F004			MOVFF	STACK_0, STACK_4
$58D8	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$58DC	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$58E0	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$58E4	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$58E8	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$58EC	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$58F0	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$58F4	$EC7C	F01D			CALL	_div_32x32_fp
$58F8	$C000	F8C3			MOVFF	STACK_0, _doprntf_fval_L0
$58FC	$C001	F8C4			MOVFF	STACK_0+1, _doprntf_fval_L0+1
$5900	$C002	F8C5			MOVFF	STACK_0+2, _doprntf_fval_L0+2
$5904	$C003	F8C6			MOVFF	STACK_0+3, _doprntf_fval_L0+3
$5908	$C8BA	F8BC			MOVFF	_doprntf_prec_L0, _doprntf_c_L0
$590C	$	L__doprntf_105:
$590C	$	L__doprntf_99:
$590C	$0100	    			MOVLB	0
$590E	$0E05	    			MOVLW	5
$5910	$0108	    			MOVLB	8
$5912	$25BA	    			ADDWF	_doprntf_prec_L0, 0, 1
$5914	$6E00	    			MOVWF	STACK_0, 0
$5916	$0E00	    			MOVLW	0
$5918	$21BB	    			ADDWFC	_doprntf_prec_L0+1, 0, 1
$591A	$6E01	    			MOVWF	STACK_0+1, 0
$591C	$5000	    			MOVF	STACK_0, 0, 0
$591E	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$5920	$5001	    			MOVF	STACK_0+1, 0, 0
$5922	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$5924	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$5926	$11BB	    			IORWF	_doprntf_prec_L0+1, 0, 1
$5928	$E102	    			BNZ	L694_ex_L__doprntf_108
$592A	$A7C0	    			BTFSS	_doprntf_flag_L0+1, 3, 1
$592C	$D005	    			BRA	L__doprntf_108
$592E	$	L694_ex_L__doprntf_108:
$592E	$0E01	    			MOVLW	1
$5930	$0108	    			MOVLB	8
$5932	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$5934	$0E00	    			MOVLW	0
$5936	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$5938	$	L__doprntf_108:
$5938	$0E03	    			MOVLW	3
$593A	$0108	    			MOVLB	8
$593C	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$593E	$6E00	    			MOVWF	STACK_0, 0
$5940	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$5944	$0E00	    			MOVLW	0
$5946	$1601	    			ANDWF	STACK_0+1, 1, 0
$5948	$5000	    			MOVF	STACK_0, 0, 0
$594A	$1001	    			IORWF	STACK_0+1, 0, 0
$594C	$E004	    			BZ	L__doprntf_109
$594E	$0E01	    			MOVLW	1
$5950	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$5952	$0E00	    			MOVLW	0
$5954	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$5956	$	L__doprntf_109:
$5956	$0108	    			MOVLB	8
$5958	$A5BF	    			BTFSS	_doprntf_flag_L0, 2, 1
$595A	$D04E	    			BRA	L__doprntf_110
$595C	$A3BF	    			BTFSS	_doprntf_flag_L0, 1, 1
$595E	$D01B	    			BRA	L__doprntf_111
$5960	$0E01	    			MOVLW	1
$5962	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$5964	$6E00	    			MOVWF	STACK_0, 0
$5966	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$596A	$0E00	    			MOVLW	0
$596C	$1601	    			ANDWF	STACK_0+1, 1, 0
$596E	$5000	    			MOVF	STACK_0, 0, 0
$5970	$1001	    			IORWF	STACK_0+1, 0, 0
$5972	$E003	    			BZ	L__doprntf_112
$5974	$0E2D	    			MOVLW	45
$5976	$6E00	    			MOVWF	STACK_0, 0
$5978	$D002	    			BRA	L__doprntf_113
$597A	$	L__doprntf_112:
$597A	$0E2B	    			MOVLW	43
$597C	$6E00	    			MOVWF	STACK_0, 0
$597E	$	L__doprntf_113:
$597E	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5982	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5986	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$598A	$0108	    			MOVLB	8
$598C	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$598E	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5990	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5992	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5994	$D015	    			BRA	L__doprntf_114
$5996	$	L__doprntf_111:
$5996	$0E01	    			MOVLW	1
$5998	$0108	    			MOVLB	8
$599A	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$599C	$6E00	    			MOVWF	STACK_0, 0
$599E	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$59A2	$0E00	    			MOVLW	0
$59A4	$1601	    			ANDWF	STACK_0+1, 1, 0
$59A6	$5000	    			MOVF	STACK_0, 0, 0
$59A8	$1001	    			IORWF	STACK_0+1, 0, 0
$59AA	$E00A	    			BZ	L__doprntf_115
$59AC	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$59B0	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$59B4	$0E20	    			MOVLW	32
$59B6	$6EE6	    			MOVWF	POSTINC1, 0
$59B8	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$59BA	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$59BC	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$59BE	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$59C0	$	L__doprntf_115:
$59C0	$	L__doprntf_114:
$59C0	$	L__doprntf_116:
$59C0	$0E80	    			MOVLW	128
$59C2	$6E00	    			MOVWF	STACK_0, 0
$59C4	$0E80	    			MOVLW	128
$59C6	$0108	    			MOVLB	8
$59C8	$19BE	    			XORWF	_doprntf_width_L0+1, 0, 1
$59CA	$5C00	    			SUBWF	STACK_0, 0, 0
$59CC	$E102	    			BNZ	L__doprntf_344
$59CE	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$59D0	$0800	    			SUBLW	0
$59D2	$	L__doprntf_344:
$59D2	$E210	    			BC	L__doprntf_117
$59D4	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$59D8	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$59DC	$0E30	    			MOVLW	48
$59DE	$6EE6	    			MOVWF	POSTINC1, 0
$59E0	$0108	    			MOVLB	8
$59E2	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$59E4	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$59E6	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$59E8	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$59EA	$0E01	    			MOVLW	1
$59EC	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$59EE	$0E00	    			MOVLW	0
$59F0	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$59F2	$D7E6	    			BRA	L__doprntf_116
$59F4	$	L__doprntf_117:
$59F4	$0108	    			MOVLB	8
$59F6	$D051	    			BRA	L__doprntf_118
$59F8	$	L__doprntf_110:
$59F8	$0108	    			MOVLB	8
$59FA	$B7BF	    			BTFSC	_doprntf_flag_L0, 3, 1
$59FC	$D01A	    			BRA	L__doprntf_119
$59FE	$	L__doprntf_120:
$59FE	$0E80	    			MOVLW	128
$5A00	$6E00	    			MOVWF	STACK_0, 0
$5A02	$0E80	    			MOVLW	128
$5A04	$0108	    			MOVLB	8
$5A06	$19BE	    			XORWF	_doprntf_width_L0+1, 0, 1
$5A08	$5C00	    			SUBWF	STACK_0, 0, 0
$5A0A	$E102	    			BNZ	L__doprntf_345
$5A0C	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$5A0E	$0800	    			SUBLW	0
$5A10	$	L__doprntf_345:
$5A10	$E210	    			BC	L__doprntf_121
$5A12	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5A16	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5A1A	$0E20	    			MOVLW	32
$5A1C	$6EE6	    			MOVWF	POSTINC1, 0
$5A1E	$0108	    			MOVLB	8
$5A20	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5A22	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5A24	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5A26	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5A28	$0E01	    			MOVLW	1
$5A2A	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$5A2C	$0E00	    			MOVLW	0
$5A2E	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$5A30	$D7E6	    			BRA	L__doprntf_120
$5A32	$	L__doprntf_121:
$5A32	$	L__doprntf_119:
$5A32	$0108	    			MOVLB	8
$5A34	$0108	    			MOVLB	8
$5A36	$A3BF	    			BTFSS	_doprntf_flag_L0, 1, 1
$5A38	$D01B	    			BRA	L__doprntf_122
$5A3A	$0E01	    			MOVLW	1
$5A3C	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$5A3E	$6E00	    			MOVWF	STACK_0, 0
$5A40	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$5A44	$0E00	    			MOVLW	0
$5A46	$1601	    			ANDWF	STACK_0+1, 1, 0
$5A48	$5000	    			MOVF	STACK_0, 0, 0
$5A4A	$1001	    			IORWF	STACK_0+1, 0, 0
$5A4C	$E003	    			BZ	L__doprntf_123
$5A4E	$0E2D	    			MOVLW	45
$5A50	$6E00	    			MOVWF	STACK_0, 0
$5A52	$D002	    			BRA	L__doprntf_124
$5A54	$	L__doprntf_123:
$5A54	$0E2B	    			MOVLW	43
$5A56	$6E00	    			MOVWF	STACK_0, 0
$5A58	$	L__doprntf_124:
$5A58	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5A5C	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5A60	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$5A64	$0108	    			MOVLB	8
$5A66	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5A68	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5A6A	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5A6C	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5A6E	$D015	    			BRA	L__doprntf_125
$5A70	$	L__doprntf_122:
$5A70	$0E01	    			MOVLW	1
$5A72	$0108	    			MOVLB	8
$5A74	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$5A76	$6E00	    			MOVWF	STACK_0, 0
$5A78	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$5A7C	$0E00	    			MOVLW	0
$5A7E	$1601	    			ANDWF	STACK_0+1, 1, 0
$5A80	$5000	    			MOVF	STACK_0, 0, 0
$5A82	$1001	    			IORWF	STACK_0+1, 0, 0
$5A84	$E00A	    			BZ	L__doprntf_126
$5A86	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5A8A	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5A8E	$0E20	    			MOVLW	32
$5A90	$6EE6	    			MOVWF	POSTINC1, 0
$5A92	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5A94	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5A96	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5A98	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5A9A	$	L__doprntf_126:
$5A9A	$	L__doprntf_125:
$5A9A	$	L__doprntf_118:
$5A9A	$0108	    			MOVLB	8
$5A9C	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5AA0	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5AA4	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$5AA8	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$5AAC	$EC26	F01E			CALL	_double2longword
$5AB0	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$5AB4	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$5AB8	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$5ABC	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$5AC0	$0E02	    			MOVLW	2
$5AC2	$6E04	    			MOVWF	STACK_4, 0
$5AC4	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$5AC8	$0E00	    			MOVLW	0
$5ACA	$6E01	    			MOVWF	STACK_0+1, 0
$5ACC	$6E02	    			MOVWF	STACK_0+2, 0
$5ACE	$6E03	    			MOVWF	STACK_0+3, 0
$5AD0	$5004	    			MOVF	STACK_4, 0, 0
$5AD2	$	L__doprntf_346:
$5AD2	$0100	    			MOVLB	0
$5AD4	$E007	    			BZ	L__doprntf_347
$5AD6	$3600	    			RLCF	STACK_0, 1, 0
$5AD8	$9000	    			BCF	STACK_0, 0, 0
$5ADA	$3601	    			RLCF	STACK_0+1, 1, 0
$5ADC	$3602	    			RLCF	STACK_0+2, 1, 0
$5ADE	$3603	    			RLCF	STACK_0+3, 1, 0
$5AE0	$0FFF	    			ADDLW	255
$5AE2	$D7F7	    			BRA	L__doprntf_346
$5AE4	$	L__doprntf_347:
$5AE4	$0E0E	    			MOVLW	#doprntf_dpowers
$5AE6	$2600	    			ADDWF	STACK_0, 1, 0
$5AE8	$0ED1	    			MOVLW	@#doprntf_dpowers
$5AEA	$2201	    			ADDWFC	STACK_0+1, 1, 0
$5AEC	$0E00	    			MOVLW	@@#doprntf_dpowers
$5AEE	$2202	    			ADDWFC	STACK_0+2, 1, 0
$5AF0	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$5AF4	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$5AF8	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$5AFC	$0009	    			TBLRD*+
$5AFE	$CFF5	F004			MOVFF	TABLAT, STACK_4
$5B02	$0009	    			TBLRD*+
$5B04	$CFF5	F005			MOVFF	TABLAT, STACK_4+1
$5B08	$0009	    			TBLRD*+
$5B0A	$CFF5	F006			MOVFF	TABLAT, STACK_4+2
$5B0E	$0009	    			TBLRD*+
$5B10	$CFF5	F007			MOVFF	TABLAT, STACK_4+3
$5B14	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$5B18	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$5B1C	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$5B20	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$5B24	$ECCE	F003			CALL	_div_32x32_u
$5B28	$0E30	    			MOVLW	48
$5B2A	$2600	    			ADDWF	STACK_0, 1, 0
$5B2C	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5B30	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5B34	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$5B38	$0108	    			MOVLB	8
$5B3A	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5B3C	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5B3E	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5B40	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5B42	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$5B44	$11BB	    			IORWF	_doprntf_prec_L0+1, 0, 1
$5B46	$E102	    			BNZ	L807_ex_L__doprntf_129
$5B48	$A7C0	    			BTFSS	_doprntf_flag_L0+1, 3, 1
$5B4A	$D077	    			BRA	L__doprntf_129
$5B4C	$	L807_ex_L__doprntf_129:
$5B4C	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5B50	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5B54	$0E2E	    			MOVLW	46
$5B56	$6EE6	    			MOVWF	POSTINC1, 0
$5B58	$0108	    			MOVLB	8
$5B5A	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5B5C	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5B5E	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5B60	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5B62	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$5B64	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$5B66	$0E00	    			MOVLW	0
$5B68	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$5B6A	$	L__doprntf_130:
$5B6A	$0108	    			MOVLB	8
$5B6C	$53BC	    			MOVF	_doprntf_c_L0, 1, 1
$5B6E	$E053	    			BZ	L__doprntf_131
$5B70	$07BC	    			DECF	_doprntf_c_L0, 1, 1
$5B72	$0E02	    			MOVLW	2
$5B74	$6E04	    			MOVWF	STACK_4, 0
$5B76	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$5B7A	$0E00	    			MOVLW	0
$5B7C	$6E01	    			MOVWF	STACK_0+1, 0
$5B7E	$6E02	    			MOVWF	STACK_0+2, 0
$5B80	$6E03	    			MOVWF	STACK_0+3, 0
$5B82	$5004	    			MOVF	STACK_4, 0, 0
$5B84	$	L__doprntf_348:
$5B84	$0108	    			MOVLB	8
$5B86	$E007	    			BZ	L__doprntf_349
$5B88	$3600	    			RLCF	STACK_0, 1, 0
$5B8A	$9000	    			BCF	STACK_0, 0, 0
$5B8C	$3601	    			RLCF	STACK_0+1, 1, 0
$5B8E	$3602	    			RLCF	STACK_0+2, 1, 0
$5B90	$3603	    			RLCF	STACK_0+3, 1, 0
$5B92	$0FFF	    			ADDLW	255
$5B94	$D7F7	    			BRA	L__doprntf_348
$5B96	$	L__doprntf_349:
$5B96	$0E0E	    			MOVLW	#doprntf_dpowers
$5B98	$2600	    			ADDWF	STACK_0, 1, 0
$5B9A	$0ED1	    			MOVLW	@#doprntf_dpowers
$5B9C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$5B9E	$0E00	    			MOVLW	@@#doprntf_dpowers
$5BA0	$2202	    			ADDWFC	STACK_0+2, 1, 0
$5BA2	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$5BA6	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$5BAA	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$5BAE	$0009	    			TBLRD*+
$5BB0	$CFF5	F004			MOVFF	TABLAT, STACK_4
$5BB4	$0009	    			TBLRD*+
$5BB6	$CFF5	F005			MOVFF	TABLAT, STACK_4+1
$5BBA	$0009	    			TBLRD*+
$5BBC	$CFF5	F006			MOVFF	TABLAT, STACK_4+2
$5BC0	$0009	    			TBLRD*+
$5BC2	$CFF5	F007			MOVFF	TABLAT, STACK_4+3
$5BC6	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$5BCA	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$5BCE	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$5BD2	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$5BD6	$ECCE	F003			CALL	_div_32x32_u
$5BDA	$0E0A	    			MOVLW	10
$5BDC	$6E04	    			MOVWF	STACK_4, 0
$5BDE	$0E00	    			MOVLW	0
$5BE0	$6E05	    			MOVWF	STACK_4+1, 0
$5BE2	$6E06	    			MOVWF	STACK_4+2, 0
$5BE4	$6E07	    			MOVWF	STACK_4+3, 0
$5BE6	$ECCE	F003			CALL	_div_32x32_u
$5BEA	$C008	F000			MOVFF	STACK_8, STACK_0
$5BEE	$C009	F001			MOVFF	STACK_9, STACK_1
$5BF2	$C00A	F002			MOVFF	STACK_10, STACK_2
$5BF6	$C00B	F003			MOVFF	STACK_11, STACK_3
$5BFA	$0E30	    			MOVLW	48
$5BFC	$2600	    			ADDWF	STACK_0, 1, 0
$5BFE	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5C02	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5C06	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$5C0A	$0108	    			MOVLB	8
$5C0C	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5C0E	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5C10	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5C12	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5C14	$D7AA	    			BRA	L__doprntf_130
$5C16	$	L__doprntf_131:
$5C16	$	L__doprntf_132:
$5C16	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$5C18	$11BB	    			IORWF	_doprntf_prec_L0+1, 0, 1
$5C1A	$E00F	    			BZ	L__doprntf_133
$5C1C	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5C20	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5C24	$0E30	    			MOVLW	48
$5C26	$6EE6	    			MOVWF	POSTINC1, 0
$5C28	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5C2A	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5C2C	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5C2E	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5C30	$0E01	    			MOVLW	1
$5C32	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$5C34	$0E00	    			MOVLW	0
$5C36	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$5C38	$D7EE	    			BRA	L__doprntf_132
$5C3A	$	L__doprntf_133:
$5C3A	$	L__doprntf_129:
$5C3A	$ABBF	    			BTFSS	_doprntf_flag_L0, 5, 1
$5C3C	$D00B	    			BRA	L__doprntf_134
$5C3E	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5C42	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5C46	$0E45	    			MOVLW	69
$5C48	$6EE6	    			MOVWF	POSTINC1, 0
$5C4A	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5C4C	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5C4E	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5C50	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5C52	$D00A	    			BRA	L__doprntf_135
$5C54	$	L__doprntf_134:
$5C54	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5C58	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5C5C	$0E65	    			MOVLW	101
$5C5E	$6EE6	    			MOVWF	POSTINC1, 0
$5C60	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5C62	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5C64	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5C66	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5C68	$	L__doprntf_135:
$5C68	$0E80	    			MOVLW	128
$5C6A	$19C8	    			XORWF	_doprntf_exp_L0+1, 0, 1
$5C6C	$6E00	    			MOVWF	STACK_0, 0
$5C6E	$0E80	    			MOVLW	128
$5C70	$5C00	    			SUBWF	STACK_0, 0, 0
$5C72	$E102	    			BNZ	L__doprntf_350
$5C74	$0E00	    			MOVLW	0
$5C76	$5DC7	    			SUBWF	_doprntf_exp_L0, 0, 1
$5C78	$	L__doprntf_350:
$5C78	$E212	    			BC	L__doprntf_136
$5C7A	$51C7	    			MOVF	_doprntf_exp_L0, 0, 1
$5C7C	$0800	    			SUBLW	0
$5C7E	$6FC7	    			MOVWF	_doprntf_exp_L0, 1
$5C80	$C8C8	F8C8			MOVFF	_doprntf_exp_L0+1, _doprntf_exp_L0+1
$5C84	$6AE8	    			CLRF	WREG, 0
$5C86	$57C8	    			SUBFWB	_doprntf_exp_L0+1, 1, 1
$5C88	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5C8C	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5C90	$0E2D	    			MOVLW	45
$5C92	$6EE6	    			MOVWF	POSTINC1, 0
$5C94	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5C96	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5C98	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5C9A	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5C9C	$D00B	    			BRA	L__doprntf_137
$5C9E	$	L__doprntf_136:
$5C9E	$0108	    			MOVLB	8
$5CA0	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5CA4	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5CA8	$0E2B	    			MOVLW	43
$5CAA	$6EE6	    			MOVWF	POSTINC1, 0
$5CAC	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5CAE	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5CB0	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5CB2	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5CB4	$	L__doprntf_137:
$5CB4	$0E0A	    			MOVLW	10
$5CB6	$6E04	    			MOVWF	STACK_4, 0
$5CB8	$0E00	    			MOVLW	0
$5CBA	$6E05	    			MOVWF	STACK_4+1, 0
$5CBC	$C8C7	F000			MOVFF	_doprntf_exp_L0, STACK_0
$5CC0	$C8C8	F001			MOVFF	_doprntf_exp_L0+1, STACK_0+1
$5CC4	$EC6F	F006			CALL	_div_16x16_s
$5CC8	$0E30	    			MOVLW	48
$5CCA	$2600	    			ADDWF	STACK_0, 1, 0
$5CCC	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5CD0	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5CD4	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$5CD8	$0108	    			MOVLB	8
$5CDA	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5CDC	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5CDE	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5CE0	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5CE2	$0E0A	    			MOVLW	10
$5CE4	$6E04	    			MOVWF	STACK_4, 0
$5CE6	$0E00	    			MOVLW	0
$5CE8	$6E05	    			MOVWF	STACK_4+1, 0
$5CEA	$C8C7	F000			MOVFF	_doprntf_exp_L0, STACK_0
$5CEE	$C8C8	F001			MOVFF	_doprntf_exp_L0+1, STACK_0+1
$5CF2	$EC6F	F006			CALL	_div_16x16_s
$5CF6	$C008	F000			MOVFF	STACK_8, STACK_0
$5CFA	$C009	F001			MOVFF	STACK_9, STACK_1
$5CFE	$0E30	    			MOVLW	48
$5D00	$2600	    			ADDWF	STACK_0, 1, 0
$5D02	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5D06	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5D0A	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$5D0E	$0108	    			MOVLB	8
$5D10	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5D12	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5D14	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5D16	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5D18	$A7BF	    			BTFSS	_doprntf_flag_L0, 3, 1
$5D1A	$D01B	    			BRA	L__doprntf_140
$5D1C	$0E80	    			MOVLW	128
$5D1E	$6E00	    			MOVWF	STACK_0, 0
$5D20	$0E80	    			MOVLW	128
$5D22	$19BE	    			XORWF	_doprntf_width_L0+1, 0, 1
$5D24	$5C00	    			SUBWF	STACK_0, 0, 0
$5D26	$E102	    			BNZ	L__doprntf_351
$5D28	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$5D2A	$0800	    			SUBLW	0
$5D2C	$	L__doprntf_351:
$5D2C	$E212	    			BC	L__doprntf_140
$5D2E	$	L900_ex_L__doprntf_140:
$5D2E	$	L__doprntf_141:
$5D2E	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$5D32	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$5D36	$0E20	    			MOVLW	32
$5D38	$6EE6	    			MOVWF	POSTINC1, 0
$5D3A	$0108	    			MOVLB	8
$5D3C	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$5D3E	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$5D40	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$5D42	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$5D44	$0E01	    			MOVLW	1
$5D46	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$5D48	$0E00	    			MOVLW	0
$5D4A	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$5D4C	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$5D4E	$11BE	    			IORWF	_doprntf_width_L0+1, 0, 1
$5D50	$E1EE	    			BNZ	L__doprntf_141
$5D52	$	L__doprntf_142:
$5D52	$	L__doprntf_140:
$5D52	$0108	    			MOVLB	8
$5D54	$EF27	F026			GOTO	L__doprntf_10
$5D58	$	L__doprntf_86:
$5D58	$0108	    			MOVLB	8
$5D5A	$A3C0	    			BTFSS	_doprntf_flag_L0+1, 1, 1
$5D5C	$D100	    			BRA	L__doprntf_143
$5D5E	$0E80	    			MOVLW	128
$5D60	$19C8	    			XORWF	_doprntf_exp_L0+1, 0, 1
$5D62	$6E00	    			MOVWF	STACK_0, 0
$5D64	$0E80	    			MOVLW	128
$5D66	$5C00	    			SUBWF	STACK_0, 0, 0
$5D68	$E102	    			BNZ	L__doprntf_352
$5D6A	$0E00	    			MOVLW	0
$5D6C	$5DC7	    			SUBWF	_doprntf_exp_L0, 0, 1
$5D6E	$	L__doprntf_352:
$5D6E	$E20B	    			BC	L__doprntf_144
$5D70	$0E01	    			MOVLW	1
$5D72	$0108	    			MOVLB	8
$5D74	$5DC7	    			SUBWF	_doprntf_exp_L0, 0, 1
$5D76	$6E00	    			MOVWF	STACK_0, 0
$5D78	$0E00	    			MOVLW	0
$5D7A	$59C8	    			SUBWFB	_doprntf_exp_L0+1, 0, 1
$5D7C	$6E01	    			MOVWF	STACK_0+1, 0
$5D7E	$5000	    			MOVF	STACK_0, 0, 0
$5D80	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$5D82	$5001	    			MOVF	STACK_0+1, 0, 0
$5D84	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$5D86	$	L__doprntf_144:
$5D86	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5D8A	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5D8E	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$5D92	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$5D96	$EC26	F01E			CALL	_double2longword
$5D9A	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$5D9E	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$5DA2	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$5DA6	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$5DAA	$0E01	    			MOVLW	1
$5DAC	$0108	    			MOVLB	8
$5DAE	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$5DB0	$	L__doprntf_145:
$5DB0	$0108	    			MOVLB	8
$5DB2	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$5DB4	$0A0A	    			XORLW	10
$5DB6	$E03A	    			BZ	L__doprntf_146
$5DB8	$0E02	    			MOVLW	2
$5DBA	$6E04	    			MOVWF	STACK_4, 0
$5DBC	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$5DC0	$0E00	    			MOVLW	0
$5DC2	$6E01	    			MOVWF	STACK_0+1, 0
$5DC4	$6E02	    			MOVWF	STACK_0+2, 0
$5DC6	$6E03	    			MOVWF	STACK_0+3, 0
$5DC8	$5004	    			MOVF	STACK_4, 0, 0
$5DCA	$	L__doprntf_353:
$5DCA	$0108	    			MOVLB	8
$5DCC	$E007	    			BZ	L__doprntf_354
$5DCE	$3600	    			RLCF	STACK_0, 1, 0
$5DD0	$9000	    			BCF	STACK_0, 0, 0
$5DD2	$3601	    			RLCF	STACK_0+1, 1, 0
$5DD4	$3602	    			RLCF	STACK_0+2, 1, 0
$5DD6	$3603	    			RLCF	STACK_0+3, 1, 0
$5DD8	$0FFF	    			ADDLW	255
$5DDA	$D7F7	    			BRA	L__doprntf_353
$5DDC	$	L__doprntf_354:
$5DDC	$0E0E	    			MOVLW	#doprntf_dpowers
$5DDE	$2600	    			ADDWF	STACK_0, 1, 0
$5DE0	$0ED1	    			MOVLW	@#doprntf_dpowers
$5DE2	$2201	    			ADDWFC	STACK_0+1, 1, 0
$5DE4	$0E00	    			MOVLW	@@#doprntf_dpowers
$5DE6	$2202	    			ADDWFC	STACK_0+2, 1, 0
$5DE8	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$5DEC	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$5DF0	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$5DF4	$0009	    			TBLRD*+
$5DF6	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$5DFA	$0009	    			TBLRD*+
$5DFC	$CFF5	F8CE			MOVFF	TABLAT, FLOC__doprntf+27
$5E00	$0009	    			TBLRD*+
$5E02	$CFF5	F8CF			MOVFF	TABLAT, FLOC__doprntf+28
$5E06	$0009	    			TBLRD*+
$5E08	$CFF5	F8D0			MOVFF	TABLAT, FLOC__doprntf+29
$5E0C	$0108	    			MOVLB	8
$5E0E	$51D0	    			MOVF	FLOC__doprntf+29, 0, 1
$5E10	$5DCC	    			SUBWF	_doprntf__val_L0+3, 0, 1
$5E12	$E108	    			BNZ	L__doprntf_355
$5E14	$51CF	    			MOVF	FLOC__doprntf+28, 0, 1
$5E16	$5DCB	    			SUBWF	_doprntf__val_L0+2, 0, 1
$5E18	$E105	    			BNZ	L__doprntf_355
$5E1A	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$5E1C	$5DCA	    			SUBWF	_doprntf__val_L0+1, 0, 1
$5E1E	$E102	    			BNZ	L__doprntf_355
$5E20	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$5E22	$5DC9	    			SUBWF	_doprntf__val_L0, 0, 1
$5E24	$	L__doprntf_355:
$5E24	$E303	    			BNC	L__doprntf_146
$5E26	$	L__doprntf_148:
$5E26	$	L__doprntf_147:
$5E26	$0108	    			MOVLB	8
$5E28	$2BBC	    			INCF	_doprntf_c_L0, 1, 1
$5E2A	$D7C2	    			BRA	L__doprntf_145
$5E2C	$	L__doprntf_146:
$5E2C	$0108	    			MOVLB	8
$5E2E	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$5E30	$5DBA	    			SUBWF	_doprntf_prec_L0, 0, 1
$5E32	$6FD1	    			MOVWF	FLOC__doprntf+30, 1
$5E34	$0E00	    			MOVLW	0
$5E36	$59BB	    			SUBWFB	_doprntf_prec_L0+1, 0, 1
$5E38	$6FD2	    			MOVWF	FLOC__doprntf+31, 1
$5E3A	$C8D1	F8BA			MOVFF	FLOC__doprntf+30, _doprntf_prec_L0
$5E3E	$C8D2	F8BB			MOVFF	FLOC__doprntf+31, _doprntf_prec_L0+1
$5E42	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$5E46	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$5E4A	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$5E4E	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$5E52	$ECC3	F01E			CALL	_longword2double
$5E56	$C000	F004			MOVFF	STACK_0, STACK_4
$5E5A	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$5E5E	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$5E62	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$5E66	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5E6A	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5E6E	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$5E72	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$5E76	$ECD7	F01E			CALL	_sub_32x32_fp
$5E7A	$C000	F8CD			MOVFF	STACK_0, FLOC__doprntf+26
$5E7E	$C001	F8CE			MOVFF	STACK_0+1, FLOC__doprntf+27
$5E82	$C002	F8CF			MOVFF	STACK_0+2, FLOC__doprntf+28
$5E86	$C003	F8D0			MOVFF	STACK_0+3, FLOC__doprntf+29
$5E8A	$C8D1	F8D5			MOVFF	FLOC__doprntf+30, FARG_doprntf_scale+0
$5E8E	$EC2F	F018			CALL	doprntf_scale
$5E92	$C8CD	F004			MOVFF	FLOC__doprntf+26, STACK_4
$5E96	$C8CE	F005			MOVFF	FLOC__doprntf+27, STACK_4+1
$5E9A	$C8CF	F006			MOVFF	FLOC__doprntf+28, STACK_4+2
$5E9E	$C8D0	F007			MOVFF	FLOC__doprntf+29, STACK_4+3
$5EA2	$EC35	F00D			CALL	_mul_32x32_fp
$5EA6	$0E00	    			MOVLW	0
$5EA8	$6E04	    			MOVWF	STACK_4, 0
$5EAA	$0E00	    			MOVLW	0
$5EAC	$6E05	    			MOVWF	STACK_4+1, 0
$5EAE	$0E00	    			MOVLW	0
$5EB0	$6E06	    			MOVWF	STACK_4+2, 0
$5EB2	$0E7E	    			MOVLW	126
$5EB4	$6E07	    			MOVWF	STACK_4+3, 0
$5EB6	$ECDD	F00D			CALL	_add_32x32_fp
$5EBA	$EC26	F01E			CALL	_double2longword
$5EBE	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$5EC2	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$5EC6	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$5ECA	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$5ECE	$	L__doprntf_149:
$5ECE	$0108	    			MOVLB	8
$5ED0	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$5ED2	$11BB	    			IORWF	_doprntf_prec_L0+1, 0, 1
$5ED4	$E044	    			BZ	L__doprntf_150
$5ED6	$0E0A	    			MOVLW	10
$5ED8	$6E04	    			MOVWF	STACK_4, 0
$5EDA	$0E00	    			MOVLW	0
$5EDC	$6E05	    			MOVWF	STACK_4+1, 0
$5EDE	$6E06	    			MOVWF	STACK_4+2, 0
$5EE0	$6E07	    			MOVWF	STACK_4+3, 0
$5EE2	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$5EE6	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$5EEA	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$5EEE	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$5EF2	$ECCE	F003			CALL	_div_32x32_u
$5EF6	$C008	F000			MOVFF	STACK_8, STACK_0
$5EFA	$C009	F001			MOVFF	STACK_9, STACK_1
$5EFE	$C00A	F002			MOVFF	STACK_10, STACK_2
$5F02	$C00B	F003			MOVFF	STACK_11, STACK_3
$5F06	$0E00	    			MOVLW	0
$5F08	$0108	    			MOVLB	8
$5F0A	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$5F0C	$1803	    			XORWF	STACK_0+3, 0, 0
$5F0E	$E108	    			BNZ	L__doprntf_356
$5F10	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$5F12	$1802	    			XORWF	STACK_0+2, 0, 0
$5F14	$E105	    			BNZ	L__doprntf_356
$5F16	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$5F18	$1801	    			XORWF	STACK_0+1, 0, 0
$5F1A	$E102	    			BNZ	L__doprntf_356
$5F1C	$5000	    			MOVF	STACK_0, 0, 0
$5F1E	$0A00	    			XORLW	0
$5F20	$	L__doprntf_356:
$5F20	$E11E	    			BNZ	L__doprntf_150
$5F22	$	L961_ex_L__doprntf_150:
$5F22	$0E0A	    			MOVLW	10
$5F24	$6E04	    			MOVWF	STACK_4, 0
$5F26	$0E00	    			MOVLW	0
$5F28	$6E05	    			MOVWF	STACK_4+1, 0
$5F2A	$6E06	    			MOVWF	STACK_4+2, 0
$5F2C	$6E07	    			MOVWF	STACK_4+3, 0
$5F2E	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$5F32	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$5F36	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$5F3A	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$5F3E	$ECCE	F003			CALL	_div_32x32_u
$5F42	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$5F46	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$5F4A	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$5F4E	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$5F52	$0E01	    			MOVLW	1
$5F54	$0108	    			MOVLB	8
$5F56	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$5F58	$0E00	    			MOVLW	0
$5F5A	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$5F5C	$D7B8	    			BRA	L__doprntf_149
$5F5E	$	L__doprntf_150:
$5F5E	$	L__doprntf_143:
$5F5E	$0108	    			MOVLB	8
$5F60	$0E80	    			MOVLW	128
$5F62	$6E00	    			MOVWF	STACK_0, 0
$5F64	$0E80	    			MOVLW	128
$5F66	$0108	    			MOVLB	8
$5F68	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$5F6A	$5C00	    			SUBWF	STACK_0, 0, 0
$5F6C	$E102	    			BNZ	L__doprntf_357
$5F6E	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$5F70	$080C	    			SUBLW	12
$5F72	$	L__doprntf_357:
$5F72	$E316	    			BNC	L__doprntf_153
$5F74	$C8BA	F8D5			MOVFF	_doprntf_prec_L0, FARG_doprntf_fround+0
$5F78	$EC35	F01B			CALL	doprntf_fround
$5F7C	$C8C3	F004			MOVFF	_doprntf_fval_L0, STACK_4
$5F80	$C8C4	F005			MOVFF	_doprntf_fval_L0+1, STACK_4+1
$5F84	$C8C5	F006			MOVFF	_doprntf_fval_L0+2, STACK_4+2
$5F88	$C8C6	F007			MOVFF	_doprntf_fval_L0+3, STACK_4+3
$5F8C	$ECDD	F00D			CALL	_add_32x32_fp
$5F90	$C000	F8C3			MOVFF	STACK_0, _doprntf_fval_L0
$5F94	$C001	F8C4			MOVFF	STACK_0+1, _doprntf_fval_L0+1
$5F98	$C002	F8C5			MOVFF	STACK_0+2, _doprntf_fval_L0+2
$5F9C	$C003	F8C6			MOVFF	STACK_0+3, _doprntf_fval_L0+3
$5FA0	$	L__doprntf_153:
$5FA0	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5FA4	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5FA8	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$5FAC	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$5FB0	$6A04	    			CLRF	STACK_4, 0
$5FB2	$6A05	    			CLRF	STACK_4+1, 0
$5FB4	$6A06	    			CLRF	STACK_4+2, 0
$5FB6	$6A07	    			CLRF	STACK_4+3, 0
$5FB8	$EC64	F01D			CALL	_equals_double
$5FBC	$0E00	    			MOVLW	0
$5FBE	$A4D8	    			BTFSS	STATUS, Z, 0
$5FC0	$0E01	    			MOVLW	1
$5FC2	$6E00	    			MOVWF	STACK_0, 0
$5FC4	$5200	    			MOVF	STACK_0, 1, 0
$5FC6	$B4D8	    			BTFSC	STATUS, Z, 0
$5FC8	$D078	    			BRA	L__doprntf_156
$5FCA	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$5FCE	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$5FD2	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$5FD6	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$5FDA	$EC26	F01E			CALL	_double2longword
$5FDE	$0E00	    			MOVLW	0
$5FE0	$0108	    			MOVLB	8
$5FE2	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$5FE4	$1803	    			XORWF	STACK_0+3, 0, 0
$5FE6	$E108	    			BNZ	L__doprntf_358
$5FE8	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$5FEA	$1802	    			XORWF	STACK_0+2, 0, 0
$5FEC	$E105	    			BNZ	L__doprntf_358
$5FEE	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$5FF0	$1801	    			XORWF	STACK_0+1, 0, 0
$5FF2	$E102	    			BNZ	L__doprntf_358
$5FF4	$5000	    			MOVF	STACK_0, 0, 0
$5FF6	$0A00	    			XORLW	0
$5FF8	$	L__doprntf_358:
$5FF8	$E160	    			BNZ	L__doprntf_156
$5FFA	$0E80	    			MOVLW	128
$5FFC	$6E00	    			MOVWF	STACK_0, 0
$5FFE	$0E80	    			MOVLW	128
$6000	$19C8	    			XORWF	_doprntf_exp_L0+1, 0, 1
$6002	$5C00	    			SUBWF	STACK_0, 0, 0
$6004	$E102	    			BNZ	L__doprntf_359
$6006	$51C7	    			MOVF	_doprntf_exp_L0, 0, 1
$6008	$0801	    			SUBLW	1
$600A	$	L__doprntf_359:
$600A	$E257	    			BC	L__doprntf_156
$600C	$	L989_ex_L__doprntf_156:
$600C	$C8C7	F8D5			MOVFF	_doprntf_exp_L0, FARG_doprntf_scale+0
$6010	$EC2F	F018			CALL	doprntf_scale
$6014	$C000	F004			MOVFF	STACK_0, STACK_4
$6018	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$601C	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$6020	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$6024	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$6028	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$602C	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$6030	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$6034	$EC7C	F01D			CALL	_div_32x32_fp
$6038	$0E5F	    			MOVLW	95
$603A	$6E04	    			MOVWF	STACK_4, 0
$603C	$0E70	    			MOVLW	112
$603E	$6E05	    			MOVWF	STACK_4+1, 0
$6040	$0E09	    			MOVLW	9
$6042	$6E06	    			MOVWF	STACK_4+2, 0
$6044	$0E81	    			MOVLW	129
$6046	$6E07	    			MOVWF	STACK_4+3, 0
$6048	$ECFC	F01C			CALL	_compare_double
$604C	$0E01	    			MOVLW	1
$604E	$B0D8	    			BTFSC	STATUS, C, 0
$6050	$0E00	    			MOVLW	0
$6052	$6E00	    			MOVWF	STACK_0, 0
$6054	$5200	    			MOVF	STACK_0, 1, 0
$6056	$E006	    			BZ	L__doprntf_157
$6058	$0E09	    			MOVLW	9
$605A	$0108	    			MOVLB	8
$605C	$5FC7	    			SUBWF	_doprntf_exp_L0, 1, 1
$605E	$0E00	    			MOVLW	0
$6060	$5BC8	    			SUBWFB	_doprntf_exp_L0+1, 1, 1
$6062	$D005	    			BRA	L__doprntf_158
$6064	$	L__doprntf_157:
$6064	$0E08	    			MOVLW	8
$6066	$0108	    			MOVLB	8
$6068	$5FC7	    			SUBWF	_doprntf_exp_L0, 1, 1
$606A	$0E00	    			MOVLW	0
$606C	$5BC8	    			SUBWFB	_doprntf_exp_L0+1, 1, 1
$606E	$	L__doprntf_158:
$606E	$C8C7	F8D5			MOVFF	_doprntf_exp_L0, FARG_doprntf_scale+0
$6072	$EC2F	F018			CALL	doprntf_scale
$6076	$C000	F004			MOVFF	STACK_0, STACK_4
$607A	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$607E	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$6082	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$6086	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$608A	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$608E	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$6092	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$6096	$EC7C	F01D			CALL	_div_32x32_fp
$609A	$EC26	F01E			CALL	_double2longword
$609E	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$60A2	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$60A6	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$60AA	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$60AE	$0108	    			MOVLB	8
$60B0	$6BC3	    			CLRF	_doprntf_fval_L0, 1
$60B2	$6BC4	    			CLRF	_doprntf_fval_L0+1, 1
$60B4	$6BC5	    			CLRF	_doprntf_fval_L0+2, 1
$60B6	$6BC6	    			CLRF	_doprntf_fval_L0+3, 1
$60B8	$D039	    			BRA	L__doprntf_159
$60BA	$	L__doprntf_156:
$60BA	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$60BE	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$60C2	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$60C6	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$60CA	$EC26	F01E			CALL	_double2longword
$60CE	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$60D2	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$60D6	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$60DA	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$60DE	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$60E2	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$60E6	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$60EA	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$60EE	$ECC3	F01E			CALL	_longword2double
$60F2	$C000	F004			MOVFF	STACK_0, STACK_4
$60F6	$C001	F005			MOVFF	STACK_0+1, STACK_4+1
$60FA	$C002	F006			MOVFF	STACK_0+2, STACK_4+2
$60FE	$C003	F007			MOVFF	STACK_0+3, STACK_4+3
$6102	$C8C3	F000			MOVFF	_doprntf_fval_L0, STACK_0
$6106	$C8C4	F001			MOVFF	_doprntf_fval_L0+1, STACK_0+1
$610A	$C8C5	F002			MOVFF	_doprntf_fval_L0+2, STACK_0+2
$610E	$C8C6	F003			MOVFF	_doprntf_fval_L0+3, STACK_0+3
$6112	$ECD7	F01E			CALL	_sub_32x32_fp
$6116	$C000	F8C3			MOVFF	STACK_0, _doprntf_fval_L0
$611A	$C001	F8C4			MOVFF	STACK_0+1, _doprntf_fval_L0+1
$611E	$C002	F8C5			MOVFF	STACK_0+2, _doprntf_fval_L0+2
$6122	$C003	F8C6			MOVFF	STACK_0+3, _doprntf_fval_L0+3
$6126	$0108	    			MOVLB	8
$6128	$6BC7	    			CLRF	_doprntf_exp_L0, 1
$612A	$6BC8	    			CLRF	_doprntf_exp_L0+1, 1
$612C	$	L__doprntf_159:
$612C	$0E01	    			MOVLW	1
$612E	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$6130	$	L__doprntf_160:
$6130	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$6132	$0A0A	    			XORLW	10
$6134	$E039	    			BZ	L__doprntf_161
$6136	$0E02	    			MOVLW	2
$6138	$6E04	    			MOVWF	STACK_4, 0
$613A	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$613E	$0E00	    			MOVLW	0
$6140	$6E01	    			MOVWF	STACK_0+1, 0
$6142	$6E02	    			MOVWF	STACK_0+2, 0
$6144	$6E03	    			MOVWF	STACK_0+3, 0
$6146	$5004	    			MOVF	STACK_4, 0, 0
$6148	$	L__doprntf_360:
$6148	$0108	    			MOVLB	8
$614A	$E007	    			BZ	L__doprntf_361
$614C	$3600	    			RLCF	STACK_0, 1, 0
$614E	$9000	    			BCF	STACK_0, 0, 0
$6150	$3601	    			RLCF	STACK_0+1, 1, 0
$6152	$3602	    			RLCF	STACK_0+2, 1, 0
$6154	$3603	    			RLCF	STACK_0+3, 1, 0
$6156	$0FFF	    			ADDLW	255
$6158	$D7F7	    			BRA	L__doprntf_360
$615A	$	L__doprntf_361:
$615A	$0108	    			MOVLB	8
$615C	$0E0E	    			MOVLW	#doprntf_dpowers
$615E	$2600	    			ADDWF	STACK_0, 1, 0
$6160	$0ED1	    			MOVLW	@#doprntf_dpowers
$6162	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6164	$0E00	    			MOVLW	@@#doprntf_dpowers
$6166	$2202	    			ADDWFC	STACK_0+2, 1, 0
$6168	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$616C	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$6170	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$6174	$0009	    			TBLRD*+
$6176	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$617A	$0009	    			TBLRD*+
$617C	$CFF5	F8CE			MOVFF	TABLAT, FLOC__doprntf+27
$6180	$0009	    			TBLRD*+
$6182	$CFF5	F8CF			MOVFF	TABLAT, FLOC__doprntf+28
$6186	$0009	    			TBLRD*+
$6188	$CFF5	F8D0			MOVFF	TABLAT, FLOC__doprntf+29
$618C	$51D0	    			MOVF	FLOC__doprntf+29, 0, 1
$618E	$5DCC	    			SUBWF	_doprntf__val_L0+3, 0, 1
$6190	$E108	    			BNZ	L__doprntf_362
$6192	$51CF	    			MOVF	FLOC__doprntf+28, 0, 1
$6194	$5DCB	    			SUBWF	_doprntf__val_L0+2, 0, 1
$6196	$E105	    			BNZ	L__doprntf_362
$6198	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$619A	$5DCA	    			SUBWF	_doprntf__val_L0+1, 0, 1
$619C	$E102	    			BNZ	L__doprntf_362
$619E	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$61A0	$5DC9	    			SUBWF	_doprntf__val_L0, 0, 1
$61A2	$	L__doprntf_362:
$61A2	$E302	    			BNC	L__doprntf_161
$61A4	$	L__doprntf_163:
$61A4	$	L__doprntf_162:
$61A4	$2BBC	    			INCF	_doprntf_c_L0, 1, 1
$61A6	$D7C4	    			BRA	L__doprntf_160
$61A8	$	L__doprntf_161:
$61A8	$0108	    			MOVLB	8
$61AA	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$61AC	$25BA	    			ADDWF	_doprntf_prec_L0, 0, 1
$61AE	$6E00	    			MOVWF	STACK_0, 0
$61B0	$0E00	    			MOVLW	0
$61B2	$21BB	    			ADDWFC	_doprntf_prec_L0+1, 0, 1
$61B4	$6E01	    			MOVWF	STACK_0+1, 0
$61B6	$51C7	    			MOVF	_doprntf_exp_L0, 0, 1
$61B8	$2600	    			ADDWF	STACK_0, 1, 0
$61BA	$51C8	    			MOVF	_doprntf_exp_L0+1, 0, 1
$61BC	$2201	    			ADDWFC	STACK_0+1, 1, 0
$61BE	$5000	    			MOVF	STACK_0, 0, 0
$61C0	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$61C2	$5001	    			MOVF	STACK_0+1, 0, 0
$61C4	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$61C6	$B7C0	    			BTFSC	_doprntf_flag_L0+1, 3, 1
$61C8	$D003	    			BRA	L1046_ex_L__doprntf_166
$61CA	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$61CC	$11BB	    			IORWF	_doprntf_prec_L0+1, 0, 1
$61CE	$E004	    			BZ	L__doprntf_166
$61D0	$	L1046_ex_L__doprntf_166:
$61D0	$0E01	    			MOVLW	1
$61D2	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$61D4	$0E00	    			MOVLW	0
$61D6	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$61D8	$	L__doprntf_166:
$61D8	$0E03	    			MOVLW	3
$61DA	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$61DC	$6E00	    			MOVWF	STACK_0, 0
$61DE	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$61E2	$0E00	    			MOVLW	0
$61E4	$1601	    			ANDWF	STACK_0+1, 1, 0
$61E6	$5000	    			MOVF	STACK_0, 0, 0
$61E8	$1001	    			IORWF	STACK_0+1, 0, 0
$61EA	$E004	    			BZ	L__doprntf_167
$61EC	$0E01	    			MOVLW	1
$61EE	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$61F0	$0E00	    			MOVLW	0
$61F2	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$61F4	$	L__doprntf_167:
$61F4	$A5BF	    			BTFSS	_doprntf_flag_L0, 2, 1
$61F6	$D04A	    			BRA	L__doprntf_168
$61F8	$A3BF	    			BTFSS	_doprntf_flag_L0, 1, 1
$61FA	$D01A	    			BRA	L__doprntf_169
$61FC	$0E01	    			MOVLW	1
$61FE	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6200	$6E00	    			MOVWF	STACK_0, 0
$6202	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$6206	$0E00	    			MOVLW	0
$6208	$1601	    			ANDWF	STACK_0+1, 1, 0
$620A	$5000	    			MOVF	STACK_0, 0, 0
$620C	$1001	    			IORWF	STACK_0+1, 0, 0
$620E	$E003	    			BZ	L__doprntf_170
$6210	$0E2D	    			MOVLW	45
$6212	$6E00	    			MOVWF	STACK_0, 0
$6214	$D002	    			BRA	L__doprntf_171
$6216	$	L__doprntf_170:
$6216	$0E2B	    			MOVLW	43
$6218	$6E00	    			MOVWF	STACK_0, 0
$621A	$	L__doprntf_171:
$621A	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$621E	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6222	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$6226	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6228	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$622A	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$622C	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$622E	$D014	    			BRA	L__doprntf_172
$6230	$	L__doprntf_169:
$6230	$0E01	    			MOVLW	1
$6232	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6234	$6E00	    			MOVWF	STACK_0, 0
$6236	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$623A	$0E00	    			MOVLW	0
$623C	$1601	    			ANDWF	STACK_0+1, 1, 0
$623E	$5000	    			MOVF	STACK_0, 0, 0
$6240	$1001	    			IORWF	STACK_0+1, 0, 0
$6242	$E00A	    			BZ	L__doprntf_173
$6244	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6248	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$624C	$0E20	    			MOVLW	32
$624E	$6EE6	    			MOVWF	POSTINC1, 0
$6250	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6252	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6254	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6256	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6258	$	L__doprntf_173:
$6258	$	L__doprntf_172:
$6258	$	L__doprntf_174:
$6258	$0E80	    			MOVLW	128
$625A	$6E00	    			MOVWF	STACK_0, 0
$625C	$0E80	    			MOVLW	128
$625E	$19BE	    			XORWF	_doprntf_width_L0+1, 0, 1
$6260	$5C00	    			SUBWF	STACK_0, 0, 0
$6262	$E102	    			BNZ	L__doprntf_363
$6264	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$6266	$0800	    			SUBLW	0
$6268	$	L__doprntf_363:
$6268	$E20F	    			BC	L__doprntf_175
$626A	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$626E	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6272	$0E30	    			MOVLW	48
$6274	$6EE6	    			MOVWF	POSTINC1, 0
$6276	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6278	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$627A	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$627C	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$627E	$0E01	    			MOVLW	1
$6280	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$6282	$0E00	    			MOVLW	0
$6284	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$6286	$D7E8	    			BRA	L__doprntf_174
$6288	$	L__doprntf_175:
$6288	$0108	    			MOVLB	8
$628A	$D04B	    			BRA	L__doprntf_176
$628C	$	L__doprntf_168:
$628C	$B7BF	    			BTFSC	_doprntf_flag_L0, 3, 1
$628E	$D018	    			BRA	L__doprntf_177
$6290	$	L__doprntf_178:
$6290	$0E80	    			MOVLW	128
$6292	$6E00	    			MOVWF	STACK_0, 0
$6294	$0E80	    			MOVLW	128
$6296	$19BE	    			XORWF	_doprntf_width_L0+1, 0, 1
$6298	$5C00	    			SUBWF	STACK_0, 0, 0
$629A	$E102	    			BNZ	L__doprntf_364
$629C	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$629E	$0800	    			SUBLW	0
$62A0	$	L__doprntf_364:
$62A0	$E20F	    			BC	L__doprntf_179
$62A2	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$62A6	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$62AA	$0E20	    			MOVLW	32
$62AC	$6EE6	    			MOVWF	POSTINC1, 0
$62AE	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$62B0	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$62B2	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$62B4	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$62B6	$0E01	    			MOVLW	1
$62B8	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$62BA	$0E00	    			MOVLW	0
$62BC	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$62BE	$D7E8	    			BRA	L__doprntf_178
$62C0	$	L__doprntf_179:
$62C0	$	L__doprntf_177:
$62C0	$0108	    			MOVLB	8
$62C2	$A3BF	    			BTFSS	_doprntf_flag_L0, 1, 1
$62C4	$D01A	    			BRA	L__doprntf_180
$62C6	$0E01	    			MOVLW	1
$62C8	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$62CA	$6E00	    			MOVWF	STACK_0, 0
$62CC	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$62D0	$0E00	    			MOVLW	0
$62D2	$1601	    			ANDWF	STACK_0+1, 1, 0
$62D4	$5000	    			MOVF	STACK_0, 0, 0
$62D6	$1001	    			IORWF	STACK_0+1, 0, 0
$62D8	$E003	    			BZ	L__doprntf_181
$62DA	$0E2D	    			MOVLW	45
$62DC	$6E00	    			MOVWF	STACK_0, 0
$62DE	$D002	    			BRA	L__doprntf_182
$62E0	$	L__doprntf_181:
$62E0	$0E2B	    			MOVLW	43
$62E2	$6E00	    			MOVWF	STACK_0, 0
$62E4	$	L__doprntf_182:
$62E4	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$62E8	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$62EC	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$62F0	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$62F2	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$62F4	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$62F6	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$62F8	$D014	    			BRA	L__doprntf_183
$62FA	$	L__doprntf_180:
$62FA	$0E01	    			MOVLW	1
$62FC	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$62FE	$6E00	    			MOVWF	STACK_0, 0
$6300	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$6304	$0E00	    			MOVLW	0
$6306	$1601	    			ANDWF	STACK_0+1, 1, 0
$6308	$5000	    			MOVF	STACK_0, 0, 0
$630A	$1001	    			IORWF	STACK_0+1, 0, 0
$630C	$E00A	    			BZ	L__doprntf_184
$630E	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6312	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6316	$0E20	    			MOVLW	32
$6318	$6EE6	    			MOVWF	POSTINC1, 0
$631A	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$631C	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$631E	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6320	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6322	$	L__doprntf_184:
$6322	$	L__doprntf_183:
$6322	$	L__doprntf_176:
$6322	$	L__doprntf_185:
$6322	$0108	    			MOVLB	8
$6324	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$6328	$07BC	    			DECF	_doprntf_c_L0, 1, 1
$632A	$5200	    			MOVF	STACK_0, 1, 0
$632C	$E052	    			BZ	L__doprntf_186
$632E	$0E02	    			MOVLW	2
$6330	$6E04	    			MOVWF	STACK_4, 0
$6332	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$6336	$0E00	    			MOVLW	0
$6338	$6E01	    			MOVWF	STACK_0+1, 0
$633A	$6E02	    			MOVWF	STACK_0+2, 0
$633C	$6E03	    			MOVWF	STACK_0+3, 0
$633E	$5004	    			MOVF	STACK_4, 0, 0
$6340	$	L__doprntf_365:
$6340	$0108	    			MOVLB	8
$6342	$E007	    			BZ	L__doprntf_366
$6344	$3600	    			RLCF	STACK_0, 1, 0
$6346	$9000	    			BCF	STACK_0, 0, 0
$6348	$3601	    			RLCF	STACK_0+1, 1, 0
$634A	$3602	    			RLCF	STACK_0+2, 1, 0
$634C	$3603	    			RLCF	STACK_0+3, 1, 0
$634E	$0FFF	    			ADDLW	255
$6350	$D7F7	    			BRA	L__doprntf_365
$6352	$	L__doprntf_366:
$6352	$0E0E	    			MOVLW	#doprntf_dpowers
$6354	$2600	    			ADDWF	STACK_0, 1, 0
$6356	$0ED1	    			MOVLW	@#doprntf_dpowers
$6358	$2201	    			ADDWFC	STACK_0+1, 1, 0
$635A	$0E00	    			MOVLW	@@#doprntf_dpowers
$635C	$2202	    			ADDWFC	STACK_0+2, 1, 0
$635E	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$6362	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$6366	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$636A	$0009	    			TBLRD*+
$636C	$CFF5	F004			MOVFF	TABLAT, STACK_4
$6370	$0009	    			TBLRD*+
$6372	$CFF5	F005			MOVFF	TABLAT, STACK_4+1
$6376	$0009	    			TBLRD*+
$6378	$CFF5	F006			MOVFF	TABLAT, STACK_4+2
$637C	$0009	    			TBLRD*+
$637E	$CFF5	F007			MOVFF	TABLAT, STACK_4+3
$6382	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$6386	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$638A	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$638E	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$6392	$ECCE	F003			CALL	_div_32x32_u
$6396	$0E0A	    			MOVLW	10
$6398	$6E04	    			MOVWF	STACK_4, 0
$639A	$0E00	    			MOVLW	0
$639C	$6E05	    			MOVWF	STACK_4+1, 0
$639E	$6E06	    			MOVWF	STACK_4+2, 0
$63A0	$6E07	    			MOVWF	STACK_4+3, 0
$63A2	$ECCE	F003			CALL	_div_32x32_u
$63A6	$C008	F000			MOVFF	STACK_8, STACK_0
$63AA	$C009	F001			MOVFF	STACK_9, STACK_1
$63AE	$C00A	F002			MOVFF	STACK_10, STACK_2
$63B2	$C00B	F003			MOVFF	STACK_11, STACK_3
$63B6	$0E30	    			MOVLW	48
$63B8	$2600	    			ADDWF	STACK_0, 1, 0
$63BA	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$63BE	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$63C2	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$63C6	$0108	    			MOVLB	8
$63C8	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$63CA	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$63CC	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$63CE	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$63D0	$D7A8	    			BRA	L__doprntf_185
$63D2	$	L__doprntf_186:
$63D2	$	L__doprntf_187:
$63D2	$0E80	    			MOVLW	128
$63D4	$6E00	    			MOVWF	STACK_0, 0
$63D6	$0E80	    			MOVLW	128
$63D8	$19C8	    			XORWF	_doprntf_exp_L0+1, 0, 1
$63DA	$5C00	    			SUBWF	STACK_0, 0, 0
$63DC	$E102	    			BNZ	L__doprntf_367
$63DE	$51C7	    			MOVF	_doprntf_exp_L0, 0, 1
$63E0	$0800	    			SUBLW	0
$63E2	$	L__doprntf_367:
$63E2	$E20F	    			BC	L__doprntf_188
$63E4	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$63E8	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$63EC	$0E30	    			MOVLW	48
$63EE	$6EE6	    			MOVWF	POSTINC1, 0
$63F0	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$63F2	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$63F4	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$63F6	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$63F8	$0E01	    			MOVLW	1
$63FA	$5FC7	    			SUBWF	_doprntf_exp_L0, 1, 1
$63FC	$0E00	    			MOVLW	0
$63FE	$5BC8	    			SUBWFB	_doprntf_exp_L0+1, 1, 1
$6400	$D7E8	    			BRA	L__doprntf_187
$6402	$	L__doprntf_188:
$6402	$0108	    			MOVLB	8
$6404	$0E80	    			MOVLW	128
$6406	$0A00	    			XORLW	0
$6408	$6E00	    			MOVWF	STACK_0, 0
$640A	$0E80	    			MOVLW	128
$640C	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$640E	$5C00	    			SUBWF	STACK_0, 0, 0
$6410	$E102	    			BNZ	L__doprntf_368
$6412	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$6414	$0808	    			SUBLW	8
$6416	$	L__doprntf_368:
$6416	$E203	    			BC	L__doprntf_189
$6418	$0E08	    			MOVLW	8
$641A	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$641C	$D003	    			BRA	L__doprntf_190
$641E	$	L__doprntf_189:
$641E	$0108	    			MOVLB	8
$6420	$C8BA	F8BC			MOVFF	_doprntf_prec_L0, _doprntf_c_L0
$6424	$	L__doprntf_190:
$6424	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$6426	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$6428	$0E00	    			MOVLW	0
$642A	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$642C	$53BC	    			MOVF	_doprntf_c_L0, 1, 1
$642E	$E102	    			BNZ	L1186_ex_L__doprntf_193
$6430	$A7C0	    			BTFSS	_doprntf_flag_L0+1, 3, 1
$6432	$D00A	    			BRA	L__doprntf_193
$6434	$	L1186_ex_L__doprntf_193:
$6434	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6438	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$643C	$0E2E	    			MOVLW	46
$643E	$6EE6	    			MOVWF	POSTINC1, 0
$6440	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6442	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6444	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6446	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6448	$	L__doprntf_193:
$6448	$C8BC	F8D5			MOVFF	_doprntf_c_L0, FARG_doprntf_scale+0
$644C	$EC2F	F018			CALL	doprntf_scale
$6450	$C8C3	F004			MOVFF	_doprntf_fval_L0, STACK_4
$6454	$C8C4	F005			MOVFF	_doprntf_fval_L0+1, STACK_4+1
$6458	$C8C5	F006			MOVFF	_doprntf_fval_L0+2, STACK_4+2
$645C	$C8C6	F007			MOVFF	_doprntf_fval_L0+3, STACK_4+3
$6460	$EC35	F00D			CALL	_mul_32x32_fp
$6464	$ECDC	F01E			CALL	_double2longint
$6468	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$646C	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$6470	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$6474	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$6478	$	L__doprntf_194:
$6478	$0108	    			MOVLB	8
$647A	$53BC	    			MOVF	_doprntf_c_L0, 1, 1
$647C	$E053	    			BZ	L__doprntf_195
$647E	$07BC	    			DECF	_doprntf_c_L0, 1, 1
$6480	$0E02	    			MOVLW	2
$6482	$6E04	    			MOVWF	STACK_4, 0
$6484	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$6488	$0E00	    			MOVLW	0
$648A	$6E01	    			MOVWF	STACK_0+1, 0
$648C	$6E02	    			MOVWF	STACK_0+2, 0
$648E	$6E03	    			MOVWF	STACK_0+3, 0
$6490	$5004	    			MOVF	STACK_4, 0, 0
$6492	$	L__doprntf_369:
$6492	$0108	    			MOVLB	8
$6494	$E007	    			BZ	L__doprntf_370
$6496	$3600	    			RLCF	STACK_0, 1, 0
$6498	$9000	    			BCF	STACK_0, 0, 0
$649A	$3601	    			RLCF	STACK_0+1, 1, 0
$649C	$3602	    			RLCF	STACK_0+2, 1, 0
$649E	$3603	    			RLCF	STACK_0+3, 1, 0
$64A0	$0FFF	    			ADDLW	255
$64A2	$D7F7	    			BRA	L__doprntf_369
$64A4	$	L__doprntf_370:
$64A4	$0E0E	    			MOVLW	#doprntf_dpowers
$64A6	$2600	    			ADDWF	STACK_0, 1, 0
$64A8	$0ED1	    			MOVLW	@#doprntf_dpowers
$64AA	$2201	    			ADDWFC	STACK_0+1, 1, 0
$64AC	$0E00	    			MOVLW	@@#doprntf_dpowers
$64AE	$2202	    			ADDWFC	STACK_0+2, 1, 0
$64B0	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$64B4	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$64B8	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$64BC	$0009	    			TBLRD*+
$64BE	$CFF5	F004			MOVFF	TABLAT, STACK_4
$64C2	$0009	    			TBLRD*+
$64C4	$CFF5	F005			MOVFF	TABLAT, STACK_4+1
$64C8	$0009	    			TBLRD*+
$64CA	$CFF5	F006			MOVFF	TABLAT, STACK_4+2
$64CE	$0009	    			TBLRD*+
$64D0	$CFF5	F007			MOVFF	TABLAT, STACK_4+3
$64D4	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$64D8	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$64DC	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$64E0	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$64E4	$ECCE	F003			CALL	_div_32x32_u
$64E8	$0E0A	    			MOVLW	10
$64EA	$6E04	    			MOVWF	STACK_4, 0
$64EC	$0E00	    			MOVLW	0
$64EE	$6E05	    			MOVWF	STACK_4+1, 0
$64F0	$6E06	    			MOVWF	STACK_4+2, 0
$64F2	$6E07	    			MOVWF	STACK_4+3, 0
$64F4	$ECCE	F003			CALL	_div_32x32_u
$64F8	$C008	F000			MOVFF	STACK_8, STACK_0
$64FC	$C009	F001			MOVFF	STACK_9, STACK_1
$6500	$C00A	F002			MOVFF	STACK_10, STACK_2
$6504	$C00B	F003			MOVFF	STACK_11, STACK_3
$6508	$0E30	    			MOVLW	48
$650A	$2600	    			ADDWF	STACK_0, 1, 0
$650C	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6510	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6514	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$6518	$0108	    			MOVLB	8
$651A	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$651C	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$651E	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6520	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6522	$D7AA	    			BRA	L__doprntf_194
$6524	$	L__doprntf_195:
$6524	$	L__doprntf_196:
$6524	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$6526	$11BB	    			IORWF	_doprntf_prec_L0+1, 0, 1
$6528	$E00F	    			BZ	L__doprntf_197
$652A	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$652E	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6532	$0E30	    			MOVLW	48
$6534	$6EE6	    			MOVWF	POSTINC1, 0
$6536	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6538	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$653A	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$653C	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$653E	$0E01	    			MOVLW	1
$6540	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$6542	$0E00	    			MOVLW	0
$6544	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$6546	$D7EE	    			BRA	L__doprntf_196
$6548	$	L__doprntf_197:
$6548	$A7BF	    			BTFSS	_doprntf_flag_L0, 3, 1
$654A	$D01A	    			BRA	L__doprntf_200
$654C	$0E80	    			MOVLW	128
$654E	$6E00	    			MOVWF	STACK_0, 0
$6550	$0E80	    			MOVLW	128
$6552	$19BE	    			XORWF	_doprntf_width_L0+1, 0, 1
$6554	$5C00	    			SUBWF	STACK_0, 0, 0
$6556	$E102	    			BNZ	L__doprntf_371
$6558	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$655A	$0800	    			SUBLW	0
$655C	$	L__doprntf_371:
$655C	$E211	    			BC	L__doprntf_200
$655E	$	L1236_ex_L__doprntf_200:
$655E	$	L__doprntf_201:
$655E	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6562	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6566	$0E20	    			MOVLW	32
$6568	$6EE6	    			MOVWF	POSTINC1, 0
$656A	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$656C	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$656E	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6570	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6572	$0E01	    			MOVLW	1
$6574	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$6576	$0E00	    			MOVLW	0
$6578	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$657A	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$657C	$11BE	    			IORWF	_doprntf_width_L0+1, 0, 1
$657E	$E1EF	    			BNZ	L__doprntf_201
$6580	$	L__doprntf_202:
$6580	$	L__doprntf_200:
$6580	$0108	    			MOVLB	8
$6582	$EF27	F026			GOTO	L__doprntf_10
$6586	$	L__doprntf_70:
$6586	$0EC0	    			MOVLW	192
$6588	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$658A	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$658C	$C8C0	F8CE			MOVFF	_doprntf_flag_L0+1, FLOC__doprntf+27
$6590	$0E00	    			MOVLW	0
$6592	$17CE	    			ANDWF	FLOC__doprntf+27, 1, 1
$6594	$0E00	    			MOVLW	0
$6596	$19CE	    			XORWF	FLOC__doprntf+27, 0, 1
$6598	$E102	    			BNZ	L__doprntf_372
$659A	$0E00	    			MOVLW	0
$659C	$19CD	    			XORWF	FLOC__doprntf+26, 0, 1
$659E	$	L__doprntf_372:
$659E	$A4D8	    			BTFSS	STATUS, Z, 0
$65A0	$D082	    			BRA	L__doprntf_203
$65A2	$A9BF	    			BTFSS	_doprntf_flag_L0, 4, 1
$65A4	$D029	    			BRA	L__doprntf_204
$65A6	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$65AA	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$65AE	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$65B2	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$65B6	$C000	FFE9			MOVFF	STACK_0, FSR0L
$65BA	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$65BE	$CFEE	F8C9			MOVFF	POSTINC0, _doprntf__val_L0
$65C2	$CFEE	F8CA			MOVFF	POSTINC0, _doprntf__val_L0+1
$65C6	$CFEE	F8CB			MOVFF	POSTINC0, _doprntf__val_L0+2
$65CA	$CFEE	F8CC			MOVFF	POSTINC0, _doprntf__val_L0+3
$65CE	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$65D2	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$65D6	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$65DA	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$65DE	$0E04	    			MOVLW	4
$65E0	$2600	    			ADDWF	STACK_0, 1, 0
$65E2	$0E00	    			MOVLW	0
$65E4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$65E6	$C8B1	FFE1			MOVFF	FARG__doprntf+5, FSR1L
$65EA	$C8B2	FFE2			MOVFF	FARG__doprntf+6, FSR1H
$65EE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$65F2	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$65F6	$D02E	    			BRA	L__doprntf_205
$65F8	$	L__doprntf_204:
$65F8	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$65FC	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$6600	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$6604	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$6608	$C000	FFE9			MOVFF	STACK_0, FSR0L
$660C	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$6610	$CFEE	F8C9			MOVFF	POSTINC0, _doprntf__val_L0
$6614	$CFEE	F8CA			MOVFF	POSTINC0, _doprntf__val_L0+1
$6618	$0E00	    			MOVLW	0
$661A	$BFCA	    			BTFSC	_doprntf__val_L0+1, 7, 1
$661C	$0EFF	    			MOVLW	255
$661E	$6FCB	    			MOVWF	_doprntf__val_L0+2, 1
$6620	$6FCC	    			MOVWF	_doprntf__val_L0+3, 1
$6622	$0E00	    			MOVLW	0
$6624	$BFCA	    			BTFSC	_doprntf__val_L0+1, 7, 1
$6626	$0EFF	    			MOVLW	255
$6628	$6FCB	    			MOVWF	_doprntf__val_L0+2, 1
$662A	$6FCC	    			MOVWF	_doprntf__val_L0+3, 1
$662C	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$6630	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$6634	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$6638	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$663C	$0E02	    			MOVLW	2
$663E	$2600	    			ADDWF	STACK_0, 1, 0
$6640	$0E00	    			MOVLW	0
$6642	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6644	$C8B1	FFE1			MOVFF	FARG__doprntf+5, FSR1L
$6648	$C8B2	FFE2			MOVFF	FARG__doprntf+6, FSR1H
$664C	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$6650	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$6654	$	L__doprntf_205:
$6654	$0E80	    			MOVLW	128
$6656	$19CC	    			XORWF	_doprntf__val_L0+3, 0, 1
$6658	$6E00	    			MOVWF	STACK_0, 0
$665A	$0E80	    			MOVLW	128
$665C	$5C00	    			SUBWF	STACK_0, 0, 0
$665E	$E108	    			BNZ	L__doprntf_373
$6660	$0E00	    			MOVLW	0
$6662	$5DCB	    			SUBWF	_doprntf__val_L0+2, 0, 1
$6664	$E105	    			BNZ	L__doprntf_373
$6666	$0E00	    			MOVLW	0
$6668	$5DCA	    			SUBWF	_doprntf__val_L0+1, 0, 1
$666A	$E102	    			BNZ	L__doprntf_373
$666C	$0E00	    			MOVLW	0
$666E	$5DC9	    			SUBWF	_doprntf__val_L0, 0, 1
$6670	$	L__doprntf_373:
$6670	$E218	    			BC	L__doprntf_206
$6672	$0E03	    			MOVLW	3
$6674	$13BF	    			IORWF	_doprntf_flag_L0, 1, 1
$6676	$0E00	    			MOVLW	0
$6678	$13C0	    			IORWF	_doprntf_flag_L0+1, 1, 1
$667A	$6A00	    			CLRF	STACK_0, 0
$667C	$6A01	    			CLRF	STACK_0+1, 0
$667E	$6A02	    			CLRF	STACK_0+2, 0
$6680	$6A03	    			CLRF	STACK_0+3, 0
$6682	$51C9	    			MOVF	_doprntf__val_L0, 0, 1
$6684	$5E00	    			SUBWF	STACK_0, 1, 0
$6686	$51CA	    			MOVF	_doprntf__val_L0+1, 0, 1
$6688	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$668A	$51CB	    			MOVF	_doprntf__val_L0+2, 0, 1
$668C	$5A02	    			SUBWFB	STACK_0+2, 1, 0
$668E	$51CC	    			MOVF	_doprntf__val_L0+3, 0, 1
$6690	$5A03	    			SUBWFB	STACK_0+3, 1, 0
$6692	$C000	F8C9			MOVFF	STACK_0, _doprntf__val_L0
$6696	$C001	F8CA			MOVFF	STACK_0+1, _doprntf__val_L0+1
$669A	$C002	F8CB			MOVFF	STACK_0+2, _doprntf__val_L0+2
$669E	$C003	F8CC			MOVFF	STACK_0+3, _doprntf__val_L0+3
$66A2	$	L__doprntf_206:
$66A2	$0108	    			MOVLB	8
$66A4	$D056	    			BRA	L__doprntf_207
$66A6	$	L__doprntf_203:
$66A6	$0108	    			MOVLB	8
$66A8	$A9BF	    			BTFSS	_doprntf_flag_L0, 4, 1
$66AA	$D029	    			BRA	L__doprntf_208
$66AC	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$66B0	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$66B4	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$66B8	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$66BC	$C000	FFE9			MOVFF	STACK_0, FSR0L
$66C0	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$66C4	$CFEE	F8C9			MOVFF	POSTINC0, _doprntf__val_L0
$66C8	$CFEE	F8CA			MOVFF	POSTINC0, _doprntf__val_L0+1
$66CC	$CFEE	F8CB			MOVFF	POSTINC0, _doprntf__val_L0+2
$66D0	$CFEE	F8CC			MOVFF	POSTINC0, _doprntf__val_L0+3
$66D4	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$66D8	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$66DC	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$66E0	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$66E4	$0E04	    			MOVLW	4
$66E6	$2600	    			ADDWF	STACK_0, 1, 0
$66E8	$0E00	    			MOVLW	0
$66EA	$2201	    			ADDWFC	STACK_0+1, 1, 0
$66EC	$C8B1	FFE1			MOVFF	FARG__doprntf+5, FSR1L
$66F0	$C8B2	FFE2			MOVFF	FARG__doprntf+6, FSR1H
$66F4	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$66F8	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$66FC	$D02A	    			BRA	L__doprntf_209
$66FE	$	L__doprntf_208:
$66FE	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$6702	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$6706	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$670A	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$670E	$C000	FFE9			MOVFF	STACK_0, FSR0L
$6712	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$6716	$CFEE	F8C9			MOVFF	POSTINC0, _doprntf__val_L0
$671A	$CFEE	F8CA			MOVFF	POSTINC0, _doprntf__val_L0+1
$671E	$0E00	    			MOVLW	0
$6720	$6FCB	    			MOVWF	_doprntf__val_L0+2, 1
$6722	$6FCC	    			MOVWF	_doprntf__val_L0+3, 1
$6724	$0E00	    			MOVLW	0
$6726	$6FCB	    			MOVWF	_doprntf__val_L0+2, 1
$6728	$6FCC	    			MOVWF	_doprntf__val_L0+3, 1
$672A	$C8B1	FFE9			MOVFF	FARG__doprntf+5, FSR0L
$672E	$C8B2	FFEA			MOVFF	FARG__doprntf+6, FSR0H
$6732	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$6736	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$673A	$0E02	    			MOVLW	2
$673C	$2600	    			ADDWF	STACK_0, 1, 0
$673E	$0E00	    			MOVLW	0
$6740	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6742	$C8B1	FFE1			MOVFF	FARG__doprntf+5, FSR1L
$6746	$C8B2	FFE2			MOVFF	FARG__doprntf+6, FSR1H
$674A	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$674E	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
$6752	$	L__doprntf_209:
$6752	$	L__doprntf_207:
$6752	$0108	    			MOVLB	8
$6754	$0E00	    			MOVLW	0
$6756	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$6758	$E102	    			BNZ	L__doprntf_374
$675A	$0E00	    			MOVLW	0
$675C	$19BA	    			XORWF	_doprntf_prec_L0, 0, 1
$675E	$	L__doprntf_374:
$675E	$E10F	    			BNZ	L__doprntf_212
$6760	$0E00	    			MOVLW	0
$6762	$6E00	    			MOVWF	STACK_0, 0
$6764	$19CC	    			XORWF	_doprntf__val_L0+3, 0, 1
$6766	$E108	    			BNZ	L__doprntf_375
$6768	$5000	    			MOVF	STACK_0, 0, 0
$676A	$19CB	    			XORWF	_doprntf__val_L0+2, 0, 1
$676C	$E105	    			BNZ	L__doprntf_375
$676E	$5000	    			MOVF	STACK_0, 0, 0
$6770	$19CA	    			XORWF	_doprntf__val_L0+1, 0, 1
$6772	$E102	    			BNZ	L__doprntf_375
$6774	$51C9	    			MOVF	_doprntf__val_L0, 0, 1
$6776	$0A00	    			XORLW	0
$6778	$	L__doprntf_375:
$6778	$E102	    			BNZ	L__doprntf_212
$677A	$	L1308_ex_L__doprntf_212:
$677A	$4BBA	    			INFSNZ	_doprntf_prec_L0, 1, 1
$677C	$2BBB	    			INCF	_doprntf_prec_L0+1, 1, 1
$677E	$	L__doprntf_212:
$677E	$0108	    			MOVLB	8
$6780	$0EC0	    			MOVLW	192
$6782	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6784	$6E00	    			MOVWF	STACK_0, 0
$6786	$C000	F8D1			MOVFF	STACK_0, FLOC__doprntf+30
$678A	$D0C0	    			BRA	L__doprntf_213
$678C	$	L__doprntf_215:
$678C	$	L__doprntf_216:
$678C	$0E01	    			MOVLW	1
$678E	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$6790	$	L__doprntf_217:
$6790	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$6792	$0A0A	    			XORLW	10
$6794	$E039	    			BZ	L__doprntf_218
$6796	$0E02	    			MOVLW	2
$6798	$6E04	    			MOVWF	STACK_4, 0
$679A	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$679E	$0E00	    			MOVLW	0
$67A0	$6E01	    			MOVWF	STACK_0+1, 0
$67A2	$6E02	    			MOVWF	STACK_0+2, 0
$67A4	$6E03	    			MOVWF	STACK_0+3, 0
$67A6	$5004	    			MOVF	STACK_4, 0, 0
$67A8	$	L__doprntf_376:
$67A8	$0108	    			MOVLB	8
$67AA	$E007	    			BZ	L__doprntf_377
$67AC	$3600	    			RLCF	STACK_0, 1, 0
$67AE	$9000	    			BCF	STACK_0, 0, 0
$67B0	$3601	    			RLCF	STACK_0+1, 1, 0
$67B2	$3602	    			RLCF	STACK_0+2, 1, 0
$67B4	$3603	    			RLCF	STACK_0+3, 1, 0
$67B6	$0FFF	    			ADDLW	255
$67B8	$D7F7	    			BRA	L__doprntf_376
$67BA	$	L__doprntf_377:
$67BA	$0108	    			MOVLB	8
$67BC	$0E0E	    			MOVLW	#doprntf_dpowers
$67BE	$2600	    			ADDWF	STACK_0, 1, 0
$67C0	$0ED1	    			MOVLW	@#doprntf_dpowers
$67C2	$2201	    			ADDWFC	STACK_0+1, 1, 0
$67C4	$0E00	    			MOVLW	@@#doprntf_dpowers
$67C6	$2202	    			ADDWFC	STACK_0+2, 1, 0
$67C8	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$67CC	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$67D0	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$67D4	$0009	    			TBLRD*+
$67D6	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$67DA	$0009	    			TBLRD*+
$67DC	$CFF5	F8CE			MOVFF	TABLAT, FLOC__doprntf+27
$67E0	$0009	    			TBLRD*+
$67E2	$CFF5	F8CF			MOVFF	TABLAT, FLOC__doprntf+28
$67E6	$0009	    			TBLRD*+
$67E8	$CFF5	F8D0			MOVFF	TABLAT, FLOC__doprntf+29
$67EC	$51D0	    			MOVF	FLOC__doprntf+29, 0, 1
$67EE	$5DCC	    			SUBWF	_doprntf__val_L0+3, 0, 1
$67F0	$E108	    			BNZ	L__doprntf_378
$67F2	$51CF	    			MOVF	FLOC__doprntf+28, 0, 1
$67F4	$5DCB	    			SUBWF	_doprntf__val_L0+2, 0, 1
$67F6	$E105	    			BNZ	L__doprntf_378
$67F8	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$67FA	$5DCA	    			SUBWF	_doprntf__val_L0+1, 0, 1
$67FC	$E102	    			BNZ	L__doprntf_378
$67FE	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$6800	$5DC9	    			SUBWF	_doprntf__val_L0, 0, 1
$6802	$	L__doprntf_378:
$6802	$E302	    			BNC	L__doprntf_218
$6804	$	L__doprntf_220:
$6804	$	L__doprntf_219:
$6804	$2BBC	    			INCF	_doprntf_c_L0, 1, 1
$6806	$D7C4	    			BRA	L__doprntf_217
$6808	$	L__doprntf_218:
$6808	$0108	    			MOVLB	8
$680A	$D08F	    			BRA	L__doprntf_214
$680C	$	L__doprntf_221:
$680C	$0E01	    			MOVLW	1
$680E	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$6810	$	L__doprntf_222:
$6810	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$6812	$0A08	    			XORLW	8
$6814	$E039	    			BZ	L__doprntf_223
$6816	$0E02	    			MOVLW	2
$6818	$6E04	    			MOVWF	STACK_4, 0
$681A	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$681E	$0E00	    			MOVLW	0
$6820	$6E01	    			MOVWF	STACK_0+1, 0
$6822	$6E02	    			MOVWF	STACK_0+2, 0
$6824	$6E03	    			MOVWF	STACK_0+3, 0
$6826	$5004	    			MOVF	STACK_4, 0, 0
$6828	$	L__doprntf_379:
$6828	$0108	    			MOVLB	8
$682A	$E007	    			BZ	L__doprntf_380
$682C	$3600	    			RLCF	STACK_0, 1, 0
$682E	$9000	    			BCF	STACK_0, 0, 0
$6830	$3601	    			RLCF	STACK_0+1, 1, 0
$6832	$3602	    			RLCF	STACK_0+2, 1, 0
$6834	$3603	    			RLCF	STACK_0+3, 1, 0
$6836	$0FFF	    			ADDLW	255
$6838	$D7F7	    			BRA	L__doprntf_379
$683A	$	L__doprntf_380:
$683A	$0108	    			MOVLB	8
$683C	$0E36	    			MOVLW	#doprntf_hexpowers
$683E	$2600	    			ADDWF	STACK_0, 1, 0
$6840	$0ED1	    			MOVLW	@#doprntf_hexpowers
$6842	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6844	$0E00	    			MOVLW	@@#doprntf_hexpowers
$6846	$2202	    			ADDWFC	STACK_0+2, 1, 0
$6848	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$684C	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$6850	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$6854	$0009	    			TBLRD*+
$6856	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$685A	$0009	    			TBLRD*+
$685C	$CFF5	F8CE			MOVFF	TABLAT, FLOC__doprntf+27
$6860	$0009	    			TBLRD*+
$6862	$CFF5	F8CF			MOVFF	TABLAT, FLOC__doprntf+28
$6866	$0009	    			TBLRD*+
$6868	$CFF5	F8D0			MOVFF	TABLAT, FLOC__doprntf+29
$686C	$51D0	    			MOVF	FLOC__doprntf+29, 0, 1
$686E	$5DCC	    			SUBWF	_doprntf__val_L0+3, 0, 1
$6870	$E108	    			BNZ	L__doprntf_381
$6872	$51CF	    			MOVF	FLOC__doprntf+28, 0, 1
$6874	$5DCB	    			SUBWF	_doprntf__val_L0+2, 0, 1
$6876	$E105	    			BNZ	L__doprntf_381
$6878	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$687A	$5DCA	    			SUBWF	_doprntf__val_L0+1, 0, 1
$687C	$E102	    			BNZ	L__doprntf_381
$687E	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$6880	$5DC9	    			SUBWF	_doprntf__val_L0, 0, 1
$6882	$	L__doprntf_381:
$6882	$E302	    			BNC	L__doprntf_223
$6884	$	L__doprntf_225:
$6884	$	L__doprntf_224:
$6884	$2BBC	    			INCF	_doprntf_c_L0, 1, 1
$6886	$D7C4	    			BRA	L__doprntf_222
$6888	$	L__doprntf_223:
$6888	$0108	    			MOVLB	8
$688A	$D04F	    			BRA	L__doprntf_214
$688C	$	L__doprntf_226:
$688C	$0E01	    			MOVLW	1
$688E	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$6890	$	L__doprntf_227:
$6890	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$6892	$0A0C	    			XORLW	12
$6894	$E039	    			BZ	L__doprntf_228
$6896	$0E02	    			MOVLW	2
$6898	$6E04	    			MOVWF	STACK_4, 0
$689A	$C8BC	F000			MOVFF	_doprntf_c_L0, STACK_0
$689E	$0E00	    			MOVLW	0
$68A0	$6E01	    			MOVWF	STACK_0+1, 0
$68A2	$6E02	    			MOVWF	STACK_0+2, 0
$68A4	$6E03	    			MOVWF	STACK_0+3, 0
$68A6	$5004	    			MOVF	STACK_4, 0, 0
$68A8	$	L__doprntf_382:
$68A8	$0108	    			MOVLB	8
$68AA	$E007	    			BZ	L__doprntf_383
$68AC	$3600	    			RLCF	STACK_0, 1, 0
$68AE	$9000	    			BCF	STACK_0, 0, 0
$68B0	$3601	    			RLCF	STACK_0+1, 1, 0
$68B2	$3602	    			RLCF	STACK_0+2, 1, 0
$68B4	$3603	    			RLCF	STACK_0+3, 1, 0
$68B6	$0FFF	    			ADDLW	255
$68B8	$D7F7	    			BRA	L__doprntf_382
$68BA	$	L__doprntf_383:
$68BA	$0108	    			MOVLB	8
$68BC	$0E56	    			MOVLW	#doprntf_octpowers
$68BE	$2600	    			ADDWF	STACK_0, 1, 0
$68C0	$0ED1	    			MOVLW	@#doprntf_octpowers
$68C2	$2201	    			ADDWFC	STACK_0+1, 1, 0
$68C4	$0E00	    			MOVLW	@@#doprntf_octpowers
$68C6	$2202	    			ADDWFC	STACK_0+2, 1, 0
$68C8	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$68CC	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$68D0	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$68D4	$0009	    			TBLRD*+
$68D6	$CFF5	F8CD			MOVFF	TABLAT, FLOC__doprntf+26
$68DA	$0009	    			TBLRD*+
$68DC	$CFF5	F8CE			MOVFF	TABLAT, FLOC__doprntf+27
$68E0	$0009	    			TBLRD*+
$68E2	$CFF5	F8CF			MOVFF	TABLAT, FLOC__doprntf+28
$68E6	$0009	    			TBLRD*+
$68E8	$CFF5	F8D0			MOVFF	TABLAT, FLOC__doprntf+29
$68EC	$51D0	    			MOVF	FLOC__doprntf+29, 0, 1
$68EE	$5DCC	    			SUBWF	_doprntf__val_L0+3, 0, 1
$68F0	$E108	    			BNZ	L__doprntf_384
$68F2	$51CF	    			MOVF	FLOC__doprntf+28, 0, 1
$68F4	$5DCB	    			SUBWF	_doprntf__val_L0+2, 0, 1
$68F6	$E105	    			BNZ	L__doprntf_384
$68F8	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$68FA	$5DCA	    			SUBWF	_doprntf__val_L0+1, 0, 1
$68FC	$E102	    			BNZ	L__doprntf_384
$68FE	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$6900	$5DC9	    			SUBWF	_doprntf__val_L0, 0, 1
$6902	$	L__doprntf_384:
$6902	$E302	    			BNC	L__doprntf_228
$6904	$	L__doprntf_230:
$6904	$	L__doprntf_229:
$6904	$2BBC	    			INCF	_doprntf_c_L0, 1, 1
$6906	$D7C4	    			BRA	L__doprntf_227
$6908	$	L__doprntf_228:
$6908	$0108	    			MOVLB	8
$690A	$D00F	    			BRA	L__doprntf_214
$690C	$	L__doprntf_213:
$690C	$51D1	    			MOVF	FLOC__doprntf+30, 0, 1
$690E	$0A00	    			XORLW	0
$6910	$B4D8	    			BTFSC	STATUS, Z, 0
$6912	$D73C	    			BRA	L__doprntf_215
$6914	$51D1	    			MOVF	FLOC__doprntf+30, 0, 1
$6916	$0AC0	    			XORLW	192
$6918	$B4D8	    			BTFSC	STATUS, Z, 0
$691A	$D738	    			BRA	L__doprntf_216
$691C	$51D1	    			MOVF	FLOC__doprntf+30, 0, 1
$691E	$0A80	    			XORLW	128
$6920	$B4D8	    			BTFSC	STATUS, Z, 0
$6922	$D774	    			BRA	L__doprntf_221
$6924	$51D1	    			MOVF	FLOC__doprntf+30, 0, 1
$6926	$0A40	    			XORLW	64
$6928	$E0B1	    			BZ	L__doprntf_226
$692A	$	L__doprntf_214:
$692A	$0108	    			MOVLB	8
$692C	$0E80	    			MOVLW	128
$692E	$6E00	    			MOVWF	STACK_0, 0
$6930	$0E80	    			MOVLW	128
$6932	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$6934	$5C00	    			SUBWF	STACK_0, 0, 0
$6936	$E102	    			BNZ	L__doprntf_385
$6938	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$693A	$5DBC	    			SUBWF	_doprntf_c_L0, 0, 1
$693C	$	L__doprntf_385:
$693C	$E203	    			BC	L__doprntf_231
$693E	$C8BA	F8BC			MOVFF	_doprntf_prec_L0, _doprntf_c_L0
$6942	$D00E	    			BRA	L__doprntf_232
$6944	$	L__doprntf_231:
$6944	$0108	    			MOVLB	8
$6946	$0E80	    			MOVLW	128
$6948	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$694A	$6E00	    			MOVWF	STACK_0, 0
$694C	$0E80	    			MOVLW	128
$694E	$5C00	    			SUBWF	STACK_0, 0, 0
$6950	$E102	    			BNZ	L__doprntf_386
$6952	$51BC	    			MOVF	_doprntf_c_L0, 0, 1
$6954	$5DBA	    			SUBWF	_doprntf_prec_L0, 0, 1
$6956	$	L__doprntf_386:
$6956	$E204	    			BC	L__doprntf_233
$6958	$C8BC	F8BA			MOVFF	_doprntf_c_L0, _doprntf_prec_L0
$695C	$0E00	    			MOVLW	0
$695E	$6FBB	    			MOVWF	_doprntf_prec_L0+1, 1
$6960	$	L__doprntf_233:
$6960	$	L__doprntf_232:
$6960	$0108	    			MOVLB	8
$6962	$0108	    			MOVLB	8
$6964	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$6966	$11BE	    			IORWF	_doprntf_width_L0+1, 0, 1
$6968	$E00E	    			BZ	L__doprntf_236
$696A	$0E03	    			MOVLW	3
$696C	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$696E	$6E00	    			MOVWF	STACK_0, 0
$6970	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$6974	$0E00	    			MOVLW	0
$6976	$1601	    			ANDWF	STACK_0+1, 1, 0
$6978	$5000	    			MOVF	STACK_0, 0, 0
$697A	$1001	    			IORWF	STACK_0+1, 0, 0
$697C	$E004	    			BZ	L__doprntf_236
$697E	$	L1399_ex_L__doprntf_236:
$697E	$0E01	    			MOVLW	1
$6980	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$6982	$0E00	    			MOVLW	0
$6984	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$6986	$	L__doprntf_236:
$6986	$0E80	    			MOVLW	128
$6988	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$698A	$6E00	    			MOVWF	STACK_0, 0
$698C	$0E80	    			MOVLW	128
$698E	$19BE	    			XORWF	_doprntf_width_L0+1, 0, 1
$6990	$5C00	    			SUBWF	STACK_0, 0, 0
$6992	$E102	    			BNZ	L__doprntf_387
$6994	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$6996	$5DBA	    			SUBWF	_doprntf_prec_L0, 0, 1
$6998	$	L__doprntf_387:
$6998	$E205	    			BC	L__doprntf_237
$699A	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$699C	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$699E	$51BB	    			MOVF	_doprntf_prec_L0+1, 0, 1
$69A0	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$69A2	$D003	    			BRA	L__doprntf_238
$69A4	$	L__doprntf_237:
$69A4	$0108	    			MOVLB	8
$69A6	$6BBD	    			CLRF	_doprntf_width_L0, 1
$69A8	$6BBE	    			CLRF	_doprntf_width_L0+1, 1
$69AA	$	L__doprntf_238:
$69AA	$0EC4	    			MOVLW	196
$69AC	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$69AE	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$69B0	$51C0	    			MOVF	_doprntf_flag_L0+1, 0, 1
$69B2	$0B08	    			ANDLW	8
$69B4	$6FCE	    			MOVWF	FLOC__doprntf+27, 1
$69B6	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$69B8	$0A08	    			XORLW	8
$69BA	$E102	    			BNZ	L__doprntf_388
$69BC	$0E40	    			MOVLW	64
$69BE	$19CD	    			XORWF	FLOC__doprntf+26, 0, 1
$69C0	$	L__doprntf_388:
$69C0	$E108	    			BNZ	L__doprntf_239
$69C2	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$69C4	$11BE	    			IORWF	_doprntf_width_L0+1, 0, 1
$69C6	$E004	    			BZ	L__doprntf_240
$69C8	$0E01	    			MOVLW	1
$69CA	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$69CC	$0E00	    			MOVLW	0
$69CE	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$69D0	$	L__doprntf_240:
$69D0	$D01E	    			BRA	L__doprntf_241
$69D2	$	L__doprntf_239:
$69D2	$0108	    			MOVLB	8
$69D4	$0EC0	    			MOVLW	192
$69D6	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$69D8	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$69DA	$51C0	    			MOVF	_doprntf_flag_L0+1, 0, 1
$69DC	$0B08	    			ANDLW	8
$69DE	$6FCE	    			MOVWF	FLOC__doprntf+27, 1
$69E0	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$69E2	$0A08	    			XORLW	8
$69E4	$E102	    			BNZ	L__doprntf_389
$69E6	$0E80	    			MOVLW	128
$69E8	$19CD	    			XORWF	FLOC__doprntf+26, 0, 1
$69EA	$	L__doprntf_389:
$69EA	$E111	    			BNZ	L__doprntf_242
$69EC	$0E80	    			MOVLW	128
$69EE	$6E00	    			MOVWF	STACK_0, 0
$69F0	$0E80	    			MOVLW	128
$69F2	$19BE	    			XORWF	_doprntf_width_L0+1, 0, 1
$69F4	$5C00	    			SUBWF	STACK_0, 0, 0
$69F6	$E102	    			BNZ	L__doprntf_390
$69F8	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$69FA	$0802	    			SUBLW	2
$69FC	$	L__doprntf_390:
$69FC	$E205	    			BC	L__doprntf_243
$69FE	$0E02	    			MOVLW	2
$6A00	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$6A02	$0E00	    			MOVLW	0
$6A04	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$6A06	$D003	    			BRA	L__doprntf_244
$6A08	$	L__doprntf_243:
$6A08	$0108	    			MOVLB	8
$6A0A	$6BBD	    			CLRF	_doprntf_width_L0, 1
$6A0C	$6BBE	    			CLRF	_doprntf_width_L0+1, 1
$6A0E	$	L__doprntf_244:
$6A0E	$	L__doprntf_242:
$6A0E	$	L__doprntf_241:
$6A0E	$0108	    			MOVLB	8
$6A10	$0108	    			MOVLB	8
$6A12	$A5BF	    			BTFSS	_doprntf_flag_L0, 2, 1
$6A14	$D06E	    			BRA	L__doprntf_245
$6A16	$A3BF	    			BTFSS	_doprntf_flag_L0, 1, 1
$6A18	$D01A	    			BRA	L__doprntf_246
$6A1A	$0E01	    			MOVLW	1
$6A1C	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6A1E	$6E00	    			MOVWF	STACK_0, 0
$6A20	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$6A24	$0E00	    			MOVLW	0
$6A26	$1601	    			ANDWF	STACK_0+1, 1, 0
$6A28	$5000	    			MOVF	STACK_0, 0, 0
$6A2A	$1001	    			IORWF	STACK_0+1, 0, 0
$6A2C	$E003	    			BZ	L__doprntf_247
$6A2E	$0E2D	    			MOVLW	45
$6A30	$6E00	    			MOVWF	STACK_0, 0
$6A32	$D002	    			BRA	L__doprntf_248
$6A34	$	L__doprntf_247:
$6A34	$0E2B	    			MOVLW	43
$6A36	$6E00	    			MOVWF	STACK_0, 0
$6A38	$	L__doprntf_248:
$6A38	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6A3C	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6A40	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$6A44	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6A46	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6A48	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6A4A	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6A4C	$D03C	    			BRA	L__doprntf_249
$6A4E	$	L__doprntf_246:
$6A4E	$0E01	    			MOVLW	1
$6A50	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6A52	$6E00	    			MOVWF	STACK_0, 0
$6A54	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$6A58	$0E00	    			MOVLW	0
$6A5A	$1601	    			ANDWF	STACK_0+1, 1, 0
$6A5C	$5000	    			MOVF	STACK_0, 0, 0
$6A5E	$1001	    			IORWF	STACK_0+1, 0, 0
$6A60	$E00B	    			BZ	L__doprntf_250
$6A62	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6A66	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6A6A	$0E20	    			MOVLW	32
$6A6C	$6EE6	    			MOVWF	POSTINC1, 0
$6A6E	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6A70	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6A72	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6A74	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6A76	$D027	    			BRA	L__doprntf_251
$6A78	$	L__doprntf_250:
$6A78	$0EC0	    			MOVLW	192
$6A7A	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6A7C	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$6A7E	$51C0	    			MOVF	_doprntf_flag_L0+1, 0, 1
$6A80	$0B08	    			ANDLW	8
$6A82	$6FCE	    			MOVWF	FLOC__doprntf+27, 1
$6A84	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$6A86	$0A08	    			XORLW	8
$6A88	$E102	    			BNZ	L__doprntf_391
$6A8A	$0E80	    			MOVLW	128
$6A8C	$19CD	    			XORWF	FLOC__doprntf+26, 0, 1
$6A8E	$	L__doprntf_391:
$6A8E	$E11B	    			BNZ	L__doprntf_252
$6A90	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6A94	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6A98	$0E30	    			MOVLW	48
$6A9A	$6EE6	    			MOVWF	POSTINC1, 0
$6A9C	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6A9E	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6AA0	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6AA2	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6AA4	$ABBF	    			BTFSS	_doprntf_flag_L0, 5, 1
$6AA6	$D003	    			BRA	L__doprntf_253
$6AA8	$0E58	    			MOVLW	88
$6AAA	$6E00	    			MOVWF	STACK_0, 0
$6AAC	$D002	    			BRA	L__doprntf_254
$6AAE	$	L__doprntf_253:
$6AAE	$0E78	    			MOVLW	120
$6AB0	$6E00	    			MOVWF	STACK_0, 0
$6AB2	$	L__doprntf_254:
$6AB2	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6AB6	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6ABA	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$6ABE	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6AC0	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6AC2	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6AC4	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6AC6	$	L__doprntf_252:
$6AC6	$	L__doprntf_251:
$6AC6	$	L__doprntf_249:
$6AC6	$0108	    			MOVLB	8
$6AC8	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$6ACA	$11BE	    			IORWF	_doprntf_width_L0+1, 0, 1
$6ACC	$E011	    			BZ	L__doprntf_255
$6ACE	$	L__doprntf_256:
$6ACE	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6AD2	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6AD6	$0E30	    			MOVLW	48
$6AD8	$6EE6	    			MOVWF	POSTINC1, 0
$6ADA	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6ADC	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6ADE	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6AE0	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6AE2	$0E01	    			MOVLW	1
$6AE4	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$6AE6	$0E00	    			MOVLW	0
$6AE8	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$6AEA	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$6AEC	$11BE	    			IORWF	_doprntf_width_L0+1, 0, 1
$6AEE	$E1EF	    			BNZ	L__doprntf_256
$6AF0	$	L__doprntf_257:
$6AF0	$	L__doprntf_255:
$6AF0	$D085	    			BRA	L__doprntf_258
$6AF2	$	L__doprntf_245:
$6AF2	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$6AF4	$11BE	    			IORWF	_doprntf_width_L0+1, 0, 1
$6AF6	$E013	    			BZ	L__doprntf_261
$6AF8	$B7BF	    			BTFSC	_doprntf_flag_L0, 3, 1
$6AFA	$D011	    			BRA	L__doprntf_261
$6AFC	$	L1507_ex_L__doprntf_261:
$6AFC	$	L__doprntf_262:
$6AFC	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6B00	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6B04	$0E20	    			MOVLW	32
$6B06	$6EE6	    			MOVWF	POSTINC1, 0
$6B08	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6B0A	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6B0C	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6B0E	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6B10	$0E01	    			MOVLW	1
$6B12	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$6B14	$0E00	    			MOVLW	0
$6B16	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$6B18	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$6B1A	$11BE	    			IORWF	_doprntf_width_L0+1, 0, 1
$6B1C	$E1EF	    			BNZ	L__doprntf_262
$6B1E	$	L__doprntf_263:
$6B1E	$	L__doprntf_261:
$6B1E	$A3BF	    			BTFSS	_doprntf_flag_L0, 1, 1
$6B20	$D01A	    			BRA	L__doprntf_264
$6B22	$0E01	    			MOVLW	1
$6B24	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6B26	$6E00	    			MOVWF	STACK_0, 0
$6B28	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$6B2C	$0E00	    			MOVLW	0
$6B2E	$1601	    			ANDWF	STACK_0+1, 1, 0
$6B30	$5000	    			MOVF	STACK_0, 0, 0
$6B32	$1001	    			IORWF	STACK_0+1, 0, 0
$6B34	$E003	    			BZ	L__doprntf_265
$6B36	$0E2D	    			MOVLW	45
$6B38	$6E00	    			MOVWF	STACK_0, 0
$6B3A	$D002	    			BRA	L__doprntf_266
$6B3C	$	L__doprntf_265:
$6B3C	$0E2B	    			MOVLW	43
$6B3E	$6E00	    			MOVWF	STACK_0, 0
$6B40	$	L__doprntf_266:
$6B40	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6B44	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6B48	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$6B4C	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6B4E	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6B50	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6B52	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6B54	$D014	    			BRA	L__doprntf_267
$6B56	$	L__doprntf_264:
$6B56	$0E01	    			MOVLW	1
$6B58	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6B5A	$6E00	    			MOVWF	STACK_0, 0
$6B5C	$C8C0	F001			MOVFF	_doprntf_flag_L0+1, STACK_0+1
$6B60	$0E00	    			MOVLW	0
$6B62	$1601	    			ANDWF	STACK_0+1, 1, 0
$6B64	$5000	    			MOVF	STACK_0, 0, 0
$6B66	$1001	    			IORWF	STACK_0+1, 0, 0
$6B68	$E00A	    			BZ	L__doprntf_268
$6B6A	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6B6E	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6B72	$0E20	    			MOVLW	32
$6B74	$6EE6	    			MOVWF	POSTINC1, 0
$6B76	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6B78	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6B7A	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6B7C	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6B7E	$	L__doprntf_268:
$6B7E	$	L__doprntf_267:
$6B7E	$0EC0	    			MOVLW	192
$6B80	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6B82	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$6B84	$51C0	    			MOVF	_doprntf_flag_L0+1, 0, 1
$6B86	$0B08	    			ANDLW	8
$6B88	$6FCE	    			MOVWF	FLOC__doprntf+27, 1
$6B8A	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$6B8C	$0A08	    			XORLW	8
$6B8E	$E102	    			BNZ	L__doprntf_392
$6B90	$0E40	    			MOVLW	64
$6B92	$19CD	    			XORWF	FLOC__doprntf+26, 0, 1
$6B94	$	L__doprntf_392:
$6B94	$E10B	    			BNZ	L__doprntf_269
$6B96	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6B9A	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6B9E	$0E30	    			MOVLW	48
$6BA0	$6EE6	    			MOVWF	POSTINC1, 0
$6BA2	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6BA4	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6BA6	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6BA8	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6BAA	$D028	    			BRA	L__doprntf_270
$6BAC	$	L__doprntf_269:
$6BAC	$0108	    			MOVLB	8
$6BAE	$0EC0	    			MOVLW	192
$6BB0	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6BB2	$6FCD	    			MOVWF	FLOC__doprntf+26, 1
$6BB4	$51C0	    			MOVF	_doprntf_flag_L0+1, 0, 1
$6BB6	$0B08	    			ANDLW	8
$6BB8	$6FCE	    			MOVWF	FLOC__doprntf+27, 1
$6BBA	$51CE	    			MOVF	FLOC__doprntf+27, 0, 1
$6BBC	$0A08	    			XORLW	8
$6BBE	$E102	    			BNZ	L__doprntf_393
$6BC0	$0E80	    			MOVLW	128
$6BC2	$19CD	    			XORWF	FLOC__doprntf+26, 0, 1
$6BC4	$	L__doprntf_393:
$6BC4	$E11B	    			BNZ	L__doprntf_271
$6BC6	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6BCA	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6BCE	$0E30	    			MOVLW	48
$6BD0	$6EE6	    			MOVWF	POSTINC1, 0
$6BD2	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6BD4	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6BD6	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6BD8	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6BDA	$ABBF	    			BTFSS	_doprntf_flag_L0, 5, 1
$6BDC	$D003	    			BRA	L__doprntf_272
$6BDE	$0E58	    			MOVLW	88
$6BE0	$6E00	    			MOVWF	STACK_0, 0
$6BE2	$D002	    			BRA	L__doprntf_273
$6BE4	$	L__doprntf_272:
$6BE4	$0E78	    			MOVLW	120
$6BE6	$6E00	    			MOVWF	STACK_0, 0
$6BE8	$	L__doprntf_273:
$6BE8	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6BEC	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6BF0	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$6BF4	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6BF6	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6BF8	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6BFA	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6BFC	$	L__doprntf_271:
$6BFC	$	L__doprntf_270:
$6BFC	$	L__doprntf_258:
$6BFC	$	L__doprntf_274:
$6BFC	$0108	    			MOVLB	8
$6BFE	$0108	    			MOVLB	8
$6C00	$0E80	    			MOVLW	128
$6C02	$6E00	    			MOVWF	STACK_0, 0
$6C04	$0E80	    			MOVLW	128
$6C06	$19BB	    			XORWF	_doprntf_prec_L0+1, 0, 1
$6C08	$5C00	    			SUBWF	STACK_0, 0, 0
$6C0A	$E102	    			BNZ	L__doprntf_394
$6C0C	$51BA	    			MOVF	_doprntf_prec_L0, 0, 1
$6C0E	$5DBC	    			SUBWF	_doprntf_c_L0, 0, 1
$6C10	$	L__doprntf_394:
$6C10	$E20B	    			BC	L__doprntf_275
$6C12	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6C16	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6C1A	$0E30	    			MOVLW	48
$6C1C	$6EE6	    			MOVWF	POSTINC1, 0
$6C1E	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6C20	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6C22	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6C24	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6C26	$D7EA	    			BRA	L__doprntf_274
$6C28	$	L__doprntf_275:
$6C28	$	L__doprntf_276:
$6C28	$0108	    			MOVLB	8
$6C2A	$C8BA	F000			MOVFF	_doprntf_prec_L0, STACK_0
$6C2E	$C8BB	F001			MOVFF	_doprntf_prec_L0+1, STACK_0+1
$6C32	$0E01	    			MOVLW	1
$6C34	$5FBA	    			SUBWF	_doprntf_prec_L0, 1, 1
$6C36	$0E00	    			MOVLW	0
$6C38	$5BBB	    			SUBWFB	_doprntf_prec_L0+1, 1, 1
$6C3A	$5000	    			MOVF	STACK_0, 0, 0
$6C3C	$1001	    			IORWF	STACK_0+1, 0, 0
$6C3E	$B4D8	    			BTFSC	STATUS, Z, 0
$6C40	$D14D	    			BRA	L__doprntf_277
$6C42	$0EC0	    			MOVLW	192
$6C44	$15BF	    			ANDWF	_doprntf_flag_L0, 0, 1
$6C46	$6E00	    			MOVWF	STACK_0, 0
$6C48	$C000	F8CD			MOVFF	STACK_0, FLOC__doprntf+26
$6C4C	$D12B	    			BRA	L__doprntf_278
$6C4E	$	L__doprntf_280:
$6C4E	$	L__doprntf_281:
$6C4E	$0E02	    			MOVLW	2
$6C50	$6E04	    			MOVWF	STACK_4, 0
$6C52	$C8BA	F000			MOVFF	_doprntf_prec_L0, STACK_0
$6C56	$C8BB	F001			MOVFF	_doprntf_prec_L0+1, STACK_0+1
$6C5A	$0E00	    			MOVLW	0
$6C5C	$BFBB	    			BTFSC	_doprntf_prec_L0+1, 7, 1
$6C5E	$0EFF	    			MOVLW	255
$6C60	$6E02	    			MOVWF	STACK_0+2, 0
$6C62	$6E03	    			MOVWF	STACK_0+3, 0
$6C64	$5004	    			MOVF	STACK_4, 0, 0
$6C66	$	L__doprntf_395:
$6C66	$0108	    			MOVLB	8
$6C68	$E007	    			BZ	L__doprntf_396
$6C6A	$3600	    			RLCF	STACK_0, 1, 0
$6C6C	$9000	    			BCF	STACK_0, 0, 0
$6C6E	$3601	    			RLCF	STACK_0+1, 1, 0
$6C70	$3602	    			RLCF	STACK_0+2, 1, 0
$6C72	$3603	    			RLCF	STACK_0+3, 1, 0
$6C74	$0FFF	    			ADDLW	255
$6C76	$D7F7	    			BRA	L__doprntf_395
$6C78	$	L__doprntf_396:
$6C78	$0E0E	    			MOVLW	#doprntf_dpowers
$6C7A	$2600	    			ADDWF	STACK_0, 1, 0
$6C7C	$0ED1	    			MOVLW	@#doprntf_dpowers
$6C7E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6C80	$0E00	    			MOVLW	@@#doprntf_dpowers
$6C82	$2202	    			ADDWFC	STACK_0+2, 1, 0
$6C84	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$6C88	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$6C8C	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$6C90	$0009	    			TBLRD*+
$6C92	$CFF5	F004			MOVFF	TABLAT, STACK_4
$6C96	$0009	    			TBLRD*+
$6C98	$CFF5	F005			MOVFF	TABLAT, STACK_4+1
$6C9C	$0009	    			TBLRD*+
$6C9E	$CFF5	F006			MOVFF	TABLAT, STACK_4+2
$6CA2	$0009	    			TBLRD*+
$6CA4	$CFF5	F007			MOVFF	TABLAT, STACK_4+3
$6CA8	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$6CAC	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$6CB0	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$6CB4	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$6CB8	$ECCE	F003			CALL	_div_32x32_u
$6CBC	$0E0A	    			MOVLW	10
$6CBE	$6E04	    			MOVWF	STACK_4, 0
$6CC0	$0E00	    			MOVLW	0
$6CC2	$6E05	    			MOVWF	STACK_4+1, 0
$6CC4	$6E06	    			MOVWF	STACK_4+2, 0
$6CC6	$6E07	    			MOVWF	STACK_4+3, 0
$6CC8	$ECCE	F003			CALL	_div_32x32_u
$6CCC	$C008	F000			MOVFF	STACK_8, STACK_0
$6CD0	$C009	F001			MOVFF	STACK_9, STACK_1
$6CD4	$C00A	F002			MOVFF	STACK_10, STACK_2
$6CD8	$C00B	F003			MOVFF	STACK_11, STACK_3
$6CDC	$0E30	    			MOVLW	48
$6CDE	$2400	    			ADDWF	STACK_0, 0, 0
$6CE0	$0108	    			MOVLB	8
$6CE2	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$6CE4	$D0EF	    			BRA	L__doprntf_279
$6CE6	$	L__doprntf_282:
$6CE6	$ABBF	    			BTFSS	_doprntf_flag_L0, 5, 1
$6CE8	$D04E	    			BRA	L__doprntf_283
$6CEA	$0E02	    			MOVLW	2
$6CEC	$6E04	    			MOVWF	STACK_4, 0
$6CEE	$C8BA	F000			MOVFF	_doprntf_prec_L0, STACK_0
$6CF2	$C8BB	F001			MOVFF	_doprntf_prec_L0+1, STACK_0+1
$6CF6	$0E00	    			MOVLW	0
$6CF8	$BFBB	    			BTFSC	_doprntf_prec_L0+1, 7, 1
$6CFA	$0EFF	    			MOVLW	255
$6CFC	$6E02	    			MOVWF	STACK_0+2, 0
$6CFE	$6E03	    			MOVWF	STACK_0+3, 0
$6D00	$5004	    			MOVF	STACK_4, 0, 0
$6D02	$	L__doprntf_397:
$6D02	$0108	    			MOVLB	8
$6D04	$E007	    			BZ	L__doprntf_398
$6D06	$3600	    			RLCF	STACK_0, 1, 0
$6D08	$9000	    			BCF	STACK_0, 0, 0
$6D0A	$3601	    			RLCF	STACK_0+1, 1, 0
$6D0C	$3602	    			RLCF	STACK_0+2, 1, 0
$6D0E	$3603	    			RLCF	STACK_0+3, 1, 0
$6D10	$0FFF	    			ADDLW	255
$6D12	$D7F7	    			BRA	L__doprntf_397
$6D14	$	L__doprntf_398:
$6D14	$0108	    			MOVLB	8
$6D16	$0E36	    			MOVLW	#doprntf_hexpowers
$6D18	$2600	    			ADDWF	STACK_0, 1, 0
$6D1A	$0ED1	    			MOVLW	@#doprntf_hexpowers
$6D1C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6D1E	$0E00	    			MOVLW	@@#doprntf_hexpowers
$6D20	$2202	    			ADDWFC	STACK_0+2, 1, 0
$6D22	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$6D26	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$6D2A	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$6D2E	$0009	    			TBLRD*+
$6D30	$CFF5	F004			MOVFF	TABLAT, STACK_4
$6D34	$0009	    			TBLRD*+
$6D36	$CFF5	F005			MOVFF	TABLAT, STACK_4+1
$6D3A	$0009	    			TBLRD*+
$6D3C	$CFF5	F006			MOVFF	TABLAT, STACK_4+2
$6D40	$0009	    			TBLRD*+
$6D42	$CFF5	F007			MOVFF	TABLAT, STACK_4+3
$6D46	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$6D4A	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$6D4E	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$6D52	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$6D56	$ECCE	F003			CALL	_div_32x32_u
$6D5A	$0E0F	    			MOVLW	15
$6D5C	$1600	    			ANDWF	STACK_0, 1, 0
$6D5E	$0E00	    			MOVLW	0
$6D60	$1601	    			ANDWF	STACK_0+1, 1, 0
$6D62	$1602	    			ANDWF	STACK_0+2, 1, 0
$6D64	$1603	    			ANDWF	STACK_0+3, 1, 0
$6D66	$0E86	    			MOVLW	#doprntf_hexb
$6D68	$2600	    			ADDWF	STACK_0, 1, 0
$6D6A	$0ED1	    			MOVLW	@#doprntf_hexb
$6D6C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6D6E	$0E00	    			MOVLW	@@#doprntf_hexb
$6D70	$2202	    			ADDWFC	STACK_0+2, 1, 0
$6D72	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$6D76	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$6D7A	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$6D7E	$0009	    			TBLRD*+
$6D80	$CFF5	F8BC			MOVFF	TABLAT, _doprntf_c_L0
$6D84	$D04E	    			BRA	L__doprntf_284
$6D86	$	L__doprntf_283:
$6D86	$0E02	    			MOVLW	2
$6D88	$6E04	    			MOVWF	STACK_4, 0
$6D8A	$C8BA	F000			MOVFF	_doprntf_prec_L0, STACK_0
$6D8E	$C8BB	F001			MOVFF	_doprntf_prec_L0+1, STACK_0+1
$6D92	$0E00	    			MOVLW	0
$6D94	$0108	    			MOVLB	8
$6D96	$BFBB	    			BTFSC	_doprntf_prec_L0+1, 7, 1
$6D98	$0EFF	    			MOVLW	255
$6D9A	$6E02	    			MOVWF	STACK_0+2, 0
$6D9C	$6E03	    			MOVWF	STACK_0+3, 0
$6D9E	$5004	    			MOVF	STACK_4, 0, 0
$6DA0	$	L__doprntf_399:
$6DA0	$0108	    			MOVLB	8
$6DA2	$E007	    			BZ	L__doprntf_400
$6DA4	$3600	    			RLCF	STACK_0, 1, 0
$6DA6	$9000	    			BCF	STACK_0, 0, 0
$6DA8	$3601	    			RLCF	STACK_0+1, 1, 0
$6DAA	$3602	    			RLCF	STACK_0+2, 1, 0
$6DAC	$3603	    			RLCF	STACK_0+3, 1, 0
$6DAE	$0FFF	    			ADDLW	255
$6DB0	$D7F7	    			BRA	L__doprntf_399
$6DB2	$	L__doprntf_400:
$6DB2	$0108	    			MOVLB	8
$6DB4	$0E36	    			MOVLW	#doprntf_hexpowers
$6DB6	$2600	    			ADDWF	STACK_0, 1, 0
$6DB8	$0ED1	    			MOVLW	@#doprntf_hexpowers
$6DBA	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6DBC	$0E00	    			MOVLW	@@#doprntf_hexpowers
$6DBE	$2202	    			ADDWFC	STACK_0+2, 1, 0
$6DC0	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$6DC4	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$6DC8	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$6DCC	$0009	    			TBLRD*+
$6DCE	$CFF5	F004			MOVFF	TABLAT, STACK_4
$6DD2	$0009	    			TBLRD*+
$6DD4	$CFF5	F005			MOVFF	TABLAT, STACK_4+1
$6DD8	$0009	    			TBLRD*+
$6DDA	$CFF5	F006			MOVFF	TABLAT, STACK_4+2
$6DDE	$0009	    			TBLRD*+
$6DE0	$CFF5	F007			MOVFF	TABLAT, STACK_4+3
$6DE4	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$6DE8	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$6DEC	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$6DF0	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$6DF4	$ECCE	F003			CALL	_div_32x32_u
$6DF8	$0E0F	    			MOVLW	15
$6DFA	$1600	    			ANDWF	STACK_0, 1, 0
$6DFC	$0E00	    			MOVLW	0
$6DFE	$1601	    			ANDWF	STACK_0+1, 1, 0
$6E00	$1602	    			ANDWF	STACK_0+2, 1, 0
$6E02	$1603	    			ANDWF	STACK_0+3, 1, 0
$6E04	$0E98	    			MOVLW	#doprntf_hexs
$6E06	$2600	    			ADDWF	STACK_0, 1, 0
$6E08	$0ED1	    			MOVLW	@#doprntf_hexs
$6E0A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6E0C	$0E00	    			MOVLW	@@#doprntf_hexs
$6E0E	$2202	    			ADDWFC	STACK_0+2, 1, 0
$6E10	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$6E14	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$6E18	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$6E1C	$0009	    			TBLRD*+
$6E1E	$CFF5	F8BC			MOVFF	TABLAT, _doprntf_c_L0
$6E22	$	L__doprntf_284:
$6E22	$0100	    			MOVLB	0
$6E24	$D04F	    			BRA	L__doprntf_279
$6E26	$	L__doprntf_285:
$6E26	$0E02	    			MOVLW	2
$6E28	$6E04	    			MOVWF	STACK_4, 0
$6E2A	$C8BA	F000			MOVFF	_doprntf_prec_L0, STACK_0
$6E2E	$C8BB	F001			MOVFF	_doprntf_prec_L0+1, STACK_0+1
$6E32	$0E00	    			MOVLW	0
$6E34	$0108	    			MOVLB	8
$6E36	$BFBB	    			BTFSC	_doprntf_prec_L0+1, 7, 1
$6E38	$0EFF	    			MOVLW	255
$6E3A	$6E02	    			MOVWF	STACK_0+2, 0
$6E3C	$6E03	    			MOVWF	STACK_0+3, 0
$6E3E	$5004	    			MOVF	STACK_4, 0, 0
$6E40	$	L__doprntf_401:
$6E40	$0108	    			MOVLB	8
$6E42	$E007	    			BZ	L__doprntf_402
$6E44	$3600	    			RLCF	STACK_0, 1, 0
$6E46	$9000	    			BCF	STACK_0, 0, 0
$6E48	$3601	    			RLCF	STACK_0+1, 1, 0
$6E4A	$3602	    			RLCF	STACK_0+2, 1, 0
$6E4C	$3603	    			RLCF	STACK_0+3, 1, 0
$6E4E	$0FFF	    			ADDLW	255
$6E50	$D7F7	    			BRA	L__doprntf_401
$6E52	$	L__doprntf_402:
$6E52	$0E56	    			MOVLW	#doprntf_octpowers
$6E54	$2600	    			ADDWF	STACK_0, 1, 0
$6E56	$0ED1	    			MOVLW	@#doprntf_octpowers
$6E58	$2201	    			ADDWFC	STACK_0+1, 1, 0
$6E5A	$0E00	    			MOVLW	@@#doprntf_octpowers
$6E5C	$2202	    			ADDWFC	STACK_0+2, 1, 0
$6E5E	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$6E62	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$6E66	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$6E6A	$0009	    			TBLRD*+
$6E6C	$CFF5	F004			MOVFF	TABLAT, STACK_4
$6E70	$0009	    			TBLRD*+
$6E72	$CFF5	F005			MOVFF	TABLAT, STACK_4+1
$6E76	$0009	    			TBLRD*+
$6E78	$CFF5	F006			MOVFF	TABLAT, STACK_4+2
$6E7C	$0009	    			TBLRD*+
$6E7E	$CFF5	F007			MOVFF	TABLAT, STACK_4+3
$6E82	$C8C9	F000			MOVFF	_doprntf__val_L0, STACK_0
$6E86	$C8CA	F001			MOVFF	_doprntf__val_L0+1, STACK_0+1
$6E8A	$C8CB	F002			MOVFF	_doprntf__val_L0+2, STACK_0+2
$6E8E	$C8CC	F003			MOVFF	_doprntf__val_L0+3, STACK_0+3
$6E92	$ECCE	F003			CALL	_div_32x32_u
$6E96	$0E07	    			MOVLW	7
$6E98	$1400	    			ANDWF	STACK_0, 0, 0
$6E9A	$0108	    			MOVLB	8
$6E9C	$6FBC	    			MOVWF	_doprntf_c_L0, 1
$6E9E	$0E30	    			MOVLW	48
$6EA0	$27BC	    			ADDWF	_doprntf_c_L0, 1, 1
$6EA2	$D010	    			BRA	L__doprntf_279
$6EA4	$	L__doprntf_278:
$6EA4	$0108	    			MOVLB	8
$6EA6	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$6EA8	$0A00	    			XORLW	0
$6EAA	$B4D8	    			BTFSC	STATUS, Z, 0
$6EAC	$D6D0	    			BRA	L__doprntf_280
$6EAE	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$6EB0	$0AC0	    			XORLW	192
$6EB2	$B4D8	    			BTFSC	STATUS, Z, 0
$6EB4	$D6CC	    			BRA	L__doprntf_281
$6EB6	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$6EB8	$0A80	    			XORLW	128
$6EBA	$B4D8	    			BTFSC	STATUS, Z, 0
$6EBC	$D714	    			BRA	L__doprntf_282
$6EBE	$51CD	    			MOVF	FLOC__doprntf+26, 0, 1
$6EC0	$0A40	    			XORLW	64
$6EC2	$E0B1	    			BZ	L__doprntf_285
$6EC4	$	L__doprntf_279:
$6EC4	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6EC8	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6ECC	$C8BC	FFE6			MOVFF	_doprntf_c_L0, POSTINC1
$6ED0	$0108	    			MOVLB	8
$6ED2	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6ED4	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6ED6	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6ED8	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6EDA	$D6A6	    			BRA	L__doprntf_276
$6EDC	$	L__doprntf_277:
$6EDC	$0108	    			MOVLB	8
$6EDE	$A7BF	    			BTFSS	_doprntf_flag_L0, 3, 1
$6EE0	$D01B	    			BRA	L__doprntf_288
$6EE2	$0E80	    			MOVLW	128
$6EE4	$6E00	    			MOVWF	STACK_0, 0
$6EE6	$0E80	    			MOVLW	128
$6EE8	$19BE	    			XORWF	_doprntf_width_L0+1, 0, 1
$6EEA	$5C00	    			SUBWF	STACK_0, 0, 0
$6EEC	$E102	    			BNZ	L__doprntf_403
$6EEE	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$6EF0	$0800	    			SUBLW	0
$6EF2	$	L__doprntf_403:
$6EF2	$E212	    			BC	L__doprntf_288
$6EF4	$	L1664_ex_L__doprntf_288:
$6EF4	$	L__doprntf_289:
$6EF4	$C8AC	FFE1			MOVFF	FARG__doprntf+0, FSR1L
$6EF8	$C8AD	FFE2			MOVFF	FARG__doprntf+1, FSR1H
$6EFC	$0E20	    			MOVLW	32
$6EFE	$6EE6	    			MOVWF	POSTINC1, 0
$6F00	$0108	    			MOVLB	8
$6F02	$4BAC	    			INFSNZ	FARG__doprntf+0, 1, 1
$6F04	$2BAD	    			INCF	FARG__doprntf+1, 1, 1
$6F06	$4BC1	    			INFSNZ	_doprntf_ccnt_L0, 1, 1
$6F08	$2BC2	    			INCF	_doprntf_ccnt_L0+1, 1, 1
$6F0A	$0E01	    			MOVLW	1
$6F0C	$5FBD	    			SUBWF	_doprntf_width_L0, 1, 1
$6F0E	$0E00	    			MOVLW	0
$6F10	$5BBE	    			SUBWFB	_doprntf_width_L0+1, 1, 1
$6F12	$51BD	    			MOVF	_doprntf_width_L0, 0, 1
$6F14	$11BE	    			IORWF	_doprntf_width_L0+1, 0, 1
$6F16	$E1EE	    			BNZ	L__doprntf_289
$6F18	$	L__doprntf_290:
$6F18	$	L__doprntf_288:
$6F18	$0108	    			MOVLB	8
$6F1A	$EF27	F026			GOTO	L__doprntf_10
$6F1E	$	L__doprntf_11:
$6F1E	$C8C1	F000			MOVFF	_doprntf_ccnt_L0, STACK_0
$6F22	$C8C2	F001			MOVFF	_doprntf_ccnt_L0+1, STACK_0+1
$6F26	$0012	    			RETURN
$6F28	$	_Display_Time:
;rtc.c,49 :: 			void Display_Time()
;rtc.c,51 :: 			dyna[0] = '\0';
$6F28	$0102	    			MOVLB	2
$6F2A	$6BCF	    			CLRF	_dyna, 1
;rtc.c,52 :: 			form_num (date);   //запись в строку  tnum числа  day
$6F2C	$C269	F8D5			MOVFF	_date, FARG_form_num+0
$6F30	$EC76	F01F			CALL	_form_num
;rtc.c,53 :: 			strncat (dyna, tnum, 3);
$6F34	$0ECF	    			MOVLW	_dyna
$6F36	$0108	    			MOVLB	8
$6F38	$6FD5	    			MOVWF	FARG_strncat+0, 1
$6F3A	$0E02	    			MOVLW	@_dyna
$6F3C	$6FD6	    			MOVWF	FARG_strncat+1, 1
$6F3E	$0E6C	    			MOVLW	_tnum
$6F40	$6FD7	    			MOVWF	FARG_strncat+2, 1
$6F42	$0E02	    			MOVLW	@_tnum
$6F44	$6FD8	    			MOVWF	FARG_strncat+3, 1
$6F46	$0E03	    			MOVLW	3
$6F48	$6FD9	    			MOVWF	FARG_strncat+4, 1
$6F4A	$0E00	    			MOVLW	0
$6F4C	$6FDA	    			MOVWF	FARG_strncat+5, 1
$6F4E	$EC79	F017			CALL	_strncat
;rtc.c,54 :: 			form_num (month);
$6F52	$C26A	F8D5			MOVFF	_month, FARG_form_num+0
$6F56	$EC76	F01F			CALL	_form_num
;rtc.c,55 :: 			strncat (dyna, tnum, 3);
$6F5A	$0ECF	    			MOVLW	_dyna
$6F5C	$0108	    			MOVLB	8
$6F5E	$6FD5	    			MOVWF	FARG_strncat+0, 1
$6F60	$0E02	    			MOVLW	@_dyna
$6F62	$6FD6	    			MOVWF	FARG_strncat+1, 1
$6F64	$0E6C	    			MOVLW	_tnum
$6F66	$6FD7	    			MOVWF	FARG_strncat+2, 1
$6F68	$0E02	    			MOVLW	@_tnum
$6F6A	$6FD8	    			MOVWF	FARG_strncat+3, 1
$6F6C	$0E03	    			MOVLW	3
$6F6E	$6FD9	    			MOVWF	FARG_strncat+4, 1
$6F70	$0E00	    			MOVLW	0
$6F72	$6FDA	    			MOVWF	FARG_strncat+5, 1
$6F74	$EC79	F017			CALL	_strncat
;rtc.c,56 :: 			form_num (year);
$6F78	$C26B	F8D5			MOVFF	_year, FARG_form_num+0
$6F7C	$EC76	F01F			CALL	_form_num
;rtc.c,57 :: 			strncat (dyna, tnum, 3);
$6F80	$0ECF	    			MOVLW	_dyna
$6F82	$0108	    			MOVLB	8
$6F84	$6FD5	    			MOVWF	FARG_strncat+0, 1
$6F86	$0E02	    			MOVLW	@_dyna
$6F88	$6FD6	    			MOVWF	FARG_strncat+1, 1
$6F8A	$0E6C	    			MOVLW	_tnum
$6F8C	$6FD7	    			MOVWF	FARG_strncat+2, 1
$6F8E	$0E02	    			MOVLW	@_tnum
$6F90	$6FD8	    			MOVWF	FARG_strncat+3, 1
$6F92	$0E03	    			MOVLW	3
$6F94	$6FD9	    			MOVWF	FARG_strncat+4, 1
$6F96	$0E00	    			MOVLW	0
$6F98	$6FDA	    			MOVWF	FARG_strncat+5, 1
$6F9A	$EC79	F017			CALL	_strncat
;rtc.c,59 :: 			form_num (hour);   //запись в строку  tnum числа  hr
$6F9E	$C268	F8D5			MOVFF	_hour, FARG_form_num+0
$6FA2	$EC76	F01F			CALL	_form_num
;rtc.c,60 :: 			strncat (dyna, tnum, 3);
$6FA6	$0ECF	    			MOVLW	_dyna
$6FA8	$0108	    			MOVLB	8
$6FAA	$6FD5	    			MOVWF	FARG_strncat+0, 1
$6FAC	$0E02	    			MOVLW	@_dyna
$6FAE	$6FD6	    			MOVWF	FARG_strncat+1, 1
$6FB0	$0E6C	    			MOVLW	_tnum
$6FB2	$6FD7	    			MOVWF	FARG_strncat+2, 1
$6FB4	$0E02	    			MOVLW	@_tnum
$6FB6	$6FD8	    			MOVWF	FARG_strncat+3, 1
$6FB8	$0E03	    			MOVLW	3
$6FBA	$6FD9	    			MOVWF	FARG_strncat+4, 1
$6FBC	$0E00	    			MOVLW	0
$6FBE	$6FDA	    			MOVWF	FARG_strncat+5, 1
$6FC0	$EC79	F017			CALL	_strncat
;rtc.c,61 :: 			form_num (minute);
$6FC4	$C267	F8D5			MOVFF	_minute, FARG_form_num+0
$6FC8	$EC76	F01F			CALL	_form_num
;rtc.c,62 :: 			strncat (dyna, tnum, 3);
$6FCC	$0ECF	    			MOVLW	_dyna
$6FCE	$0108	    			MOVLB	8
$6FD0	$6FD5	    			MOVWF	FARG_strncat+0, 1
$6FD2	$0E02	    			MOVLW	@_dyna
$6FD4	$6FD6	    			MOVWF	FARG_strncat+1, 1
$6FD6	$0E6C	    			MOVLW	_tnum
$6FD8	$6FD7	    			MOVWF	FARG_strncat+2, 1
$6FDA	$0E02	    			MOVLW	@_tnum
$6FDC	$6FD8	    			MOVWF	FARG_strncat+3, 1
$6FDE	$0E03	    			MOVLW	3
$6FE0	$6FD9	    			MOVWF	FARG_strncat+4, 1
$6FE2	$0E00	    			MOVLW	0
$6FE4	$6FDA	    			MOVWF	FARG_strncat+5, 1
$6FE6	$EC79	F017			CALL	_strncat
;rtc.c,63 :: 			form_num (second);
$6FEA	$C266	F8D5			MOVFF	_second, FARG_form_num+0
$6FEE	$EC76	F01F			CALL	_form_num
;rtc.c,64 :: 			strncat (dyna, tnum, 3);
$6FF2	$0ECF	    			MOVLW	_dyna
$6FF4	$0108	    			MOVLB	8
$6FF6	$6FD5	    			MOVWF	FARG_strncat+0, 1
$6FF8	$0E02	    			MOVLW	@_dyna
$6FFA	$6FD6	    			MOVWF	FARG_strncat+1, 1
$6FFC	$0E6C	    			MOVLW	_tnum
$6FFE	$6FD7	    			MOVWF	FARG_strncat+2, 1
$7000	$0E02	    			MOVLW	@_tnum
$7002	$6FD8	    			MOVWF	FARG_strncat+3, 1
$7004	$0E03	    			MOVLW	3
$7006	$6FD9	    			MOVWF	FARG_strncat+4, 1
$7008	$0E00	    			MOVLW	0
$700A	$6FDA	    			MOVWF	FARG_strncat+5, 1
$700C	$EC79	F017			CALL	_strncat
;rtc.c,65 :: 			dyna[0] = '_';
$7010	$0E5F	    			MOVLW	95
$7012	$0102	    			MOVLB	2
$7014	$6FCF	    			MOVWF	_dyna, 1
;rtc.c,66 :: 			dyna[3] = '/';
$7016	$0E2F	    			MOVLW	47
$7018	$6FD2	    			MOVWF	_dyna+3, 1
;rtc.c,67 :: 			dyna[6] = '/';
$701A	$0E2F	    			MOVLW	47
$701C	$6FD5	    			MOVWF	_dyna+6, 1
;rtc.c,68 :: 			dyna[9] = '_';
$701E	$0E5F	    			MOVLW	95
$7020	$6FD8	    			MOVWF	_dyna+9, 1
;rtc.c,69 :: 			dyna[12] = ':';
$7022	$0E3A	    			MOVLW	58
$7024	$6FDB	    			MOVWF	_dyna+12, 1
;rtc.c,70 :: 			dyna[15] = ':';
$7026	$0E3A	    			MOVLW	58
$7028	$6FDE	    			MOVWF	_dyna+15, 1
;rtc.c,72 :: 			}//~
$702A	$0012	    			RETURN
$702C	$	_OneWireReset:
;termo.c,36 :: 			unsigned char OneWireReset(void)
;termo.c,38 :: 			OneWireOff();                               // Normal input no pull up
$702C	$EC8E	F01F			CALL	_OneWireOff
;termo.c,39 :: 			OneWireDirOut();                            // out at 0
$7030	$EC90	F01F			CALL	_OneWireDirOut
;termo.c,40 :: 			delay_us(500);
$7034	$0E05	    			MOVLW	5
$7036	$6E0B	    			MOVWF	STACK_11, 0
$7038	$0EFF	    			MOVLW	255
$703A	$6E0A	    			MOVWF	STACK_10, 0
$703C	$2E0B	    			DECFSZ	STACK_11, F, 0
$703E	$D001	    			BRA	$+2
$7040	$D003	    			BRA	$+4
$7042	$2E0A	    			DECFSZ	STACK_10, F, 0
$7044	$D7FE	    			BRA	$-1
$7046	$D7FA	    			BRA	$-5
$7048	$0E0A	    			MOVLW	10
$704A	$6E0A	    			MOVWF	STACK_10, 0
$704C	$2E0A	    			DECFSZ	STACK_10, F, 0
$704E	$D7FE	    			BRA	$-1
$7050	$0000	    			NOP
;termo.c,41 :: 			OneWireDirIn();                             // Set to input
$7052	$EC92	F01F			CALL	_OneWireDirIn
;termo.c,42 :: 			delay_us(70);
$7056	$0E91	    			MOVLW	145
$7058	$6E0A	    			MOVWF	STACK_10, 0
$705A	$2E0A	    			DECFSZ	STACK_10, F, 0
$705C	$D7FE	    			BRA	$-1
$705E	$0000	    			NOP
;termo.c,43 :: 			if ((OneWireLevel()) == 0)
$7060	$EC94	F01F			CALL	_OneWireLevel
$7064	$0E00	    			MOVLW	0
$7066	$1801	    			XORWF	STACK_0+1, 0, 0
$7068	$E102	    			BNZ	L_OneWireReset_19
$706A	$0E00	    			MOVLW	0
$706C	$1800	    			XORWF	STACK_0, 0, 0
$706E	$	L_OneWireReset_19:
$706E	$E112	    			BNZ	L_OneWireReset_2
;termo.c,45 :: 			delay_us(500);
$7070	$0E05	    			MOVLW	5
$7072	$6E0B	    			MOVWF	STACK_11, 0
$7074	$0EFF	    			MOVLW	255
$7076	$6E0A	    			MOVWF	STACK_10, 0
$7078	$2E0B	    			DECFSZ	STACK_11, F, 0
$707A	$D001	    			BRA	$+2
$707C	$D003	    			BRA	$+4
$707E	$2E0A	    			DECFSZ	STACK_10, F, 0
$7080	$D7FE	    			BRA	$-1
$7082	$D7FA	    			BRA	$-5
$7084	$0E0A	    			MOVLW	10
$7086	$6E0A	    			MOVWF	STACK_10, 0
$7088	$2E0A	    			DECFSZ	STACK_10, F, 0
$708A	$D7FE	    			BRA	$-1
$708C	$0000	    			NOP
;termo.c,46 :: 			return 1;
$708E	$0E01	    			MOVLW	1
$7090	$6E00	    			MOVWF	STACK_0, 0
$7092	$0012	    			RETURN
;termo.c,47 :: 			}
$7094	$	L_OneWireReset_2:
;termo.c,48 :: 			delay_us(500);
$7094	$0E05	    			MOVLW	5
$7096	$6E0B	    			MOVWF	STACK_11, 0
$7098	$0EFF	    			MOVLW	255
$709A	$6E0A	    			MOVWF	STACK_10, 0
$709C	$2E0B	    			DECFSZ	STACK_11, F, 0
$709E	$D001	    			BRA	$+2
$70A0	$D003	    			BRA	$+4
$70A2	$2E0A	    			DECFSZ	STACK_10, F, 0
$70A4	$D7FE	    			BRA	$-1
$70A6	$D7FA	    			BRA	$-5
$70A8	$0E0A	    			MOVLW	10
$70AA	$6E0A	    			MOVWF	STACK_10, 0
$70AC	$2E0A	    			DECFSZ	STACK_10, F, 0
$70AE	$D7FE	    			BRA	$-1
$70B0	$0000	    			NOP
;termo.c,49 :: 			return 0;
$70B2	$6A00	    			CLRF	STACK_0, 0
;termo.c,50 :: 			}
$70B4	$0012	    			RETURN
$70B6	$	_OneWireWriteByte:
;termo.c,59 :: 			void OneWireWriteByte(unsigned char dat)
;termo.c,63 :: 			OneWireDirIn();OneWireOff();     	//input 0
$70B6	$EC92	F01F			CALL	_OneWireDirIn
$70BA	$EC8E	F01F			CALL	_OneWireOff
;termo.c,64 :: 			for (i=0;i<=7;i++)
$70BE	$0108	    			MOVLB	8
$70C0	$6BAD	    			CLRF	OneWireWriteByte_i_L0, 1
$70C2	$	L_OneWireWriteByte_3:
$70C2	$0108	    			MOVLB	8
$70C4	$51AD	    			MOVF	OneWireWriteByte_i_L0, 0, 1
$70C6	$0807	    			SUBLW	7
$70C8	$E326	    			BNC	L_OneWireWriteByte_4
;termo.c,66 :: 			OneWireDirOut();  						//out0
$70CA	$EC90	F01F			CALL	_OneWireDirOut
;termo.c,67 :: 			if (dat & 0x01) {
$70CE	$0E01	    			MOVLW	1
$70D0	$0108	    			MOVLB	8
$70D2	$15AC	    			ANDWF	FARG_OneWireWriteByte+0, 0, 1
$70D4	$6E00	    			MOVWF	STACK_0, 0
$70D6	$E00D	    			BZ	L_OneWireWriteByte_6
;termo.c,68 :: 			delay_us(7);              // Send 1
$70D8	$0E0E	    			MOVLW	14
$70DA	$6E0A	    			MOVWF	STACK_10, 0
$70DC	$2E0A	    			DECFSZ	STACK_10, F, 0
$70DE	$D7FE	    			BRA	$-1
$70E0	$0000	    			NOP
;termo.c,69 :: 			OneWireDirIn();        			// input
$70E2	$EC92	F01F			CALL	_OneWireDirIn
;termo.c,70 :: 			delay_us(70);
$70E6	$0E91	    			MOVLW	145
$70E8	$6E0A	    			MOVWF	STACK_10, 0
$70EA	$2E0A	    			DECFSZ	STACK_10, F, 0
$70EC	$D7FE	    			BRA	$-1
$70EE	$0000	    			NOP
;termo.c,71 :: 			}
$70F0	$D00C	    			BRA	L_OneWireWriteByte_7
$70F2	$	L_OneWireWriteByte_6:
;termo.c,73 :: 			delay_us(70);            	// Send 0
$70F2	$0E91	    			MOVLW	145
$70F4	$6E0A	    			MOVWF	STACK_10, 0
$70F6	$2E0A	    			DECFSZ	STACK_10, F, 0
$70F8	$D7FE	    			BRA	$-1
$70FA	$0000	    			NOP
;termo.c,74 :: 			OneWireDirIn();
$70FC	$EC92	F01F			CALL	_OneWireDirIn
;termo.c,75 :: 			delay_us(7);
$7100	$0E0E	    			MOVLW	14
$7102	$6E0A	    			MOVWF	STACK_10, 0
$7104	$2E0A	    			DECFSZ	STACK_10, F, 0
$7106	$D7FE	    			BRA	$-1
$7108	$0000	    			NOP
;termo.c,76 :: 			}
$710A	$	L_OneWireWriteByte_7:
;termo.c,77 :: 			dat>>=1;
$710A	$0108	    			MOVLB	8
$710C	$33AC	    			RRCF	FARG_OneWireWriteByte+0, 1, 1
$710E	$9FAC	    			BCF	FARG_OneWireWriteByte+0, 7, 1
;termo.c,78 :: 			}
$7110	$	L_OneWireWriteByte_5:
;termo.c,64 :: 			for (i=0;i<=7;i++)
$7110	$0108	    			MOVLB	8
$7112	$2BAD	    			INCF	OneWireWriteByte_i_L0, 1, 1
;termo.c,78 :: 			}
$7114	$D7D6	    			BRA	L_OneWireWriteByte_3
$7116	$	L_OneWireWriteByte_4:
;termo.c,79 :: 			}
$7116	$0012	    			RETURN
$7118	$	_OneWireReadByte:
;termo.c,87 :: 			unsigned char OneWireReadByte(void)
;termo.c,89 :: 			unsigned char dat = 0;
$7118	$0108	    			MOVLB	8
$711A	$6BAC	    			CLRF	OneWireReadByte_dat_L0, 1
;termo.c,92 :: 			OneWireDirIn();OneWireOff();                  // Output '0' or input without pullup
$711C	$EC92	F01F			CALL	_OneWireDirIn
$7120	$EC8E	F01F			CALL	_OneWireOff
;termo.c,93 :: 			for (i=0;i<=7;i++)	{
$7124	$0108	    			MOVLB	8
$7126	$6BAD	    			CLRF	OneWireReadByte_i_L0, 1
$7128	$	L_OneWireReadByte_8:
$7128	$0108	    			MOVLB	8
$712A	$51AD	    			MOVF	OneWireReadByte_i_L0, 0, 1
$712C	$0807	    			SUBLW	7
$712E	$E324	    			BNC	L_OneWireReadByte_9
;termo.c,94 :: 			OneWireDirOut();                          // Set output to '0'
$7130	$EC90	F01F			CALL	_OneWireDirOut
;termo.c,95 :: 			delay_us(7);
$7134	$0E0E	    			MOVLW	14
$7136	$6E0A	    			MOVWF	STACK_10, 0
$7138	$2E0A	    			DECFSZ	STACK_10, F, 0
$713A	$D7FE	    			BRA	$-1
$713C	$0000	    			NOP
;termo.c,96 :: 			OneWireDirIn();                           // Set to input
$713E	$EC92	F01F			CALL	_OneWireDirIn
;termo.c,97 :: 			delay_us(7);
$7142	$0E0E	    			MOVLW	14
$7144	$6E0A	    			MOVWF	STACK_10, 0
$7146	$2E0A	    			DECFSZ	STACK_10, F, 0
$7148	$D7FE	    			BRA	$-1
$714A	$0000	    			NOP
;termo.c,98 :: 			dat >>=1;
$714C	$0108	    			MOVLB	8
$714E	$33AC	    			RRCF	OneWireReadByte_dat_L0, 1, 1
$7150	$9FAC	    			BCF	OneWireReadByte_dat_L0, 7, 1
;termo.c,99 :: 			if ((OneWireLevel())) { dat |= 0x80; }
$7152	$EC94	F01F			CALL	_OneWireLevel
$7156	$5000	    			MOVF	STACK_0, 0, 0
$7158	$1001	    			IORWF	STACK_0+1, 0, 0
$715A	$E003	    			BZ	L_OneWireReadByte_11
$715C	$0108	    			MOVLB	8
$715E	$8FAC	    			BSF	OneWireReadByte_dat_L0, 7, 1
$7160	$D003	    			BRA	L_OneWireReadByte_12
$7162	$	L_OneWireReadByte_11:
;termo.c,100 :: 			else { dat &= 0x7f; }
$7162	$0E7F	    			MOVLW	127
$7164	$0108	    			MOVLB	8
$7166	$17AC	    			ANDWF	OneWireReadByte_dat_L0, 1, 1
$7168	$	L_OneWireReadByte_12:
;termo.c,101 :: 			delay_us(70);
$7168	$0E91	    			MOVLW	145
$716A	$6E0A	    			MOVWF	STACK_10, 0
$716C	$2E0A	    			DECFSZ	STACK_10, F, 0
$716E	$D7FE	    			BRA	$-1
$7170	$0000	    			NOP
;termo.c,102 :: 			}
$7172	$	L_OneWireReadByte_10:
;termo.c,93 :: 			for (i=0;i<=7;i++)	{
$7172	$0108	    			MOVLB	8
$7174	$2BAD	    			INCF	OneWireReadByte_i_L0, 1, 1
;termo.c,102 :: 			}
$7176	$D7D8	    			BRA	L_OneWireReadByte_8
$7178	$	L_OneWireReadByte_9:
;termo.c,103 :: 			return dat;
$7178	$C8AC	F000			MOVFF	OneWireReadByte_dat_L0, STACK_0
;termo.c,104 :: 			}
$717C	$0012	    			RETURN
$717E	$	_LongToStr:
$717E	$0108	    			MOVLB	8
$7180	$6BB7	    			CLRF	LongToStr_negative_L0, 1
$7182	$C8AC	F8B2			MOVFF	FARG_LongToStr+0, LongToStr_inlong_L0
$7186	$C8AD	F8B3			MOVFF	FARG_LongToStr+1, LongToStr_inlong_L0+1
$718A	$C8AE	F8B4			MOVFF	FARG_LongToStr+2, LongToStr_inlong_L0+2
$718E	$C8AF	F8B5			MOVFF	FARG_LongToStr+3, LongToStr_inlong_L0+3
$7192	$0E80	    			MOVLW	128
$7194	$19AF	    			XORWF	FARG_LongToStr+3, 0, 1
$7196	$6E00	    			MOVWF	STACK_0, 0
$7198	$0E80	    			MOVLW	128
$719A	$5C00	    			SUBWF	STACK_0, 0, 0
$719C	$E108	    			BNZ	L_LongToStr_53
$719E	$0E00	    			MOVLW	0
$71A0	$5DAE	    			SUBWF	FARG_LongToStr+2, 0, 1
$71A2	$E105	    			BNZ	L_LongToStr_53
$71A4	$0E00	    			MOVLW	0
$71A6	$5DAD	    			SUBWF	FARG_LongToStr+1, 0, 1
$71A8	$E102	    			BNZ	L_LongToStr_53
$71AA	$0E00	    			MOVLW	0
$71AC	$5DAC	    			SUBWF	FARG_LongToStr+0, 0, 1
$71AE	$	L_LongToStr_53:
$71AE	$E20F	    			BC	L_LongToStr_18
$71B0	$0E01	    			MOVLW	1
$71B2	$0108	    			MOVLB	8
$71B4	$6FB7	    			MOVWF	LongToStr_negative_L0, 1
$71B6	$6BB2	    			CLRF	LongToStr_inlong_L0, 1
$71B8	$6BB3	    			CLRF	LongToStr_inlong_L0+1, 1
$71BA	$6BB4	    			CLRF	LongToStr_inlong_L0+2, 1
$71BC	$6BB5	    			CLRF	LongToStr_inlong_L0+3, 1
$71BE	$51AC	    			MOVF	FARG_LongToStr+0, 0, 1
$71C0	$5FB2	    			SUBWF	LongToStr_inlong_L0, 1, 1
$71C2	$51AD	    			MOVF	FARG_LongToStr+1, 0, 1
$71C4	$5BB3	    			SUBWFB	LongToStr_inlong_L0+1, 1, 1
$71C6	$51AE	    			MOVF	FARG_LongToStr+2, 0, 1
$71C8	$5BB4	    			SUBWFB	LongToStr_inlong_L0+2, 1, 1
$71CA	$51AF	    			MOVF	FARG_LongToStr+3, 0, 1
$71CC	$5BB5	    			SUBWFB	LongToStr_inlong_L0+3, 1, 1
$71CE	$	L_LongToStr_18:
$71CE	$0E01	    			MOVLW	1
$71D0	$0108	    			MOVLB	8
$71D2	$6FB6	    			MOVWF	LongToStr_len_L0, 1
$71D4	$	L_LongToStr_19:
$71D4	$0108	    			MOVLB	8
$71D6	$51AC	    			MOVF	FARG_LongToStr+0, 0, 1
$71D8	$11AD	    			IORWF	FARG_LongToStr+1, 0, 1
$71DA	$11AE	    			IORWF	FARG_LongToStr+2, 0, 1
$71DC	$11AF	    			IORWF	FARG_LongToStr+3, 0, 1
$71DE	$E01B	    			BZ	L_LongToStr_20
$71E0	$0E0A	    			MOVLW	10
$71E2	$6E04	    			MOVWF	STACK_4, 0
$71E4	$0E00	    			MOVLW	0
$71E6	$6E05	    			MOVWF	STACK_4+1, 0
$71E8	$6E06	    			MOVWF	STACK_4+2, 0
$71EA	$6E07	    			MOVWF	STACK_4+3, 0
$71EC	$C8AC	F000			MOVFF	FARG_LongToStr+0, STACK_0
$71F0	$C8AD	F001			MOVFF	FARG_LongToStr+1, STACK_0+1
$71F4	$C8AE	F002			MOVFF	FARG_LongToStr+2, STACK_0+2
$71F8	$C8AF	F003			MOVFF	FARG_LongToStr+3, STACK_0+3
$71FC	$ECBA	F008			CALL	_div_32x32_s
$7200	$C000	F8AC			MOVFF	STACK_0, FARG_LongToStr+0
$7204	$C001	F8AD			MOVFF	STACK_0+1, FARG_LongToStr+1
$7208	$C002	F8AE			MOVFF	STACK_0+2, FARG_LongToStr+2
$720C	$C003	F8AF			MOVFF	STACK_0+3, FARG_LongToStr+3
$7210	$0108	    			MOVLB	8
$7212	$2BB6	    			INCF	LongToStr_len_L0, 1, 1
$7214	$D7DF	    			BRA	L_LongToStr_19
$7216	$	L_LongToStr_20:
$7216	$0108	    			MOVLB	8
$7218	$07B6	    			DECF	LongToStr_len_L0, 1, 1
$721A	$0E00	    			MOVLW	0
$721C	$6E00	    			MOVWF	STACK_0, 0
$721E	$19B5	    			XORWF	LongToStr_inlong_L0+3, 0, 1
$7220	$E108	    			BNZ	L_LongToStr_54
$7222	$5000	    			MOVF	STACK_0, 0, 0
$7224	$19B4	    			XORWF	LongToStr_inlong_L0+2, 0, 1
$7226	$E105	    			BNZ	L_LongToStr_54
$7228	$5000	    			MOVF	STACK_0, 0, 0
$722A	$19B3	    			XORWF	LongToStr_inlong_L0+1, 0, 1
$722C	$E102	    			BNZ	L_LongToStr_54
$722E	$51B2	    			MOVF	LongToStr_inlong_L0, 0, 1
$7230	$0A00	    			XORLW	0
$7232	$	L_LongToStr_54:
$7232	$E103	    			BNZ	L_LongToStr_21
$7234	$0E01	    			MOVLW	1
$7236	$0108	    			MOVLB	8
$7238	$6FB6	    			MOVWF	LongToStr_len_L0, 1
$723A	$	L_LongToStr_21:
$723A	$0108	    			MOVLB	8
$723C	$C8B0	FFE9			MOVFF	FARG_LongToStr+4, FSR0L
$7240	$C8B1	FFEA			MOVFF	FARG_LongToStr+5, FSR0H
$7244	$0E20	    			MOVLW	32
$7246	$6EEE	    			MOVWF	POSTINC0, 0
$7248	$0E20	    			MOVLW	32
$724A	$6EEE	    			MOVWF	POSTINC0, 0
$724C	$0E20	    			MOVLW	32
$724E	$6EEE	    			MOVWF	POSTINC0, 0
$7250	$0E20	    			MOVLW	32
$7252	$6EEE	    			MOVWF	POSTINC0, 0
$7254	$0E20	    			MOVLW	32
$7256	$6EEE	    			MOVWF	POSTINC0, 0
$7258	$0E20	    			MOVLW	32
$725A	$6EEE	    			MOVWF	POSTINC0, 0
$725C	$0E20	    			MOVLW	32
$725E	$6EEE	    			MOVWF	POSTINC0, 0
$7260	$0E20	    			MOVLW	32
$7262	$6EEE	    			MOVWF	POSTINC0, 0
$7264	$0E20	    			MOVLW	32
$7266	$6EEE	    			MOVWF	POSTINC0, 0
$7268	$0E20	    			MOVLW	32
$726A	$6EEE	    			MOVWF	POSTINC0, 0
$726C	$0E20	    			MOVLW	32
$726E	$6EEE	    			MOVWF	POSTINC0, 0
$7270	$6AED	    			CLRF	POSTDEC0, 0
$7272	$	L_LongToStr_22:
$7272	$0108	    			MOVLB	8
$7274	$51B6	    			MOVF	LongToStr_len_L0, 0, 1
$7276	$0800	    			SUBLW	0
$7278	$E245	    			BC	L_LongToStr_23
$727A	$0E0A	    			MOVLW	10
$727C	$6E04	    			MOVWF	STACK_4, 0
$727E	$0E00	    			MOVLW	0
$7280	$6E05	    			MOVWF	STACK_4+1, 0
$7282	$6E06	    			MOVWF	STACK_4+2, 0
$7284	$6E07	    			MOVWF	STACK_4+3, 0
$7286	$C8B2	F000			MOVFF	LongToStr_inlong_L0, STACK_0
$728A	$C8B3	F001			MOVFF	LongToStr_inlong_L0+1, STACK_0+1
$728E	$C8B4	F002			MOVFF	LongToStr_inlong_L0+2, STACK_0+2
$7292	$C8B5	F003			MOVFF	LongToStr_inlong_L0+3, STACK_0+3
$7296	$ECBA	F008			CALL	_div_32x32_s
$729A	$C008	F000			MOVFF	STACK_8, STACK_0
$729E	$C009	F001			MOVFF	STACK_9, STACK_1
$72A2	$C00A	F002			MOVFF	STACK_10, STACK_2
$72A6	$C00B	F003			MOVFF	STACK_11, STACK_3
$72AA	$C000	FFEF			MOVFF	STACK_0, INDF0
$72AE	$CFEF	F004			MOVFF	INDF0, STACK_4
$72B2	$0E00	    			MOVLW	0
$72B4	$6E05	    			MOVWF	STACK_4+1, 0
$72B6	$6E06	    			MOVWF	STACK_4+2, 0
$72B8	$6E07	    			MOVWF	STACK_4+3, 0
$72BA	$C8B2	F000			MOVFF	LongToStr_inlong_L0, STACK_0
$72BE	$C8B3	F001			MOVFF	LongToStr_inlong_L0+1, STACK_0+1
$72C2	$C8B4	F002			MOVFF	LongToStr_inlong_L0+2, STACK_0+2
$72C6	$C8B5	F003			MOVFF	LongToStr_inlong_L0+3, STACK_0+3
$72CA	$5004	    			MOVF	STACK_4, 0, 0
$72CC	$5E00	    			SUBWF	STACK_0, 1, 0
$72CE	$5005	    			MOVF	STACK_4+1, 0, 0
$72D0	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$72D2	$5006	    			MOVF	STACK_4+2, 0, 0
$72D4	$5A02	    			SUBWFB	STACK_0+2, 1, 0
$72D6	$5007	    			MOVF	STACK_4+3, 0, 0
$72D8	$5A03	    			SUBWFB	STACK_0+3, 1, 0
$72DA	$0E0A	    			MOVLW	10
$72DC	$6E04	    			MOVWF	STACK_4, 0
$72DE	$0E00	    			MOVLW	0
$72E0	$6E05	    			MOVWF	STACK_4+1, 0
$72E2	$6E06	    			MOVWF	STACK_4+2, 0
$72E4	$6E07	    			MOVWF	STACK_4+3, 0
$72E6	$ECBA	F008			CALL	_div_32x32_s
$72EA	$C000	F8B2			MOVFF	STACK_0, LongToStr_inlong_L0
$72EE	$C001	F8B3			MOVFF	STACK_0+1, LongToStr_inlong_L0+1
$72F2	$C002	F8B4			MOVFF	STACK_0+2, LongToStr_inlong_L0+2
$72F6	$C003	F8B5			MOVFF	STACK_0+3, LongToStr_inlong_L0+3
$72FA	$0E30	    			MOVLW	48
$72FC	$26ED	    			ADDWF	POSTDEC0, 1, 0
$72FE	$0108	    			MOVLB	8
$7300	$07B6	    			DECF	LongToStr_len_L0, 1, 1
$7302	$D7B7	    			BRA	L_LongToStr_22
$7304	$	L_LongToStr_23:
$7304	$53B7	    			MOVF	LongToStr_negative_L0, 1, 1
$7306	$E002	    			BZ	L_LongToStr_24
$7308	$0E2D	    			MOVLW	45
$730A	$6EEF	    			MOVWF	INDF0, 0
$730C	$	L_LongToStr_24:
$730C	$0012	    			RETURN
$730E	$	_memset:
$730E	$C6CD	F6D2			MOVFF	FARG_memset+0, memset_pp_L0
$7312	$C6CE	F6D3			MOVFF	FARG_memset+1, memset_pp_L0+1
$7316	$	L_memset_18:
$7316	$C6D0	F000			MOVFF	FARG_memset+3, STACK_0
$731A	$C6D1	F001			MOVFF	FARG_memset+4, STACK_0+1
$731E	$0E01	    			MOVLW	1
$7320	$0106	    			MOVLB	6
$7322	$5FD0	    			SUBWF	FARG_memset+3, 1, 1
$7324	$0E00	    			MOVLW	0
$7326	$5BD1	    			SUBWFB	FARG_memset+4, 1, 1
$7328	$5000	    			MOVF	STACK_0, 0, 0
$732A	$1001	    			IORWF	STACK_0+1, 0, 0
$732C	$E009	    			BZ	L_memset_19
$732E	$C6D2	FFE1			MOVFF	memset_pp_L0, FSR1L
$7332	$C6D3	FFE2			MOVFF	memset_pp_L0+1, FSR1H
$7336	$C6CF	FFE6			MOVFF	FARG_memset+2, POSTINC1
$733A	$4BD2	    			INFSNZ	memset_pp_L0, 1, 1
$733C	$2BD3	    			INCF	memset_pp_L0+1, 1, 1
$733E	$D7EB	    			BRA	L_memset_18
$7340	$	L_memset_19:
$7340	$C6CD	F000			MOVFF	FARG_memset+0, STACK_0
$7344	$C6CE	F001			MOVFF	FARG_memset+1, STACK_0+1
$7348	$0012	    			RETURN
$734A	$	_Ethernet_DHCPmsg:
$734A	$0EF9	    			MOVLW	249
$734C	$0106	    			MOVLB	6
$734E	$6FD0	    			MOVWF	Ethernet_DHCPmsg_len_L0, 1
$7350	$0E00	    			MOVLW	0
$7352	$6FD1	    			MOVWF	Ethernet_DHCPmsg_len_L0+1, 1
$7354	$0EE2	    			MOVLW	EWRPT
$7356	$0108	    			MOVLB	8
$7358	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$735A	$0E0E	    			MOVLW	@EWRPT
$735C	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$735E	$0ED9	    			MOVLW	217
$7360	$6FFA	    			MOVWF	FARG_Ethernet_writeAddr2+2, 1
$7362	$0E19	    			MOVLW	25
$7364	$6FFB	    			MOVWF	FARG_Ethernet_writeAddr2+3, 1
$7366	$EC67	F002			CALL	_Ethernet_writeAddr2
$736A	$0EAA	    			MOVLW	#eth_j60_dhcp_pkt_1
$736C	$0108	    			MOVLB	8
$736E	$6FAC	    			MOVWF	FARG_Ethernet_putConstBytes+0, 1
$7370	$0ED1	    			MOVLW	@#eth_j60_dhcp_pkt_1
$7372	$6FAD	    			MOVWF	FARG_Ethernet_putConstBytes+1, 1
$7374	$0E00	    			MOVLW	@@#eth_j60_dhcp_pkt_1
$7376	$6FAE	    			MOVWF	FARG_Ethernet_putConstBytes+2, 1
$7378	$0E0C	    			MOVLW	12
$737A	$6FAF	    			MOVWF	FARG_Ethernet_putConstBytes+3, 1
$737C	$ECA9	F01F			CALL	_Ethernet_putConstBytes
$7380	$0106	    			MOVLB	6
$7382	$51CD	    			MOVF	FARG_Ethernet_DHCPmsg+0, 0, 1
$7384	$0A03	    			XORLW	3
$7386	$E10C	    			BNZ	L_Ethernet_DHCPmsg_155
$7388	$53CE	    			MOVF	FARG_Ethernet_DHCPmsg+1, 1, 1
$738A	$E00A	    			BZ	L_Ethernet_DHCPmsg_155
$738C	$	L1373_ex_L_Ethernet_DHCPmsg_155:
$738C	$0E49	    			MOVLW	eth_j60_tmpIpAddr
$738E	$0108	    			MOVLB	8
$7390	$6FD5	    			MOVWF	FARG_Ethernet_putBytes+0, 1
$7392	$0E03	    			MOVLW	@eth_j60_tmpIpAddr
$7394	$6FD6	    			MOVWF	FARG_Ethernet_putBytes+1, 1
$7396	$0E04	    			MOVLW	4
$7398	$6FD7	    			MOVWF	FARG_Ethernet_putBytes+2, 1
$739A	$EC0A	F010			CALL	_Ethernet_putBytes
$739E	$D00D	    			BRA	L_Ethernet_DHCPmsg_156
$73A0	$	L_Ethernet_DHCPmsg_155:
$73A0	$0106	    			MOVLB	6
$73A2	$6BCF	    			CLRF	Ethernet_DHCPmsg_i_L0, 1
$73A4	$	L_Ethernet_DHCPmsg_157:
$73A4	$0E04	    			MOVLW	4
$73A6	$0106	    			MOVLB	6
$73A8	$5DCF	    			SUBWF	Ethernet_DHCPmsg_i_L0, 0, 1
$73AA	$E207	    			BC	L_Ethernet_DHCPmsg_158
$73AC	$0108	    			MOVLB	8
$73AE	$6BEB	    			CLRF	FARG_Ethernet_putByte+0, 1
$73B0	$ECDF	F007			CALL	_Ethernet_putByte
$73B4	$	L_Ethernet_DHCPmsg_159:
$73B4	$0106	    			MOVLB	6
$73B6	$2BCF	    			INCF	Ethernet_DHCPmsg_i_L0, 1, 1
$73B8	$D7F5	    			BRA	L_Ethernet_DHCPmsg_157
$73BA	$	L_Ethernet_DHCPmsg_158:
$73BA	$	L_Ethernet_DHCPmsg_156:
$73BA	$0106	    			MOVLB	6
$73BC	$6BCF	    			CLRF	Ethernet_DHCPmsg_i_L0, 1
$73BE	$	L_Ethernet_DHCPmsg_160:
$73BE	$0E0C	    			MOVLW	12
$73C0	$0106	    			MOVLB	6
$73C2	$5DCF	    			SUBWF	Ethernet_DHCPmsg_i_L0, 0, 1
$73C4	$E207	    			BC	L_Ethernet_DHCPmsg_161
$73C6	$0108	    			MOVLB	8
$73C8	$6BEB	    			CLRF	FARG_Ethernet_putByte+0, 1
$73CA	$ECDF	F007			CALL	_Ethernet_putByte
$73CE	$	L_Ethernet_DHCPmsg_162:
$73CE	$0106	    			MOVLB	6
$73D0	$2BCF	    			INCF	Ethernet_DHCPmsg_i_L0, 1, 1
$73D2	$D7F5	    			BRA	L_Ethernet_DHCPmsg_160
$73D4	$	L_Ethernet_DHCPmsg_161:
$73D4	$0E70	    			MOVLW	_Ethernet_macAddr
$73D6	$0108	    			MOVLB	8
$73D8	$6FD5	    			MOVWF	FARG_Ethernet_putBytes+0, 1
$73DA	$0E02	    			MOVLW	@_Ethernet_macAddr
$73DC	$6FD6	    			MOVWF	FARG_Ethernet_putBytes+1, 1
$73DE	$0E06	    			MOVLW	6
$73E0	$6FD7	    			MOVWF	FARG_Ethernet_putBytes+2, 1
$73E2	$EC0A	F010			CALL	_Ethernet_putBytes
$73E6	$0106	    			MOVLB	6
$73E8	$6BCF	    			CLRF	Ethernet_DHCPmsg_i_L0, 1
$73EA	$	L_Ethernet_DHCPmsg_163:
$73EA	$0ECA	    			MOVLW	202
$73EC	$0106	    			MOVLB	6
$73EE	$5DCF	    			SUBWF	Ethernet_DHCPmsg_i_L0, 0, 1
$73F0	$E207	    			BC	L_Ethernet_DHCPmsg_164
$73F2	$0108	    			MOVLB	8
$73F4	$6BEB	    			CLRF	FARG_Ethernet_putByte+0, 1
$73F6	$ECDF	F007			CALL	_Ethernet_putByte
$73FA	$	L_Ethernet_DHCPmsg_165:
$73FA	$0106	    			MOVLB	6
$73FC	$2BCF	    			INCF	Ethernet_DHCPmsg_i_L0, 1, 1
$73FE	$D7F5	    			BRA	L_Ethernet_DHCPmsg_163
$7400	$	L_Ethernet_DHCPmsg_164:
$7400	$0EB6	    			MOVLW	#eth_j60_dhcp_pkt_2
$7402	$0108	    			MOVLB	8
$7404	$6FAC	    			MOVWF	FARG_Ethernet_putConstBytes+0, 1
$7406	$0ED1	    			MOVLW	@#eth_j60_dhcp_pkt_2
$7408	$6FAD	    			MOVWF	FARG_Ethernet_putConstBytes+1, 1
$740A	$0E00	    			MOVLW	@@#eth_j60_dhcp_pkt_2
$740C	$6FAE	    			MOVWF	FARG_Ethernet_putConstBytes+2, 1
$740E	$0E06	    			MOVLW	6
$7410	$6FAF	    			MOVWF	FARG_Ethernet_putConstBytes+3, 1
$7412	$ECA9	F01F			CALL	_Ethernet_putConstBytes
$7416	$C6CD	F8EB			MOVFF	FARG_Ethernet_DHCPmsg+0, FARG_Ethernet_putByte+0
$741A	$ECDF	F007			CALL	_Ethernet_putByte
$741E	$0106	    			MOVLB	6
$7420	$51CD	    			MOVF	FARG_Ethernet_DHCPmsg+0, 0, 1
$7422	$0A03	    			XORLW	3
$7424	$E11A	    			BNZ	L_Ethernet_DHCPmsg_168
$7426	$53CE	    			MOVF	FARG_Ethernet_DHCPmsg+1, 1, 1
$7428	$E118	    			BNZ	L_Ethernet_DHCPmsg_168
$742A	$	L1431_ex_L_Ethernet_DHCPmsg_168:
$742A	$0E36	    			MOVLW	54
$742C	$0108	    			MOVLB	8
$742E	$6FEB	    			MOVWF	FARG_Ethernet_putByte+0, 1
$7430	$ECDF	F007			CALL	_Ethernet_putByte
$7434	$0E04	    			MOVLW	4
$7436	$0108	    			MOVLB	8
$7438	$6FEB	    			MOVWF	FARG_Ethernet_putByte+0, 1
$743A	$ECDF	F007			CALL	_Ethernet_putByte
$743E	$0E4D	    			MOVLW	eth_j60_DHCPServerID
$7440	$0108	    			MOVLB	8
$7442	$6FD5	    			MOVWF	FARG_Ethernet_putBytes+0, 1
$7444	$0E03	    			MOVLW	@eth_j60_DHCPServerID
$7446	$6FD6	    			MOVWF	FARG_Ethernet_putBytes+1, 1
$7448	$0E04	    			MOVLW	4
$744A	$6FD7	    			MOVWF	FARG_Ethernet_putBytes+2, 1
$744C	$EC0A	F010			CALL	_Ethernet_putBytes
$7450	$0E06	    			MOVLW	6
$7452	$0106	    			MOVLB	6
$7454	$27D0	    			ADDWF	Ethernet_DHCPmsg_len_L0, 1, 1
$7456	$0E00	    			MOVLW	0
$7458	$23D1	    			ADDWFC	Ethernet_DHCPmsg_len_L0+1, 1, 1
$745A	$	L_Ethernet_DHCPmsg_168:
$745A	$0EBC	    			MOVLW	#eth_j60_dhcp_pkt_3
$745C	$0108	    			MOVLB	8
$745E	$6FAC	    			MOVWF	FARG_Ethernet_putConstBytes+0, 1
$7460	$0ED1	    			MOVLW	@#eth_j60_dhcp_pkt_3
$7462	$6FAD	    			MOVWF	FARG_Ethernet_putConstBytes+1, 1
$7464	$0E00	    			MOVLW	@@#eth_j60_dhcp_pkt_3
$7466	$6FAE	    			MOVWF	FARG_Ethernet_putConstBytes+2, 1
$7468	$0E05	    			MOVLW	5
$746A	$6FAF	    			MOVWF	FARG_Ethernet_putConstBytes+3, 1
$746C	$ECA9	F01F			CALL	_Ethernet_putConstBytes
$7470	$0106	    			MOVLB	6
$7472	$51CD	    			MOVF	FARG_Ethernet_DHCPmsg+0, 0, 1
$7474	$0A03	    			XORLW	3
$7476	$E126	    			BNZ	L_Ethernet_DHCPmsg_171
$7478	$53CE	    			MOVF	FARG_Ethernet_DHCPmsg+1, 1, 1
$747A	$E124	    			BNZ	L_Ethernet_DHCPmsg_171
$747C	$	L1455_ex_L_Ethernet_DHCPmsg_171:
$747C	$0E32	    			MOVLW	50
$747E	$0108	    			MOVLB	8
$7480	$6FEB	    			MOVWF	FARG_Ethernet_putByte+0, 1
$7482	$ECDF	F007			CALL	_Ethernet_putByte
$7486	$0E04	    			MOVLW	4
$7488	$0108	    			MOVLB	8
$748A	$6FEB	    			MOVWF	FARG_Ethernet_putByte+0, 1
$748C	$ECDF	F007			CALL	_Ethernet_putByte
$7490	$0106	    			MOVLB	6
$7492	$6BCF	    			CLRF	Ethernet_DHCPmsg_i_L0, 1
$7494	$	L_Ethernet_DHCPmsg_172:
$7494	$0E04	    			MOVLW	4
$7496	$0106	    			MOVLB	6
$7498	$5DCF	    			SUBWF	Ethernet_DHCPmsg_i_L0, 0, 1
$749A	$E20F	    			BC	L_Ethernet_DHCPmsg_173
$749C	$0E49	    			MOVLW	eth_j60_tmpIpAddr
$749E	$6EE9	    			MOVWF	FSR0L, 0
$74A0	$0E03	    			MOVLW	@eth_j60_tmpIpAddr
$74A2	$6EEA	    			MOVWF	FSR0L+1, 0
$74A4	$51CF	    			MOVF	Ethernet_DHCPmsg_i_L0, 0, 1
$74A6	$26E9	    			ADDWF	FSR0L, 1, 0
$74A8	$B0D8	    			BTFSC	STATUS, C, 0
$74AA	$2AEA	    			INCF	FSR0L+1, 1, 0
$74AC	$CFEE	F8EB			MOVFF	POSTINC0, FARG_Ethernet_putByte+0
$74B0	$ECDF	F007			CALL	_Ethernet_putByte
$74B4	$	L_Ethernet_DHCPmsg_174:
$74B4	$0106	    			MOVLB	6
$74B6	$2BCF	    			INCF	Ethernet_DHCPmsg_i_L0, 1, 1
$74B8	$D7ED	    			BRA	L_Ethernet_DHCPmsg_172
$74BA	$	L_Ethernet_DHCPmsg_173:
$74BA	$0E06	    			MOVLW	6
$74BC	$0106	    			MOVLB	6
$74BE	$27D0	    			ADDWF	Ethernet_DHCPmsg_len_L0, 1, 1
$74C0	$0E00	    			MOVLW	0
$74C2	$23D1	    			ADDWFC	Ethernet_DHCPmsg_len_L0+1, 1, 1
$74C4	$	L_Ethernet_DHCPmsg_171:
$74C4	$0EFF	    			MOVLW	255
$74C6	$0108	    			MOVLB	8
$74C8	$6FEB	    			MOVWF	FARG_Ethernet_putByte+0, 1
$74CA	$ECDF	F007			CALL	_Ethernet_putByte
$74CE	$0E51	    			MOVLW	_Ethernet_ff
$74D0	$0108	    			MOVLB	8
$74D2	$6FAC	    			MOVWF	FARG_Ethernet_sendUDP2+0, 1
$74D4	$0E03	    			MOVLW	@_Ethernet_ff
$74D6	$6FAD	    			MOVWF	FARG_Ethernet_sendUDP2+1, 1
$74D8	$0E51	    			MOVLW	_Ethernet_ff
$74DA	$6FAE	    			MOVWF	FARG_Ethernet_sendUDP2+2, 1
$74DC	$0E03	    			MOVLW	@_Ethernet_ff
$74DE	$6FAF	    			MOVWF	FARG_Ethernet_sendUDP2+3, 1
$74E0	$0E44	    			MOVLW	68
$74E2	$6FB0	    			MOVWF	FARG_Ethernet_sendUDP2+4, 1
$74E4	$0E00	    			MOVLW	0
$74E6	$6FB1	    			MOVWF	FARG_Ethernet_sendUDP2+5, 1
$74E8	$0E43	    			MOVLW	67
$74EA	$6FB2	    			MOVWF	FARG_Ethernet_sendUDP2+6, 1
$74EC	$0E00	    			MOVLW	0
$74EE	$6FB3	    			MOVWF	FARG_Ethernet_sendUDP2+7, 1
$74F0	$C6D0	F8B4			MOVFF	Ethernet_DHCPmsg_len_L0, FARG_Ethernet_sendUDP2+8
$74F4	$C6D1	F8B5			MOVFF	Ethernet_DHCPmsg_len_L0+1, FARG_Ethernet_sendUDP2+9
$74F8	$ECBF	F01F			CALL	_Ethernet_sendUDP2
$74FC	$0012	    			RETURN
$74FE	$	_Ethernet_DHCPReceive:
$74FE	$0106	    			MOVLB	6
$7500	$6BCF	    			CLRF	Ethernet_DHCPReceive_type_L0, 1
$7502	$0E3C	    			MOVLW	60
$7504	$0103	    			MOVLB	3
$7506	$6F57	    			MOVWF	eth_j60_DHCPLeaseTime, 1
$7508	$0E00	    			MOVLW	0
$750A	$6F58	    			MOVWF	eth_j60_DHCPLeaseTime+1, 1
$750C	$6F59	    			MOVWF	eth_j60_DHCPLeaseTime+2, 1
$750E	$6F5A	    			MOVWF	eth_j60_DHCPLeaseTime+3, 1
$7510	$ECD4	F020			CALL	_Ethernet_getByte
$7514	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$7518	$5000	    			MOVF	STACK_0, 0, 0
$751A	$0A02	    			XORLW	2
$751C	$A4D8	    			BTFSS	STATUS, Z, 0
$751E	$D13C	    			BRA	L_Ethernet_DHCPReceive_105
$7520	$0106	    			MOVLB	6
$7522	$6BCE	    			CLRF	Ethernet_DHCPReceive_i_L0, 1
$7524	$	L_Ethernet_DHCPReceive_106:
$7524	$0E0F	    			MOVLW	15
$7526	$0106	    			MOVLB	6
$7528	$5DCE	    			SUBWF	Ethernet_DHCPReceive_i_L0, 0, 1
$752A	$E205	    			BC	L_Ethernet_DHCPReceive_107
$752C	$ECD4	F020			CALL	_Ethernet_getByte
$7530	$	L_Ethernet_DHCPReceive_108:
$7530	$0106	    			MOVLB	6
$7532	$2BCE	    			INCF	Ethernet_DHCPReceive_i_L0, 1, 1
$7534	$D7F7	    			BRA	L_Ethernet_DHCPReceive_106
$7536	$	L_Ethernet_DHCPReceive_107:
$7536	$0E49	    			MOVLW	eth_j60_tmpIpAddr
$7538	$0108	    			MOVLB	8
$753A	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$753C	$0E03	    			MOVLW	@eth_j60_tmpIpAddr
$753E	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$7540	$0EFF	    			MOVLW	255
$7542	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$7544	$0EFF	    			MOVLW	255
$7546	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$7548	$0E04	    			MOVLW	4
$754A	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$754C	$ECD7	F020			CALL	_Ethernet_getBytes
$7550	$0106	    			MOVLB	6
$7552	$6BCE	    			CLRF	Ethernet_DHCPReceive_i_L0, 1
$7554	$	L_Ethernet_DHCPReceive_109:
$7554	$0E08	    			MOVLW	8
$7556	$0106	    			MOVLB	6
$7558	$5DCE	    			SUBWF	Ethernet_DHCPReceive_i_L0, 0, 1
$755A	$E205	    			BC	L_Ethernet_DHCPReceive_110
$755C	$ECD4	F020			CALL	_Ethernet_getByte
$7560	$	L_Ethernet_DHCPReceive_111:
$7560	$0106	    			MOVLB	6
$7562	$2BCE	    			INCF	Ethernet_DHCPReceive_i_L0, 1, 1
$7564	$D7F7	    			BRA	L_Ethernet_DHCPReceive_109
$7566	$	L_Ethernet_DHCPReceive_110:
$7566	$0106	    			MOVLB	6
$7568	$6BCE	    			CLRF	Ethernet_DHCPReceive_i_L0, 1
$756A	$	L_Ethernet_DHCPReceive_112:
$756A	$0E06	    			MOVLW	6
$756C	$0106	    			MOVLB	6
$756E	$5DCE	    			SUBWF	Ethernet_DHCPReceive_i_L0, 0, 1
$7570	$E216	    			BC	L_Ethernet_DHCPReceive_113
$7572	$ECD4	F020			CALL	_Ethernet_getByte
$7576	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$757A	$0E70	    			MOVLW	_Ethernet_macAddr
$757C	$6EE9	    			MOVWF	FSR0L, 0
$757E	$0E02	    			MOVLW	@_Ethernet_macAddr
$7580	$6EEA	    			MOVWF	FSR0L+1, 0
$7582	$0106	    			MOVLB	6
$7584	$51CE	    			MOVF	Ethernet_DHCPReceive_i_L0, 0, 1
$7586	$26E9	    			ADDWF	FSR0L, 1, 0
$7588	$B0D8	    			BTFSC	STATUS, C, 0
$758A	$2AEA	    			INCF	FSR0L+1, 1, 0
$758C	$CFEE	F005			MOVFF	POSTINC0, STACK_5
$7590	$5000	    			MOVF	STACK_0, 0, 0
$7592	$1805	    			XORWF	STACK_5, 0, 0
$7594	$A4D8	    			BTFSS	STATUS, Z, 0
$7596	$D130	    			BRA	___Ethernet_DHCPReceive_UDPInvalid
$7598	$	L_Ethernet_DHCPReceive_115:
$7598	$	L_Ethernet_DHCPReceive_114:
$7598	$0106	    			MOVLB	6
$759A	$2BCE	    			INCF	Ethernet_DHCPReceive_i_L0, 1, 1
$759C	$D7E6	    			BRA	L_Ethernet_DHCPReceive_112
$759E	$	L_Ethernet_DHCPReceive_113:
$759E	$0106	    			MOVLB	6
$75A0	$6BCE	    			CLRF	Ethernet_DHCPReceive_i_L0, 1
$75A2	$	L_Ethernet_DHCPReceive_116:
$75A2	$0ECE	    			MOVLW	206
$75A4	$0106	    			MOVLB	6
$75A6	$5DCE	    			SUBWF	Ethernet_DHCPReceive_i_L0, 0, 1
$75A8	$E205	    			BC	L_Ethernet_DHCPReceive_117
$75AA	$ECD4	F020			CALL	_Ethernet_getByte
$75AE	$	L_Ethernet_DHCPReceive_118:
$75AE	$0106	    			MOVLB	6
$75B0	$2BCE	    			INCF	Ethernet_DHCPReceive_i_L0, 1, 1
$75B2	$D7F7	    			BRA	L_Ethernet_DHCPReceive_116
$75B4	$	L_Ethernet_DHCPReceive_117:
$75B4	$0106	    			MOVLB	6
$75B6	$6BD0	    			CLRF	Ethernet_DHCPReceive_lbDone_L0, 1
$75B8	$	L_Ethernet_DHCPReceive_119:
$75B8	$ECD4	F020			CALL	_Ethernet_getByte
$75BC	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$75C0	$D0CC	    			BRA	L_Ethernet_DHCPReceive_121
$75C2	$	L_Ethernet_DHCPReceive_123:
$75C2	$ECD4	F020			CALL	_Ethernet_getByte
$75C6	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$75CA	$5000	    			MOVF	STACK_0, 0, 0
$75CC	$0A01	    			XORLW	1
$75CE	$E105	    			BNZ	L_Ethernet_DHCPReceive_124
$75D0	$ECD4	F020			CALL	_Ethernet_getByte
$75D4	$C000	F6CF			MOVFF	STACK_0, Ethernet_DHCPReceive_type_L0
$75D8	$D001	    			BRA	L_Ethernet_DHCPReceive_125
$75DA	$	L_Ethernet_DHCPReceive_124:
$75DA	$D10E	    			BRA	___Ethernet_DHCPReceive_UDPInvalid
$75DC	$	L_Ethernet_DHCPReceive_125:
$75DC	$D0D9	    			BRA	L_Ethernet_DHCPReceive_122
$75DE	$	L_Ethernet_DHCPReceive_126:
$75DE	$ECD4	F020			CALL	_Ethernet_getByte
$75E2	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$75E6	$5000	    			MOVF	STACK_0, 0, 0
$75E8	$0A04	    			XORLW	4
$75EA	$E10E	    			BNZ	L_Ethernet_DHCPReceive_127
$75EC	$0E5B	    			MOVLW	eth_j60_tmpNetMask
$75EE	$0108	    			MOVLB	8
$75F0	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$75F2	$0E03	    			MOVLW	@eth_j60_tmpNetMask
$75F4	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$75F6	$0EFF	    			MOVLW	255
$75F8	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$75FA	$0EFF	    			MOVLW	255
$75FC	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$75FE	$0E04	    			MOVLW	4
$7600	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$7602	$ECD7	F020			CALL	_Ethernet_getBytes
$7606	$D001	    			BRA	L_Ethernet_DHCPReceive_128
$7608	$	L_Ethernet_DHCPReceive_127:
$7608	$D0F7	    			BRA	___Ethernet_DHCPReceive_UDPInvalid
$760A	$	L_Ethernet_DHCPReceive_128:
$760A	$D0C2	    			BRA	L_Ethernet_DHCPReceive_122
$760C	$	L_Ethernet_DHCPReceive_129:
$760C	$ECD4	F020			CALL	_Ethernet_getByte
$7610	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$7614	$0E04	    			MOVLW	4
$7616	$5C00	    			SUBWF	STACK_0, 0, 0
$7618	$E30E	    			BNC	L_Ethernet_DHCPReceive_130
$761A	$0E5F	    			MOVLW	eth_j60_tmpGW
$761C	$0108	    			MOVLB	8
$761E	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$7620	$0E03	    			MOVLW	@eth_j60_tmpGW
$7622	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$7624	$0EFF	    			MOVLW	255
$7626	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$7628	$0EFF	    			MOVLW	255
$762A	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$762C	$0E04	    			MOVLW	4
$762E	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$7630	$ECD7	F020			CALL	_Ethernet_getBytes
$7634	$D001	    			BRA	L_Ethernet_DHCPReceive_131
$7636	$	L_Ethernet_DHCPReceive_130:
$7636	$D0E0	    			BRA	___Ethernet_DHCPReceive_UDPInvalid
$7638	$	L_Ethernet_DHCPReceive_131:
$7638	$0E04	    			MOVLW	4
$763A	$0106	    			MOVLB	6
$763C	$5FCD	    			SUBWF	Ethernet_DHCPReceive_v_L0, 1, 1
$763E	$	L_Ethernet_DHCPReceive_132:
$763E	$C6CD	F000			MOVFF	Ethernet_DHCPReceive_v_L0, STACK_0
$7642	$0106	    			MOVLB	6
$7644	$07CD	    			DECF	Ethernet_DHCPReceive_v_L0, 1, 1
$7646	$5200	    			MOVF	STACK_0, 1, 0
$7648	$E003	    			BZ	L_Ethernet_DHCPReceive_133
$764A	$ECD4	F020			CALL	_Ethernet_getByte
$764E	$D7F7	    			BRA	L_Ethernet_DHCPReceive_132
$7650	$	L_Ethernet_DHCPReceive_133:
$7650	$D09F	    			BRA	L_Ethernet_DHCPReceive_122
$7652	$	L_Ethernet_DHCPReceive_134:
$7652	$ECD4	F020			CALL	_Ethernet_getByte
$7656	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$765A	$0E04	    			MOVLW	4
$765C	$5C00	    			SUBWF	STACK_0, 0, 0
$765E	$E30E	    			BNC	L_Ethernet_DHCPReceive_135
$7660	$0E63	    			MOVLW	eth_j60_tmpDNS
$7662	$0108	    			MOVLB	8
$7664	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$7666	$0E03	    			MOVLW	@eth_j60_tmpDNS
$7668	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$766A	$0EFF	    			MOVLW	255
$766C	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$766E	$0EFF	    			MOVLW	255
$7670	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$7672	$0E04	    			MOVLW	4
$7674	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$7676	$ECD7	F020			CALL	_Ethernet_getBytes
$767A	$D001	    			BRA	L_Ethernet_DHCPReceive_136
$767C	$	L_Ethernet_DHCPReceive_135:
$767C	$D0BD	    			BRA	___Ethernet_DHCPReceive_UDPInvalid
$767E	$	L_Ethernet_DHCPReceive_136:
$767E	$0E04	    			MOVLW	4
$7680	$0106	    			MOVLB	6
$7682	$5FCD	    			SUBWF	Ethernet_DHCPReceive_v_L0, 1, 1
$7684	$	L_Ethernet_DHCPReceive_137:
$7684	$C6CD	F000			MOVFF	Ethernet_DHCPReceive_v_L0, STACK_0
$7688	$0106	    			MOVLB	6
$768A	$07CD	    			DECF	Ethernet_DHCPReceive_v_L0, 1, 1
$768C	$5200	    			MOVF	STACK_0, 1, 0
$768E	$E003	    			BZ	L_Ethernet_DHCPReceive_138
$7690	$ECD4	F020			CALL	_Ethernet_getByte
$7694	$D7F7	    			BRA	L_Ethernet_DHCPReceive_137
$7696	$	L_Ethernet_DHCPReceive_138:
$7696	$D07C	    			BRA	L_Ethernet_DHCPReceive_122
$7698	$	L_Ethernet_DHCPReceive_139:
$7698	$ECD4	F020			CALL	_Ethernet_getByte
$769C	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$76A0	$5000	    			MOVF	STACK_0, 0, 0
$76A2	$0A04	    			XORLW	4
$76A4	$E10E	    			BNZ	L_Ethernet_DHCPReceive_140
$76A6	$0ED1	    			MOVLW	Ethernet_DHCPReceive_tempServerID_L0
$76A8	$0108	    			MOVLB	8
$76AA	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$76AC	$0E06	    			MOVLW	@Ethernet_DHCPReceive_tempServerID_L0
$76AE	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$76B0	$0EFF	    			MOVLW	255
$76B2	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$76B4	$0EFF	    			MOVLW	255
$76B6	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$76B8	$0E04	    			MOVLW	4
$76BA	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$76BC	$ECD7	F020			CALL	_Ethernet_getBytes
$76C0	$D001	    			BRA	L_Ethernet_DHCPReceive_141
$76C2	$	L_Ethernet_DHCPReceive_140:
$76C2	$D09A	    			BRA	___Ethernet_DHCPReceive_UDPInvalid
$76C4	$	L_Ethernet_DHCPReceive_141:
$76C4	$D065	    			BRA	L_Ethernet_DHCPReceive_122
$76C6	$	L_Ethernet_DHCPReceive_142:
$76C6	$0E01	    			MOVLW	1
$76C8	$0106	    			MOVLB	6
$76CA	$6FD0	    			MOVWF	Ethernet_DHCPReceive_lbDone_L0, 1
$76CC	$D061	    			BRA	L_Ethernet_DHCPReceive_122
$76CE	$	L_Ethernet_DHCPReceive_143:
$76CE	$ECD4	F020			CALL	_Ethernet_getByte
$76D2	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$76D6	$5000	    			MOVF	STACK_0, 0, 0
$76D8	$0A04	    			XORLW	4
$76DA	$E12C	    			BNZ	L_Ethernet_DHCPReceive_144
$76DC	$0E57	    			MOVLW	eth_j60_DHCPLeaseTime
$76DE	$0108	    			MOVLB	8
$76E0	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$76E2	$0E03	    			MOVLW	@eth_j60_DHCPLeaseTime
$76E4	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$76E6	$0EFF	    			MOVLW	255
$76E8	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$76EA	$0EFF	    			MOVLW	255
$76EC	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$76EE	$0E04	    			MOVLW	4
$76F0	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$76F2	$ECD7	F020			CALL	_Ethernet_getBytes
$76F6	$0103	    			MOVLB	3
$76F8	$515A	    			MOVF	eth_j60_DHCPLeaseTime+3, 0, 1
$76FA	$0800	    			SUBLW	0
$76FC	$E108	    			BNZ	L_Ethernet_DHCPReceive_262
$76FE	$5159	    			MOVF	eth_j60_DHCPLeaseTime+2, 0, 1
$7700	$0800	    			SUBLW	0
$7702	$E105	    			BNZ	L_Ethernet_DHCPReceive_262
$7704	$5158	    			MOVF	eth_j60_DHCPLeaseTime+1, 0, 1
$7706	$0807	    			SUBLW	7
$7708	$E102	    			BNZ	L_Ethernet_DHCPReceive_262
$770A	$5157	    			MOVF	eth_j60_DHCPLeaseTime, 0, 1
$770C	$0808	    			SUBLW	8
$770E	$	L_Ethernet_DHCPReceive_262:
$770E	$E210	    			BC	L_Ethernet_DHCPReceive_145
$7710	$0E08	    			MOVLW	8
$7712	$6E00	    			MOVWF	STACK_0, 0
$7714	$0E07	    			MOVLW	7
$7716	$6E01	    			MOVWF	STACK_0+1, 0
$7718	$0E00	    			MOVLW	0
$771A	$6E02	    			MOVWF	STACK_0+2, 0
$771C	$6E03	    			MOVWF	STACK_0+3, 0
$771E	$5000	    			MOVF	STACK_0, 0, 0
$7720	$0103	    			MOVLB	3
$7722	$5F57	    			SUBWF	eth_j60_DHCPLeaseTime, 1, 1
$7724	$5001	    			MOVF	STACK_0+1, 0, 0
$7726	$5B58	    			SUBWFB	eth_j60_DHCPLeaseTime+1, 1, 1
$7728	$5002	    			MOVF	STACK_0+2, 0, 0
$772A	$5B59	    			SUBWFB	eth_j60_DHCPLeaseTime+2, 1, 1
$772C	$5003	    			MOVF	STACK_0+3, 0, 0
$772E	$5B5A	    			SUBWFB	eth_j60_DHCPLeaseTime+3, 1, 1
$7730	$	L_Ethernet_DHCPReceive_145:
$7730	$0103	    			MOVLB	3
$7732	$D002	    			BRA	L_Ethernet_DHCPReceive_146
$7734	$	L_Ethernet_DHCPReceive_144:
$7734	$0103	    			MOVLB	3
$7736	$D060	    			BRA	___Ethernet_DHCPReceive_UDPInvalid
$7738	$	L_Ethernet_DHCPReceive_146:
$7738	$0103	    			MOVLB	3
$773A	$D02A	    			BRA	L_Ethernet_DHCPReceive_122
$773C	$	L_Ethernet_DHCPReceive_147:
$773C	$0103	    			MOVLB	3
$773E	$ECD4	F020			CALL	_Ethernet_getByte
$7742	$C000	F6CD			MOVFF	STACK_0, Ethernet_DHCPReceive_v_L0
$7746	$	L_Ethernet_DHCPReceive_148:
$7746	$C6CD	F000			MOVFF	Ethernet_DHCPReceive_v_L0, STACK_0
$774A	$0106	    			MOVLB	6
$774C	$07CD	    			DECF	Ethernet_DHCPReceive_v_L0, 1, 1
$774E	$5200	    			MOVF	STACK_0, 1, 0
$7750	$E003	    			BZ	L_Ethernet_DHCPReceive_149
$7752	$ECD4	F020			CALL	_Ethernet_getByte
$7756	$D7F7	    			BRA	L_Ethernet_DHCPReceive_148
$7758	$	L_Ethernet_DHCPReceive_149:
$7758	$D01B	    			BRA	L_Ethernet_DHCPReceive_122
$775A	$	L_Ethernet_DHCPReceive_121:
$775A	$0106	    			MOVLB	6
$775C	$51CD	    			MOVF	Ethernet_DHCPReceive_v_L0, 0, 1
$775E	$0A35	    			XORLW	53
$7760	$B4D8	    			BTFSC	STATUS, Z, 0
$7762	$D72F	    			BRA	L_Ethernet_DHCPReceive_123
$7764	$51CD	    			MOVF	Ethernet_DHCPReceive_v_L0, 0, 1
$7766	$0A01	    			XORLW	1
$7768	$B4D8	    			BTFSC	STATUS, Z, 0
$776A	$D739	    			BRA	L_Ethernet_DHCPReceive_126
$776C	$51CD	    			MOVF	Ethernet_DHCPReceive_v_L0, 0, 1
$776E	$0A03	    			XORLW	3
$7770	$B4D8	    			BTFSC	STATUS, Z, 0
$7772	$D74C	    			BRA	L_Ethernet_DHCPReceive_129
$7774	$51CD	    			MOVF	Ethernet_DHCPReceive_v_L0, 0, 1
$7776	$0A06	    			XORLW	6
$7778	$B4D8	    			BTFSC	STATUS, Z, 0
$777A	$D76B	    			BRA	L_Ethernet_DHCPReceive_134
$777C	$51CD	    			MOVF	Ethernet_DHCPReceive_v_L0, 0, 1
$777E	$0A36	    			XORLW	54
$7780	$E08B	    			BZ	L_Ethernet_DHCPReceive_139
$7782	$51CD	    			MOVF	Ethernet_DHCPReceive_v_L0, 0, 1
$7784	$0AFF	    			XORLW	255
$7786	$E09F	    			BZ	L_Ethernet_DHCPReceive_142
$7788	$51CD	    			MOVF	Ethernet_DHCPReceive_v_L0, 0, 1
$778A	$0A33	    			XORLW	51
$778C	$E0A0	    			BZ	L_Ethernet_DHCPReceive_143
$778E	$D7D6	    			BRA	L_Ethernet_DHCPReceive_147
$7790	$	L_Ethernet_DHCPReceive_122:
$7790	$0106	    			MOVLB	6
$7792	$53D0	    			MOVF	Ethernet_DHCPReceive_lbDone_L0, 1, 1
$7794	$B4D8	    			BTFSC	STATUS, Z, 0
$7796	$D710	    			BRA	L_Ethernet_DHCPReceive_119
$7798	$	L_Ethernet_DHCPReceive_120:
$7798	$	L_Ethernet_DHCPReceive_105:
$7798	$0106	    			MOVLB	6
$779A	$51CF	    			MOVF	Ethernet_DHCPReceive_type_L0, 0, 1
$779C	$0A02	    			XORLW	2
$779E	$E110	    			BNZ	L_Ethernet_DHCPReceive_150
$77A0	$0E4D	    			MOVLW	eth_j60_DHCPServerID
$77A2	$0108	    			MOVLB	8
$77A4	$6FAC	    			MOVWF	FARG_memcpy+0, 1
$77A6	$0E03	    			MOVLW	@eth_j60_DHCPServerID
$77A8	$6FAD	    			MOVWF	FARG_memcpy+1, 1
$77AA	$0ED1	    			MOVLW	Ethernet_DHCPReceive_tempServerID_L0
$77AC	$6FAE	    			MOVWF	FARG_memcpy+2, 1
$77AE	$0E06	    			MOVLW	@Ethernet_DHCPReceive_tempServerID_L0
$77B0	$6FAF	    			MOVWF	FARG_memcpy+3, 1
$77B2	$0E04	    			MOVLW	4
$77B4	$6FB0	    			MOVWF	FARG_memcpy+4, 1
$77B6	$0E00	    			MOVLW	0
$77B8	$6FB1	    			MOVWF	FARG_memcpy+5, 1
$77BA	$ECF9	F020			CALL	_memcpy
$77BE	$D017	    			BRA	L_Ethernet_DHCPReceive_151
$77C0	$	L_Ethernet_DHCPReceive_150:
$77C0	$0E4D	    			MOVLW	eth_j60_DHCPServerID
$77C2	$0108	    			MOVLB	8
$77C4	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$77C6	$0E03	    			MOVLW	@eth_j60_DHCPServerID
$77C8	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$77CA	$0ED1	    			MOVLW	Ethernet_DHCPReceive_tempServerID_L0
$77CC	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$77CE	$0E06	    			MOVLW	@Ethernet_DHCPReceive_tempServerID_L0
$77D0	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$77D2	$0E04	    			MOVLW	4
$77D4	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$77D6	$0E00	    			MOVLW	0
$77D8	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$77DA	$EC23	F021			CALL	_memcmp
$77DE	$0E00	    			MOVLW	0
$77E0	$1801	    			XORWF	STACK_0+1, 0, 0
$77E2	$E102	    			BNZ	L_Ethernet_DHCPReceive_263
$77E4	$0E00	    			MOVLW	0
$77E6	$1800	    			XORWF	STACK_0, 0, 0
$77E8	$	L_Ethernet_DHCPReceive_263:
$77E8	$E002	    			BZ	L_Ethernet_DHCPReceive_152
$77EA	$0106	    			MOVLB	6
$77EC	$6BCF	    			CLRF	Ethernet_DHCPReceive_type_L0, 1
$77EE	$	L_Ethernet_DHCPReceive_152:
$77EE	$	L_Ethernet_DHCPReceive_151:
$77EE	$0106	    			MOVLB	6
$77F0	$0106	    			MOVLB	6
$77F2	$C6CF	F000			MOVFF	Ethernet_DHCPReceive_type_L0, STACK_0
$77F6	$0012	    			RETURN
$77F8	$	___Ethernet_DHCPReceive_UDPInvalid:
$77F8	$6A00	    			CLRF	STACK_0, 0
$77FA	$0012	    			RETURN
$77FC	$	_Ethernet_confNetwork:
$77FC	$0E67	    			MOVLW	_Ethernet_ipMask
$77FE	$0108	    			MOVLB	8
$7800	$6FAC	    			MOVWF	FARG_memcpy+0, 1
$7802	$0E03	    			MOVLW	@_Ethernet_ipMask
$7804	$6FAD	    			MOVWF	FARG_memcpy+1, 1
$7806	$C6CD	F8AE			MOVFF	FARG_Ethernet_confNetwork+0, FARG_memcpy+2
$780A	$C6CE	F8AF			MOVFF	FARG_Ethernet_confNetwork+1, FARG_memcpy+3
$780E	$0E04	    			MOVLW	4
$7810	$6FB0	    			MOVWF	FARG_memcpy+4, 1
$7812	$0E00	    			MOVLW	0
$7814	$6FB1	    			MOVWF	FARG_memcpy+5, 1
$7816	$ECF9	F020			CALL	_memcpy
$781A	$0E6B	    			MOVLW	_Ethernet_gwIpAddr
$781C	$0108	    			MOVLB	8
$781E	$6FAC	    			MOVWF	FARG_memcpy+0, 1
$7820	$0E03	    			MOVLW	@_Ethernet_gwIpAddr
$7822	$6FAD	    			MOVWF	FARG_memcpy+1, 1
$7824	$C6CF	F8AE			MOVFF	FARG_Ethernet_confNetwork+2, FARG_memcpy+2
$7828	$C6D0	F8AF			MOVFF	FARG_Ethernet_confNetwork+3, FARG_memcpy+3
$782C	$0E04	    			MOVLW	4
$782E	$6FB0	    			MOVWF	FARG_memcpy+4, 1
$7830	$0E00	    			MOVLW	0
$7832	$6FB1	    			MOVWF	FARG_memcpy+5, 1
$7834	$ECF9	F020			CALL	_memcpy
$7838	$0E6F	    			MOVLW	_Ethernet_dnsIpAddr
$783A	$0108	    			MOVLB	8
$783C	$6FAC	    			MOVWF	FARG_memcpy+0, 1
$783E	$0E03	    			MOVLW	@_Ethernet_dnsIpAddr
$7840	$6FAD	    			MOVWF	FARG_memcpy+1, 1
$7842	$C6D1	F8AE			MOVFF	FARG_Ethernet_confNetwork+4, FARG_memcpy+2
$7846	$C6D2	F8AF			MOVFF	FARG_Ethernet_confNetwork+5, FARG_memcpy+3
$784A	$0E04	    			MOVLW	4
$784C	$6FB0	    			MOVWF	FARG_memcpy+4, 1
$784E	$0E00	    			MOVLW	0
$7850	$6FB1	    			MOVWF	FARG_memcpy+5, 1
$7852	$ECF9	F020			CALL	_memcpy
$7856	$0012	    			RETURN
$7858	$	_Ethernet_putConstString:
$7858	$0106	    			MOVLB	6
$785A	$6BD1	    			CLRF	Ethernet_putConstString_ctr_L0, 1
$785C	$6BD2	    			CLRF	Ethernet_putConstString_ctr_L0+1, 1
$785E	$	L_Ethernet_putConstString_230:
$785E	$C6CD	F000			MOVFF	FARG_Ethernet_putConstString+0, STACK_0
$7862	$C6CE	F001			MOVFF	FARG_Ethernet_putConstString+1, STACK_0+1
$7866	$C6CF	F002			MOVFF	FARG_Ethernet_putConstString+2, STACK_0+2
$786A	$0E01	    			MOVLW	1
$786C	$0106	    			MOVLB	6
$786E	$27CD	    			ADDWF	FARG_Ethernet_putConstString+0, 1, 1
$7870	$0E00	    			MOVLW	0
$7872	$23CE	    			ADDWFC	FARG_Ethernet_putConstString+1, 1, 1
$7874	$23CF	    			ADDWFC	FARG_Ethernet_putConstString+2, 1, 1
$7876	$C000	FFF6			MOVFF	STACK_0, TBLPTRL
$787A	$C001	FFF7			MOVFF	STACK_0+1, TBLPTRH
$787E	$C002	FFF8			MOVFF	STACK_0+2, TBLPTRU
$7882	$0009	    			TBLRD*+
$7884	$CFF5	F000			MOVFF	TABLAT, STACK_0
$7888	$C000	F6D0			MOVFF	STACK_0, Ethernet_putConstString_temp_L0
$788C	$5200	    			MOVF	STACK_0, 1, 0
$788E	$E005	    			BZ	L_Ethernet_putConstString_231
$7890	$C6D0	FF61			MOVFF	Ethernet_putConstString_temp_L0, EDATA
$7894	$4BD1	    			INFSNZ	Ethernet_putConstString_ctr_L0, 1, 1
$7896	$2BD2	    			INCF	Ethernet_putConstString_ctr_L0+1, 1, 1
$7898	$D7E2	    			BRA	L_Ethernet_putConstString_230
$789A	$	L_Ethernet_putConstString_231:
$789A	$C6D1	F000			MOVFF	Ethernet_putConstString_ctr_L0, STACK_0
$789E	$C6D2	F001			MOVFF	Ethernet_putConstString_ctr_L0+1, STACK_0+1
$78A2	$0012	    			RETURN
$78A4	$	_My_str_n:
;ethernet.c,454 :: 			void My_str_n(unsigned char *s_out, unsigned char *s_source, unsigned char n )  // копирует /добавляет n символов
;ethernet.c,457 :: 			tmp1= tmp2= tmp3 =0;
$78A4	$0106	    			MOVLB	6
$78A6	$6BD7	    			CLRF	My_str_n_tmp3_L0, 1
$78A8	$6BD6	    			CLRF	My_str_n_tmp2_L0, 1
$78AA	$6BD5	    			CLRF	My_str_n_tmp1_L0, 1
;ethernet.c,458 :: 			for (i=1; i<(n+1); i++)  // i=1..84      !!!
$78AC	$0E01	    			MOVLW	1
$78AE	$6FD2	    			MOVWF	My_str_n_i_L0, 1
$78B0	$	L_My_str_n_106:
$78B0	$0106	    			MOVLB	6
$78B2	$51D1	    			MOVF	FARG_My_str_n+4, 0, 1
$78B4	$0F01	    			ADDLW	1
$78B6	$6E02	    			MOVWF	STACK_2, 0
$78B8	$6A03	    			CLRF	STACK_2+1, 0
$78BA	$0E00	    			MOVLW	0
$78BC	$2203	    			ADDWFC	STACK_2+1, 1, 0
$78BE	$0E80	    			MOVLW	128
$78C0	$6E00	    			MOVWF	STACK_0, 0
$78C2	$0E80	    			MOVLW	128
$78C4	$1803	    			XORWF	STACK_2+1, 0, 0
$78C6	$5C00	    			SUBWF	STACK_0, 0, 0
$78C8	$E102	    			BNZ	L_My_str_n_149
$78CA	$5002	    			MOVF	STACK_2, 0, 0
$78CC	$5DD2	    			SUBWF	My_str_n_i_L0, 0, 1
$78CE	$	L_My_str_n_149:
$78CE	$E242	    			BC	L_My_str_n_107
;ethernet.c,460 :: 			tmp1= tmp2;               // проверочный набор символов  tmp1, tmp2, tmp3, tmp
$78D0	$C6D6	F6D5			MOVFF	My_str_n_tmp2_L0, My_str_n_tmp1_L0
;ethernet.c,461 :: 			tmp2= tmp3;
$78D4	$C6D7	F6D6			MOVFF	My_str_n_tmp3_L0, My_str_n_tmp2_L0
;ethernet.c,462 :: 			tmp3= tmp;
$78D8	$C6D4	F6D7			MOVFF	My_str_n_tmp_L0, My_str_n_tmp3_L0
;ethernet.c,463 :: 			tmp = *(s_source + (i+4) );
$78DC	$0E04	    			MOVLW	4
$78DE	$0106	    			MOVLB	6
$78E0	$25D2	    			ADDWF	My_str_n_i_L0, 0, 1
$78E2	$6E00	    			MOVWF	STACK_0, 0
$78E4	$6A01	    			CLRF	STACK_0+1, 0
$78E6	$0E00	    			MOVLW	0
$78E8	$2201	    			ADDWFC	STACK_0+1, 1, 0
$78EA	$5000	    			MOVF	STACK_0, 0, 0
$78EC	$25CF	    			ADDWF	FARG_My_str_n+2, 0, 1
$78EE	$6EE9	    			MOVWF	FSR0L, 0
$78F0	$5001	    			MOVF	STACK_0+1, 0, 0
$78F2	$21D0	    			ADDWFC	FARG_My_str_n+3, 0, 1
$78F4	$6EEA	    			MOVWF	FSR0L+1, 0
$78F6	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$78FA	$C002	F6D4			MOVFF	STACK_2, My_str_n_tmp_L0
;ethernet.c,466 :: 			if (tmp == '\0') break;
$78FE	$5002	    			MOVF	STACK_2, 0, 0
$7900	$0A00	    			XORLW	0
$7902	$E028	    			BZ	L_My_str_n_107
$7904	$	L_My_str_n_109:
;ethernet.c,470 :: 			if ( (tmp != 0x0D) && (tmp != 0x0A) )   // вырезать переносы строк
$7904	$0106	    			MOVLB	6
$7906	$51D4	    			MOVF	My_str_n_tmp_L0, 0, 1
$7908	$0A0D	    			XORLW	13
$790A	$E011	    			BZ	L_My_str_n_112
$790C	$51D4	    			MOVF	My_str_n_tmp_L0, 0, 1
$790E	$0A0A	    			XORLW	10
$7910	$E00E	    			BZ	L_My_str_n_112
$7912	$	L1067_ex_L_My_str_n_112:
;ethernet.c,472 :: 			*(s_out + (i-1) ) = tmp ;
$7912	$0106	    			MOVLB	6
$7914	$05D2	    			DECF	My_str_n_i_L0, 0, 1
$7916	$6E00	    			MOVWF	STACK_0, 0
$7918	$6A01	    			CLRF	STACK_0+1, 0
$791A	$0E00	    			MOVLW	0
$791C	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$791E	$5000	    			MOVF	STACK_0, 0, 0
$7920	$25CD	    			ADDWF	FARG_My_str_n+0, 0, 1
$7922	$6EE1	    			MOVWF	FSR1L, 0
$7924	$5001	    			MOVF	STACK_0+1, 0, 0
$7926	$21CE	    			ADDWFC	FARG_My_str_n+1, 0, 1
$7928	$6EE2	    			MOVWF	FSR1L+1, 0
$792A	$C6D4	FFE6			MOVFF	My_str_n_tmp_L0, POSTINC1
;ethernet.c,473 :: 			}
$792E	$	L_My_str_n_112:
;ethernet.c,474 :: 			if ( (tmp1 == 'H') &&  (tmp2 == 'T') &&  (tmp3 == 'T') &&  (tmp == 'P') )
$792E	$0106	    			MOVLB	6
$7930	$51D5	    			MOVF	My_str_n_tmp1_L0, 0, 1
$7932	$0A48	    			XORLW	72
$7934	$E10C	    			BNZ	L_My_str_n_115
$7936	$51D6	    			MOVF	My_str_n_tmp2_L0, 0, 1
$7938	$0A54	    			XORLW	84
$793A	$E109	    			BNZ	L_My_str_n_115
$793C	$51D7	    			MOVF	My_str_n_tmp3_L0, 0, 1
$793E	$0A54	    			XORLW	84
$7940	$E106	    			BNZ	L_My_str_n_115
$7942	$51D4	    			MOVF	My_str_n_tmp_L0, 0, 1
$7944	$0A50	    			XORLW	80
$7946	$E103	    			BNZ	L_My_str_n_115
$7948	$	L1086_ex_L_My_str_n_115:
;ethernet.c,476 :: 			i++;
$7948	$0106	    			MOVLB	6
$794A	$2BD2	    			INCF	My_str_n_i_L0, 1, 1
;ethernet.c,477 :: 			break;     //  HTTP - конец инф-ции
$794C	$D003	    			BRA	L_My_str_n_107
;ethernet.c,478 :: 			}
$794E	$	L_My_str_n_115:
;ethernet.c,479 :: 			}
$794E	$	L_My_str_n_108:
;ethernet.c,458 :: 			for (i=1; i<(n+1); i++)  // i=1..84      !!!
$794E	$0106	    			MOVLB	6
$7950	$2BD2	    			INCF	My_str_n_i_L0, 1, 1
;ethernet.c,479 :: 			}
$7952	$D7AE	    			BRA	L_My_str_n_106
$7954	$	L_My_str_n_107:
;ethernet.c,480 :: 			for (k=i; k<85; k++)  // k=1..84              // добавить до 84 символов
$7954	$0106	    			MOVLB	6
$7956	$C6D2	F6D3			MOVFF	My_str_n_i_L0, My_str_n_k_L0
$795A	$	L_My_str_n_116:
$795A	$0E55	    			MOVLW	85
$795C	$0106	    			MOVLB	6
$795E	$5DD3	    			SUBWF	My_str_n_k_L0, 0, 1
$7960	$E210	    			BC	L_My_str_n_117
;ethernet.c,482 :: 			*(s_out + (k-1) ) = '_' ;
$7962	$05D3	    			DECF	My_str_n_k_L0, 0, 1
$7964	$6E00	    			MOVWF	STACK_0, 0
$7966	$6A01	    			CLRF	STACK_0+1, 0
$7968	$0E00	    			MOVLW	0
$796A	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$796C	$5000	    			MOVF	STACK_0, 0, 0
$796E	$25CD	    			ADDWF	FARG_My_str_n+0, 0, 1
$7970	$6EE1	    			MOVWF	FSR1L, 0
$7972	$5001	    			MOVF	STACK_0+1, 0, 0
$7974	$21CE	    			ADDWFC	FARG_My_str_n+1, 0, 1
$7976	$6EE2	    			MOVWF	FSR1L+1, 0
$7978	$0E5F	    			MOVLW	95
$797A	$6EE6	    			MOVWF	POSTINC1, 0
;ethernet.c,483 :: 			}
$797C	$	L_My_str_n_118:
;ethernet.c,480 :: 			for (k=i; k<85; k++)  // k=1..84              // добавить до 84 символов
$797C	$0106	    			MOVLB	6
$797E	$2BD3	    			INCF	My_str_n_k_L0, 1, 1
;ethernet.c,483 :: 			}
$7980	$D7EC	    			BRA	L_My_str_n_116
$7982	$	L_My_str_n_117:
;ethernet.c,484 :: 			}
$7982	$0012	    			RETURN
$7984	$	_log_write:
$7984	$0E20	    			MOVLW	32
$7986	$0106	    			MOVLB	6
$7988	$6FD1	    			MOVWF	lstr1_log+0, 1
$798A	$0E70	    			MOVLW	112
$798C	$6FD2	    			MOVWF	lstr1_log+1, 1
$798E	$0E6F	    			MOVLW	111
$7990	$6FD3	    			MOVWF	lstr1_log+2, 1
$7992	$0E77	    			MOVLW	119
$7994	$6FD4	    			MOVWF	lstr1_log+3, 1
$7996	$0E65	    			MOVLW	101
$7998	$6FD5	    			MOVWF	lstr1_log+4, 1
$799A	$0E72	    			MOVLW	114
$799C	$6FD6	    			MOVWF	lstr1_log+5, 1
$799E	$0E5F	    			MOVLW	95
$79A0	$6FD7	    			MOVWF	lstr1_log+6, 1
$79A2	$0E6F	    			MOVLW	111
$79A4	$6FD8	    			MOVWF	lstr1_log+7, 1
$79A6	$0E6E	    			MOVLW	110
$79A8	$6FD9	    			MOVWF	lstr1_log+8, 1
$79AA	$0E5F	    			MOVLW	95
$79AC	$6FDA	    			MOVWF	lstr1_log+9, 1
$79AE	$0E5F	    			MOVLW	95
$79B0	$6FDB	    			MOVWF	lstr1_log+10, 1
$79B2	$0E5F	    			MOVLW	95
$79B4	$6FDC	    			MOVWF	lstr1_log+11, 1
$79B6	$0E5F	    			MOVLW	95
$79B8	$6FDD	    			MOVWF	lstr1_log+12, 1
$79BA	$0E5F	    			MOVLW	95
$79BC	$6FDE	    			MOVWF	lstr1_log+13, 1
$79BE	$0E5F	    			MOVLW	95
$79C0	$6FDF	    			MOVWF	lstr1_log+14, 1
$79C2	$0E5F	    			MOVLW	95
$79C4	$6FE0	    			MOVWF	lstr1_log+15, 1
$79C6	$0E5F	    			MOVLW	95
$79C8	$6FE1	    			MOVWF	lstr1_log+16, 1
$79CA	$0E5F	    			MOVLW	95
$79CC	$6FE2	    			MOVWF	lstr1_log+17, 1
$79CE	$0E5F	    			MOVLW	95
$79D0	$6FE3	    			MOVWF	lstr1_log+18, 1
$79D2	$0E5F	    			MOVLW	95
$79D4	$6FE4	    			MOVWF	lstr1_log+19, 1
$79D6	$0E5F	    			MOVLW	95
$79D8	$6FE5	    			MOVWF	lstr1_log+20, 1
$79DA	$0E5F	    			MOVLW	95
$79DC	$6FE6	    			MOVWF	lstr1_log+21, 1
$79DE	$0E5F	    			MOVLW	95
$79E0	$6FE7	    			MOVWF	lstr1_log+22, 1
$79E2	$0E5F	    			MOVLW	95
$79E4	$6FE8	    			MOVWF	lstr1_log+23, 1
$79E6	$0E5F	    			MOVLW	95
$79E8	$6FE9	    			MOVWF	lstr1_log+24, 1
$79EA	$0E5F	    			MOVLW	95
$79EC	$6FEA	    			MOVWF	lstr1_log+25, 1
$79EE	$0E5F	    			MOVLW	95
$79F0	$6FEB	    			MOVWF	lstr1_log+26, 1
$79F2	$0E5F	    			MOVLW	95
$79F4	$6FEC	    			MOVWF	lstr1_log+27, 1
$79F6	$0E5F	    			MOVLW	95
$79F8	$6FED	    			MOVWF	lstr1_log+28, 1
$79FA	$0E5F	    			MOVLW	95
$79FC	$6FEE	    			MOVWF	lstr1_log+29, 1
$79FE	$0E5F	    			MOVLW	95
$7A00	$6FEF	    			MOVWF	lstr1_log+30, 1
$7A02	$0E5F	    			MOVLW	95
$7A04	$6FF0	    			MOVWF	lstr1_log+31, 1
$7A06	$0E5F	    			MOVLW	95
$7A08	$6FF1	    			MOVWF	lstr1_log+32, 1
$7A0A	$0E5F	    			MOVLW	95
$7A0C	$6FF2	    			MOVWF	lstr1_log+33, 1
$7A0E	$0E5F	    			MOVLW	95
$7A10	$6FF3	    			MOVWF	lstr1_log+34, 1
$7A12	$0E5F	    			MOVLW	95
$7A14	$6FF4	    			MOVWF	lstr1_log+35, 1
$7A16	$0E5F	    			MOVLW	95
$7A18	$6FF5	    			MOVWF	lstr1_log+36, 1
$7A1A	$0E5F	    			MOVLW	95
$7A1C	$6FF6	    			MOVWF	lstr1_log+37, 1
$7A1E	$0E5F	    			MOVLW	95
$7A20	$6FF7	    			MOVWF	lstr1_log+38, 1
$7A22	$0E5F	    			MOVLW	95
$7A24	$6FF8	    			MOVWF	lstr1_log+39, 1
$7A26	$0E5F	    			MOVLW	95
$7A28	$6FF9	    			MOVWF	lstr1_log+40, 1
$7A2A	$0E5F	    			MOVLW	95
$7A2C	$6FFA	    			MOVWF	lstr1_log+41, 1
$7A2E	$0E5F	    			MOVLW	95
$7A30	$6FFB	    			MOVWF	lstr1_log+42, 1
$7A32	$0E5F	    			MOVLW	95
$7A34	$6FFC	    			MOVWF	lstr1_log+43, 1
$7A36	$0E5F	    			MOVLW	95
$7A38	$6FFD	    			MOVWF	lstr1_log+44, 1
$7A3A	$0E5F	    			MOVLW	95
$7A3C	$6FFE	    			MOVWF	lstr1_log+45, 1
$7A3E	$0E5F	    			MOVLW	95
$7A40	$6FFF	    			MOVWF	lstr1_log+46, 1
$7A42	$0E5F	    			MOVLW	95
$7A44	$0107	    			MOVLB	7
$7A46	$6F00	    			MOVWF	lstr1_log+47, 1
$7A48	$0E5F	    			MOVLW	95
$7A4A	$6F01	    			MOVWF	lstr1_log+48, 1
$7A4C	$0E5F	    			MOVLW	95
$7A4E	$6F02	    			MOVWF	lstr1_log+49, 1
$7A50	$0E5F	    			MOVLW	95
$7A52	$6F03	    			MOVWF	lstr1_log+50, 1
$7A54	$0E5F	    			MOVLW	95
$7A56	$6F04	    			MOVWF	lstr1_log+51, 1
$7A58	$0E5F	    			MOVLW	95
$7A5A	$6F05	    			MOVWF	lstr1_log+52, 1
$7A5C	$0E5F	    			MOVLW	95
$7A5E	$6F06	    			MOVWF	lstr1_log+53, 1
$7A60	$0E5F	    			MOVLW	95
$7A62	$6F07	    			MOVWF	lstr1_log+54, 1
$7A64	$0E5F	    			MOVLW	95
$7A66	$6F08	    			MOVWF	lstr1_log+55, 1
$7A68	$0E5F	    			MOVLW	95
$7A6A	$6F09	    			MOVWF	lstr1_log+56, 1
$7A6C	$0E5F	    			MOVLW	95
$7A6E	$6F0A	    			MOVWF	lstr1_log+57, 1
$7A70	$0E5F	    			MOVLW	95
$7A72	$6F0B	    			MOVWF	lstr1_log+58, 1
$7A74	$0E5F	    			MOVLW	95
$7A76	$6F0C	    			MOVWF	lstr1_log+59, 1
$7A78	$0E5F	    			MOVLW	95
$7A7A	$6F0D	    			MOVWF	lstr1_log+60, 1
$7A7C	$0E5F	    			MOVLW	95
$7A7E	$6F0E	    			MOVWF	lstr1_log+61, 1
$7A80	$0E5F	    			MOVLW	95
$7A82	$6F0F	    			MOVWF	lstr1_log+62, 1
$7A84	$0E5F	    			MOVLW	95
$7A86	$6F10	    			MOVWF	lstr1_log+63, 1
$7A88	$0E5F	    			MOVLW	95
$7A8A	$6F11	    			MOVWF	lstr1_log+64, 1
$7A8C	$0E5F	    			MOVLW	95
$7A8E	$6F12	    			MOVWF	lstr1_log+65, 1
$7A90	$0E5F	    			MOVLW	95
$7A92	$6F13	    			MOVWF	lstr1_log+66, 1
$7A94	$0E5F	    			MOVLW	95
$7A96	$6F14	    			MOVWF	lstr1_log+67, 1
$7A98	$0E5F	    			MOVLW	95
$7A9A	$6F15	    			MOVWF	lstr1_log+68, 1
$7A9C	$0E5F	    			MOVLW	95
$7A9E	$6F16	    			MOVWF	lstr1_log+69, 1
$7AA0	$0E5F	    			MOVLW	95
$7AA2	$6F17	    			MOVWF	lstr1_log+70, 1
$7AA4	$0E5F	    			MOVLW	95
$7AA6	$6F18	    			MOVWF	lstr1_log+71, 1
$7AA8	$0E5F	    			MOVLW	95
$7AAA	$6F19	    			MOVWF	lstr1_log+72, 1
$7AAC	$0E5F	    			MOVLW	95
$7AAE	$6F1A	    			MOVWF	lstr1_log+73, 1
$7AB0	$0E5F	    			MOVLW	95
$7AB2	$6F1B	    			MOVWF	lstr1_log+74, 1
$7AB4	$0E5F	    			MOVLW	95
$7AB6	$6F1C	    			MOVWF	lstr1_log+75, 1
$7AB8	$0E5F	    			MOVLW	95
$7ABA	$6F1D	    			MOVWF	lstr1_log+76, 1
$7ABC	$0E5F	    			MOVLW	95
$7ABE	$6F1E	    			MOVWF	lstr1_log+77, 1
$7AC0	$0E5F	    			MOVLW	95
$7AC2	$6F1F	    			MOVWF	lstr1_log+78, 1
$7AC4	$0E5F	    			MOVLW	95
$7AC6	$6F20	    			MOVWF	lstr1_log+79, 1
$7AC8	$0E5F	    			MOVLW	95
$7ACA	$6F21	    			MOVWF	lstr1_log+80, 1
$7ACC	$0E5F	    			MOVLW	95
$7ACE	$6F22	    			MOVWF	lstr1_log+81, 1
$7AD0	$0E5F	    			MOVLW	95
$7AD2	$6F23	    			MOVWF	lstr1_log+82, 1
$7AD4	$0E5F	    			MOVLW	95
$7AD6	$6F24	    			MOVWF	lstr1_log+83, 1
$7AD8	$0E5F	    			MOVLW	95
$7ADA	$6F25	    			MOVWF	lstr1_log+84, 1
$7ADC	$0E5F	    			MOVLW	95
$7ADE	$6F26	    			MOVWF	lstr1_log+85, 1
$7AE0	$0E5F	    			MOVLW	95
$7AE2	$6F27	    			MOVWF	lstr1_log+86, 1
$7AE4	$0E5F	    			MOVLW	95
$7AE6	$6F28	    			MOVWF	lstr1_log+87, 1
$7AE8	$0E5F	    			MOVLW	95
$7AEA	$6F29	    			MOVWF	lstr1_log+88, 1
$7AEC	$0E5F	    			MOVLW	95
$7AEE	$6F2A	    			MOVWF	lstr1_log+89, 1
$7AF0	$0E5F	    			MOVLW	95
$7AF2	$6F2B	    			MOVWF	lstr1_log+90, 1
$7AF4	$0E5F	    			MOVLW	95
$7AF6	$6F2C	    			MOVWF	lstr1_log+91, 1
$7AF8	$0E5F	    			MOVLW	95
$7AFA	$6F2D	    			MOVWF	lstr1_log+92, 1
$7AFC	$0E5F	    			MOVLW	95
$7AFE	$6F2E	    			MOVWF	lstr1_log+93, 1
$7B00	$6B2F	    			CLRF	lstr1_log+94, 1
$7B02	$0E0D	    			MOVLW	13
$7B04	$6F30	    			MOVWF	lstr2_log+0, 1
$7B06	$0E0A	    			MOVLW	10
$7B08	$6F31	    			MOVWF	lstr2_log+1, 1
$7B0A	$6B32	    			CLRF	lstr2_log+2, 1
$7B0C	$0E20	    			MOVLW	32
$7B0E	$6F33	    			MOVWF	lstr3_log+0, 1
$7B10	$0E63	    			MOVLW	99
$7B12	$6F34	    			MOVWF	lstr3_log+1, 1
$7B14	$0E6F	    			MOVLW	111
$7B16	$6F35	    			MOVWF	lstr3_log+2, 1
$7B18	$0E6D	    			MOVLW	109
$7B1A	$6F36	    			MOVWF	lstr3_log+3, 1
$7B1C	$0E6D	    			MOVLW	109
$7B1E	$6F37	    			MOVWF	lstr3_log+4, 1
$7B20	$0E61	    			MOVLW	97
$7B22	$6F38	    			MOVWF	lstr3_log+5, 1
$7B24	$0E6E	    			MOVLW	110
$7B26	$6F39	    			MOVWF	lstr3_log+6, 1
$7B28	$0E64	    			MOVLW	100
$7B2A	$6F3A	    			MOVWF	lstr3_log+7, 1
$7B2C	$6B3B	    			CLRF	lstr3_log+8, 1
$7B2E	$0E0D	    			MOVLW	13
$7B30	$6F3C	    			MOVWF	lstr4_log+0, 1
$7B32	$0E0A	    			MOVLW	10
$7B34	$6F3D	    			MOVWF	lstr4_log+1, 1
$7B36	$6B3E	    			CLRF	lstr4_log+2, 1
$7B38	$0E20	    			MOVLW	32
$7B3A	$6F3F	    			MOVWF	lstr5_log+0, 1
$7B3C	$0E20	    			MOVLW	32
$7B3E	$6F40	    			MOVWF	lstr5_log+1, 1
$7B40	$0E20	    			MOVLW	32
$7B42	$6F41	    			MOVWF	lstr5_log+2, 1
$7B44	$0E20	    			MOVLW	32
$7B46	$6F42	    			MOVWF	lstr5_log+3, 1
$7B48	$0E20	    			MOVLW	32
$7B4A	$6F43	    			MOVWF	lstr5_log+4, 1
$7B4C	$0E63	    			MOVLW	99
$7B4E	$6F44	    			MOVWF	lstr5_log+5, 1
$7B50	$0E6D	    			MOVLW	109
$7B52	$6F45	    			MOVWF	lstr5_log+6, 1
$7B54	$0E64	    			MOVLW	100
$7B56	$6F46	    			MOVWF	lstr5_log+7, 1
$7B58	$6B47	    			CLRF	lstr5_log+8, 1
$7B5A	$0E20	    			MOVLW	32
$7B5C	$6F48	    			MOVWF	lstr6_log+0, 1
$7B5E	$0E20	    			MOVLW	32
$7B60	$6F49	    			MOVWF	lstr6_log+1, 1
$7B62	$0E20	    			MOVLW	32
$7B64	$6F4A	    			MOVWF	lstr6_log+2, 1
$7B66	$0E20	    			MOVLW	32
$7B68	$6F4B	    			MOVWF	lstr6_log+3, 1
$7B6A	$0E20	    			MOVLW	32
$7B6C	$6F4C	    			MOVWF	lstr6_log+4, 1
$7B6E	$0E20	    			MOVLW	32
$7B70	$6F4D	    			MOVWF	lstr6_log+5, 1
$7B72	$0E20	    			MOVLW	32
$7B74	$6F4E	    			MOVWF	lstr6_log+6, 1
$7B76	$0E20	    			MOVLW	32
$7B78	$6F4F	    			MOVWF	lstr6_log+7, 1
$7B7A	$0E20	    			MOVLW	32
$7B7C	$6F50	    			MOVWF	lstr6_log+8, 1
$7B7E	$0E20	    			MOVLW	32
$7B80	$6F51	    			MOVWF	lstr6_log+9, 1
$7B82	$0E20	    			MOVLW	32
$7B84	$6F52	    			MOVWF	lstr6_log+10, 1
$7B86	$0E20	    			MOVLW	32
$7B88	$6F53	    			MOVWF	lstr6_log+11, 1
$7B8A	$0E20	    			MOVLW	32
$7B8C	$6F54	    			MOVWF	lstr6_log+12, 1
$7B8E	$0E20	    			MOVLW	32
$7B90	$6F55	    			MOVWF	lstr6_log+13, 1
$7B92	$0E20	    			MOVLW	32
$7B94	$6F56	    			MOVWF	lstr6_log+14, 1
$7B96	$0E20	    			MOVLW	32
$7B98	$6F57	    			MOVWF	lstr6_log+15, 1
$7B9A	$0E20	    			MOVLW	32
$7B9C	$6F58	    			MOVWF	lstr6_log+16, 1
$7B9E	$0E20	    			MOVLW	32
$7BA0	$6F59	    			MOVWF	lstr6_log+17, 1
$7BA2	$0E20	    			MOVLW	32
$7BA4	$6F5A	    			MOVWF	lstr6_log+18, 1
$7BA6	$0E20	    			MOVLW	32
$7BA8	$6F5B	    			MOVWF	lstr6_log+19, 1
$7BAA	$0E20	    			MOVLW	32
$7BAC	$6F5C	    			MOVWF	lstr6_log+20, 1
$7BAE	$0E20	    			MOVLW	32
$7BB0	$6F5D	    			MOVWF	lstr6_log+21, 1
$7BB2	$0E20	    			MOVLW	32
$7BB4	$6F5E	    			MOVWF	lstr6_log+22, 1
$7BB6	$0E20	    			MOVLW	32
$7BB8	$6F5F	    			MOVWF	lstr6_log+23, 1
$7BBA	$0E20	    			MOVLW	32
$7BBC	$6F60	    			MOVWF	lstr6_log+24, 1
$7BBE	$0E20	    			MOVLW	32
$7BC0	$6F61	    			MOVWF	lstr6_log+25, 1
$7BC2	$0E20	    			MOVLW	32
$7BC4	$6F62	    			MOVWF	lstr6_log+26, 1
$7BC6	$0E20	    			MOVLW	32
$7BC8	$6F63	    			MOVWF	lstr6_log+27, 1
$7BCA	$0E20	    			MOVLW	32
$7BCC	$6F64	    			MOVWF	lstr6_log+28, 1
$7BCE	$0E20	    			MOVLW	32
$7BD0	$6F65	    			MOVWF	lstr6_log+29, 1
$7BD2	$0E20	    			MOVLW	32
$7BD4	$6F66	    			MOVWF	lstr6_log+30, 1
$7BD6	$0E20	    			MOVLW	32
$7BD8	$6F67	    			MOVWF	lstr6_log+31, 1
$7BDA	$0E20	    			MOVLW	32
$7BDC	$6F68	    			MOVWF	lstr6_log+32, 1
$7BDE	$0E20	    			MOVLW	32
$7BE0	$6F69	    			MOVWF	lstr6_log+33, 1
$7BE2	$0E20	    			MOVLW	32
$7BE4	$6F6A	    			MOVWF	lstr6_log+34, 1
$7BE6	$0E20	    			MOVLW	32
$7BE8	$6F6B	    			MOVWF	lstr6_log+35, 1
$7BEA	$0E20	    			MOVLW	32
$7BEC	$6F6C	    			MOVWF	lstr6_log+36, 1
$7BEE	$0E20	    			MOVLW	32
$7BF0	$6F6D	    			MOVWF	lstr6_log+37, 1
$7BF2	$0E20	    			MOVLW	32
$7BF4	$6F6E	    			MOVWF	lstr6_log+38, 1
$7BF6	$0E20	    			MOVLW	32
$7BF8	$6F6F	    			MOVWF	lstr6_log+39, 1
$7BFA	$0E20	    			MOVLW	32
$7BFC	$6F70	    			MOVWF	lstr6_log+40, 1
$7BFE	$0E20	    			MOVLW	32
$7C00	$6F71	    			MOVWF	lstr6_log+41, 1
$7C02	$0E20	    			MOVLW	32
$7C04	$6F72	    			MOVWF	lstr6_log+42, 1
$7C06	$0E20	    			MOVLW	32
$7C08	$6F73	    			MOVWF	lstr6_log+43, 1
$7C0A	$0E20	    			MOVLW	32
$7C0C	$6F74	    			MOVWF	lstr6_log+44, 1
$7C0E	$0E20	    			MOVLW	32
$7C10	$6F75	    			MOVWF	lstr6_log+45, 1
$7C12	$0E20	    			MOVLW	32
$7C14	$6F76	    			MOVWF	lstr6_log+46, 1
$7C16	$0E20	    			MOVLW	32
$7C18	$6F77	    			MOVWF	lstr6_log+47, 1
$7C1A	$0E20	    			MOVLW	32
$7C1C	$6F78	    			MOVWF	lstr6_log+48, 1
$7C1E	$0E20	    			MOVLW	32
$7C20	$6F79	    			MOVWF	lstr6_log+49, 1
$7C22	$0E20	    			MOVLW	32
$7C24	$6F7A	    			MOVWF	lstr6_log+50, 1
$7C26	$0E20	    			MOVLW	32
$7C28	$6F7B	    			MOVWF	lstr6_log+51, 1
$7C2A	$0E20	    			MOVLW	32
$7C2C	$6F7C	    			MOVWF	lstr6_log+52, 1
$7C2E	$0E20	    			MOVLW	32
$7C30	$6F7D	    			MOVWF	lstr6_log+53, 1
$7C32	$0E20	    			MOVLW	32
$7C34	$6F7E	    			MOVWF	lstr6_log+54, 1
$7C36	$0E20	    			MOVLW	32
$7C38	$6F7F	    			MOVWF	lstr6_log+55, 1
$7C3A	$6B80	    			CLRF	lstr6_log+56, 1
$7C3C	$0E0D	    			MOVLW	13
$7C3E	$6F81	    			MOVWF	lstr7_log+0, 1
$7C40	$0E0A	    			MOVLW	10
$7C42	$6F82	    			MOVWF	lstr7_log+1, 1
$7C44	$6B83	    			CLRF	lstr7_log+2, 1
$7C46	$0E20	    			MOVLW	32
$7C48	$6F84	    			MOVWF	lstr8_log+0, 1
$7C4A	$0E20	    			MOVLW	32
$7C4C	$6F85	    			MOVWF	lstr8_log+1, 1
$7C4E	$0E20	    			MOVLW	32
$7C50	$6F86	    			MOVWF	lstr8_log+2, 1
$7C52	$0E20	    			MOVLW	32
$7C54	$6F87	    			MOVWF	lstr8_log+3, 1
$7C56	$0E20	    			MOVLW	32
$7C58	$6F88	    			MOVWF	lstr8_log+4, 1
$7C5A	$0E20	    			MOVLW	32
$7C5C	$6F89	    			MOVWF	lstr8_log+5, 1
$7C5E	$0E69	    			MOVLW	105
$7C60	$6F8A	    			MOVWF	lstr8_log+6, 1
$7C62	$0E70	    			MOVLW	112
$7C64	$6F8B	    			MOVWF	lstr8_log+7, 1
$7C66	$6B8C	    			CLRF	lstr8_log+8, 1
$7C68	$0E20	    			MOVLW	32
$7C6A	$6F8D	    			MOVWF	lstr9_log+0, 1
$7C6C	$0E20	    			MOVLW	32
$7C6E	$6F8E	    			MOVWF	lstr9_log+1, 1
$7C70	$0E20	    			MOVLW	32
$7C72	$6F8F	    			MOVWF	lstr9_log+2, 1
$7C74	$0E20	    			MOVLW	32
$7C76	$6F90	    			MOVWF	lstr9_log+3, 1
$7C78	$0E20	    			MOVLW	32
$7C7A	$6F91	    			MOVWF	lstr9_log+4, 1
$7C7C	$0E20	    			MOVLW	32
$7C7E	$6F92	    			MOVWF	lstr9_log+5, 1
$7C80	$0E20	    			MOVLW	32
$7C82	$6F93	    			MOVWF	lstr9_log+6, 1
$7C84	$0E20	    			MOVLW	32
$7C86	$6F94	    			MOVWF	lstr9_log+7, 1
$7C88	$0E20	    			MOVLW	32
$7C8A	$6F95	    			MOVWF	lstr9_log+8, 1
$7C8C	$0E20	    			MOVLW	32
$7C8E	$6F96	    			MOVWF	lstr9_log+9, 1
$7C90	$0E20	    			MOVLW	32
$7C92	$6F97	    			MOVWF	lstr9_log+10, 1
$7C94	$0E20	    			MOVLW	32
$7C96	$6F98	    			MOVWF	lstr9_log+11, 1
$7C98	$0E20	    			MOVLW	32
$7C9A	$6F99	    			MOVWF	lstr9_log+12, 1
$7C9C	$0E20	    			MOVLW	32
$7C9E	$6F9A	    			MOVWF	lstr9_log+13, 1
$7CA0	$0E20	    			MOVLW	32
$7CA2	$6F9B	    			MOVWF	lstr9_log+14, 1
$7CA4	$0E20	    			MOVLW	32
$7CA6	$6F9C	    			MOVWF	lstr9_log+15, 1
$7CA8	$0E20	    			MOVLW	32
$7CAA	$6F9D	    			MOVWF	lstr9_log+16, 1
$7CAC	$0E20	    			MOVLW	32
$7CAE	$6F9E	    			MOVWF	lstr9_log+17, 1
$7CB0	$0E20	    			MOVLW	32
$7CB2	$6F9F	    			MOVWF	lstr9_log+18, 1
$7CB4	$0E20	    			MOVLW	32
$7CB6	$6FA0	    			MOVWF	lstr9_log+19, 1
$7CB8	$0E20	    			MOVLW	32
$7CBA	$6FA1	    			MOVWF	lstr9_log+20, 1
$7CBC	$0E20	    			MOVLW	32
$7CBE	$6FA2	    			MOVWF	lstr9_log+21, 1
$7CC0	$0E20	    			MOVLW	32
$7CC2	$6FA3	    			MOVWF	lstr9_log+22, 1
$7CC4	$0E20	    			MOVLW	32
$7CC6	$6FA4	    			MOVWF	lstr9_log+23, 1
$7CC8	$0E20	    			MOVLW	32
$7CCA	$6FA5	    			MOVWF	lstr9_log+24, 1
$7CCC	$0E20	    			MOVLW	32
$7CCE	$6FA6	    			MOVWF	lstr9_log+25, 1
$7CD0	$0E20	    			MOVLW	32
$7CD2	$6FA7	    			MOVWF	lstr9_log+26, 1
$7CD4	$0E20	    			MOVLW	32
$7CD6	$6FA8	    			MOVWF	lstr9_log+27, 1
$7CD8	$0E20	    			MOVLW	32
$7CDA	$6FA9	    			MOVWF	lstr9_log+28, 1
$7CDC	$0E20	    			MOVLW	32
$7CDE	$6FAA	    			MOVWF	lstr9_log+29, 1
$7CE0	$0E20	    			MOVLW	32
$7CE2	$6FAB	    			MOVWF	lstr9_log+30, 1
$7CE4	$0E20	    			MOVLW	32
$7CE6	$6FAC	    			MOVWF	lstr9_log+31, 1
$7CE8	$0E20	    			MOVLW	32
$7CEA	$6FAD	    			MOVWF	lstr9_log+32, 1
$7CEC	$0E20	    			MOVLW	32
$7CEE	$6FAE	    			MOVWF	lstr9_log+33, 1
$7CF0	$0E20	    			MOVLW	32
$7CF2	$6FAF	    			MOVWF	lstr9_log+34, 1
$7CF4	$0E20	    			MOVLW	32
$7CF6	$6FB0	    			MOVWF	lstr9_log+35, 1
$7CF8	$0E20	    			MOVLW	32
$7CFA	$6FB1	    			MOVWF	lstr9_log+36, 1
$7CFC	$0E20	    			MOVLW	32
$7CFE	$6FB2	    			MOVWF	lstr9_log+37, 1
$7D00	$0E20	    			MOVLW	32
$7D02	$6FB3	    			MOVWF	lstr9_log+38, 1
$7D04	$0E20	    			MOVLW	32
$7D06	$6FB4	    			MOVWF	lstr9_log+39, 1
$7D08	$0E20	    			MOVLW	32
$7D0A	$6FB5	    			MOVWF	lstr9_log+40, 1
$7D0C	$0E20	    			MOVLW	32
$7D0E	$6FB6	    			MOVWF	lstr9_log+41, 1
$7D10	$0E20	    			MOVLW	32
$7D12	$6FB7	    			MOVWF	lstr9_log+42, 1
$7D14	$0E20	    			MOVLW	32
$7D16	$6FB8	    			MOVWF	lstr9_log+43, 1
$7D18	$0E20	    			MOVLW	32
$7D1A	$6FB9	    			MOVWF	lstr9_log+44, 1
$7D1C	$0E20	    			MOVLW	32
$7D1E	$6FBA	    			MOVWF	lstr9_log+45, 1
$7D20	$0E20	    			MOVLW	32
$7D22	$6FBB	    			MOVWF	lstr9_log+46, 1
$7D24	$0E20	    			MOVLW	32
$7D26	$6FBC	    			MOVWF	lstr9_log+47, 1
$7D28	$0E20	    			MOVLW	32
$7D2A	$6FBD	    			MOVWF	lstr9_log+48, 1
$7D2C	$0E20	    			MOVLW	32
$7D2E	$6FBE	    			MOVWF	lstr9_log+49, 1
$7D30	$0E20	    			MOVLW	32
$7D32	$6FBF	    			MOVWF	lstr9_log+50, 1
$7D34	$0E20	    			MOVLW	32
$7D36	$6FC0	    			MOVWF	lstr9_log+51, 1
$7D38	$0E20	    			MOVLW	32
$7D3A	$6FC1	    			MOVWF	lstr9_log+52, 1
$7D3C	$0E20	    			MOVLW	32
$7D3E	$6FC2	    			MOVWF	lstr9_log+53, 1
$7D40	$0E20	    			MOVLW	32
$7D42	$6FC3	    			MOVWF	lstr9_log+54, 1
$7D44	$0E20	    			MOVLW	32
$7D46	$6FC4	    			MOVWF	lstr9_log+55, 1
$7D48	$6BC5	    			CLRF	lstr9_log+56, 1
$7D4A	$0E0D	    			MOVLW	13
$7D4C	$6FC6	    			MOVWF	lstr10_log+0, 1
$7D4E	$0E0A	    			MOVLW	10
$7D50	$6FC7	    			MOVWF	lstr10_log+1, 1
$7D52	$6BC8	    			CLRF	lstr10_log+2, 1
$7D54	$0E20	    			MOVLW	32
$7D56	$6FC9	    			MOVWF	lstr11_log+0, 1
$7D58	$0E20	    			MOVLW	32
$7D5A	$6FCA	    			MOVWF	lstr11_log+1, 1
$7D5C	$0E20	    			MOVLW	32
$7D5E	$6FCB	    			MOVWF	lstr11_log+2, 1
$7D60	$0E20	    			MOVLW	32
$7D62	$6FCC	    			MOVWF	lstr11_log+3, 1
$7D64	$0E20	    			MOVLW	32
$7D66	$6FCD	    			MOVWF	lstr11_log+4, 1
$7D68	$0E20	    			MOVLW	32
$7D6A	$6FCE	    			MOVWF	lstr11_log+5, 1
$7D6C	$0E20	    			MOVLW	32
$7D6E	$6FCF	    			MOVWF	lstr11_log+6, 1
$7D70	$0E20	    			MOVLW	32
$7D72	$6FD0	    			MOVWF	lstr11_log+7, 1
$7D74	$0E20	    			MOVLW	32
$7D76	$6FD1	    			MOVWF	lstr11_log+8, 1
$7D78	$0E20	    			MOVLW	32
$7D7A	$6FD2	    			MOVWF	lstr11_log+9, 1
$7D7C	$0E20	    			MOVLW	32
$7D7E	$6FD3	    			MOVWF	lstr11_log+10, 1
$7D80	$0E20	    			MOVLW	32
$7D82	$6FD4	    			MOVWF	lstr11_log+11, 1
$7D84	$0E20	    			MOVLW	32
$7D86	$6FD5	    			MOVWF	lstr11_log+12, 1
$7D88	$0E20	    			MOVLW	32
$7D8A	$6FD6	    			MOVWF	lstr11_log+13, 1
$7D8C	$0E20	    			MOVLW	32
$7D8E	$6FD7	    			MOVWF	lstr11_log+14, 1
$7D90	$0E20	    			MOVLW	32
$7D92	$6FD8	    			MOVWF	lstr11_log+15, 1
$7D94	$0E20	    			MOVLW	32
$7D96	$6FD9	    			MOVWF	lstr11_log+16, 1
$7D98	$0E20	    			MOVLW	32
$7D9A	$6FDA	    			MOVWF	lstr11_log+17, 1
$7D9C	$0E20	    			MOVLW	32
$7D9E	$6FDB	    			MOVWF	lstr11_log+18, 1
$7DA0	$0E20	    			MOVLW	32
$7DA2	$6FDC	    			MOVWF	lstr11_log+19, 1
$7DA4	$0E20	    			MOVLW	32
$7DA6	$6FDD	    			MOVWF	lstr11_log+20, 1
$7DA8	$0E20	    			MOVLW	32
$7DAA	$6FDE	    			MOVWF	lstr11_log+21, 1
$7DAC	$0E20	    			MOVLW	32
$7DAE	$6FDF	    			MOVWF	lstr11_log+22, 1
$7DB0	$0E20	    			MOVLW	32
$7DB2	$6FE0	    			MOVWF	lstr11_log+23, 1
$7DB4	$0E20	    			MOVLW	32
$7DB6	$6FE1	    			MOVWF	lstr11_log+24, 1
$7DB8	$0E20	    			MOVLW	32
$7DBA	$6FE2	    			MOVWF	lstr11_log+25, 1
$7DBC	$0E20	    			MOVLW	32
$7DBE	$6FE3	    			MOVWF	lstr11_log+26, 1
$7DC0	$0E20	    			MOVLW	32
$7DC2	$6FE4	    			MOVWF	lstr11_log+27, 1
$7DC4	$0E20	    			MOVLW	32
$7DC6	$6FE5	    			MOVWF	lstr11_log+28, 1
$7DC8	$0E20	    			MOVLW	32
$7DCA	$6FE6	    			MOVWF	lstr11_log+29, 1
$7DCC	$0E20	    			MOVLW	32
$7DCE	$6FE7	    			MOVWF	lstr11_log+30, 1
$7DD0	$0E20	    			MOVLW	32
$7DD2	$6FE8	    			MOVWF	lstr11_log+31, 1
$7DD4	$0E20	    			MOVLW	32
$7DD6	$6FE9	    			MOVWF	lstr11_log+32, 1
$7DD8	$0E20	    			MOVLW	32
$7DDA	$6FEA	    			MOVWF	lstr11_log+33, 1
$7DDC	$0E20	    			MOVLW	32
$7DDE	$6FEB	    			MOVWF	lstr11_log+34, 1
$7DE0	$0E20	    			MOVLW	32
$7DE2	$6FEC	    			MOVWF	lstr11_log+35, 1
$7DE4	$0E20	    			MOVLW	32
$7DE6	$6FED	    			MOVWF	lstr11_log+36, 1
$7DE8	$0E20	    			MOVLW	32
$7DEA	$6FEE	    			MOVWF	lstr11_log+37, 1
$7DEC	$0E20	    			MOVLW	32
$7DEE	$6FEF	    			MOVWF	lstr11_log+38, 1
$7DF0	$0E20	    			MOVLW	32
$7DF2	$6FF0	    			MOVWF	lstr11_log+39, 1
$7DF4	$0E20	    			MOVLW	32
$7DF6	$6FF1	    			MOVWF	lstr11_log+40, 1
$7DF8	$0E20	    			MOVLW	32
$7DFA	$6FF2	    			MOVWF	lstr11_log+41, 1
$7DFC	$0E20	    			MOVLW	32
$7DFE	$6FF3	    			MOVWF	lstr11_log+42, 1
$7E00	$0E20	    			MOVLW	32
$7E02	$6FF4	    			MOVWF	lstr11_log+43, 1
$7E04	$0E20	    			MOVLW	32
$7E06	$6FF5	    			MOVWF	lstr11_log+44, 1
$7E08	$0E20	    			MOVLW	32
$7E0A	$6FF6	    			MOVWF	lstr11_log+45, 1
$7E0C	$0E20	    			MOVLW	32
$7E0E	$6FF7	    			MOVWF	lstr11_log+46, 1
$7E10	$0E20	    			MOVLW	32
$7E12	$6FF8	    			MOVWF	lstr11_log+47, 1
$7E14	$0E20	    			MOVLW	32
$7E16	$6FF9	    			MOVWF	lstr11_log+48, 1
$7E18	$0E20	    			MOVLW	32
$7E1A	$6FFA	    			MOVWF	lstr11_log+49, 1
$7E1C	$0E20	    			MOVLW	32
$7E1E	$6FFB	    			MOVWF	lstr11_log+50, 1
$7E20	$0E20	    			MOVLW	32
$7E22	$6FFC	    			MOVWF	lstr11_log+51, 1
$7E24	$0E20	    			MOVLW	32
$7E26	$6FFD	    			MOVWF	lstr11_log+52, 1
$7E28	$0E20	    			MOVLW	32
$7E2A	$6FFE	    			MOVWF	lstr11_log+53, 1
$7E2C	$0E20	    			MOVLW	32
$7E2E	$6FFF	    			MOVWF	lstr11_log+54, 1
$7E30	$0E20	    			MOVLW	32
$7E32	$0108	    			MOVLB	8
$7E34	$6F00	    			MOVWF	lstr11_log+55, 1
$7E36	$0E20	    			MOVLW	32
$7E38	$6F01	    			MOVWF	lstr11_log+56, 1
$7E3A	$0E20	    			MOVLW	32
$7E3C	$6F02	    			MOVWF	lstr11_log+57, 1
$7E3E	$0E20	    			MOVLW	32
$7E40	$6F03	    			MOVWF	lstr11_log+58, 1
$7E42	$0E20	    			MOVLW	32
$7E44	$6F04	    			MOVWF	lstr11_log+59, 1
$7E46	$0E20	    			MOVLW	32
$7E48	$6F05	    			MOVWF	lstr11_log+60, 1
$7E4A	$0E20	    			MOVLW	32
$7E4C	$6F06	    			MOVWF	lstr11_log+61, 1
$7E4E	$0E20	    			MOVLW	32
$7E50	$6F07	    			MOVWF	lstr11_log+62, 1
$7E52	$0E20	    			MOVLW	32
$7E54	$6F08	    			MOVWF	lstr11_log+63, 1
$7E56	$0E20	    			MOVLW	32
$7E58	$6F09	    			MOVWF	lstr11_log+64, 1
$7E5A	$0E20	    			MOVLW	32
$7E5C	$6F0A	    			MOVWF	lstr11_log+65, 1
$7E5E	$0E20	    			MOVLW	32
$7E60	$6F0B	    			MOVWF	lstr11_log+66, 1
$7E62	$0E20	    			MOVLW	32
$7E64	$6F0C	    			MOVWF	lstr11_log+67, 1
$7E66	$0E20	    			MOVLW	32
$7E68	$6F0D	    			MOVWF	lstr11_log+68, 1
$7E6A	$0E20	    			MOVLW	32
$7E6C	$6F0E	    			MOVWF	lstr11_log+69, 1
$7E6E	$0E20	    			MOVLW	32
$7E70	$6F0F	    			MOVWF	lstr11_log+70, 1
$7E72	$0E20	    			MOVLW	32
$7E74	$6F10	    			MOVWF	lstr11_log+71, 1
$7E76	$0E20	    			MOVLW	32
$7E78	$6F11	    			MOVWF	lstr11_log+72, 1
$7E7A	$0E0D	    			MOVLW	13
$7E7C	$6F12	    			MOVWF	lstr11_log+73, 1
$7E7E	$0E0A	    			MOVLW	10
$7E80	$6F13	    			MOVWF	lstr11_log+74, 1
$7E82	$6B14	    			CLRF	lstr11_log+75, 1
$7E84	$0E4C	    			MOVLW	76
$7E86	$6F16	    			MOVWF	log_write_LOG_TXT_L0+0, 1
$7E88	$0E4F	    			MOVLW	79
$7E8A	$6F17	    			MOVWF	log_write_LOG_TXT_L0+1, 1
$7E8C	$0E47	    			MOVLW	71
$7E8E	$6F18	    			MOVWF	log_write_LOG_TXT_L0+2, 1
$7E90	$0E5F	    			MOVLW	95
$7E92	$6F19	    			MOVWF	log_write_LOG_TXT_L0+3, 1
$7E94	$0E5F	    			MOVLW	95
$7E96	$6F1A	    			MOVWF	log_write_LOG_TXT_L0+4, 1
$7E98	$0E30	    			MOVLW	48
$7E9A	$6F1B	    			MOVWF	log_write_LOG_TXT_L0+5, 1
$7E9C	$0E30	    			MOVLW	48
$7E9E	$6F1C	    			MOVWF	log_write_LOG_TXT_L0+6, 1
$7EA0	$0E31	    			MOVLW	49
$7EA2	$6F1D	    			MOVWF	log_write_LOG_TXT_L0+7, 1
$7EA4	$0E2E	    			MOVLW	46
$7EA6	$6F1E	    			MOVWF	log_write_LOG_TXT_L0+8, 1
$7EA8	$0E54	    			MOVLW	84
$7EAA	$6F1F	    			MOVWF	log_write_LOG_TXT_L0+9, 1
$7EAC	$0E58	    			MOVLW	88
$7EAE	$6F20	    			MOVWF	log_write_LOG_TXT_L0+10, 1
$7EB0	$0E54	    			MOVLW	84
$7EB2	$6F21	    			MOVWF	log_write_LOG_TXT_L0+11, 1
$7EB4	$6B22	    			CLRF	log_write_LOG_TXT_L0+12, 1
$7EB6	$0E20	    			MOVLW	32
$7EB8	$6F23	    			MOVWF	log_write_NUM_TXT_L0+0, 1
$7EBA	$0E20	    			MOVLW	32
$7EBC	$6F24	    			MOVWF	log_write_NUM_TXT_L0+1, 1
$7EBE	$0E20	    			MOVLW	32
$7EC0	$6F25	    			MOVWF	log_write_NUM_TXT_L0+2, 1
$7EC2	$0E30	    			MOVLW	48
$7EC4	$6F26	    			MOVWF	log_write_NUM_TXT_L0+3, 1
$7EC6	$0E30	    			MOVLW	48
$7EC8	$6F27	    			MOVWF	log_write_NUM_TXT_L0+4, 1
$7ECA	$0E31	    			MOVLW	49
$7ECC	$6F28	    			MOVWF	log_write_NUM_TXT_L0+5, 1
$7ECE	$6B29	    			CLRF	log_write_NUM_TXT_L0+6, 1
$7ED0	$6B2A	    			CLRF	log_write_dyna2_L0+0, 1
$7ED2	$6B2B	    			CLRF	log_write_dyna2_L0+1, 1
$7ED4	$6B2C	    			CLRF	log_write_dyna2_L0+2, 1
$7ED6	$6B2D	    			CLRF	log_write_dyna2_L0+3, 1
$7ED8	$6B2E	    			CLRF	log_write_dyna2_L0+4, 1
$7EDA	$6B2F	    			CLRF	log_write_dyna2_L0+5, 1
$7EDC	$6B30	    			CLRF	log_write_dyna2_L0+6, 1
$7EDE	$6B31	    			CLRF	log_write_dyna2_L0+7, 1
$7EE0	$6B32	    			CLRF	log_write_dyna2_L0+8, 1
$7EE2	$6B33	    			CLRF	log_write_dyna2_L0+9, 1
$7EE4	$6B34	    			CLRF	log_write_dyna2_L0+10, 1
$7EE6	$6B35	    			CLRF	log_write_dyna2_L0+11, 1
$7EE8	$6B36	    			CLRF	log_write_dyna2_L0+12, 1
$7EEA	$6B37	    			CLRF	log_write_dyna2_L0+13, 1
$7EEC	$6B38	    			CLRF	log_write_dyna2_L0+14, 1
$7EEE	$6B39	    			CLRF	log_write_dyna2_L0+15, 1
$7EF0	$6B3A	    			CLRF	log_write_dyna2_L0+16, 1
$7EF2	$6B3B	    			CLRF	log_write_dyna2_L0+17, 1
$7EF4	$6B3C	    			CLRF	log_write_dyna2_L0+18, 1
$7EF6	$6B3D	    			CLRF	log_write_dyna2_L0+19, 1
$7EF8	$6B3E	    			CLRF	log_write_dyna2_L0+20, 1
$7EFA	$6B3F	    			CLRF	log_write_dyna2_L0+21, 1
$7EFC	$6B40	    			CLRF	log_write_dyna2_L0+22, 1
$7EFE	$6B41	    			CLRF	log_write_dyna2_L0+23, 1
$7F00	$6B42	    			CLRF	log_write_dyna2_L0+24, 1
$7F02	$6B43	    			CLRF	log_write_dyna2_L0+25, 1
$7F04	$6B44	    			CLRF	log_write_dyna2_L0+26, 1
$7F06	$6B45	    			CLRF	log_write_dyna2_L0+27, 1
$7F08	$6B46	    			CLRF	log_write_dyna2_L0+28, 1
$7F0A	$6B47	    			CLRF	log_write_dyna2_L0+29, 1
$7F0C	$6B48	    			CLRF	log_write_dyna2_L0+30, 1
$7F0E	$6B49	    			CLRF	log_write_dyna2_L0+31, 1
$7F10	$6B4A	    			CLRF	log_write_dyna2_L0+32, 1
$7F12	$6B4B	    			CLRF	log_write_dyna2_L0+33, 1
$7F14	$6B4C	    			CLRF	log_write_dyna2_L0+34, 1
$7F16	$6B4D	    			CLRF	log_write_dyna2_L0+35, 1
$7F18	$6B4E	    			CLRF	log_write_dyna2_L0+36, 1
$7F1A	$6B4F	    			CLRF	log_write_dyna2_L0+37, 1
$7F1C	$6B50	    			CLRF	log_write_dyna2_L0+38, 1
$7F1E	$6B51	    			CLRF	log_write_dyna2_L0+39, 1
$7F20	$6B52	    			CLRF	log_write_dyna2_L0+40, 1
$7F22	$6B53	    			CLRF	log_write_dyna2_L0+41, 1
$7F24	$6B54	    			CLRF	log_write_dyna2_L0+42, 1
$7F26	$6B55	    			CLRF	log_write_dyna2_L0+43, 1
$7F28	$6B56	    			CLRF	log_write_dyna2_L0+44, 1
$7F2A	$6B57	    			CLRF	log_write_dyna2_L0+45, 1
$7F2C	$6B58	    			CLRF	log_write_dyna2_L0+46, 1
$7F2E	$6B59	    			CLRF	log_write_dyna2_L0+47, 1
$7F30	$6B5A	    			CLRF	log_write_dyna2_L0+48, 1
$7F32	$6B5B	    			CLRF	log_write_dyna2_L0+49, 1
$7F34	$6B5C	    			CLRF	log_write_dyna2_L0+50, 1
$7F36	$6B5D	    			CLRF	log_write_dyna2_L0+51, 1
$7F38	$6B5E	    			CLRF	log_write_dyna2_L0+52, 1
$7F3A	$6B5F	    			CLRF	log_write_dyna2_L0+53, 1
$7F3C	$6B60	    			CLRF	log_write_dyna2_L0+54, 1
$7F3E	$6B61	    			CLRF	log_write_dyna2_L0+55, 1
$7F40	$6B62	    			CLRF	log_write_dyna2_L0+56, 1
$7F42	$6B63	    			CLRF	log_write_dyna2_L0+57, 1
$7F44	$6B64	    			CLRF	log_write_dyna2_L0+58, 1
$7F46	$6B65	    			CLRF	log_write_dyna2_L0+59, 1
$7F48	$6B66	    			CLRF	log_write_dyna2_L0+60, 1
$7F4A	$6B67	    			CLRF	log_write_dyna2_L0+61, 1
$7F4C	$6B68	    			CLRF	log_write_dyna2_L0+62, 1
$7F4E	$6B69	    			CLRF	log_write_dyna2_L0+63, 1
$7F50	$6B6A	    			CLRF	log_write_dyna2_L0+64, 1
$7F52	$6B6B	    			CLRF	log_write_dyna2_L0+65, 1
$7F54	$6B6C	    			CLRF	log_write_dyna2_L0+66, 1
$7F56	$6B6D	    			CLRF	log_write_dyna2_L0+67, 1
$7F58	$6B6E	    			CLRF	log_write_dyna2_L0+68, 1
$7F5A	$6B6F	    			CLRF	log_write_dyna2_L0+69, 1
$7F5C	$6B70	    			CLRF	log_write_dyna2_L0+70, 1
$7F5E	$6B71	    			CLRF	log_write_dyna2_L0+71, 1
$7F60	$6B72	    			CLRF	log_write_dyna2_L0+72, 1
$7F62	$6B73	    			CLRF	log_write_dyna2_L0+73, 1
$7F64	$6B74	    			CLRF	log_write_dyna2_L0+74, 1
$7F66	$6B75	    			CLRF	log_write_dyna2_L0+75, 1
$7F68	$6B76	    			CLRF	log_write_dyna2_L0+76, 1
$7F6A	$6B77	    			CLRF	log_write_dyna2_L0+77, 1
$7F6C	$6B78	    			CLRF	log_write_dyna2_L0+78, 1
$7F6E	$6B79	    			CLRF	log_write_dyna2_L0+79, 1
$7F70	$6B7A	    			CLRF	log_write_dyna2_L0+80, 1
$7F72	$6B7B	    			CLRF	log_write_dyna2_L0+81, 1
$7F74	$6B7C	    			CLRF	log_write_dyna2_L0+82, 1
$7F76	$6B7D	    			CLRF	log_write_dyna2_L0+83, 1
$7F78	$6B7E	    			CLRF	log_write_dyna2_L0+84, 1
$7F7A	$6B7F	    			CLRF	log_write_dyna2_L0+85, 1
$7F7C	$6B80	    			CLRF	log_write_dyna2_L0+86, 1
$7F7E	$6B81	    			CLRF	log_write_dyna2_L0+87, 1
$7F80	$6B82	    			CLRF	log_write_dyna2_L0+88, 1
$7F82	$6B83	    			CLRF	log_write_dyna2_L0+89, 1
$7F84	$6B84	    			CLRF	log_write_dyna2_L0+90, 1
$7F86	$6B85	    			CLRF	log_write_dyna2_L0+91, 1
$7F88	$6B86	    			CLRF	log_write_dyna2_L0+92, 1
$7F8A	$6B87	    			CLRF	log_write_dyna2_L0+93, 1
$7F8C	$6B88	    			CLRF	log_write_dyna2_L0+94, 1
$7F8E	$6B89	    			CLRF	log_write_dyna2_L0+95, 1
$7F90	$6B8A	    			CLRF	log_write_dyna2_L0+96, 1
$7F92	$6B8B	    			CLRF	log_write_dyna2_L0+97, 1
$7F94	$6B8C	    			CLRF	log_write_dyna2_L0+98, 1
$7F96	$6B8D	    			CLRF	log_write_dyna2_L0+99, 1
$7F98	$6B8E	    			CLRF	log_write_dyna2_L0+100, 1
$7F9A	$6B8F	    			CLRF	log_write_dyna2_L0+101, 1
$7F9C	$6B90	    			CLRF	log_write_dyna2_L0+102, 1
$7F9E	$6B91	    			CLRF	log_write_dyna2_L0+103, 1
$7FA0	$6B92	    			CLRF	log_write_dyna2_L0+104, 1
$7FA2	$6B93	    			CLRF	log_write_dyna2_L0+105, 1
$7FA4	$6B94	    			CLRF	log_write_dyna2_L0+106, 1
$7FA6	$6B95	    			CLRF	log_write_dyna2_L0+107, 1
$7FA8	$6B96	    			CLRF	log_write_dyna2_L0+108, 1
$7FAA	$6B97	    			CLRF	log_write_dyna2_L0+109, 1
$7FAC	$6B98	    			CLRF	log_write_dyna2_L0+110, 1
$7FAE	$6B99	    			CLRF	log_write_dyna2_L0+111, 1
$7FB0	$6B9A	    			CLRF	log_write_dyna2_L0+112, 1
$7FB2	$6B9B	    			CLRF	log_write_dyna2_L0+113, 1
$7FB4	$6B9C	    			CLRF	log_write_dyna2_L0+114, 1
$7FB6	$6B9D	    			CLRF	log_write_dyna2_L0+115, 1
$7FB8	$6B9E	    			CLRF	log_write_dyna2_L0+116, 1
$7FBA	$6B9F	    			CLRF	log_write_dyna2_L0+117, 1
$7FBC	$6BA0	    			CLRF	log_write_dyna2_L0+118, 1
$7FBE	$6BA1	    			CLRF	log_write_dyna2_L0+119, 1
$7FC0	$6BA2	    			CLRF	log_write_dyna2_L0+120, 1
$7FC2	$6BA3	    			CLRF	log_write_dyna2_L0+121, 1
$7FC4	$6BA4	    			CLRF	log_write_dyna2_L0+122, 1
$7FC6	$6BA5	    			CLRF	log_write_dyna2_L0+123, 1
$7FC8	$6BA6	    			CLRF	log_write_dyna2_L0+124, 1
$7FCA	$6BA7	    			CLRF	log_write_dyna2_L0+125, 1
$7FCC	$6BA8	    			CLRF	log_write_dyna2_L0+126, 1
$7FCE	$6BA9	    			CLRF	log_write_dyna2_L0+127, 1
$7FD0	$6BAA	    			CLRF	log_write_dyna2_L0+128, 1
$7FD2	$6BAB	    			CLRF	log_write_dyna2_L0+129, 1
;log.c,37 :: 			char log_write ( char type, char *inf , char regim)      // возвращает результат выполнения записи =1  - ok, =0 - error
;log.c,55 :: 			Led_R=0;  // включить красный сд
$7FD4	$9082	    			BCF	PORTC, 0, 0
;log.c,56 :: 			flag_read_fat = 0;  // FAT в состоянии read =1, иначе 0
$7FD6	$0102	    			MOVLB	2
$7FD8	$6B7D	    			CLRF	_flag_read_fat, 1
;log.c,58 :: 			tmp =Set_fnum();  // обновление номера файла журнала =0-err, =1-файл пуст, =2-год соответствует текущему, =3-прошлогодний
$7FDA	$EC5D	F021			CALL	_Set_fnum
$7FDE	$C000	F815			MOVFF	STACK_0, log_write_tmp_L0
;log.c,59 :: 			if ( tmp == 0 ) {Led_R=1; return 0; } // =0-err  Set_fnum
$7FE2	$5000	    			MOVF	STACK_0, 0, 0
$7FE4	$0A00	    			XORLW	0
$7FE6	$E103	    			BNZ	L_log_write_0
$7FE8	$8082	    			BSF	PORTC, 0, 0
$7FEA	$6A00	    			CLRF	STACK_0, 0
$7FEC	$0012	    			RETURN
$7FEE	$	L_log_write_0:
;log.c,60 :: 			regim = tmp;
$7FEE	$C815	F6D0			MOVFF	log_write_tmp_L0, FARG_log_write+3
;log.c,62 :: 			if ( (type < 1) || (type > 6) )  {Led_R=1;  return 0;} //"type_err=" // проверка допустимых типов записей
$7FF2	$0E01	    			MOVLW	1
$7FF4	$0106	    			MOVLB	6
$7FF6	$5DCD	    			SUBWF	FARG_log_write+0, 0, 1
$7FF8	$E303	    			BNC	L21_ex_L_log_write_3
$7FFA	$51CD	    			MOVF	FARG_log_write+0, 0, 1
$7FFC	$0806	    			SUBLW	6
$7FFE	$E203	    			BC	L_log_write_3
$8000	$	L21_ex_L_log_write_3:
$8000	$8082	    			BSF	PORTC, 0, 0
$8002	$6A00	    			CLRF	STACK_0, 0
$8004	$0012	    			RETURN
$8006	$	L_log_write_3:
;log.c,65 :: 			Get_Ip_Time();
$8006	$ECAC	F022			CALL	_Get_Ip_Time
;log.c,66 :: 			tmp =  Cf_Fat_Init(&PORTH,&PORTE);
$800A	$0E87	    			MOVLW	PORTH
$800C	$0108	    			MOVLB	8
$800E	$6FD5	    			MOVWF	FARG_Cf_Fat_Init+0, 1
$8010	$0E0F	    			MOVLW	@PORTH
$8012	$6FD6	    			MOVWF	FARG_Cf_Fat_Init+1, 1
$8014	$0E84	    			MOVLW	PORTE
$8016	$6FD7	    			MOVWF	FARG_Cf_Fat_Init+2, 1
$8018	$0E0F	    			MOVLW	@PORTE
$801A	$6FD8	    			MOVWF	FARG_Cf_Fat_Init+3, 1
$801C	$ECFC	F011			CALL	_Cf_Fat_Init
$8020	$C000	F815			MOVFF	STACK_0, log_write_tmp_L0
;log.c,67 :: 			if ( tmp != 0) {Led_R=1;  return 0;} //"init_err="
$8024	$5000	    			MOVF	STACK_0, 0, 0
$8026	$0A00	    			XORLW	0
$8028	$E003	    			BZ	L_log_write_4
$802A	$8082	    			BSF	PORTC, 0, 0
$802C	$6A00	    			CLRF	STACK_0, 0
$802E	$0012	    			RETURN
$8030	$	L_log_write_4:
;log.c,69 :: 			IntToStr(file_number, NUM_TXT) ;
$8030	$C27B	F8D5			MOVFF	_file_number, FARG_IntToStr+0
$8034	$C27C	F8D6			MOVFF	_file_number+1, FARG_IntToStr+1
$8038	$0E23	    			MOVLW	log_write_NUM_TXT_L0
$803A	$0108	    			MOVLB	8
$803C	$6FD7	    			MOVWF	FARG_IntToStr+2, 1
$803E	$0E08	    			MOVLW	@log_write_NUM_TXT_L0
$8040	$6FD8	    			MOVWF	FARG_IntToStr+3, 1
$8042	$EC83	F016			CALL	_IntToStr
;log.c,70 :: 			if (NUM_TXT[3]==' ')  NUM_TXT[3] = '0';
$8046	$0108	    			MOVLB	8
$8048	$5126	    			MOVF	log_write_NUM_TXT_L0+3, 0, 1
$804A	$0A20	    			XORLW	32
$804C	$E102	    			BNZ	L_log_write_5
$804E	$0E30	    			MOVLW	48
$8050	$6F26	    			MOVWF	log_write_NUM_TXT_L0+3, 1
$8052	$	L_log_write_5:
;log.c,71 :: 			if (NUM_TXT[4]==' ')  NUM_TXT[4] = '0';
$8052	$0108	    			MOVLB	8
$8054	$5127	    			MOVF	log_write_NUM_TXT_L0+4, 0, 1
$8056	$0A20	    			XORLW	32
$8058	$E102	    			BNZ	L_log_write_6
$805A	$0E30	    			MOVLW	48
$805C	$6F27	    			MOVWF	log_write_NUM_TXT_L0+4, 1
$805E	$	L_log_write_6:
;log.c,72 :: 			LOG_TXT[5] = NUM_TXT[3];
$805E	$C826	F81B			MOVFF	log_write_NUM_TXT_L0+3, log_write_LOG_TXT_L0+5
;log.c,73 :: 			LOG_TXT[6] = NUM_TXT[4];
$8062	$C827	F81C			MOVFF	log_write_NUM_TXT_L0+4, log_write_LOG_TXT_L0+6
;log.c,74 :: 			LOG_TXT[7] = NUM_TXT[5];
$8066	$C828	F81D			MOVFF	log_write_NUM_TXT_L0+5, log_write_LOG_TXT_L0+7
;log.c,75 :: 			tmp = Cf_Fat_Assign(LOG_TXT,0xA0);
$806A	$0E16	    			MOVLW	log_write_LOG_TXT_L0
$806C	$0108	    			MOVLB	8
$806E	$6FD5	    			MOVWF	FARG_Cf_Fat_Assign+0, 1
$8070	$0E08	    			MOVLW	@log_write_LOG_TXT_L0
$8072	$6FD6	    			MOVWF	FARG_Cf_Fat_Assign+1, 1
$8074	$0EA0	    			MOVLW	160
$8076	$6FD7	    			MOVWF	FARG_Cf_Fat_Assign+2, 1
$8078	$EC44	F014			CALL	_Cf_Fat_Assign
$807C	$C000	F815			MOVFF	STACK_0, log_write_tmp_L0
;log.c,76 :: 			if ( tmp != 1) {Led_R=1; return 0;} //"ass_err="
$8080	$5000	    			MOVF	STACK_0, 0, 0
$8082	$0A01	    			XORLW	1
$8084	$E003	    			BZ	L_log_write_7
$8086	$8082	    			BSF	PORTC, 0, 0
$8088	$6A00	    			CLRF	STACK_0, 0
$808A	$0012	    			RETURN
$808C	$	L_log_write_7:
;log.c,78 :: 			if( (regim==1) || (regim==2) )  Cf_Fat_Append();
$808C	$0106	    			MOVLB	6
$808E	$51D0	    			MOVF	FARG_log_write+3, 0, 1
$8090	$0A01	    			XORLW	1
$8092	$E003	    			BZ	L71_ex_L_log_write_10
$8094	$51D0	    			MOVF	FARG_log_write+3, 0, 1
$8096	$0A02	    			XORLW	2
$8098	$E103	    			BNZ	L_log_write_10
$809A	$	L71_ex_L_log_write_10:
$809A	$ECFE	F023			CALL	_Cf_Fat_Append
$809E	$D003	    			BRA	L_log_write_11
$80A0	$	L_log_write_10:
;log.c,79 :: 			else                            Cf_Fat_Rewrite();
$80A0	$0100	    			MOVLB	0
$80A2	$EC2C	F016			CALL	_Cf_Fat_Rewrite
$80A6	$	L_log_write_11:
;log.c,82 :: 			if ( type == POWER )  {
$80A6	$0106	    			MOVLB	6
$80A8	$51CD	    			MOVF	FARG_log_write+0, 0, 1
$80AA	$0A01	    			XORLW	1
$80AC	$E157	    			BNZ	L_log_write_12
;log.c,83 :: 			strncat (dyna2, ip_string, 16);
$80AE	$0E2A	    			MOVLW	log_write_dyna2_L0
$80B0	$0108	    			MOVLB	8
$80B2	$6FD5	    			MOVWF	FARG_strncat+0, 1
$80B4	$0E08	    			MOVLW	@log_write_dyna2_L0
$80B6	$6FD6	    			MOVWF	FARG_strncat+1, 1
$80B8	$0E7E	    			MOVLW	_ip_string
$80BA	$6FD7	    			MOVWF	FARG_strncat+2, 1
$80BC	$0E02	    			MOVLW	@_ip_string
$80BE	$6FD8	    			MOVWF	FARG_strncat+3, 1
$80C0	$0E10	    			MOVLW	16
$80C2	$6FD9	    			MOVWF	FARG_strncat+4, 1
$80C4	$0E00	    			MOVLW	0
$80C6	$6FDA	    			MOVWF	FARG_strncat+5, 1
$80C8	$EC79	F017			CALL	_strncat
;log.c,84 :: 			strncat (dyna2, date_string, 9);
$80CC	$0E2A	    			MOVLW	log_write_dyna2_L0
$80CE	$0108	    			MOVLB	8
$80D0	$6FD5	    			MOVWF	FARG_strncat+0, 1
$80D2	$0E08	    			MOVLW	@log_write_dyna2_L0
$80D4	$6FD6	    			MOVWF	FARG_strncat+1, 1
$80D6	$0EBB	    			MOVLW	_date_string
$80D8	$6FD7	    			MOVWF	FARG_strncat+2, 1
$80DA	$0E02	    			MOVLW	@_date_string
$80DC	$6FD8	    			MOVWF	FARG_strncat+3, 1
$80DE	$0E09	    			MOVLW	9
$80E0	$6FD9	    			MOVWF	FARG_strncat+4, 1
$80E2	$0E00	    			MOVLW	0
$80E4	$6FDA	    			MOVWF	FARG_strncat+5, 1
$80E6	$EC79	F017			CALL	_strncat
;log.c,85 :: 			strncat (dyna2, time_string, 9);
$80EA	$0E2A	    			MOVLW	log_write_dyna2_L0
$80EC	$0108	    			MOVLB	8
$80EE	$6FD5	    			MOVWF	FARG_strncat+0, 1
$80F0	$0E08	    			MOVLW	@log_write_dyna2_L0
$80F2	$6FD6	    			MOVWF	FARG_strncat+1, 1
$80F4	$0EC5	    			MOVLW	_time_string
$80F6	$6FD7	    			MOVWF	FARG_strncat+2, 1
$80F8	$0E02	    			MOVLW	@_time_string
$80FA	$6FD8	    			MOVWF	FARG_strncat+3, 1
$80FC	$0E09	    			MOVLW	9
$80FE	$6FD9	    			MOVWF	FARG_strncat+4, 1
$8100	$0E00	    			MOVLW	0
$8102	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8104	$EC79	F017			CALL	_strncat
;log.c,87 :: 			strncat (dyna2," power_on_____________________________________________________________________________________", 92);
$8108	$0E2A	    			MOVLW	log_write_dyna2_L0
$810A	$0108	    			MOVLB	8
$810C	$6FD5	    			MOVWF	FARG_strncat+0, 1
$810E	$0E08	    			MOVLW	@log_write_dyna2_L0
$8110	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8112	$0ED1	    			MOVLW	lstr1_log
$8114	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8116	$0E06	    			MOVLW	@lstr1_log
$8118	$6FD8	    			MOVWF	FARG_strncat+3, 1
$811A	$0E5C	    			MOVLW	92
$811C	$6FD9	    			MOVWF	FARG_strncat+4, 1
$811E	$0E00	    			MOVLW	0
$8120	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8122	$EC79	F017			CALL	_strncat
;log.c,88 :: 			strncat (dyna2,"\r\n", 2);
$8126	$0E2A	    			MOVLW	log_write_dyna2_L0
$8128	$0108	    			MOVLB	8
$812A	$6FD5	    			MOVWF	FARG_strncat+0, 1
$812C	$0E08	    			MOVLW	@log_write_dyna2_L0
$812E	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8130	$0E30	    			MOVLW	lstr2_log
$8132	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8134	$0E07	    			MOVLW	@lstr2_log
$8136	$6FD8	    			MOVWF	FARG_strncat+3, 1
$8138	$0E02	    			MOVLW	2
$813A	$6FD9	    			MOVWF	FARG_strncat+4, 1
$813C	$0E00	    			MOVLW	0
$813E	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8140	$EC79	F017			CALL	_strncat
;log.c,89 :: 			Cf_Fat_Write (dyna2, 128);
$8144	$0E2A	    			MOVLW	log_write_dyna2_L0
$8146	$0108	    			MOVLB	8
$8148	$6FAC	    			MOVWF	FARG_Cf_Fat_Write+0, 1
$814A	$0E08	    			MOVLW	@log_write_dyna2_L0
$814C	$6FAD	    			MOVWF	FARG_Cf_Fat_Write+1, 1
$814E	$0E80	    			MOVLW	128
$8150	$6FAE	    			MOVWF	FARG_Cf_Fat_Write+2, 1
$8152	$0E00	    			MOVLW	0
$8154	$6FAF	    			MOVWF	FARG_Cf_Fat_Write+3, 1
$8156	$EC04	F025			CALL	_Cf_Fat_Write
;log.c,90 :: 			}
$815A	$D1B6	    			BRA	L_log_write_13
$815C	$	L_log_write_12:
;log.c,91 :: 			else if ( type == COMMAND ) {
$815C	$0106	    			MOVLB	6
$815E	$51CD	    			MOVF	FARG_log_write+0, 0, 1
$8160	$0A02	    			XORLW	2
$8162	$E166	    			BNZ	L_log_write_14
;log.c,92 :: 			strncat (dyna2, ip_string, 16);
$8164	$0E2A	    			MOVLW	log_write_dyna2_L0
$8166	$0108	    			MOVLB	8
$8168	$6FD5	    			MOVWF	FARG_strncat+0, 1
$816A	$0E08	    			MOVLW	@log_write_dyna2_L0
$816C	$6FD6	    			MOVWF	FARG_strncat+1, 1
$816E	$0E7E	    			MOVLW	_ip_string
$8170	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8172	$0E02	    			MOVLW	@_ip_string
$8174	$6FD8	    			MOVWF	FARG_strncat+3, 1
$8176	$0E10	    			MOVLW	16
$8178	$6FD9	    			MOVWF	FARG_strncat+4, 1
$817A	$0E00	    			MOVLW	0
$817C	$6FDA	    			MOVWF	FARG_strncat+5, 1
$817E	$EC79	F017			CALL	_strncat
;log.c,93 :: 			strncat (dyna2, date_string, 9);
$8182	$0E2A	    			MOVLW	log_write_dyna2_L0
$8184	$0108	    			MOVLB	8
$8186	$6FD5	    			MOVWF	FARG_strncat+0, 1
$8188	$0E08	    			MOVLW	@log_write_dyna2_L0
$818A	$6FD6	    			MOVWF	FARG_strncat+1, 1
$818C	$0EBB	    			MOVLW	_date_string
$818E	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8190	$0E02	    			MOVLW	@_date_string
$8192	$6FD8	    			MOVWF	FARG_strncat+3, 1
$8194	$0E09	    			MOVLW	9
$8196	$6FD9	    			MOVWF	FARG_strncat+4, 1
$8198	$0E00	    			MOVLW	0
$819A	$6FDA	    			MOVWF	FARG_strncat+5, 1
$819C	$EC79	F017			CALL	_strncat
;log.c,94 :: 			strncat (dyna2, time_string, 9);
$81A0	$0E2A	    			MOVLW	log_write_dyna2_L0
$81A2	$0108	    			MOVLB	8
$81A4	$6FD5	    			MOVWF	FARG_strncat+0, 1
$81A6	$0E08	    			MOVLW	@log_write_dyna2_L0
$81A8	$6FD6	    			MOVWF	FARG_strncat+1, 1
$81AA	$0EC5	    			MOVLW	_time_string
$81AC	$6FD7	    			MOVWF	FARG_strncat+2, 1
$81AE	$0E02	    			MOVLW	@_time_string
$81B0	$6FD8	    			MOVWF	FARG_strncat+3, 1
$81B2	$0E09	    			MOVLW	9
$81B4	$6FD9	    			MOVWF	FARG_strncat+4, 1
$81B6	$0E00	    			MOVLW	0
$81B8	$6FDA	    			MOVWF	FARG_strncat+5, 1
$81BA	$EC79	F017			CALL	_strncat
;log.c,96 :: 			strncat (dyna2," command", 8);
$81BE	$0E2A	    			MOVLW	log_write_dyna2_L0
$81C0	$0108	    			MOVLB	8
$81C2	$6FD5	    			MOVWF	FARG_strncat+0, 1
$81C4	$0E08	    			MOVLW	@log_write_dyna2_L0
$81C6	$6FD6	    			MOVWF	FARG_strncat+1, 1
$81C8	$0E33	    			MOVLW	lstr3_log
$81CA	$6FD7	    			MOVWF	FARG_strncat+2, 1
$81CC	$0E07	    			MOVLW	@lstr3_log
$81CE	$6FD8	    			MOVWF	FARG_strncat+3, 1
$81D0	$0E08	    			MOVLW	8
$81D2	$6FD9	    			MOVWF	FARG_strncat+4, 1
$81D4	$0E00	    			MOVLW	0
$81D6	$6FDA	    			MOVWF	FARG_strncat+5, 1
$81D8	$EC79	F017			CALL	_strncat
;log.c,97 :: 			strncat (dyna2,inf, 84);    //
$81DC	$0E2A	    			MOVLW	log_write_dyna2_L0
$81DE	$0108	    			MOVLB	8
$81E0	$6FD5	    			MOVWF	FARG_strncat+0, 1
$81E2	$0E08	    			MOVLW	@log_write_dyna2_L0
$81E4	$6FD6	    			MOVWF	FARG_strncat+1, 1
$81E6	$C6CE	F8D7			MOVFF	FARG_log_write+1, FARG_strncat+2
$81EA	$C6CF	F8D8			MOVFF	FARG_log_write+2, FARG_strncat+3
$81EE	$0E54	    			MOVLW	84
$81F0	$6FD9	    			MOVWF	FARG_strncat+4, 1
$81F2	$0E00	    			MOVLW	0
$81F4	$6FDA	    			MOVWF	FARG_strncat+5, 1
$81F6	$EC79	F017			CALL	_strncat
;log.c,98 :: 			strncat (dyna2,"\r\n", 2);
$81FA	$0E2A	    			MOVLW	log_write_dyna2_L0
$81FC	$0108	    			MOVLB	8
$81FE	$6FD5	    			MOVWF	FARG_strncat+0, 1
$8200	$0E08	    			MOVLW	@log_write_dyna2_L0
$8202	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8204	$0E3C	    			MOVLW	lstr4_log
$8206	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8208	$0E07	    			MOVLW	@lstr4_log
$820A	$6FD8	    			MOVWF	FARG_strncat+3, 1
$820C	$0E02	    			MOVLW	2
$820E	$6FD9	    			MOVWF	FARG_strncat+4, 1
$8210	$0E00	    			MOVLW	0
$8212	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8214	$EC79	F017			CALL	_strncat
;log.c,99 :: 			Cf_Fat_Write (dyna2, 128);
$8218	$0E2A	    			MOVLW	log_write_dyna2_L0
$821A	$0108	    			MOVLB	8
$821C	$6FAC	    			MOVWF	FARG_Cf_Fat_Write+0, 1
$821E	$0E08	    			MOVLW	@log_write_dyna2_L0
$8220	$6FAD	    			MOVWF	FARG_Cf_Fat_Write+1, 1
$8222	$0E80	    			MOVLW	128
$8224	$6FAE	    			MOVWF	FARG_Cf_Fat_Write+2, 1
$8226	$0E00	    			MOVLW	0
$8228	$6FAF	    			MOVWF	FARG_Cf_Fat_Write+3, 1
$822A	$EC04	F025			CALL	_Cf_Fat_Write
;log.c,100 :: 			}
$822E	$D14C	    			BRA	L_log_write_15
$8230	$	L_log_write_14:
;log.c,101 :: 			else if ( type == CMD )  {
$8230	$0106	    			MOVLB	6
$8232	$51CD	    			MOVF	FARG_log_write+0, 0, 1
$8234	$0A03	    			XORLW	3
$8236	$E175	    			BNZ	L_log_write_16
;log.c,102 :: 			strncat (dyna2, ip_string, 16);
$8238	$0E2A	    			MOVLW	log_write_dyna2_L0
$823A	$0108	    			MOVLB	8
$823C	$6FD5	    			MOVWF	FARG_strncat+0, 1
$823E	$0E08	    			MOVLW	@log_write_dyna2_L0
$8240	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8242	$0E7E	    			MOVLW	_ip_string
$8244	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8246	$0E02	    			MOVLW	@_ip_string
$8248	$6FD8	    			MOVWF	FARG_strncat+3, 1
$824A	$0E10	    			MOVLW	16
$824C	$6FD9	    			MOVWF	FARG_strncat+4, 1
$824E	$0E00	    			MOVLW	0
$8250	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8252	$EC79	F017			CALL	_strncat
;log.c,103 :: 			strncat (dyna2, date_string, 9);
$8256	$0E2A	    			MOVLW	log_write_dyna2_L0
$8258	$0108	    			MOVLB	8
$825A	$6FD5	    			MOVWF	FARG_strncat+0, 1
$825C	$0E08	    			MOVLW	@log_write_dyna2_L0
$825E	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8260	$0EBB	    			MOVLW	_date_string
$8262	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8264	$0E02	    			MOVLW	@_date_string
$8266	$6FD8	    			MOVWF	FARG_strncat+3, 1
$8268	$0E09	    			MOVLW	9
$826A	$6FD9	    			MOVWF	FARG_strncat+4, 1
$826C	$0E00	    			MOVLW	0
$826E	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8270	$EC79	F017			CALL	_strncat
;log.c,104 :: 			strncat (dyna2, time_string, 9);
$8274	$0E2A	    			MOVLW	log_write_dyna2_L0
$8276	$0108	    			MOVLB	8
$8278	$6FD5	    			MOVWF	FARG_strncat+0, 1
$827A	$0E08	    			MOVLW	@log_write_dyna2_L0
$827C	$6FD6	    			MOVWF	FARG_strncat+1, 1
$827E	$0EC5	    			MOVLW	_time_string
$8280	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8282	$0E02	    			MOVLW	@_time_string
$8284	$6FD8	    			MOVWF	FARG_strncat+3, 1
$8286	$0E09	    			MOVLW	9
$8288	$6FD9	    			MOVWF	FARG_strncat+4, 1
$828A	$0E00	    			MOVLW	0
$828C	$6FDA	    			MOVWF	FARG_strncat+5, 1
$828E	$EC79	F017			CALL	_strncat
;log.c,106 :: 			strncat (dyna2,"     cmd", 8);
$8292	$0E2A	    			MOVLW	log_write_dyna2_L0
$8294	$0108	    			MOVLB	8
$8296	$6FD5	    			MOVWF	FARG_strncat+0, 1
$8298	$0E08	    			MOVLW	@log_write_dyna2_L0
$829A	$6FD6	    			MOVWF	FARG_strncat+1, 1
$829C	$0E3F	    			MOVLW	lstr5_log
$829E	$6FD7	    			MOVWF	FARG_strncat+2, 1
$82A0	$0E07	    			MOVLW	@lstr5_log
$82A2	$6FD8	    			MOVWF	FARG_strncat+3, 1
$82A4	$0E08	    			MOVLW	8
$82A6	$6FD9	    			MOVWF	FARG_strncat+4, 1
$82A8	$0E00	    			MOVLW	0
$82AA	$6FDA	    			MOVWF	FARG_strncat+5, 1
$82AC	$EC79	F017			CALL	_strncat
;log.c,107 :: 			strncat (dyna2,inf, 28);
$82B0	$0E2A	    			MOVLW	log_write_dyna2_L0
$82B2	$0108	    			MOVLB	8
$82B4	$6FD5	    			MOVWF	FARG_strncat+0, 1
$82B6	$0E08	    			MOVLW	@log_write_dyna2_L0
$82B8	$6FD6	    			MOVWF	FARG_strncat+1, 1
$82BA	$C6CE	F8D7			MOVFF	FARG_log_write+1, FARG_strncat+2
$82BE	$C6CF	F8D8			MOVFF	FARG_log_write+2, FARG_strncat+3
$82C2	$0E1C	    			MOVLW	28
$82C4	$6FD9	    			MOVWF	FARG_strncat+4, 1
$82C6	$0E00	    			MOVLW	0
$82C8	$6FDA	    			MOVWF	FARG_strncat+5, 1
$82CA	$EC79	F017			CALL	_strncat
;log.c,108 :: 			strncat (dyna2,"                                                        ", 56);
$82CE	$0E2A	    			MOVLW	log_write_dyna2_L0
$82D0	$0108	    			MOVLB	8
$82D2	$6FD5	    			MOVWF	FARG_strncat+0, 1
$82D4	$0E08	    			MOVLW	@log_write_dyna2_L0
$82D6	$6FD6	    			MOVWF	FARG_strncat+1, 1
$82D8	$0E48	    			MOVLW	lstr6_log
$82DA	$6FD7	    			MOVWF	FARG_strncat+2, 1
$82DC	$0E07	    			MOVLW	@lstr6_log
$82DE	$6FD8	    			MOVWF	FARG_strncat+3, 1
$82E0	$0E38	    			MOVLW	56
$82E2	$6FD9	    			MOVWF	FARG_strncat+4, 1
$82E4	$0E00	    			MOVLW	0
$82E6	$6FDA	    			MOVWF	FARG_strncat+5, 1
$82E8	$EC79	F017			CALL	_strncat
;log.c,109 :: 			strncat (dyna2,"\r\n", 2);
$82EC	$0E2A	    			MOVLW	log_write_dyna2_L0
$82EE	$0108	    			MOVLB	8
$82F0	$6FD5	    			MOVWF	FARG_strncat+0, 1
$82F2	$0E08	    			MOVLW	@log_write_dyna2_L0
$82F4	$6FD6	    			MOVWF	FARG_strncat+1, 1
$82F6	$0E81	    			MOVLW	lstr7_log
$82F8	$6FD7	    			MOVWF	FARG_strncat+2, 1
$82FA	$0E07	    			MOVLW	@lstr7_log
$82FC	$6FD8	    			MOVWF	FARG_strncat+3, 1
$82FE	$0E02	    			MOVLW	2
$8300	$6FD9	    			MOVWF	FARG_strncat+4, 1
$8302	$0E00	    			MOVLW	0
$8304	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8306	$EC79	F017			CALL	_strncat
;log.c,110 :: 			Cf_Fat_Write (dyna2, 128);
$830A	$0E2A	    			MOVLW	log_write_dyna2_L0
$830C	$0108	    			MOVLB	8
$830E	$6FAC	    			MOVWF	FARG_Cf_Fat_Write+0, 1
$8310	$0E08	    			MOVLW	@log_write_dyna2_L0
$8312	$6FAD	    			MOVWF	FARG_Cf_Fat_Write+1, 1
$8314	$0E80	    			MOVLW	128
$8316	$6FAE	    			MOVWF	FARG_Cf_Fat_Write+2, 1
$8318	$0E00	    			MOVLW	0
$831A	$6FAF	    			MOVWF	FARG_Cf_Fat_Write+3, 1
$831C	$EC04	F025			CALL	_Cf_Fat_Write
;log.c,111 :: 			}
$8320	$D0D3	    			BRA	L_log_write_17
$8322	$	L_log_write_16:
;log.c,113 :: 			else if ( type == IP )  {
$8322	$0106	    			MOVLB	6
$8324	$51CD	    			MOVF	FARG_log_write+0, 0, 1
$8326	$0A05	    			XORLW	5
$8328	$E175	    			BNZ	L_log_write_18
;log.c,114 :: 			strncat (dyna2, ip_string, 16);
$832A	$0E2A	    			MOVLW	log_write_dyna2_L0
$832C	$0108	    			MOVLB	8
$832E	$6FD5	    			MOVWF	FARG_strncat+0, 1
$8330	$0E08	    			MOVLW	@log_write_dyna2_L0
$8332	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8334	$0E7E	    			MOVLW	_ip_string
$8336	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8338	$0E02	    			MOVLW	@_ip_string
$833A	$6FD8	    			MOVWF	FARG_strncat+3, 1
$833C	$0E10	    			MOVLW	16
$833E	$6FD9	    			MOVWF	FARG_strncat+4, 1
$8340	$0E00	    			MOVLW	0
$8342	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8344	$EC79	F017			CALL	_strncat
;log.c,115 :: 			strncat (dyna2, date_string, 9);
$8348	$0E2A	    			MOVLW	log_write_dyna2_L0
$834A	$0108	    			MOVLB	8
$834C	$6FD5	    			MOVWF	FARG_strncat+0, 1
$834E	$0E08	    			MOVLW	@log_write_dyna2_L0
$8350	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8352	$0EBB	    			MOVLW	_date_string
$8354	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8356	$0E02	    			MOVLW	@_date_string
$8358	$6FD8	    			MOVWF	FARG_strncat+3, 1
$835A	$0E09	    			MOVLW	9
$835C	$6FD9	    			MOVWF	FARG_strncat+4, 1
$835E	$0E00	    			MOVLW	0
$8360	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8362	$EC79	F017			CALL	_strncat
;log.c,116 :: 			strncat (dyna2, time_string, 9);
$8366	$0E2A	    			MOVLW	log_write_dyna2_L0
$8368	$0108	    			MOVLB	8
$836A	$6FD5	    			MOVWF	FARG_strncat+0, 1
$836C	$0E08	    			MOVLW	@log_write_dyna2_L0
$836E	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8370	$0EC5	    			MOVLW	_time_string
$8372	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8374	$0E02	    			MOVLW	@_time_string
$8376	$6FD8	    			MOVWF	FARG_strncat+3, 1
$8378	$0E09	    			MOVLW	9
$837A	$6FD9	    			MOVWF	FARG_strncat+4, 1
$837C	$0E00	    			MOVLW	0
$837E	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8380	$EC79	F017			CALL	_strncat
;log.c,118 :: 			strncat (dyna2,"      ip", 8);
$8384	$0E2A	    			MOVLW	log_write_dyna2_L0
$8386	$0108	    			MOVLB	8
$8388	$6FD5	    			MOVWF	FARG_strncat+0, 1
$838A	$0E08	    			MOVLW	@log_write_dyna2_L0
$838C	$6FD6	    			MOVWF	FARG_strncat+1, 1
$838E	$0E84	    			MOVLW	lstr8_log
$8390	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8392	$0E07	    			MOVLW	@lstr8_log
$8394	$6FD8	    			MOVWF	FARG_strncat+3, 1
$8396	$0E08	    			MOVLW	8
$8398	$6FD9	    			MOVWF	FARG_strncat+4, 1
$839A	$0E00	    			MOVLW	0
$839C	$6FDA	    			MOVWF	FARG_strncat+5, 1
$839E	$EC79	F017			CALL	_strncat
;log.c,119 :: 			strncat (dyna2,inf, 28);
$83A2	$0E2A	    			MOVLW	log_write_dyna2_L0
$83A4	$0108	    			MOVLB	8
$83A6	$6FD5	    			MOVWF	FARG_strncat+0, 1
$83A8	$0E08	    			MOVLW	@log_write_dyna2_L0
$83AA	$6FD6	    			MOVWF	FARG_strncat+1, 1
$83AC	$C6CE	F8D7			MOVFF	FARG_log_write+1, FARG_strncat+2
$83B0	$C6CF	F8D8			MOVFF	FARG_log_write+2, FARG_strncat+3
$83B4	$0E1C	    			MOVLW	28
$83B6	$6FD9	    			MOVWF	FARG_strncat+4, 1
$83B8	$0E00	    			MOVLW	0
$83BA	$6FDA	    			MOVWF	FARG_strncat+5, 1
$83BC	$EC79	F017			CALL	_strncat
;log.c,120 :: 			strncat (dyna2,"                                                        ", 56);
$83C0	$0E2A	    			MOVLW	log_write_dyna2_L0
$83C2	$0108	    			MOVLB	8
$83C4	$6FD5	    			MOVWF	FARG_strncat+0, 1
$83C6	$0E08	    			MOVLW	@log_write_dyna2_L0
$83C8	$6FD6	    			MOVWF	FARG_strncat+1, 1
$83CA	$0E8D	    			MOVLW	lstr9_log
$83CC	$6FD7	    			MOVWF	FARG_strncat+2, 1
$83CE	$0E07	    			MOVLW	@lstr9_log
$83D0	$6FD8	    			MOVWF	FARG_strncat+3, 1
$83D2	$0E38	    			MOVLW	56
$83D4	$6FD9	    			MOVWF	FARG_strncat+4, 1
$83D6	$0E00	    			MOVLW	0
$83D8	$6FDA	    			MOVWF	FARG_strncat+5, 1
$83DA	$EC79	F017			CALL	_strncat
;log.c,121 :: 			strncat (dyna2,"\r\n", 2);
$83DE	$0E2A	    			MOVLW	log_write_dyna2_L0
$83E0	$0108	    			MOVLB	8
$83E2	$6FD5	    			MOVWF	FARG_strncat+0, 1
$83E4	$0E08	    			MOVLW	@log_write_dyna2_L0
$83E6	$6FD6	    			MOVWF	FARG_strncat+1, 1
$83E8	$0EC6	    			MOVLW	lstr10_log
$83EA	$6FD7	    			MOVWF	FARG_strncat+2, 1
$83EC	$0E07	    			MOVLW	@lstr10_log
$83EE	$6FD8	    			MOVWF	FARG_strncat+3, 1
$83F0	$0E02	    			MOVLW	2
$83F2	$6FD9	    			MOVWF	FARG_strncat+4, 1
$83F4	$0E00	    			MOVLW	0
$83F6	$6FDA	    			MOVWF	FARG_strncat+5, 1
$83F8	$EC79	F017			CALL	_strncat
;log.c,122 :: 			Cf_Fat_Write (dyna2, 128);
$83FC	$0E2A	    			MOVLW	log_write_dyna2_L0
$83FE	$0108	    			MOVLB	8
$8400	$6FAC	    			MOVWF	FARG_Cf_Fat_Write+0, 1
$8402	$0E08	    			MOVLW	@log_write_dyna2_L0
$8404	$6FAD	    			MOVWF	FARG_Cf_Fat_Write+1, 1
$8406	$0E80	    			MOVLW	128
$8408	$6FAE	    			MOVWF	FARG_Cf_Fat_Write+2, 1
$840A	$0E00	    			MOVLW	0
$840C	$6FAF	    			MOVWF	FARG_Cf_Fat_Write+3, 1
$840E	$EC04	F025			CALL	_Cf_Fat_Write
;log.c,123 :: 			}
$8412	$D05A	    			BRA	L_log_write_19
$8414	$	L_log_write_18:
;log.c,124 :: 			else if ( type == PORT___ )  {
$8414	$0106	    			MOVLB	6
$8416	$51CD	    			MOVF	FARG_log_write+0, 0, 1
$8418	$0A04	    			XORLW	4
$841A	$E156	    			BNZ	L_log_write_20
;log.c,125 :: 			strncat (dyna2, ip_string, 16);
$841C	$0E2A	    			MOVLW	log_write_dyna2_L0
$841E	$0108	    			MOVLB	8
$8420	$6FD5	    			MOVWF	FARG_strncat+0, 1
$8422	$0E08	    			MOVLW	@log_write_dyna2_L0
$8424	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8426	$0E7E	    			MOVLW	_ip_string
$8428	$6FD7	    			MOVWF	FARG_strncat+2, 1
$842A	$0E02	    			MOVLW	@_ip_string
$842C	$6FD8	    			MOVWF	FARG_strncat+3, 1
$842E	$0E10	    			MOVLW	16
$8430	$6FD9	    			MOVWF	FARG_strncat+4, 1
$8432	$0E00	    			MOVLW	0
$8434	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8436	$EC79	F017			CALL	_strncat
;log.c,126 :: 			strncat (dyna2, date_string, 9);
$843A	$0E2A	    			MOVLW	log_write_dyna2_L0
$843C	$0108	    			MOVLB	8
$843E	$6FD5	    			MOVWF	FARG_strncat+0, 1
$8440	$0E08	    			MOVLW	@log_write_dyna2_L0
$8442	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8444	$0EBB	    			MOVLW	_date_string
$8446	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8448	$0E02	    			MOVLW	@_date_string
$844A	$6FD8	    			MOVWF	FARG_strncat+3, 1
$844C	$0E09	    			MOVLW	9
$844E	$6FD9	    			MOVWF	FARG_strncat+4, 1
$8450	$0E00	    			MOVLW	0
$8452	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8454	$EC79	F017			CALL	_strncat
;log.c,127 :: 			strncat (dyna2, time_string, 9);
$8458	$0E2A	    			MOVLW	log_write_dyna2_L0
$845A	$0108	    			MOVLB	8
$845C	$6FD5	    			MOVWF	FARG_strncat+0, 1
$845E	$0E08	    			MOVLW	@log_write_dyna2_L0
$8460	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8462	$0EC5	    			MOVLW	_time_string
$8464	$6FD7	    			MOVWF	FARG_strncat+2, 1
$8466	$0E02	    			MOVLW	@_time_string
$8468	$6FD8	    			MOVWF	FARG_strncat+3, 1
$846A	$0E09	    			MOVLW	9
$846C	$6FD9	    			MOVWF	FARG_strncat+4, 1
$846E	$0E00	    			MOVLW	0
$8470	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8472	$EC79	F017			CALL	_strncat
;log.c,128 :: 			strncat (dyna2, inf, 20);
$8476	$0E2A	    			MOVLW	log_write_dyna2_L0
$8478	$0108	    			MOVLB	8
$847A	$6FD5	    			MOVWF	FARG_strncat+0, 1
$847C	$0E08	    			MOVLW	@log_write_dyna2_L0
$847E	$6FD6	    			MOVWF	FARG_strncat+1, 1
$8480	$C6CE	F8D7			MOVFF	FARG_log_write+1, FARG_strncat+2
$8484	$C6CF	F8D8			MOVFF	FARG_log_write+2, FARG_strncat+3
$8488	$0E14	    			MOVLW	20
$848A	$6FD9	    			MOVWF	FARG_strncat+4, 1
$848C	$0E00	    			MOVLW	0
$848E	$6FDA	    			MOVWF	FARG_strncat+5, 1
$8490	$EC79	F017			CALL	_strncat
;log.c,129 :: 			strncat (dyna2,"                                                                         \r\n", 75);
$8494	$0E2A	    			MOVLW	log_write_dyna2_L0
$8496	$0108	    			MOVLB	8
$8498	$6FD5	    			MOVWF	FARG_strncat+0, 1
$849A	$0E08	    			MOVLW	@log_write_dyna2_L0
$849C	$6FD6	    			MOVWF	FARG_strncat+1, 1
$849E	$0EC9	    			MOVLW	lstr11_log
$84A0	$6FD7	    			MOVWF	FARG_strncat+2, 1
$84A2	$0E07	    			MOVLW	@lstr11_log
$84A4	$6FD8	    			MOVWF	FARG_strncat+3, 1
$84A6	$0E4B	    			MOVLW	75
$84A8	$6FD9	    			MOVWF	FARG_strncat+4, 1
$84AA	$0E00	    			MOVLW	0
$84AC	$6FDA	    			MOVWF	FARG_strncat+5, 1
$84AE	$EC79	F017			CALL	_strncat
;log.c,130 :: 			Cf_Fat_Write (dyna2, 128);
$84B2	$0E2A	    			MOVLW	log_write_dyna2_L0
$84B4	$0108	    			MOVLB	8
$84B6	$6FAC	    			MOVWF	FARG_Cf_Fat_Write+0, 1
$84B8	$0E08	    			MOVLW	@log_write_dyna2_L0
$84BA	$6FAD	    			MOVWF	FARG_Cf_Fat_Write+1, 1
$84BC	$0E80	    			MOVLW	128
$84BE	$6FAE	    			MOVWF	FARG_Cf_Fat_Write+2, 1
$84C0	$0E00	    			MOVLW	0
$84C2	$6FAF	    			MOVWF	FARG_Cf_Fat_Write+3, 1
$84C4	$EC04	F025			CALL	_Cf_Fat_Write
;log.c,131 :: 			}
$84C8	$	L_log_write_20:
$84C8	$	L_log_write_19:
$84C8	$	L_log_write_17:
$84C8	$	L_log_write_15:
$84C8	$	L_log_write_13:
;log.c,133 :: 			Led_R=1;  // выключить красный сд
$84C8	$8082	    			BSF	PORTC, 0, 0
;log.c,134 :: 			return 1;
$84CA	$0E01	    			MOVLW	1
$84CC	$6E00	    			MOVWF	STACK_0, 0
;log.c,135 :: 			}
$84CE	$0012	    			RETURN
$84D0	$	_putShConstString:
;ethernet.c,516 :: 			unsigned int  putShConstString(const unsigned char *ptr )  //
;ethernet.c,518 :: 			unsigned int    len2 = 0 ;                   // my reply length
$84D0	$0106	    			MOVLB	6
$84D2	$6BD0	    			CLRF	putShConstString_len2_L0, 1
$84D4	$6BD1	    			CLRF	putShConstString_len2_L0+1, 1
;ethernet.c,546 :: 			while (*ptr != 0)
$84D6	$	L_putShConstString_123:
$84D6	$C6CD	FFF6			MOVFF	FARG_putShConstString+0, TBLPTRL
$84DA	$C6CE	FFF7			MOVFF	FARG_putShConstString+1, TBLPTRH
$84DE	$C6CF	FFF8			MOVFF	FARG_putShConstString+2, TBLPTRU
$84E2	$0009	    			TBLRD*+
$84E4	$CFF5	F002			MOVFF	TABLAT, STACK_2
$84E8	$5002	    			MOVF	STACK_2, 0, 0
$84EA	$0A00	    			XORLW	0
$84EC	$E01D	    			BZ	L_putShConstString_124
;ethernet.c,548 :: 			cod_inbyte = (*ptr) ;
$84EE	$C6CD	FFF6			MOVFF	FARG_putShConstString+0, TBLPTRL
$84F2	$C6CE	FFF7			MOVFF	FARG_putShConstString+1, TBLPTRH
$84F6	$C6CF	FFF8			MOVFF	FARG_putShConstString+2, TBLPTRU
$84FA	$0009	    			TBLRD*+
$84FC	$CFF5	F6D2			MOVFF	TABLAT, putShConstString_cod_outbyte_L0
;ethernet.c,549 :: 			cod_outbyte[0] = cod_inbyte;
;ethernet.c,550 :: 			cod_outbyte[1] = 0;
$8500	$0106	    			MOVLB	6
$8502	$6BD3	    			CLRF	putShConstString_cod_outbyte_L0+1, 1
;ethernet.c,551 :: 			len2+= putString(cod_outbyte) ;
$8504	$0ED2	    			MOVLW	putShConstString_cod_outbyte_L0
$8506	$0108	    			MOVLB	8
$8508	$6FAC	    			MOVWF	FARG_Ethernet_putString+0, 1
$850A	$0E06	    			MOVLW	@putShConstString_cod_outbyte_L0
$850C	$6FAD	    			MOVWF	FARG_Ethernet_putString+1, 1
$850E	$ECFB	F025			CALL	_Ethernet_putString
$8512	$5000	    			MOVF	STACK_0, 0, 0
$8514	$0106	    			MOVLB	6
$8516	$27D0	    			ADDWF	putShConstString_len2_L0, 1, 1
$8518	$5001	    			MOVF	STACK_0+1, 0, 0
$851A	$23D1	    			ADDWFC	putShConstString_len2_L0+1, 1, 1
;ethernet.c,552 :: 			ptr++;
$851C	$0E01	    			MOVLW	1
$851E	$27CD	    			ADDWF	FARG_putShConstString+0, 1, 1
$8520	$0E00	    			MOVLW	0
$8522	$23CE	    			ADDWFC	FARG_putShConstString+1, 1, 1
$8524	$23CF	    			ADDWFC	FARG_putShConstString+2, 1, 1
;ethernet.c,553 :: 			}
$8526	$D7D7	    			BRA	L_putShConstString_123
$8528	$	L_putShConstString_124:
;ethernet.c,554 :: 			return (len2);
$8528	$C6D0	F000			MOVFF	putShConstString_len2_L0, STACK_0
$852C	$C6D1	F001			MOVFF	putShConstString_len2_L0+1, STACK_0+1
;ethernet.c,556 :: 			}
$8530	$0012	    			RETURN
$8532	$	_putShString:
;ethernet.c,561 :: 			unsigned int  putShString(unsigned char *ptr )  //
;ethernet.c,563 :: 			unsigned int    len2 = 0 ;                   // my reply length
$8532	$0106	    			MOVLB	6
$8534	$6BCF	    			CLRF	putShString_len2_L0, 1
$8536	$6BD0	    			CLRF	putShString_len2_L0+1, 1
;ethernet.c,591 :: 			while (*ptr != 0)
$8538	$	L_putShString_125:
$8538	$C6CD	FFE9			MOVFF	FARG_putShString+0, FSR0L
$853C	$C6CE	FFEA			MOVFF	FARG_putShString+1, FSR0H
$8540	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$8544	$5002	    			MOVF	STACK_2, 0, 0
$8546	$0A00	    			XORLW	0
$8548	$E017	    			BZ	L_putShString_126
;ethernet.c,593 :: 			cod_inbyte = (*ptr) ;
$854A	$C6CD	FFE9			MOVFF	FARG_putShString+0, FSR0L
$854E	$C6CE	FFEA			MOVFF	FARG_putShString+1, FSR0H
$8552	$CFEE	F6D1			MOVFF	POSTINC0, putShString_cod_outbyte_L0
;ethernet.c,594 :: 			cod_outbyte[0] = cod_inbyte;
;ethernet.c,595 :: 			cod_outbyte[1] = 0;
$8556	$0106	    			MOVLB	6
$8558	$6BD2	    			CLRF	putShString_cod_outbyte_L0+1, 1
;ethernet.c,596 :: 			len2+= putString(cod_outbyte) ;
$855A	$0ED1	    			MOVLW	putShString_cod_outbyte_L0
$855C	$0108	    			MOVLB	8
$855E	$6FAC	    			MOVWF	FARG_Ethernet_putString+0, 1
$8560	$0E06	    			MOVLW	@putShString_cod_outbyte_L0
$8562	$6FAD	    			MOVWF	FARG_Ethernet_putString+1, 1
$8564	$ECFB	F025			CALL	_Ethernet_putString
$8568	$5000	    			MOVF	STACK_0, 0, 0
$856A	$0106	    			MOVLB	6
$856C	$27CF	    			ADDWF	putShString_len2_L0, 1, 1
$856E	$5001	    			MOVF	STACK_0+1, 0, 0
$8570	$23D0	    			ADDWFC	putShString_len2_L0+1, 1, 1
;ethernet.c,597 :: 			ptr++;
$8572	$4BCD	    			INFSNZ	FARG_putShString+0, 1, 1
$8574	$2BCE	    			INCF	FARG_putShString+1, 1, 1
;ethernet.c,598 :: 			}
$8576	$D7E0	    			BRA	L_putShString_125
$8578	$	L_putShString_126:
;ethernet.c,599 :: 			return (len2);
$8578	$C6CF	F000			MOVFF	putShString_len2_L0, STACK_0
$857C	$C6D0	F001			MOVFF	putShString_len2_L0+1, STACK_0+1
;ethernet.c,601 :: 			}
$8580	$0012	    			RETURN
$8582	$	_sprintf:
$8582	$0ED2	    			MOVLW	FARG_sprintf+5
$8584	$0106	    			MOVLB	6
$8586	$6FD6	    			MOVWF	sprintf_ap_L0, 1
$8588	$0E06	    			MOVLW	@FARG_sprintf+5
$858A	$6FD7	    			MOVWF	sprintf_ap_L0+1, 1
$858C	$C6CD	F8AC			MOVFF	FARG_sprintf+0, FARG__doprntf+0
$8590	$C6CE	F8AD			MOVFF	FARG_sprintf+1, FARG__doprntf+1
$8594	$C6CF	F8AE			MOVFF	FARG_sprintf+2, FARG__doprntf+2
$8598	$C6D0	F8AF			MOVFF	FARG_sprintf+3, FARG__doprntf+3
$859C	$C6D1	F8B0			MOVFF	FARG_sprintf+4, FARG__doprntf+4
$85A0	$0ED6	    			MOVLW	sprintf_ap_L0
$85A2	$0108	    			MOVLB	8
$85A4	$6FB1	    			MOVWF	FARG__doprntf+5, 1
$85A6	$0E06	    			MOVLW	@sprintf_ap_L0
$85A8	$6FB2	    			MOVWF	FARG__doprntf+6, 1
$85AA	$EC15	F026			CALL	__doprntf
$85AE	$C000	F6D4			MOVFF	STACK_0, sprintf_cnt_L0
$85B2	$C001	F6D5			MOVFF	STACK_0+1, sprintf_cnt_L0+1
$85B6	$5000	    			MOVF	STACK_0, 0, 0
$85B8	$0106	    			MOVLB	6
$85BA	$25CD	    			ADDWF	FARG_sprintf+0, 0, 1
$85BC	$6EE1	    			MOVWF	FSR1L, 0
$85BE	$5001	    			MOVF	STACK_0+1, 0, 0
$85C0	$21CE	    			ADDWFC	FARG_sprintf+1, 0, 1
$85C2	$6EE2	    			MOVWF	FSR1L+1, 0
$85C4	$6AE6	    			CLRF	POSTINC1, 0
$85C6	$C6D4	F000			MOVFF	sprintf_cnt_L0, STACK_0
$85CA	$C6D5	F001			MOVFF	sprintf_cnt_L0+1, STACK_0+1
$85CE	$0012	    			RETURN
$85D0	$	_rtc_read:
;rtc.c,76 :: 			void rtc_read(void)     //  Чтение RTC  в dyna[]  18 символов
;rtc.c,78 :: 			Read_Time();      // чтение часов
$85D0	$EC25	F011			CALL	_Read_Time
;rtc.c,79 :: 			Display_Time();    // вывод в ETHERNET
$85D4	$EC94	F037			CALL	_Display_Time
;rtc.c,80 :: 			}
$85D8	$0012	    			RETURN
$85DA	$	_rtc_set:
;rtc.c,85 :: 			void rtc_set(void)
;rtc.c,88 :: 			I2C_Init(100000);      // initialize full master mode
$85DA	$0E3E	    			MOVLW	62
$85DC	$6EC8	    			MOVWF	SSPADD, 0
$85DE	$EC44	F008			CALL	_I2C_Init
;rtc.c,89 :: 			I2C_Start();          // issue start signal
$85E2	$ECF0	F007			CALL	_I2C_Start
;rtc.c,90 :: 			I2C_Wr(0xD0);                 // Slave address DS1338, write to RTC
$85E6	$0ED0	    			MOVLW	208
$85E8	$0108	    			MOVLB	8
$85EA	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$85EC	$EC15	F008			CALL	_I2C_Wr
;rtc.c,91 :: 			I2C_Wr(0x00);                 // Byte adress
$85F0	$0108	    			MOVLB	8
$85F2	$6BEB	    			CLRF	FARG_I2C_Wr+0, 1
$85F4	$EC15	F008			CALL	_I2C_Wr
;rtc.c,93 :: 			I2C_Wr(((second/10)<<4)+(second%10));            // write 0 to seconds word
$85F8	$0E0A	    			MOVLW	10
$85FA	$6E04	    			MOVWF	STACK_4, 0
$85FC	$C266	F000			MOVFF	_second, STACK_0
$8600	$EC5D	F006			CALL	_div_8x8_u
$8604	$C000	F8EB			MOVFF	STACK_0, FARG_I2C_Wr+0
$8608	$0108	    			MOVLB	8
$860A	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$860C	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$860E	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8610	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8612	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8614	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8616	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8618	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$861A	$0E0A	    			MOVLW	10
$861C	$6E04	    			MOVWF	STACK_4, 0
$861E	$C266	F000			MOVFF	_second, STACK_0
$8622	$EC5D	F006			CALL	_div_8x8_u
$8626	$C008	F000			MOVFF	STACK_8, STACK_0
$862A	$5000	    			MOVF	STACK_0, 0, 0
$862C	$0108	    			MOVLB	8
$862E	$27EB	    			ADDWF	FARG_I2C_Wr+0, 1, 1
$8630	$EC15	F008			CALL	_I2C_Wr
;rtc.c,94 :: 			I2C_Wr(((minute/10)<<4)+(minute%10));         // write  to minutes word
$8634	$0E0A	    			MOVLW	10
$8636	$6E04	    			MOVWF	STACK_4, 0
$8638	$C267	F000			MOVFF	_minute, STACK_0
$863C	$EC5D	F006			CALL	_div_8x8_u
$8640	$C000	F8EB			MOVFF	STACK_0, FARG_I2C_Wr+0
$8644	$0108	    			MOVLB	8
$8646	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8648	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$864A	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$864C	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$864E	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8650	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8652	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8654	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8656	$0E0A	    			MOVLW	10
$8658	$6E04	    			MOVWF	STACK_4, 0
$865A	$C267	F000			MOVFF	_minute, STACK_0
$865E	$EC5D	F006			CALL	_div_8x8_u
$8662	$C008	F000			MOVFF	STACK_8, STACK_0
$8666	$5000	    			MOVF	STACK_0, 0, 0
$8668	$0108	    			MOVLB	8
$866A	$27EB	    			ADDWF	FARG_I2C_Wr+0, 1, 1
$866C	$EC15	F008			CALL	_I2C_Wr
;rtc.c,95 :: 			I2C_Wr(((hour/10)<<4)+(hour%10));         // write  to hours word
$8670	$0E0A	    			MOVLW	10
$8672	$6E04	    			MOVWF	STACK_4, 0
$8674	$C268	F000			MOVFF	_hour, STACK_0
$8678	$EC5D	F006			CALL	_div_8x8_u
$867C	$C000	F8EB			MOVFF	STACK_0, FARG_I2C_Wr+0
$8680	$0108	    			MOVLB	8
$8682	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8684	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8686	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8688	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$868A	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$868C	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$868E	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8690	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8692	$0E0A	    			MOVLW	10
$8694	$6E04	    			MOVWF	STACK_4, 0
$8696	$C268	F000			MOVFF	_hour, STACK_0
$869A	$EC5D	F006			CALL	_div_8x8_u
$869E	$C008	F000			MOVFF	STACK_8, STACK_0
$86A2	$5000	    			MOVF	STACK_0, 0, 0
$86A4	$0108	    			MOVLB	8
$86A6	$27EB	    			ADDWF	FARG_I2C_Wr+0, 1, 1
$86A8	$EC15	F008			CALL	_I2C_Wr
;rtc.c,96 :: 			I2C_Wr(0x07);         // write  to day word
$86AC	$0E07	    			MOVLW	7
$86AE	$0108	    			MOVLB	8
$86B0	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$86B2	$EC15	F008			CALL	_I2C_Wr
;rtc.c,97 :: 			I2C_Wr(((date/10)<<4)+(date%10));         // write  to date
$86B6	$0E0A	    			MOVLW	10
$86B8	$6E04	    			MOVWF	STACK_4, 0
$86BA	$C269	F000			MOVFF	_date, STACK_0
$86BE	$EC5D	F006			CALL	_div_8x8_u
$86C2	$C000	F8EB			MOVFF	STACK_0, FARG_I2C_Wr+0
$86C6	$0108	    			MOVLB	8
$86C8	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$86CA	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$86CC	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$86CE	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$86D0	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$86D2	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$86D4	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$86D6	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$86D8	$0E0A	    			MOVLW	10
$86DA	$6E04	    			MOVWF	STACK_4, 0
$86DC	$C269	F000			MOVFF	_date, STACK_0
$86E0	$EC5D	F006			CALL	_div_8x8_u
$86E4	$C008	F000			MOVFF	STACK_8, STACK_0
$86E8	$5000	    			MOVF	STACK_0, 0, 0
$86EA	$0108	    			MOVLB	8
$86EC	$27EB	    			ADDWF	FARG_I2C_Wr+0, 1, 1
$86EE	$EC15	F008			CALL	_I2C_Wr
;rtc.c,98 :: 			I2C_Wr(((month/10)<<4)+(month%10));         // write  to month
$86F2	$0E0A	    			MOVLW	10
$86F4	$6E04	    			MOVWF	STACK_4, 0
$86F6	$C26A	F000			MOVFF	_month, STACK_0
$86FA	$EC5D	F006			CALL	_div_8x8_u
$86FE	$C000	F8EB			MOVFF	STACK_0, FARG_I2C_Wr+0
$8702	$0108	    			MOVLB	8
$8704	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8706	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8708	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$870A	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$870C	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$870E	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8710	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8712	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8714	$0E0A	    			MOVLW	10
$8716	$6E04	    			MOVWF	STACK_4, 0
$8718	$C26A	F000			MOVFF	_month, STACK_0
$871C	$EC5D	F006			CALL	_div_8x8_u
$8720	$C008	F000			MOVFF	STACK_8, STACK_0
$8724	$5000	    			MOVF	STACK_0, 0, 0
$8726	$0108	    			MOVLB	8
$8728	$27EB	    			ADDWF	FARG_I2C_Wr+0, 1, 1
$872A	$EC15	F008			CALL	_I2C_Wr
;rtc.c,99 :: 			I2C_Wr(((year/10)<<4)+(year%10));         // write  to year
$872E	$0E0A	    			MOVLW	10
$8730	$6E04	    			MOVWF	STACK_4, 0
$8732	$C26B	F000			MOVFF	_year, STACK_0
$8736	$EC5D	F006			CALL	_div_8x8_u
$873A	$C000	F8EB			MOVFF	STACK_0, FARG_I2C_Wr+0
$873E	$0108	    			MOVLB	8
$8740	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8742	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8744	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$8746	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8748	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$874A	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$874C	$37EB	    			RLCF	FARG_I2C_Wr+0, 1, 1
$874E	$91EB	    			BCF	FARG_I2C_Wr+0, 0, 1
$8750	$0E0A	    			MOVLW	10
$8752	$6E04	    			MOVWF	STACK_4, 0
$8754	$C26B	F000			MOVFF	_year, STACK_0
$8758	$EC5D	F006			CALL	_div_8x8_u
$875C	$C008	F000			MOVFF	STACK_8, STACK_0
$8760	$5000	    			MOVF	STACK_0, 0, 0
$8762	$0108	    			MOVLB	8
$8764	$27EB	    			ADDWF	FARG_I2C_Wr+0, 1, 1
$8766	$EC15	F008			CALL	_I2C_Wr
;rtc.c,100 :: 			I2C_Wr(0x00);         // write  to control
$876A	$0108	    			MOVLB	8
$876C	$6BEB	    			CLRF	FARG_I2C_Wr+0, 1
$876E	$EC15	F008			CALL	_I2C_Wr
;rtc.c,101 :: 			I2C_Stop();           // issue stop signal
$8772	$EC42	F008			CALL	_I2C_Stop
;rtc.c,103 :: 			}
$8776	$0012	    			RETURN
$8778	$	_Termo_measure:
;termo.c,109 :: 			unsigned int Termo_measure (void)
;termo.c,111 :: 			unsigned char crc8=0, i=0;
$8778	$0106	    			MOVLB	6
$877A	$6BCD	    			CLRF	Termo_measure_i_L0, 1
;termo.c,114 :: 			if(OneWireReset()) {
$877C	$EC16	F038			CALL	_OneWireReset
$8780	$5200	    			MOVF	STACK_0, 1, 0
$8782	$E051	    			BZ	L_Termo_measure_13
;termo.c,115 :: 			OneWireWriteByte(0xCC);		//пропуск идентификации
$8784	$0ECC	    			MOVLW	204
$8786	$0108	    			MOVLB	8
$8788	$6FAC	    			MOVWF	FARG_OneWireWriteByte+0, 1
$878A	$EC5B	F038			CALL	_OneWireWriteByte
;termo.c,116 :: 			OneWireWriteByte(0x44);		//запуск преобразования температуры
$878E	$0E44	    			MOVLW	68
$8790	$0108	    			MOVLB	8
$8792	$6FAC	    			MOVWF	FARG_OneWireWriteByte+0, 1
$8794	$EC5B	F038			CALL	_OneWireWriteByte
;termo.c,118 :: 			while(!OneWireLevel()){}    //ожидание преобразования
$8798	$	L_Termo_measure_14:
$8798	$EC94	F01F			CALL	_OneWireLevel
$879C	$5000	    			MOVF	STACK_0, 0, 0
$879E	$1001	    			IORWF	STACK_0+1, 0, 0
$87A0	$E0FB	    			BZ	L_Termo_measure_14
$87A2	$	L_Termo_measure_15:
;termo.c,120 :: 			OneWireReset();						//сброс
$87A2	$EC16	F038			CALL	_OneWireReset
;termo.c,121 :: 			OneWireWriteByte(0xCC);		//пропуск идентификации
$87A6	$0ECC	    			MOVLW	204
$87A8	$0108	    			MOVLB	8
$87AA	$6FAC	    			MOVWF	FARG_OneWireWriteByte+0, 1
$87AC	$EC5B	F038			CALL	_OneWireWriteByte
;termo.c,122 :: 			OneWireWriteByte(0xBE);		//чтение памяти
$87B0	$0EBE	    			MOVLW	190
$87B2	$0108	    			MOVLB	8
$87B4	$6FAC	    			MOVWF	FARG_OneWireWriteByte+0, 1
$87B6	$EC5B	F038			CALL	_OneWireWriteByte
;termo.c,124 :: 			for (i=0;i<9;i++)         //чтение памяти термодатчика
$87BA	$0106	    			MOVLB	6
$87BC	$6BCD	    			CLRF	Termo_measure_i_L0, 1
$87BE	$	L_Termo_measure_16:
$87BE	$0E09	    			MOVLW	9
$87C0	$0106	    			MOVLB	6
$87C2	$5DCD	    			SUBWF	Termo_measure_i_L0, 0, 1
$87C4	$E213	    			BC	L_Termo_measure_17
;termo.c,126 :: 			memory[i]=OneWireReadByte();
$87C6	$0ECE	    			MOVLW	Termo_measure_memory_L0
$87C8	$6FD7	    			MOVWF	FLOC_Termo_measure+10, 1
$87CA	$0E06	    			MOVLW	@Termo_measure_memory_L0
$87CC	$6FD8	    			MOVWF	FLOC_Termo_measure+11, 1
$87CE	$51CD	    			MOVF	Termo_measure_i_L0, 0, 1
$87D0	$27D7	    			ADDWF	FLOC_Termo_measure+10, 1, 1
$87D2	$B0D8	    			BTFSC	STATUS, C, 0
$87D4	$2BD8	    			INCF	FLOC_Termo_measure+11, 1, 1
$87D6	$EC8C	F038			CALL	_OneWireReadByte
$87DA	$C6D7	FFE1			MOVFF	FLOC_Termo_measure+10, FSR1L
$87DE	$C6D8	FFE2			MOVFF	FLOC_Termo_measure+11, FSR1H
$87E2	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;termo.c,127 :: 			}
$87E6	$	L_Termo_measure_18:
;termo.c,124 :: 			for (i=0;i<9;i++)         //чтение памяти термодатчика
$87E6	$0106	    			MOVLB	6
$87E8	$2BCD	    			INCF	Termo_measure_i_L0, 1, 1
;termo.c,127 :: 			}
$87EA	$D7E9	    			BRA	L_Termo_measure_16
$87EC	$	L_Termo_measure_17:
;termo.c,128 :: 			return ((memory[1]<<8)+(memory[0]))>>1;
$87EC	$0E08	    			MOVLW	8
$87EE	$6E02	    			MOVWF	STACK_2, 0
$87F0	$C6CF	F000			MOVFF	Termo_measure_memory_L0+1, STACK_0
$87F4	$0E00	    			MOVLW	0
$87F6	$6E01	    			MOVWF	STACK_0+1, 0
$87F8	$5002	    			MOVF	STACK_2, 0, 0
$87FA	$	L_Termo_measure_20:
$87FA	$0106	    			MOVLB	6
$87FC	$E005	    			BZ	L_Termo_measure_21
$87FE	$3600	    			RLCF	STACK_0, 1, 0
$8800	$9000	    			BCF	STACK_0, 0, 0
$8802	$3601	    			RLCF	STACK_0+1, 1, 0
$8804	$0FFF	    			ADDLW	255
$8806	$D7F9	    			BRA	L_Termo_measure_20
$8808	$	L_Termo_measure_21:
$8808	$0106	    			MOVLB	6
$880A	$51CE	    			MOVF	Termo_measure_memory_L0, 0, 1
$880C	$2400	    			ADDWF	STACK_0, 0, 0
$880E	$6E03	    			MOVWF	STACK_3, 0
$8810	$0E00	    			MOVLW	0
$8812	$2001	    			ADDWFC	STACK_0+1, 0, 0
$8814	$6E04	    			MOVWF	STACK_3+1, 0
$8816	$C003	F000			MOVFF	STACK_3, STACK_0
$881A	$C004	F001			MOVFF	STACK_3+1, STACK_0+1
$881E	$3201	    			RRCF	STACK_0+1, 1, 0
$8820	$3200	    			RRCF	STACK_0, 1, 0
$8822	$9E01	    			BCF	STACK_0+1, 7, 0
$8824	$0012	    			RETURN
;termo.c,129 :: 			}
$8826	$	L_Termo_measure_13:
;termo.c,130 :: 			}
$8826	$0012	    			RETURN
$8828	$	_My_long_to_str:
;ethernet.c,503 :: 			void My_long_to_str( unsigned long size, unsigned char *s_out )  // преобразует long число в строку из 11 символов, лидирующие нули
;ethernet.c,507 :: 			LongToStr(size, tmp) ;
$8828	$C6CD	F8AC			MOVFF	FARG_My_long_to_str+0, FARG_LongToStr+0
$882C	$C6CE	F8AD			MOVFF	FARG_My_long_to_str+1, FARG_LongToStr+1
$8830	$C6CF	F8AE			MOVFF	FARG_My_long_to_str+2, FARG_LongToStr+2
$8834	$C6D0	F8AF			MOVFF	FARG_My_long_to_str+3, FARG_LongToStr+3
$8838	$0ED4	    			MOVLW	My_long_to_str_tmp_L0
$883A	$0108	    			MOVLB	8
$883C	$6FB0	    			MOVWF	FARG_LongToStr+4, 1
$883E	$0E06	    			MOVLW	@My_long_to_str_tmp_L0
$8840	$6FB1	    			MOVWF	FARG_LongToStr+5, 1
$8842	$ECBF	F038			CALL	_LongToStr
;ethernet.c,508 :: 			for (i=0; i< 12; i++)  // i=  0..11
$8846	$0106	    			MOVLB	6
$8848	$6BD3	    			CLRF	My_long_to_str_i_L0, 1
$884A	$	L_My_long_to_str_119:
$884A	$0E0C	    			MOVLW	12
$884C	$0106	    			MOVLB	6
$884E	$5DD3	    			SUBWF	My_long_to_str_i_L0, 0, 1
$8850	$E22D	    			BC	L_My_long_to_str_120
;ethernet.c,510 :: 			if (tmp[i] == ' ') tmp[i] = '0';
$8852	$0ED4	    			MOVLW	My_long_to_str_tmp_L0
$8854	$6EE9	    			MOVWF	FSR0L, 0
$8856	$0E06	    			MOVLW	@My_long_to_str_tmp_L0
$8858	$6EEA	    			MOVWF	FSR0L+1, 0
$885A	$51D3	    			MOVF	My_long_to_str_i_L0, 0, 1
$885C	$26E9	    			ADDWF	FSR0L, 1, 0
$885E	$B0D8	    			BTFSC	STATUS, C, 0
$8860	$2AEA	    			INCF	FSR0L+1, 1, 0
$8862	$CFEE	F001			MOVFF	POSTINC0, STACK_1
$8866	$5001	    			MOVF	STACK_1, 0, 0
$8868	$0A20	    			XORLW	32
$886A	$E10A	    			BNZ	L_My_long_to_str_122
$886C	$0ED4	    			MOVLW	My_long_to_str_tmp_L0
$886E	$6EE1	    			MOVWF	FSR1L, 0
$8870	$0E06	    			MOVLW	@My_long_to_str_tmp_L0
$8872	$6EE2	    			MOVWF	FSR1L+1, 0
$8874	$51D3	    			MOVF	My_long_to_str_i_L0, 0, 1
$8876	$26E1	    			ADDWF	FSR1L, 1, 0
$8878	$B0D8	    			BTFSC	STATUS, C, 0
$887A	$2AE2	    			INCF	FSR1L+1, 1, 0
$887C	$0E30	    			MOVLW	48
$887E	$6EE6	    			MOVWF	POSTINC1, 0
$8880	$	L_My_long_to_str_122:
;ethernet.c,511 :: 			*(s_out + i ) = tmp[i];
$8880	$0106	    			MOVLB	6
$8882	$51D3	    			MOVF	My_long_to_str_i_L0, 0, 1
$8884	$25D1	    			ADDWF	FARG_My_long_to_str+4, 0, 1
$8886	$6EE1	    			MOVWF	FSR1L, 0
$8888	$0E00	    			MOVLW	0
$888A	$21D2	    			ADDWFC	FARG_My_long_to_str+5, 0, 1
$888C	$6EE2	    			MOVWF	FSR1L+1, 0
$888E	$0ED4	    			MOVLW	My_long_to_str_tmp_L0
$8890	$6EE9	    			MOVWF	FSR0L, 0
$8892	$0E06	    			MOVLW	@My_long_to_str_tmp_L0
$8894	$6EEA	    			MOVWF	FSR0L+1, 0
$8896	$51D3	    			MOVF	My_long_to_str_i_L0, 0, 1
$8898	$26E9	    			ADDWF	FSR0L, 1, 0
$889A	$B0D8	    			BTFSC	STATUS, C, 0
$889C	$2AEA	    			INCF	FSR0L+1, 1, 0
$889E	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$88A2	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;ethernet.c,512 :: 			}
$88A6	$	L_My_long_to_str_121:
;ethernet.c,508 :: 			for (i=0; i< 12; i++)  // i=  0..11
$88A6	$0106	    			MOVLB	6
$88A8	$2BD3	    			INCF	My_long_to_str_i_L0, 1, 1
;ethernet.c,512 :: 			}
$88AA	$D7CF	    			BRA	L_My_long_to_str_119
$88AC	$	L_My_long_to_str_120:
;ethernet.c,513 :: 			}
$88AC	$0012	    			RETURN
$88AE	$	_Cf_Fat_Delete:
$88AE	$0102	    			MOVLB	2
$88B0	$5145	    			MOVF	cf_fat16_root_sector_pnt, 0, 1
$88B2	$2541	    			ADDWF	cf_fat16_ROOT_START_SECTOR, 0, 1
$88B4	$0106	    			MOVLB	6
$88B6	$6FCD	    			MOVWF	Cf_Fat_Delete_file_root_sector_L0, 1
$88B8	$0102	    			MOVLB	2
$88BA	$5146	    			MOVF	cf_fat16_root_sector_pnt+1, 0, 1
$88BC	$2142	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+1, 0, 1
$88BE	$0106	    			MOVLB	6
$88C0	$6FCE	    			MOVWF	Cf_Fat_Delete_file_root_sector_L0+1, 1
$88C2	$0E00	    			MOVLW	0
$88C4	$0102	    			MOVLB	2
$88C6	$2143	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+2, 0, 1
$88C8	$0106	    			MOVLB	6
$88CA	$6FCF	    			MOVWF	Cf_Fat_Delete_file_root_sector_L0+2, 1
$88CC	$0E00	    			MOVLW	0
$88CE	$0102	    			MOVLB	2
$88D0	$2144	    			ADDWFC	cf_fat16_ROOT_START_SECTOR+3, 0, 1
$88D2	$0106	    			MOVLB	6
$88D4	$6FD0	    			MOVWF	Cf_Fat_Delete_file_root_sector_L0+3, 1
$88D6	$0108	    			MOVLB	8
$88D8	$6BEB	    			CLRF	FARG_cf_fat16_Reset_Fat_Chain+0, 1
$88DA	$ECC2	F00A			CALL	cf_fat16_Reset_Fat_Chain
$88DE	$C6CD	F901			MOVFF	Cf_Fat_Delete_file_root_sector_L0, FARG_Cf_Read_Sector+0
$88E2	$C6CE	F902			MOVFF	Cf_Fat_Delete_file_root_sector_L0+1, FARG_Cf_Read_Sector+1
$88E6	$C6CF	F903			MOVFF	Cf_Fat_Delete_file_root_sector_L0+2, FARG_Cf_Read_Sector+2
$88EA	$C6D0	F904			MOVFF	Cf_Fat_Delete_file_root_sector_L0+3, FARG_Cf_Read_Sector+3
$88EE	$0E2E	    			MOVLW	cf_fat16_data
$88F0	$0109	    			MOVLB	9
$88F2	$6F05	    			MOVWF	FARG_Cf_Read_Sector+4, 1
$88F4	$0E00	    			MOVLW	@cf_fat16_data
$88F6	$6F06	    			MOVWF	FARG_Cf_Read_Sector+5, 1
$88F8	$EC5C	F001			CALL	_Cf_Read_Sector
$88FC	$0E2E	    			MOVLW	cf_fat16_data
$88FE	$0102	    			MOVLB	2
$8900	$2547	    			ADDWF	cf_fat16_root_offset, 0, 1
$8902	$6EE1	    			MOVWF	FSR1L, 0
$8904	$0E00	    			MOVLW	@cf_fat16_data
$8906	$2148	    			ADDWFC	cf_fat16_root_offset+1, 0, 1
$8908	$6EE2	    			MOVWF	FSR1L+1, 0
$890A	$0EE5	    			MOVLW	229
$890C	$6EE6	    			MOVWF	POSTINC1, 0
$890E	$C6CD	F901			MOVFF	Cf_Fat_Delete_file_root_sector_L0, FARG_Cf_Write_Sector+0
$8912	$C6CE	F902			MOVFF	Cf_Fat_Delete_file_root_sector_L0+1, FARG_Cf_Write_Sector+1
$8916	$C6CF	F903			MOVFF	Cf_Fat_Delete_file_root_sector_L0+2, FARG_Cf_Write_Sector+2
$891A	$C6D0	F904			MOVFF	Cf_Fat_Delete_file_root_sector_L0+3, FARG_Cf_Write_Sector+3
$891E	$0E2E	    			MOVLW	cf_fat16_data
$8920	$0109	    			MOVLB	9
$8922	$6F05	    			MOVWF	FARG_Cf_Write_Sector+4, 1
$8924	$0E00	    			MOVLW	@cf_fat16_data
$8926	$6F06	    			MOVWF	FARG_Cf_Write_Sector+5, 1
$8928	$EC89	F001			CALL	_Cf_Write_Sector
$892C	$0012	    			RETURN
$892E	$	_open_port:
;open_port.c,15 :: 			void open_port (  unsigned char  cmd_port_num )
;open_port.c,17 :: 			if(fMasterKey==1) {return;}           // нельзя открывать и закрывать ячейки когда повернут мастер ключ
$892E	$0103	    			MOVLB	3
$8930	$5173	    			MOVF	_fMasterKey, 0, 1
$8932	$0A01	    			XORLW	1
$8934	$B4D8	    			BTFSC	STATUS, Z, 0
$8936	$0012	    			RETURN
$8938	$	L_open_port_0:
;open_port.c,18 :: 			if (cellCommand[cmd_port_num] == 1) {return;}  // чо открывать если уже и так открыто
$8938	$0E74	    			MOVLW	_cellCommand
$893A	$6EE9	    			MOVWF	FSR0L, 0
$893C	$0E03	    			MOVLW	@_cellCommand
$893E	$6EEA	    			MOVWF	FSR0L+1, 0
$8940	$0106	    			MOVLB	6
$8942	$51CD	    			MOVF	FARG_open_port+0, 0, 1
$8944	$26E9	    			ADDWF	FSR0L, 1, 0
$8946	$B0D8	    			BTFSC	STATUS, C, 0
$8948	$2AEA	    			INCF	FSR0L+1, 1, 0
$894A	$CFEE	F001			MOVFF	POSTINC0, STACK_1
$894E	$5001	    			MOVF	STACK_1, 0, 0
$8950	$0A01	    			XORLW	1
$8952	$B4D8	    			BTFSC	STATUS, Z, 0
$8954	$0012	    			RETURN
$8956	$	L_open_port_1:
;open_port.c,20 :: 			cellCommand[cmd_port_num] = 1;
$8956	$0E74	    			MOVLW	_cellCommand
$8958	$6EE1	    			MOVWF	FSR1L, 0
$895A	$0E03	    			MOVLW	@_cellCommand
$895C	$6EE2	    			MOVWF	FSR1L+1, 0
$895E	$0106	    			MOVLB	6
$8960	$51CD	    			MOVF	FARG_open_port+0, 0, 1
$8962	$26E1	    			ADDWF	FSR1L, 1, 0
$8964	$B0D8	    			BTFSC	STATUS, C, 0
$8966	$2AE2	    			INCF	FSR1L+1, 1, 0
$8968	$0E01	    			MOVLW	1
$896A	$6EE6	    			MOVWF	POSTINC1, 0
;open_port.c,22 :: 			}
$896C	$0012	    			RETURN
$896E	$	_l_w_port:
;ethernet.c,487 :: 			void l_w_port(unsigned char cmd_port_num)   //запись в строку dyna начала строки с номером порта
;ethernet.c,491 :: 			dyna[0] = '_';
$896E	$0E5F	    			MOVLW	95
$8970	$0102	    			MOVLB	2
$8972	$6FCF	    			MOVWF	_dyna, 1
;ethernet.c,492 :: 			dyna[1] = 'p';
$8974	$0E70	    			MOVLW	112
$8976	$6FD0	    			MOVWF	_dyna+1, 1
;ethernet.c,493 :: 			dyna[2] = 'o';
$8978	$0E6F	    			MOVLW	111
$897A	$6FD1	    			MOVWF	_dyna+2, 1
;ethernet.c,494 :: 			dyna[3] = 'r';
$897C	$0E72	    			MOVLW	114
$897E	$6FD2	    			MOVWF	_dyna+3, 1
;ethernet.c,495 :: 			dyna[4] = 't';
$8980	$0E74	    			MOVLW	116
$8982	$6FD3	    			MOVWF	_dyna+4, 1
;ethernet.c,496 :: 			ByteToStr(cmd_port_num, tmp) ;
$8984	$C6CD	F8EB			MOVFF	FARG_l_w_port+0, FARG_ByteToStr+0
$8988	$0ECE	    			MOVLW	l_w_port_tmp_L0
$898A	$0108	    			MOVLB	8
$898C	$6FEC	    			MOVWF	FARG_ByteToStr+1, 1
$898E	$0E06	    			MOVLW	@l_w_port_tmp_L0
$8990	$6FED	    			MOVWF	FARG_ByteToStr+2, 1
$8992	$EC9F	F00C			CALL	_ByteToStr
;ethernet.c,497 :: 			dyna[5] = tmp[1];
$8996	$C6CF	F2D4			MOVFF	l_w_port_tmp_L0+1, _dyna+5
;ethernet.c,498 :: 			dyna[6] = tmp[2];
$899A	$C6D0	F2D5			MOVFF	l_w_port_tmp_L0+2, _dyna+6
;ethernet.c,499 :: 			dyna[7] = '\0';
$899E	$0102	    			MOVLB	2
$89A0	$6BD6	    			CLRF	_dyna+7, 1
;ethernet.c,500 :: 			}
$89A2	$0012	    			RETURN
$89A4	$	_close_port:
;open_port.c,26 :: 			void close_port (  unsigned char  cmd_port_num )
;open_port.c,28 :: 			if(fMasterKey==1) {return;}           // нельзя открывать и закрывать ячейки когда повернут мастер ключ
$89A4	$0103	    			MOVLB	3
$89A6	$5173	    			MOVF	_fMasterKey, 0, 1
$89A8	$0A01	    			XORLW	1
$89AA	$B4D8	    			BTFSC	STATUS, Z, 0
$89AC	$0012	    			RETURN
$89AE	$	L_close_port_2:
;open_port.c,29 :: 			if (cellCommand[cmd_port_num] == 0) {return;}
$89AE	$0E74	    			MOVLW	_cellCommand
$89B0	$6EE9	    			MOVWF	FSR0L, 0
$89B2	$0E03	    			MOVLW	@_cellCommand
$89B4	$6EEA	    			MOVWF	FSR0L+1, 0
$89B6	$0106	    			MOVLB	6
$89B8	$51CD	    			MOVF	FARG_close_port+0, 0, 1
$89BA	$26E9	    			ADDWF	FSR0L, 1, 0
$89BC	$B0D8	    			BTFSC	STATUS, C, 0
$89BE	$2AEA	    			INCF	FSR0L+1, 1, 0
$89C0	$CFEE	F001			MOVFF	POSTINC0, STACK_1
$89C4	$5001	    			MOVF	STACK_1, 0, 0
$89C6	$0A00	    			XORLW	0
$89C8	$B4D8	    			BTFSC	STATUS, Z, 0
$89CA	$0012	    			RETURN
$89CC	$	L_close_port_3:
;open_port.c,30 :: 			cellCommand[cmd_port_num] = 0;
$89CC	$0E74	    			MOVLW	_cellCommand
$89CE	$6EE1	    			MOVWF	FSR1L, 0
$89D0	$0E03	    			MOVLW	@_cellCommand
$89D2	$6EE2	    			MOVWF	FSR1L+1, 0
$89D4	$0106	    			MOVLB	6
$89D6	$51CD	    			MOVF	FARG_close_port+0, 0, 1
$89D8	$26E1	    			ADDWF	FSR1L, 1, 0
$89DA	$B0D8	    			BTFSC	STATUS, C, 0
$89DC	$2AE2	    			INCF	FSR1L+1, 1, 0
$89DE	$6AE6	    			CLRF	POSTINC1, 0
;open_port.c,32 :: 			}
$89E0	$0012	    			RETURN
$89E2	$	_Delay_500us:
;Delays.c,27 :: 			void Delay_500us() {
;Delays.c,28 :: 			Delay_us(498);
$89E2	$0E05	    			MOVLW	5
$89E4	$6E0B	    			MOVWF	STACK_11, 0
$89E6	$0EFF	    			MOVLW	255
$89E8	$6E0A	    			MOVWF	STACK_10, 0
$89EA	$2E0B	    			DECFSZ	STACK_11, F, 0
$89EC	$D001	    			BRA	$+2
$89EE	$D003	    			BRA	$+4
$89F0	$2E0A	    			DECFSZ	STACK_10, F, 0
$89F2	$D7FE	    			BRA	$-1
$89F4	$D7FA	    			BRA	$-5
$89F6	$0E06	    			MOVLW	6
$89F8	$6E0A	    			MOVWF	STACK_10, 0
$89FA	$2E0A	    			DECFSZ	STACK_10, F, 0
$89FC	$D7FE	    			BRA	$-1
$89FE	$0000	    			NOP
;Delays.c,29 :: 			}
$8A00	$0012	    			RETURN
$8A02	$	_Ethernet_memcmp:
$8A02	$0E7A	    			MOVLW	ERDPT
$8A04	$0108	    			MOVLB	8
$8A06	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$8A08	$0E0F	    			MOVLW	@ERDPT
$8A0A	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$8A0C	$ECCA	F007			CALL	_Ethernet_readReg2
$8A10	$C000	F648			MOVFF	STACK_0, Ethernet_memcmp_rdptr_L0
$8A14	$0E7B	    			MOVLW	ERDPTH
$8A16	$0108	    			MOVLB	8
$8A18	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$8A1A	$0E0F	    			MOVLW	@ERDPTH
$8A1C	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$8A1E	$ECCA	F007			CALL	_Ethernet_readReg2
$8A22	$C000	F649			MOVFF	STACK_0, Ethernet_memcmp_rdptr_L0+1
$8A26	$0E7A	    			MOVLW	ERDPT
$8A28	$0108	    			MOVLB	8
$8A2A	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$8A2C	$0E0F	    			MOVLW	@ERDPT
$8A2E	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$8A30	$C643	F8FA			MOVFF	FARG_Ethernet_memcmp+0, FARG_Ethernet_writeAddr2+2
$8A34	$C644	F8FB			MOVFF	FARG_Ethernet_memcmp+1, FARG_Ethernet_writeAddr2+3
$8A38	$EC67	F002			CALL	_Ethernet_writeAddr2
$8A3C	$	L_Ethernet_memcmp_219:
$8A3C	$0106	    			MOVLB	6
$8A3E	$5347	    			MOVF	FARG_Ethernet_memcmp+4, 1, 1
$8A40	$E00E	    			BZ	L_Ethernet_memcmp_220
$8A42	$C645	FFE9			MOVFF	FARG_Ethernet_memcmp+2, FSR0L
$8A46	$C646	FFEA			MOVFF	FARG_Ethernet_memcmp+3, FSR0H
$8A4A	$CFEE	F001			MOVFF	POSTINC0, STACK_1
$8A4E	$5061	    			MOVF	EDATA, 0, 0
$8A50	$1801	    			XORWF	STACK_1, 0, 0
$8A52	$E105	    			BNZ	L_Ethernet_memcmp_220
$8A54	$	L_Ethernet_memcmp_221:
$8A54	$0106	    			MOVLB	6
$8A56	$4B45	    			INFSNZ	FARG_Ethernet_memcmp+2, 1, 1
$8A58	$2B46	    			INCF	FARG_Ethernet_memcmp+3, 1, 1
$8A5A	$0747	    			DECF	FARG_Ethernet_memcmp+4, 1, 1
$8A5C	$D7EF	    			BRA	L_Ethernet_memcmp_219
$8A5E	$	L_Ethernet_memcmp_220:
$8A5E	$0E7A	    			MOVLW	ERDPT
$8A60	$0108	    			MOVLB	8
$8A62	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$8A64	$0E0F	    			MOVLW	@ERDPT
$8A66	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$8A68	$C648	F8FA			MOVFF	Ethernet_memcmp_rdptr_L0, FARG_Ethernet_writeAddr2+2
$8A6C	$C649	F8FB			MOVFF	Ethernet_memcmp_rdptr_L0+1, FARG_Ethernet_writeAddr2+3
$8A70	$EC67	F002			CALL	_Ethernet_writeAddr2
$8A74	$C647	F000			MOVFF	FARG_Ethernet_memcmp+4, STACK_0
$8A78	$0012	    			RETURN
$8A7A	$	_Ethernet_MACswap:
$8A7A	$0EB5	    			MOVLW	181
$8A7C	$0108	    			MOVLB	8
$8A7E	$6FD5	    			MOVWF	FARG_Ethernet_RAMcopy+0, 1
$8A80	$0E19	    			MOVLW	25
$8A82	$6FD6	    			MOVWF	FARG_Ethernet_RAMcopy+1, 1
$8A84	$0EBB	    			MOVLW	187
$8A86	$6FD7	    			MOVWF	FARG_Ethernet_RAMcopy+2, 1
$8A88	$0E19	    			MOVLW	25
$8A8A	$6FD8	    			MOVWF	FARG_Ethernet_RAMcopy+3, 1
$8A8C	$0EAF	    			MOVLW	175
$8A8E	$6FD9	    			MOVWF	FARG_Ethernet_RAMcopy+4, 1
$8A90	$0E19	    			MOVLW	25
$8A92	$6FDA	    			MOVWF	FARG_Ethernet_RAMcopy+5, 1
$8A94	$6BDB	    			CLRF	FARG_Ethernet_RAMcopy+6, 1
$8A96	$EC5A	F010			CALL	_Ethernet_RAMcopy
$8A9A	$0EB5	    			MOVLW	181
$8A9C	$0108	    			MOVLB	8
$8A9E	$6FD5	    			MOVWF	FARG_Ethernet_memcpy+0, 1
$8AA0	$0E19	    			MOVLW	25
$8AA2	$6FD6	    			MOVWF	FARG_Ethernet_memcpy+1, 1
$8AA4	$0E70	    			MOVLW	_Ethernet_macAddr
$8AA6	$6FD7	    			MOVWF	FARG_Ethernet_memcpy+2, 1
$8AA8	$0E02	    			MOVLW	@_Ethernet_macAddr
$8AAA	$6FD8	    			MOVWF	FARG_Ethernet_memcpy+3, 1
$8AAC	$0E06	    			MOVLW	6
$8AAE	$6FD9	    			MOVWF	FARG_Ethernet_memcpy+4, 1
$8AB0	$ECF1	F00F			CALL	_Ethernet_memcpy
$8AB4	$0012	    			RETURN
$8AB6	$	_Ethernet_setRxReadAddress:
$8AB6	$0106	    			MOVLB	6
$8AB8	$5144	    			MOVF	FARG_Ethernet_setRxReadAddress+1, 0, 1
$8ABA	$0819	    			SUBLW	25
$8ABC	$E102	    			BNZ	L_Ethernet_setRxReadAddress_269
$8ABE	$5143	    			MOVF	FARG_Ethernet_setRxReadAddress+0, 0, 1
$8AC0	$08AD	    			SUBLW	173
$8AC2	$	L_Ethernet_setRxReadAddress_269:
$8AC2	$E205	    			BC	L_Ethernet_setRxReadAddress_232
$8AC4	$0EAE	    			MOVLW	174
$8AC6	$0106	    			MOVLB	6
$8AC8	$5F43	    			SUBWF	FARG_Ethernet_setRxReadAddress+0, 1, 1
$8ACA	$0E19	    			MOVLW	25
$8ACC	$5B44	    			SUBWFB	FARG_Ethernet_setRxReadAddress+1, 1, 1
$8ACE	$	L_Ethernet_setRxReadAddress_232:
$8ACE	$0E7A	    			MOVLW	ERDPT
$8AD0	$0108	    			MOVLB	8
$8AD2	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$8AD4	$0E0F	    			MOVLW	@ERDPT
$8AD6	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$8AD8	$C643	F8FA			MOVFF	FARG_Ethernet_setRxReadAddress+0, FARG_Ethernet_writeAddr2+2
$8ADC	$C644	F8FB			MOVFF	FARG_Ethernet_setRxReadAddress+1, FARG_Ethernet_writeAddr2+3
$8AE0	$EC67	F002			CALL	_Ethernet_writeAddr2
$8AE4	$0012	    			RETURN
$8AE6	$	_Ethernet_doDNS:
$8AE6	$ECD4	F020			CALL	_Ethernet_getByte
$8AEA	$ECD4	F020			CALL	_Ethernet_getByte
$8AEE	$ECD4	F020			CALL	_Ethernet_getByte
$8AF2	$C000	F644			MOVFF	STACK_0, Ethernet_doDNS_f_L0+1
$8AF6	$ECD4	F020			CALL	_Ethernet_getByte
$8AFA	$C000	F643			MOVFF	STACK_0, Ethernet_doDNS_f_L0
$8AFE	$ECD4	F020			CALL	_Ethernet_getByte
$8B02	$C000	F646			MOVFF	STACK_0, Ethernet_doDNS_q_L0+1
$8B06	$ECD4	F020			CALL	_Ethernet_getByte
$8B0A	$C000	F645			MOVFF	STACK_0, Ethernet_doDNS_q_L0
$8B0E	$ECD4	F020			CALL	_Ethernet_getByte
$8B12	$C000	F648			MOVFF	STACK_0, Ethernet_doDNS_a_L0+1
$8B16	$ECD4	F020			CALL	_Ethernet_getByte
$8B1A	$C000	F647			MOVFF	STACK_0, Ethernet_doDNS_a_L0
$8B1E	$ECD4	F020			CALL	_Ethernet_getByte
$8B22	$ECD4	F020			CALL	_Ethernet_getByte
$8B26	$ECD4	F020			CALL	_Ethernet_getByte
$8B2A	$ECD4	F020			CALL	_Ethernet_getByte
$8B2E	$	L_Ethernet_doDNS_175:
$8B2E	$C645	F000			MOVFF	Ethernet_doDNS_q_L0, STACK_0
$8B32	$C646	F001			MOVFF	Ethernet_doDNS_q_L0+1, STACK_0+1
$8B36	$0E01	    			MOVLW	1
$8B38	$0106	    			MOVLB	6
$8B3A	$5F45	    			SUBWF	Ethernet_doDNS_q_L0, 1, 1
$8B3C	$0E00	    			MOVLW	0
$8B3E	$5B46	    			SUBWFB	Ethernet_doDNS_q_L0+1, 1, 1
$8B40	$5000	    			MOVF	STACK_0, 0, 0
$8B42	$1001	    			IORWF	STACK_0+1, 0, 0
$8B44	$E00E	    			BZ	L_Ethernet_doDNS_176
$8B46	$	L_Ethernet_doDNS_177:
$8B46	$0106	    			MOVLB	6
$8B48	$ECD4	F020			CALL	_Ethernet_getByte
$8B4C	$5200	    			MOVF	STACK_0, 1, 0
$8B4E	$E1FB	    			BNZ	L_Ethernet_doDNS_177
$8B50	$	L_Ethernet_doDNS_178:
$8B50	$ECD4	F020			CALL	_Ethernet_getByte
$8B54	$ECD4	F020			CALL	_Ethernet_getByte
$8B58	$ECD4	F020			CALL	_Ethernet_getByte
$8B5C	$ECD4	F020			CALL	_Ethernet_getByte
$8B60	$D7E6	    			BRA	L_Ethernet_doDNS_175
$8B62	$	L_Ethernet_doDNS_176:
$8B62	$	L_Ethernet_doDNS_179:
$8B62	$C647	F000			MOVFF	Ethernet_doDNS_a_L0, STACK_0
$8B66	$C648	F001			MOVFF	Ethernet_doDNS_a_L0+1, STACK_0+1
$8B6A	$0E01	    			MOVLW	1
$8B6C	$0106	    			MOVLB	6
$8B6E	$5F47	    			SUBWF	Ethernet_doDNS_a_L0, 1, 1
$8B70	$0E00	    			MOVLW	0
$8B72	$5B48	    			SUBWFB	Ethernet_doDNS_a_L0+1, 1, 1
$8B74	$5000	    			MOVF	STACK_0, 0, 0
$8B76	$1001	    			IORWF	STACK_0+1, 0, 0
$8B78	$E048	    			BZ	L_Ethernet_doDNS_180
$8B7A	$ECD4	F020			CALL	_Ethernet_getByte
$8B7E	$ECD4	F020			CALL	_Ethernet_getByte
$8B82	$ECD4	F020			CALL	_Ethernet_getByte
$8B86	$C000	F64C			MOVFF	STACK_0, Ethernet_doDNS_type_L0+1
$8B8A	$ECD4	F020			CALL	_Ethernet_getByte
$8B8E	$C000	F64B			MOVFF	STACK_0, Ethernet_doDNS_type_L0
$8B92	$ECD4	F020			CALL	_Ethernet_getByte
$8B96	$ECD4	F020			CALL	_Ethernet_getByte
$8B9A	$ECD4	F020			CALL	_Ethernet_getByte
$8B9E	$ECD4	F020			CALL	_Ethernet_getByte
$8BA2	$ECD4	F020			CALL	_Ethernet_getByte
$8BA6	$ECD4	F020			CALL	_Ethernet_getByte
$8BAA	$ECD4	F020			CALL	_Ethernet_getByte
$8BAE	$C000	F64A			MOVFF	STACK_0, Ethernet_doDNS_dl_L0+1
$8BB2	$ECD4	F020			CALL	_Ethernet_getByte
$8BB6	$C000	F649			MOVFF	STACK_0, Ethernet_doDNS_dl_L0
$8BBA	$0E00	    			MOVLW	0
$8BBC	$0106	    			MOVLB	6
$8BBE	$194C	    			XORWF	Ethernet_doDNS_type_L0+1, 0, 1
$8BC0	$E102	    			BNZ	L_Ethernet_doDNS_264
$8BC2	$0E01	    			MOVLW	1
$8BC4	$194B	    			XORWF	Ethernet_doDNS_type_L0, 0, 1
$8BC6	$	L_Ethernet_doDNS_264:
$8BC6	$E111	    			BNZ	L_Ethernet_doDNS_181
$8BC8	$ECD4	F020			CALL	_Ethernet_getByte
$8BCC	$C000	F383			MOVFF	STACK_0, _Ethernet_rmtIpAddr
$8BD0	$ECD4	F020			CALL	_Ethernet_getByte
$8BD4	$C000	F384			MOVFF	STACK_0, _Ethernet_rmtIpAddr+1
$8BD8	$ECD4	F020			CALL	_Ethernet_getByte
$8BDC	$C000	F385			MOVFF	STACK_0, _Ethernet_rmtIpAddr+2
$8BE0	$ECD4	F020			CALL	_Ethernet_getByte
$8BE4	$C000	F386			MOVFF	STACK_0, _Ethernet_rmtIpAddr+3
$8BE8	$D010	    			BRA	L_Ethernet_doDNS_180
$8BEA	$	L_Ethernet_doDNS_181:
$8BEA	$	L_Ethernet_doDNS_183:
$8BEA	$C649	F000			MOVFF	Ethernet_doDNS_dl_L0, STACK_0
$8BEE	$C64A	F001			MOVFF	Ethernet_doDNS_dl_L0+1, STACK_0+1
$8BF2	$0E01	    			MOVLW	1
$8BF4	$0106	    			MOVLB	6
$8BF6	$5F49	    			SUBWF	Ethernet_doDNS_dl_L0, 1, 1
$8BF8	$0E00	    			MOVLW	0
$8BFA	$5B4A	    			SUBWFB	Ethernet_doDNS_dl_L0+1, 1, 1
$8BFC	$5000	    			MOVF	STACK_0, 0, 0
$8BFE	$1001	    			IORWF	STACK_0+1, 0, 0
$8C00	$E003	    			BZ	L_Ethernet_doDNS_184
$8C02	$ECD4	F020			CALL	_Ethernet_getByte
$8C06	$D7F1	    			BRA	L_Ethernet_doDNS_183
$8C08	$	L_Ethernet_doDNS_184:
$8C08	$	L_Ethernet_doDNS_182:
$8C08	$D7AC	    			BRA	L_Ethernet_doDNS_179
$8C0A	$	L_Ethernet_doDNS_180:
$8C0A	$0012	    			RETURN
$8C0C	$	_Ethernet_doDHCP:
$8C0C	$D0C7	    			BRA	L_Ethernet_doDHCP_91
$8C0E	$	L_Ethernet_doDHCP_93:
$8C0E	$0E76	    			MOVLW	_Ethernet_ipAddr
$8C10	$0106	    			MOVLB	6
$8C12	$6FCD	    			MOVWF	FARG_memset+0, 1
$8C14	$0E02	    			MOVLW	@_Ethernet_ipAddr
$8C16	$6FCE	    			MOVWF	FARG_memset+1, 1
$8C18	$6BCF	    			CLRF	FARG_memset+2, 1
$8C1A	$0E04	    			MOVLW	4
$8C1C	$6FD0	    			MOVWF	FARG_memset+3, 1
$8C1E	$0E00	    			MOVLW	0
$8C20	$6FD1	    			MOVWF	FARG_memset+4, 1
$8C22	$EC87	F039			CALL	_memset
$8C26	$0E01	    			MOVLW	1
$8C28	$0106	    			MOVLB	6
$8C2A	$6FCD	    			MOVWF	FARG_Ethernet_DHCPmsg+0, 1
$8C2C	$6BCE	    			CLRF	FARG_Ethernet_DHCPmsg+1, 1
$8C2E	$ECA5	F039			CALL	_Ethernet_DHCPmsg
$8C32	$C38C	F388			MOVFF	_Ethernet_userTimerSec, eth_j60_ts
$8C36	$C38D	F389			MOVFF	_Ethernet_userTimerSec+1, eth_j60_ts+1
$8C3A	$C38E	F38A			MOVFF	_Ethernet_userTimerSec+2, eth_j60_ts+2
$8C3E	$C38F	F38B			MOVFF	_Ethernet_userTimerSec+3, eth_j60_ts+3
$8C42	$0E03	    			MOVLW	3
$8C44	$0103	    			MOVLB	3
$8C46	$6F87	    			MOVWF	eth_j60_smDHCPState, 1
$8C48	$D0BD	    			BRA	L_Ethernet_doDHCP_92
$8C4A	$	L_Ethernet_doDHCP_94:
$8C4A	$0E05	    			MOVLW	5
$8C4C	$0103	    			MOVLB	3
$8C4E	$2588	    			ADDWF	eth_j60_ts, 0, 1
$8C50	$6E04	    			MOVWF	STACK_4, 0
$8C52	$0E00	    			MOVLW	0
$8C54	$2189	    			ADDWFC	eth_j60_ts+1, 0, 1
$8C56	$6E05	    			MOVWF	STACK_4+1, 0
$8C58	$0E00	    			MOVLW	0
$8C5A	$218A	    			ADDWFC	eth_j60_ts+2, 0, 1
$8C5C	$6E06	    			MOVWF	STACK_4+2, 0
$8C5E	$0E00	    			MOVLW	0
$8C60	$218B	    			ADDWFC	eth_j60_ts+3, 0, 1
$8C62	$6E07	    			MOVWF	STACK_4+3, 0
$8C64	$518F	    			MOVF	_Ethernet_userTimerSec+3, 0, 1
$8C66	$5C07	    			SUBWF	STACK_4+3, 0, 0
$8C68	$E108	    			BNZ	L_Ethernet_doDHCP_260
$8C6A	$518E	    			MOVF	_Ethernet_userTimerSec+2, 0, 1
$8C6C	$5C06	    			SUBWF	STACK_4+2, 0, 0
$8C6E	$E105	    			BNZ	L_Ethernet_doDHCP_260
$8C70	$518D	    			MOVF	_Ethernet_userTimerSec+1, 0, 1
$8C72	$5C05	    			SUBWF	STACK_4+1, 0, 0
$8C74	$E102	    			BNZ	L_Ethernet_doDHCP_260
$8C76	$518C	    			MOVF	_Ethernet_userTimerSec, 0, 1
$8C78	$5C04	    			SUBWF	STACK_4, 0, 0
$8C7A	$	L_Ethernet_doDHCP_260:
$8C7A	$E203	    			BC	L_Ethernet_doDHCP_95
$8C7C	$0E02	    			MOVLW	2
$8C7E	$0103	    			MOVLB	3
$8C80	$6F87	    			MOVWF	eth_j60_smDHCPState, 1
$8C82	$	L_Ethernet_doDHCP_95:
$8C82	$EC7F	F03A			CALL	_Ethernet_DHCPReceive
$8C86	$5000	    			MOVF	STACK_0, 0, 0
$8C88	$0A02	    			XORLW	2
$8C8A	$E104	    			BNZ	L_Ethernet_doDHCP_96
$8C8C	$0E04	    			MOVLW	4
$8C8E	$0103	    			MOVLB	3
$8C90	$6F87	    			MOVWF	eth_j60_smDHCPState, 1
$8C92	$D002	    			BRA	L_Ethernet_doDHCP_97
$8C94	$	L_Ethernet_doDHCP_96:
$8C94	$0103	    			MOVLB	3
$8C96	$D096	    			BRA	L_Ethernet_doDHCP_92
$8C98	$	L_Ethernet_doDHCP_97:
$8C98	$	L_Ethernet_doDHCP_98:
$8C98	$0E03	    			MOVLW	3
$8C9A	$0106	    			MOVLB	6
$8C9C	$6FCD	    			MOVWF	FARG_Ethernet_DHCPmsg+0, 1
$8C9E	$C390	F6CE			MOVFF	eth_j60_DHCPrenew, FARG_Ethernet_DHCPmsg+1
$8CA2	$ECA5	F039			CALL	_Ethernet_DHCPmsg
$8CA6	$C38C	F388			MOVFF	_Ethernet_userTimerSec, eth_j60_ts
$8CAA	$C38D	F389			MOVFF	_Ethernet_userTimerSec+1, eth_j60_ts+1
$8CAE	$C38E	F38A			MOVFF	_Ethernet_userTimerSec+2, eth_j60_ts+2
$8CB2	$C38F	F38B			MOVFF	_Ethernet_userTimerSec+3, eth_j60_ts+3
$8CB6	$0E05	    			MOVLW	5
$8CB8	$0103	    			MOVLB	3
$8CBA	$6F87	    			MOVWF	eth_j60_smDHCPState, 1
$8CBC	$D083	    			BRA	L_Ethernet_doDHCP_92
$8CBE	$	L_Ethernet_doDHCP_99:
$8CBE	$EC7F	F03A			CALL	_Ethernet_DHCPReceive
$8CC2	$C000	F643			MOVFF	STACK_0, Ethernet_doDHCP_DHCPRecvReturnValue_L0
$8CC6	$5000	    			MOVF	STACK_0, 0, 0
$8CC8	$0A06	    			XORLW	6
$8CCA	$E104	    			BNZ	L_Ethernet_doDHCP_100
$8CCC	$0E04	    			MOVLW	4
$8CCE	$0103	    			MOVLB	3
$8CD0	$6F87	    			MOVWF	eth_j60_smDHCPState, 1
$8CD2	$D030	    			BRA	L_Ethernet_doDHCP_101
$8CD4	$	L_Ethernet_doDHCP_100:
$8CD4	$0106	    			MOVLB	6
$8CD6	$5143	    			MOVF	Ethernet_doDHCP_DHCPRecvReturnValue_L0, 0, 1
$8CD8	$0A05	    			XORLW	5
$8CDA	$E12C	    			BNZ	L_Ethernet_doDHCP_102
$8CDC	$C38C	F388			MOVFF	_Ethernet_userTimerSec, eth_j60_ts
$8CE0	$C38D	F389			MOVFF	_Ethernet_userTimerSec+1, eth_j60_ts+1
$8CE4	$C38E	F38A			MOVFF	_Ethernet_userTimerSec+2, eth_j60_ts+2
$8CE8	$C38F	F38B			MOVFF	_Ethernet_userTimerSec+3, eth_j60_ts+3
$8CEC	$0E06	    			MOVLW	6
$8CEE	$0103	    			MOVLB	3
$8CF0	$6F87	    			MOVWF	eth_j60_smDHCPState, 1
$8CF2	$0E76	    			MOVLW	_Ethernet_ipAddr
$8CF4	$0108	    			MOVLB	8
$8CF6	$6FAC	    			MOVWF	FARG_memcpy+0, 1
$8CF8	$0E02	    			MOVLW	@_Ethernet_ipAddr
$8CFA	$6FAD	    			MOVWF	FARG_memcpy+1, 1
$8CFC	$0E49	    			MOVLW	eth_j60_tmpIpAddr
$8CFE	$6FAE	    			MOVWF	FARG_memcpy+2, 1
$8D00	$0E03	    			MOVLW	@eth_j60_tmpIpAddr
$8D02	$6FAF	    			MOVWF	FARG_memcpy+3, 1
$8D04	$0E04	    			MOVLW	4
$8D06	$6FB0	    			MOVWF	FARG_memcpy+4, 1
$8D08	$0E00	    			MOVLW	0
$8D0A	$6FB1	    			MOVWF	FARG_memcpy+5, 1
$8D0C	$ECF9	F020			CALL	_memcpy
$8D10	$0E5B	    			MOVLW	eth_j60_tmpNetMask
$8D12	$0106	    			MOVLB	6
$8D14	$6FCD	    			MOVWF	FARG_Ethernet_confNetwork+0, 1
$8D16	$0E03	    			MOVLW	@eth_j60_tmpNetMask
$8D18	$6FCE	    			MOVWF	FARG_Ethernet_confNetwork+1, 1
$8D1A	$0E5F	    			MOVLW	eth_j60_tmpGW
$8D1C	$6FCF	    			MOVWF	FARG_Ethernet_confNetwork+2, 1
$8D1E	$0E03	    			MOVLW	@eth_j60_tmpGW
$8D20	$6FD0	    			MOVWF	FARG_Ethernet_confNetwork+3, 1
$8D22	$0E63	    			MOVLW	eth_j60_tmpDNS
$8D24	$6FD1	    			MOVWF	FARG_Ethernet_confNetwork+4, 1
$8D26	$0E03	    			MOVLW	@eth_j60_tmpDNS
$8D28	$6FD2	    			MOVWF	FARG_Ethernet_confNetwork+5, 1
$8D2A	$ECFE	F03B			CALL	_Ethernet_confNetwork
$8D2E	$0103	    			MOVLB	3
$8D30	$6B90	    			CLRF	eth_j60_DHCPrenew, 1
$8D32	$0012	    			RETURN
$8D34	$	L_Ethernet_doDHCP_102:
$8D34	$	L_Ethernet_doDHCP_101:
$8D34	$0103	    			MOVLB	3
$8D36	$D046	    			BRA	L_Ethernet_doDHCP_92
$8D38	$	L_Ethernet_doDHCP_103:
$8D38	$0E01	    			MOVLW	1
$8D3A	$0103	    			MOVLB	3
$8D3C	$2588	    			ADDWF	eth_j60_ts, 0, 1
$8D3E	$6E04	    			MOVWF	STACK_4, 0
$8D40	$0E00	    			MOVLW	0
$8D42	$2189	    			ADDWFC	eth_j60_ts+1, 0, 1
$8D44	$6E05	    			MOVWF	STACK_4+1, 0
$8D46	$0E00	    			MOVLW	0
$8D48	$218A	    			ADDWFC	eth_j60_ts+2, 0, 1
$8D4A	$6E06	    			MOVWF	STACK_4+2, 0
$8D4C	$0E00	    			MOVLW	0
$8D4E	$218B	    			ADDWFC	eth_j60_ts+3, 0, 1
$8D50	$6E07	    			MOVWF	STACK_4+3, 0
$8D52	$5007	    			MOVF	STACK_4+3, 0, 0
$8D54	$5D8F	    			SUBWF	_Ethernet_userTimerSec+3, 0, 1
$8D56	$E108	    			BNZ	L_Ethernet_doDHCP_261
$8D58	$5006	    			MOVF	STACK_4+2, 0, 0
$8D5A	$5D8E	    			SUBWF	_Ethernet_userTimerSec+2, 0, 1
$8D5C	$E105	    			BNZ	L_Ethernet_doDHCP_261
$8D5E	$5005	    			MOVF	STACK_4+1, 0, 0
$8D60	$5D8D	    			SUBWF	_Ethernet_userTimerSec+1, 0, 1
$8D62	$E102	    			BNZ	L_Ethernet_doDHCP_261
$8D64	$5004	    			MOVF	STACK_4, 0, 0
$8D66	$5D8C	    			SUBWF	_Ethernet_userTimerSec, 0, 1
$8D68	$	L_Ethernet_doDHCP_261:
$8D68	$E317	    			BNC	L_Ethernet_doDHCP_104
$8D6A	$0E01	    			MOVLW	1
$8D6C	$6E00	    			MOVWF	STACK_0, 0
$8D6E	$0E00	    			MOVLW	0
$8D70	$6E01	    			MOVWF	STACK_0+1, 0
$8D72	$6E02	    			MOVWF	STACK_0+2, 0
$8D74	$6E03	    			MOVWF	STACK_0+3, 0
$8D76	$5000	    			MOVF	STACK_0, 0, 0
$8D78	$0103	    			MOVLB	3
$8D7A	$5F57	    			SUBWF	eth_j60_DHCPLeaseTime, 1, 1
$8D7C	$5001	    			MOVF	STACK_0+1, 0, 0
$8D7E	$5B58	    			SUBWFB	eth_j60_DHCPLeaseTime+1, 1, 1
$8D80	$5002	    			MOVF	STACK_0+2, 0, 0
$8D82	$5B59	    			SUBWFB	eth_j60_DHCPLeaseTime+2, 1, 1
$8D84	$5003	    			MOVF	STACK_0+3, 0, 0
$8D86	$5B5A	    			SUBWFB	eth_j60_DHCPLeaseTime+3, 1, 1
$8D88	$C38C	F388			MOVFF	_Ethernet_userTimerSec, eth_j60_ts
$8D8C	$C38D	F389			MOVFF	_Ethernet_userTimerSec+1, eth_j60_ts+1
$8D90	$C38E	F38A			MOVFF	_Ethernet_userTimerSec+2, eth_j60_ts+2
$8D94	$C38F	F38B			MOVFF	_Ethernet_userTimerSec+3, eth_j60_ts+3
$8D98	$	L_Ethernet_doDHCP_104:
$8D98	$0103	    			MOVLB	3
$8D9A	$D014	    			BRA	L_Ethernet_doDHCP_92
$8D9C	$	L_Ethernet_doDHCP_91:
$8D9C	$0103	    			MOVLB	3
$8D9E	$5187	    			MOVF	eth_j60_smDHCPState, 0, 1
$8DA0	$0A02	    			XORLW	2
$8DA2	$B4D8	    			BTFSC	STATUS, Z, 0
$8DA4	$D734	    			BRA	L_Ethernet_doDHCP_93
$8DA6	$5187	    			MOVF	eth_j60_smDHCPState, 0, 1
$8DA8	$0A03	    			XORLW	3
$8DAA	$B4D8	    			BTFSC	STATUS, Z, 0
$8DAC	$D74E	    			BRA	L_Ethernet_doDHCP_94
$8DAE	$5187	    			MOVF	eth_j60_smDHCPState, 0, 1
$8DB0	$0A04	    			XORLW	4
$8DB2	$B4D8	    			BTFSC	STATUS, Z, 0
$8DB4	$D771	    			BRA	L_Ethernet_doDHCP_98
$8DB6	$5187	    			MOVF	eth_j60_smDHCPState, 0, 1
$8DB8	$0A05	    			XORLW	5
$8DBA	$B4D8	    			BTFSC	STATUS, Z, 0
$8DBC	$D780	    			BRA	L_Ethernet_doDHCP_99
$8DBE	$5187	    			MOVF	eth_j60_smDHCPState, 0, 1
$8DC0	$0A06	    			XORLW	6
$8DC2	$E0BA	    			BZ	L_Ethernet_doDHCP_103
$8DC4	$	L_Ethernet_doDHCP_92:
$8DC4	$0012	    			RETURN
$8DC6	$	_Ethernet_UserUDP:
;ethernet.c,446 :: 			unsigned int    Ethernet_UserUDP(unsigned char *remoteHost, unsigned int remotePort, unsigned int destPort, unsigned int reqLength)
;ethernet.c,450 :: 			return(len) ;           // back to the library with the length of the UDP reply
$8DC6	$6A00	    			CLRF	STACK_0, 0
$8DC8	$6A01	    			CLRF	STACK_0+1, 0
;ethernet.c,451 :: 			}
$8DCA	$0012	    			RETURN
$8DCC	$	_Ethernet_IPswap:
$8DCC	$0EC9	    			MOVLW	201
$8DCE	$0108	    			MOVLB	8
$8DD0	$6FD5	    			MOVWF	FARG_Ethernet_RAMcopy+0, 1
$8DD2	$0E19	    			MOVLW	25
$8DD4	$6FD6	    			MOVWF	FARG_Ethernet_RAMcopy+1, 1
$8DD6	$0ECD	    			MOVLW	205
$8DD8	$6FD7	    			MOVWF	FARG_Ethernet_RAMcopy+2, 1
$8DDA	$0E19	    			MOVLW	25
$8DDC	$6FD8	    			MOVWF	FARG_Ethernet_RAMcopy+3, 1
$8DDE	$0ECD	    			MOVLW	205
$8DE0	$6FD9	    			MOVWF	FARG_Ethernet_RAMcopy+4, 1
$8DE2	$0E19	    			MOVLW	25
$8DE4	$6FDA	    			MOVWF	FARG_Ethernet_RAMcopy+5, 1
$8DE6	$6BDB	    			CLRF	FARG_Ethernet_RAMcopy+6, 1
$8DE8	$EC5A	F010			CALL	_Ethernet_RAMcopy
$8DEC	$0EC9	    			MOVLW	201
$8DEE	$0108	    			MOVLB	8
$8DF0	$6FD5	    			MOVWF	FARG_Ethernet_memcpy+0, 1
$8DF2	$0E19	    			MOVLW	25
$8DF4	$6FD6	    			MOVWF	FARG_Ethernet_memcpy+1, 1
$8DF6	$0E76	    			MOVLW	_Ethernet_ipAddr
$8DF8	$6FD7	    			MOVWF	FARG_Ethernet_memcpy+2, 1
$8DFA	$0E02	    			MOVLW	@_Ethernet_ipAddr
$8DFC	$6FD8	    			MOVWF	FARG_Ethernet_memcpy+3, 1
$8DFE	$0E04	    			MOVLW	4
$8E00	$6FD9	    			MOVWF	FARG_Ethernet_memcpy+4, 1
$8E02	$ECF1	F00F			CALL	_Ethernet_memcpy
$8E06	$0012	    			RETURN
$8E08	$	_Ethernet_UserTCP:
$8E08	$0E20	    			MOVLW	32
$8E0A	$0106	    			MOVLB	6
$8E0C	$6F4B	    			MOVWF	lstr5_ethernet+0, 1
$8E0E	$0E3A	    			MOVLW	58
$8E10	$6F4C	    			MOVWF	lstr5_ethernet+1, 1
$8E12	$0E6E	    			MOVLW	110
$8E14	$6F4D	    			MOVWF	lstr5_ethernet+2, 1
$8E16	$0E65	    			MOVLW	101
$8E18	$6F4E	    			MOVWF	lstr5_ethernet+3, 1
$8E1A	$0E77	    			MOVLW	119
$8E1C	$6F4F	    			MOVWF	lstr5_ethernet+4, 1
$8E1E	$0E5F	    			MOVLW	95
$8E20	$6F50	    			MOVWF	lstr5_ethernet+5, 1
$8E22	$0E69	    			MOVLW	105
$8E24	$6F51	    			MOVWF	lstr5_ethernet+6, 1
$8E26	$0E70	    			MOVLW	112
$8E28	$6F52	    			MOVWF	lstr5_ethernet+7, 1
$8E2A	$0E20	    			MOVLW	32
$8E2C	$6F53	    			MOVWF	lstr5_ethernet+8, 1
$8E2E	$0E20	    			MOVLW	32
$8E30	$6F54	    			MOVWF	lstr5_ethernet+9, 1
$8E32	$0E20	    			MOVLW	32
$8E34	$6F55	    			MOVWF	lstr5_ethernet+10, 1
$8E36	$0E20	    			MOVLW	32
$8E38	$6F56	    			MOVWF	lstr5_ethernet+11, 1
$8E3A	$0E20	    			MOVLW	32
$8E3C	$6F57	    			MOVWF	lstr5_ethernet+12, 1
$8E3E	$0E20	    			MOVLW	32
$8E40	$6F58	    			MOVWF	lstr5_ethernet+13, 1
$8E42	$0E20	    			MOVLW	32
$8E44	$6F59	    			MOVWF	lstr5_ethernet+14, 1
$8E46	$0E20	    			MOVLW	32
$8E48	$6F5A	    			MOVWF	lstr5_ethernet+15, 1
$8E4A	$0E20	    			MOVLW	32
$8E4C	$6F5B	    			MOVWF	lstr5_ethernet+16, 1
$8E4E	$0E20	    			MOVLW	32
$8E50	$6F5C	    			MOVWF	lstr5_ethernet+17, 1
$8E52	$0E20	    			MOVLW	32
$8E54	$6F5D	    			MOVWF	lstr5_ethernet+18, 1
$8E56	$0E20	    			MOVLW	32
$8E58	$6F5E	    			MOVWF	lstr5_ethernet+19, 1
$8E5A	$0E20	    			MOVLW	32
$8E5C	$6F5F	    			MOVWF	lstr5_ethernet+20, 1
$8E5E	$0E20	    			MOVLW	32
$8E60	$6F60	    			MOVWF	lstr5_ethernet+21, 1
$8E62	$0E20	    			MOVLW	32
$8E64	$6F61	    			MOVWF	lstr5_ethernet+22, 1
$8E66	$0E20	    			MOVLW	32
$8E68	$6F62	    			MOVWF	lstr5_ethernet+23, 1
$8E6A	$0E20	    			MOVLW	32
$8E6C	$6F63	    			MOVWF	lstr5_ethernet+24, 1
$8E6E	$0E20	    			MOVLW	32
$8E70	$6F64	    			MOVWF	lstr5_ethernet+25, 1
$8E72	$0E20	    			MOVLW	32
$8E74	$6F65	    			MOVWF	lstr5_ethernet+26, 1
$8E76	$0E20	    			MOVLW	32
$8E78	$6F66	    			MOVWF	lstr5_ethernet+27, 1
$8E7A	$6B67	    			CLRF	lstr5_ethernet+28, 1
$8E7C	$0E20	    			MOVLW	32
$8E7E	$6F68	    			MOVWF	lstr8_ethernet+0, 1
$8E80	$0E65	    			MOVLW	101
$8E82	$6F69	    			MOVWF	lstr8_ethernet+1, 1
$8E84	$0E72	    			MOVLW	114
$8E86	$6F6A	    			MOVWF	lstr8_ethernet+2, 1
$8E88	$0E72	    			MOVLW	114
$8E8A	$6F6B	    			MOVWF	lstr8_ethernet+3, 1
$8E8C	$0E6F	    			MOVLW	111
$8E8E	$6F6C	    			MOVWF	lstr8_ethernet+4, 1
$8E90	$0E72	    			MOVLW	114
$8E92	$6F6D	    			MOVWF	lstr8_ethernet+5, 1
$8E94	$0E5F	    			MOVLW	95
$8E96	$6F6E	    			MOVWF	lstr8_ethernet+6, 1
$8E98	$0E69	    			MOVLW	105
$8E9A	$6F6F	    			MOVWF	lstr8_ethernet+7, 1
$8E9C	$0E70	    			MOVLW	112
$8E9E	$6F70	    			MOVWF	lstr8_ethernet+8, 1
$8EA0	$0E5F	    			MOVLW	95
$8EA2	$6F71	    			MOVWF	lstr8_ethernet+9, 1
$8EA4	$0E63	    			MOVLW	99
$8EA6	$6F72	    			MOVWF	lstr8_ethernet+10, 1
$8EA8	$0E6F	    			MOVLW	111
$8EAA	$6F73	    			MOVWF	lstr8_ethernet+11, 1
$8EAC	$0E6D	    			MOVLW	109
$8EAE	$6F74	    			MOVWF	lstr8_ethernet+12, 1
$8EB0	$0E6D	    			MOVLW	109
$8EB2	$6F75	    			MOVWF	lstr8_ethernet+13, 1
$8EB4	$0E61	    			MOVLW	97
$8EB6	$6F76	    			MOVWF	lstr8_ethernet+14, 1
$8EB8	$0E6E	    			MOVLW	110
$8EBA	$6F77	    			MOVWF	lstr8_ethernet+15, 1
$8EBC	$0E64	    			MOVLW	100
$8EBE	$6F78	    			MOVWF	lstr8_ethernet+16, 1
$8EC0	$0E20	    			MOVLW	32
$8EC2	$6F79	    			MOVWF	lstr8_ethernet+17, 1
$8EC4	$0E20	    			MOVLW	32
$8EC6	$6F7A	    			MOVWF	lstr8_ethernet+18, 1
$8EC8	$0E20	    			MOVLW	32
$8ECA	$6F7B	    			MOVWF	lstr8_ethernet+19, 1
$8ECC	$0E20	    			MOVLW	32
$8ECE	$6F7C	    			MOVWF	lstr8_ethernet+20, 1
$8ED0	$0E20	    			MOVLW	32
$8ED2	$6F7D	    			MOVWF	lstr8_ethernet+21, 1
$8ED4	$0E20	    			MOVLW	32
$8ED6	$6F7E	    			MOVWF	lstr8_ethernet+22, 1
$8ED8	$0E20	    			MOVLW	32
$8EDA	$6F7F	    			MOVWF	lstr8_ethernet+23, 1
$8EDC	$0E20	    			MOVLW	32
$8EDE	$6F80	    			MOVWF	lstr8_ethernet+24, 1
$8EE0	$0E20	    			MOVLW	32
$8EE2	$6F81	    			MOVWF	lstr8_ethernet+25, 1
$8EE4	$0E20	    			MOVLW	32
$8EE6	$6F82	    			MOVWF	lstr8_ethernet+26, 1
$8EE8	$0E20	    			MOVLW	32
$8EEA	$6F83	    			MOVWF	lstr8_ethernet+27, 1
$8EEC	$6B84	    			CLRF	lstr8_ethernet+28, 1
$8EEE	$0E20	    			MOVLW	32
$8EF0	$6F85	    			MOVWF	lstr68_ethernet+0, 1
$8EF2	$0E69	    			MOVLW	105
$8EF4	$6F86	    			MOVWF	lstr68_ethernet+1, 1
$8EF6	$0E6C	    			MOVLW	108
$8EF8	$6F87	    			MOVWF	lstr68_ethernet+2, 1
$8EFA	$0E6C	    			MOVLW	108
$8EFC	$6F88	    			MOVWF	lstr68_ethernet+3, 1
$8EFE	$0E65	    			MOVLW	101
$8F00	$6F89	    			MOVWF	lstr68_ethernet+4, 1
$8F02	$0E67	    			MOVLW	103
$8F04	$6F8A	    			MOVWF	lstr68_ethernet+5, 1
$8F06	$0E61	    			MOVLW	97
$8F08	$6F8B	    			MOVWF	lstr68_ethernet+6, 1
$8F0A	$0E6C	    			MOVLW	108
$8F0C	$6F8C	    			MOVWF	lstr68_ethernet+7, 1
$8F0E	$0E5F	    			MOVLW	95
$8F10	$6F8D	    			MOVWF	lstr68_ethernet+8, 1
$8F12	$0E63	    			MOVLW	99
$8F14	$6F8E	    			MOVWF	lstr68_ethernet+9, 1
$8F16	$0E6F	    			MOVLW	111
$8F18	$6F8F	    			MOVWF	lstr68_ethernet+10, 1
$8F1A	$0E6D	    			MOVLW	109
$8F1C	$6F90	    			MOVWF	lstr68_ethernet+11, 1
$8F1E	$0E6D	    			MOVLW	109
$8F20	$6F91	    			MOVWF	lstr68_ethernet+12, 1
$8F22	$0E61	    			MOVLW	97
$8F24	$6F92	    			MOVWF	lstr68_ethernet+13, 1
$8F26	$0E6E	    			MOVLW	110
$8F28	$6F93	    			MOVWF	lstr68_ethernet+14, 1
$8F2A	$0E64	    			MOVLW	100
$8F2C	$6F94	    			MOVWF	lstr68_ethernet+15, 1
$8F2E	$0E20	    			MOVLW	32
$8F30	$6F95	    			MOVWF	lstr68_ethernet+16, 1
$8F32	$0E20	    			MOVLW	32
$8F34	$6F96	    			MOVWF	lstr68_ethernet+17, 1
$8F36	$0E20	    			MOVLW	32
$8F38	$6F97	    			MOVWF	lstr68_ethernet+18, 1
$8F3A	$0E20	    			MOVLW	32
$8F3C	$6F98	    			MOVWF	lstr68_ethernet+19, 1
$8F3E	$0E20	    			MOVLW	32
$8F40	$6F99	    			MOVWF	lstr68_ethernet+20, 1
$8F42	$0E20	    			MOVLW	32
$8F44	$6F9A	    			MOVWF	lstr68_ethernet+21, 1
$8F46	$0E20	    			MOVLW	32
$8F48	$6F9B	    			MOVWF	lstr68_ethernet+22, 1
$8F4A	$0E20	    			MOVLW	32
$8F4C	$6F9C	    			MOVWF	lstr68_ethernet+23, 1
$8F4E	$0E20	    			MOVLW	32
$8F50	$6F9D	    			MOVWF	lstr68_ethernet+24, 1
$8F52	$0E20	    			MOVLW	32
$8F54	$6F9E	    			MOVWF	lstr68_ethernet+25, 1
$8F56	$0E20	    			MOVLW	32
$8F58	$6F9F	    			MOVWF	lstr68_ethernet+26, 1
$8F5A	$0E20	    			MOVLW	32
$8F5C	$6FA0	    			MOVWF	lstr68_ethernet+27, 1
$8F5E	$0E20	    			MOVLW	32
$8F60	$6FA1	    			MOVWF	lstr68_ethernet+28, 1
$8F62	$6BA2	    			CLRF	lstr68_ethernet+29, 1
$8F64	$0E30	    			MOVLW	48
$8F66	$6FB1	    			MOVWF	Ethernet_UserTCP_caracter_L0+0, 1
$8F68	$6BB2	    			CLRF	Ethernet_UserTCP_caracter_L0+1, 1
$8F6A	$0E30	    			MOVLW	48
$8F6C	$6FB3	    			MOVWF	Ethernet_UserTCP_fread_num_L0+0, 1
$8F6E	$0E30	    			MOVLW	48
$8F70	$6FB4	    			MOVWF	Ethernet_UserTCP_fread_num_L0+1, 1
$8F72	$0E30	    			MOVLW	48
$8F74	$6FB5	    			MOVWF	Ethernet_UserTCP_fread_num_L0+2, 1
$8F76	$6BB6	    			CLRF	Ethernet_UserTCP_fread_num_L0+3, 1
;ethernet.c,11 :: 			unsigned int    Ethernet_UserTCP(unsigned char *remoteHost, unsigned int remotePort, unsigned int localPort, unsigned int reqLength)
;ethernet.c,13 :: 			unsigned int    len = 0 ;                   // my reply length
$8F78	$6BA3	    			CLRF	Ethernet_UserTCP_len_L0, 1
$8F7A	$6BA4	    			CLRF	Ethernet_UserTCP_len_L0+1, 1
;ethernet.c,27 :: 			if(localPort != 25006)  {                      // I listen only to web request on port 80
$8F7C	$5148	    			MOVF	FARG_Ethernet_UserTCP+5, 0, 1
$8F7E	$0A61	    			XORLW	97
$8F80	$E102	    			BNZ	L_Ethernet_UserTCP_127
$8F82	$0EAE	    			MOVLW	174
$8F84	$1947	    			XORWF	FARG_Ethernet_UserTCP+4, 0, 1
$8F86	$	L_Ethernet_UserTCP_127:
$8F86	$E003	    			BZ	L_Ethernet_UserTCP_0
;ethernet.c,28 :: 			return(0) ;
$8F88	$6A00	    			CLRF	STACK_0, 0
$8F8A	$6A01	    			CLRF	STACK_0+1, 0
$8F8C	$0012	    			RETURN
;ethernet.c,29 :: 			}
$8F8E	$	L_Ethernet_UserTCP_0:
;ethernet.c,31 :: 			Led_Y  = 0;  // включить желтый сд
$8F8E	$9282	    			BCF	PORTC, 1, 0
;ethernet.c,65 :: 			for(i = 0 ; i < 127 ; i++)
$8F90	$0106	    			MOVLB	6
$8F92	$6BA5	    			CLRF	Ethernet_UserTCP_i_L0, 1
$8F94	$6BA6	    			CLRF	Ethernet_UserTCP_i_L0+1, 1
$8F96	$6BA7	    			CLRF	Ethernet_UserTCP_i_L0+2, 1
$8F98	$6BA8	    			CLRF	Ethernet_UserTCP_i_L0+3, 1
$8F9A	$	L_Ethernet_UserTCP_1:
$8F9A	$0E00	    			MOVLW	0
$8F9C	$0106	    			MOVLB	6
$8F9E	$5DA8	    			SUBWF	Ethernet_UserTCP_i_L0+3, 0, 1
$8FA0	$E108	    			BNZ	L_Ethernet_UserTCP_128
$8FA2	$0E00	    			MOVLW	0
$8FA4	$5DA7	    			SUBWF	Ethernet_UserTCP_i_L0+2, 0, 1
$8FA6	$E105	    			BNZ	L_Ethernet_UserTCP_128
$8FA8	$0E00	    			MOVLW	0
$8FAA	$5DA6	    			SUBWF	Ethernet_UserTCP_i_L0+1, 0, 1
$8FAC	$E102	    			BNZ	L_Ethernet_UserTCP_128
$8FAE	$0E7F	    			MOVLW	127
$8FB0	$5DA5	    			SUBWF	Ethernet_UserTCP_i_L0, 0, 1
$8FB2	$	L_Ethernet_UserTCP_128:
$8FB2	$E217	    			BC	L_Ethernet_UserTCP_2
;ethernet.c,67 :: 			getRequest[i] = Ethernet_getByte() ;  // 0..4 GET, 5 - ? /
$8FB4	$0E91	    			MOVLW	_getRequest
$8FB6	$0106	    			MOVLB	6
$8FB8	$25A5	    			ADDWF	Ethernet_UserTCP_i_L0, 0, 1
$8FBA	$6FCB	    			MOVWF	FLOC_Ethernet_UserTCP+128, 1
$8FBC	$0E03	    			MOVLW	@_getRequest
$8FBE	$21A6	    			ADDWFC	Ethernet_UserTCP_i_L0+1, 0, 1
$8FC0	$6FCC	    			MOVWF	FLOC_Ethernet_UserTCP+129, 1
$8FC2	$ECD4	F020			CALL	_Ethernet_getByte
$8FC6	$C6CB	FFE1			MOVFF	FLOC_Ethernet_UserTCP+128, FSR1L
$8FCA	$C6CC	FFE2			MOVFF	FLOC_Ethernet_UserTCP+129, FSR1H
$8FCE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;ethernet.c,68 :: 			}
$8FD2	$	L_Ethernet_UserTCP_3:
;ethernet.c,65 :: 			for(i = 0 ; i < 127 ; i++)
$8FD2	$0E01	    			MOVLW	1
$8FD4	$0106	    			MOVLB	6
$8FD6	$27A5	    			ADDWF	Ethernet_UserTCP_i_L0, 1, 1
$8FD8	$0E00	    			MOVLW	0
$8FDA	$23A6	    			ADDWFC	Ethernet_UserTCP_i_L0+1, 1, 1
$8FDC	$23A7	    			ADDWFC	Ethernet_UserTCP_i_L0+2, 1, 1
$8FDE	$23A8	    			ADDWFC	Ethernet_UserTCP_i_L0+3, 1, 1
;ethernet.c,68 :: 			}
$8FE0	$D7DC	    			BRA	L_Ethernet_UserTCP_1
$8FE2	$	L_Ethernet_UserTCP_2:
;ethernet.c,69 :: 			getRequest[127] = 0 ;   // '\0' = 0 -конец строки
$8FE2	$0104	    			MOVLB	4
$8FE4	$6B10	    			CLRF	_getRequest+127, 1
;ethernet.c,74 :: 			if(memcmp(getRequest, httpMethod, 5)) {      // only GET method is supported here
$8FE6	$0E91	    			MOVLW	_getRequest
$8FE8	$0108	    			MOVLB	8
$8FEA	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$8FEC	$0E03	    			MOVLW	@_getRequest
$8FEE	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$8FF0	$0E11	    			MOVLW	_httpMethod
$8FF2	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$8FF4	$0E04	    			MOVLW	@_httpMethod
$8FF6	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$8FF8	$0E05	    			MOVLW	5
$8FFA	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$8FFC	$0E00	    			MOVLW	0
$8FFE	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9000	$EC23	F021			CALL	_memcmp
$9004	$5000	    			MOVF	STACK_0, 0, 0
$9006	$1001	    			IORWF	STACK_0+1, 0, 0
$9008	$E004	    			BZ	L_Ethernet_UserTCP_4
;ethernet.c,75 :: 			Led_Y  = 1; return(0) ;
$900A	$8282	    			BSF	PORTC, 1, 0
$900C	$6A00	    			CLRF	STACK_0, 0
$900E	$6A01	    			CLRF	STACK_0+1, 0
$9010	$0012	    			RETURN
;ethernet.c,76 :: 			}
$9012	$	L_Ethernet_UserTCP_4:
;ethernet.c,78 :: 			len =  putConstString(httpHeader) ;             // HTTP header
$9012	$0EC2	    			MOVLW	#_httpHeader
$9014	$0106	    			MOVLB	6
$9016	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9018	$0ED1	    			MOVLW	@#_httpHeader
$901A	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$901C	$0E00	    			MOVLW	@@#_httpHeader
$901E	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$9020	$EC2C	F03C			CALL	_Ethernet_putConstString
$9024	$C000	F6A3			MOVFF	STACK_0, Ethernet_UserTCP_len_L0
$9028	$C001	F6A4			MOVFF	STACK_0+1, Ethernet_UserTCP_len_L0+1
;ethernet.c,79 :: 			len += putConstString(httpMimeTypeScript) ;       // with HTML MIME type
$902C	$0EE2	    			MOVLW	#_httpMimeTypeScript
$902E	$0106	    			MOVLB	6
$9030	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9032	$0ED1	    			MOVLW	@#_httpMimeTypeScript
$9034	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$9036	$0E00	    			MOVLW	@@#_httpMimeTypeScript
$9038	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$903A	$EC2C	F03C			CALL	_Ethernet_putConstString
$903E	$5000	    			MOVF	STACK_0, 0, 0
$9040	$0106	    			MOVLB	6
$9042	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9044	$5001	    			MOVF	STACK_0+1, 0, 0
$9046	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,81 :: 			if ( (memcmp(getRequest+21, txt_0read, 4 )) && (memcmp(getRequest+21, txt_read, 4)) && (memcmp(getRequest+21, txt_status, 4 )) )  {
$9048	$0EA6	    			MOVLW	_getRequest+21
$904A	$0108	    			MOVLB	8
$904C	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$904E	$0E03	    			MOVLW	@_getRequest+21
$9050	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9052	$0E17	    			MOVLW	_txt_0read
$9054	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$9056	$0E04	    			MOVLW	@_txt_0read
$9058	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$905A	$0E04	    			MOVLW	4
$905C	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$905E	$0E00	    			MOVLW	0
$9060	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9062	$EC23	F021			CALL	_memcmp
$9066	$5000	    			MOVF	STACK_0, 0, 0
$9068	$1001	    			IORWF	STACK_0+1, 0, 0
$906A	$E03C	    			BZ	L_Ethernet_UserTCP_7
$906C	$0EA6	    			MOVLW	_getRequest+21
$906E	$0108	    			MOVLB	8
$9070	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$9072	$0E03	    			MOVLW	@_getRequest+21
$9074	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9076	$0E1D	    			MOVLW	_txt_read
$9078	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$907A	$0E04	    			MOVLW	@_txt_read
$907C	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$907E	$0E04	    			MOVLW	4
$9080	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$9082	$0E00	    			MOVLW	0
$9084	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9086	$EC23	F021			CALL	_memcmp
$908A	$5000	    			MOVF	STACK_0, 0, 0
$908C	$1001	    			IORWF	STACK_0+1, 0, 0
$908E	$E02A	    			BZ	L_Ethernet_UserTCP_7
$9090	$0EA6	    			MOVLW	_getRequest+21
$9092	$0108	    			MOVLB	8
$9094	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$9096	$0E03	    			MOVLW	@_getRequest+21
$9098	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$909A	$0E22	    			MOVLW	_txt_status
$909C	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$909E	$0E04	    			MOVLW	@_txt_status
$90A0	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$90A2	$0E04	    			MOVLW	4
$90A4	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$90A6	$0E00	    			MOVLW	0
$90A8	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$90AA	$EC23	F021			CALL	_memcmp
$90AE	$5000	    			MOVF	STACK_0, 0, 0
$90B0	$1001	    			IORWF	STACK_0+1, 0, 0
$90B2	$E018	    			BZ	L_Ethernet_UserTCP_7
$90B4	$	L57_ex_L_Ethernet_UserTCP_7:
;ethernet.c,83 :: 			My_str_n(dyna, getRequest, 84);  // копирует /добавляет 84 символа
$90B4	$0ECF	    			MOVLW	_dyna
$90B6	$0106	    			MOVLB	6
$90B8	$6FCD	    			MOVWF	FARG_My_str_n+0, 1
$90BA	$0E02	    			MOVLW	@_dyna
$90BC	$6FCE	    			MOVWF	FARG_My_str_n+1, 1
$90BE	$0E91	    			MOVLW	_getRequest
$90C0	$6FCF	    			MOVWF	FARG_My_str_n+2, 1
$90C2	$0E03	    			MOVLW	@_getRequest
$90C4	$6FD0	    			MOVWF	FARG_My_str_n+3, 1
$90C6	$0E54	    			MOVLW	84
$90C8	$6FD1	    			MOVWF	FARG_My_str_n+4, 1
$90CA	$EC52	F03C			CALL	_My_str_n
;ethernet.c,84 :: 			log_write ( COMMAND, dyna, tmp );   // записать в журнал - команда  84 символа
$90CE	$0E02	    			MOVLW	2
$90D0	$0106	    			MOVLB	6
$90D2	$6FCD	    			MOVWF	FARG_log_write+0, 1
$90D4	$0ECF	    			MOVLW	_dyna
$90D6	$6FCE	    			MOVWF	FARG_log_write+1, 1
$90D8	$0E02	    			MOVLW	@_dyna
$90DA	$6FCF	    			MOVWF	FARG_log_write+2, 1
$90DC	$C6AD	F6D0			MOVFF	Ethernet_UserTCP_tmp_L0, FARG_log_write+3
$90E0	$ECC2	F03C			CALL	_log_write
;ethernet.c,85 :: 			}
$90E4	$	L_Ethernet_UserTCP_7:
;ethernet.c,87 :: 			len += putShConstString("stoika=") ;
$90E4	$0EF0	    			MOVLW	#lstr_1_ethernet
$90E6	$0106	    			MOVLB	6
$90E8	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$90EA	$0ED1	    			MOVLW	@#lstr_1_ethernet
$90EC	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$90EE	$0E00	    			MOVLW	@@#lstr_1_ethernet
$90F0	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$90F2	$EC68	F042			CALL	_putShConstString
$90F6	$5000	    			MOVF	STACK_0, 0, 0
$90F8	$0106	    			MOVLB	6
$90FA	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$90FC	$5001	    			MOVF	STACK_0+1, 0, 0
$90FE	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,89 :: 			Num_to_0str(myIpAddr[0], dyna);  // преобразует число (0..255) в строку из трех символов  лидирующие - нули
$9100	$C28F	F8D5			MOVFF	_myIpAddr, FARG_Num_to_0str+0
$9104	$0ECF	    			MOVLW	_dyna
$9106	$0108	    			MOVLB	8
$9108	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$910A	$0E02	    			MOVLW	@_dyna
$910C	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$910E	$EC4D	F017			CALL	_Num_to_0str
;ethernet.c,90 :: 			len += putShString(dyna) ;
$9112	$0ECF	    			MOVLW	_dyna
$9114	$0106	    			MOVLB	6
$9116	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9118	$0E02	    			MOVLW	@_dyna
$911A	$6FCE	    			MOVWF	FARG_putShString+1, 1
$911C	$EC99	F042			CALL	_putShString
$9120	$5000	    			MOVF	STACK_0, 0, 0
$9122	$0106	    			MOVLB	6
$9124	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9126	$5001	    			MOVF	STACK_0+1, 0, 0
$9128	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,91 :: 			len += putShConstString(".") ;
$912A	$0EF8	    			MOVLW	#lstr_2_ethernet
$912C	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$912E	$0ED1	    			MOVLW	@#lstr_2_ethernet
$9130	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$9132	$0E00	    			MOVLW	@@#lstr_2_ethernet
$9134	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$9136	$EC68	F042			CALL	_putShConstString
$913A	$5000	    			MOVF	STACK_0, 0, 0
$913C	$0106	    			MOVLB	6
$913E	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9140	$5001	    			MOVF	STACK_0+1, 0, 0
$9142	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,93 :: 			Num_to_0str(myIpAddr[1], dyna);  // преобразует число (0..255) в строку из трех символов  лидирующие - нули
$9144	$C290	F8D5			MOVFF	_myIpAddr+1, FARG_Num_to_0str+0
$9148	$0ECF	    			MOVLW	_dyna
$914A	$0108	    			MOVLB	8
$914C	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$914E	$0E02	    			MOVLW	@_dyna
$9150	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$9152	$EC4D	F017			CALL	_Num_to_0str
;ethernet.c,94 :: 			len += putShString(dyna) ;
$9156	$0ECF	    			MOVLW	_dyna
$9158	$0106	    			MOVLB	6
$915A	$6FCD	    			MOVWF	FARG_putShString+0, 1
$915C	$0E02	    			MOVLW	@_dyna
$915E	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9160	$EC99	F042			CALL	_putShString
$9164	$5000	    			MOVF	STACK_0, 0, 0
$9166	$0106	    			MOVLB	6
$9168	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$916A	$5001	    			MOVF	STACK_0+1, 0, 0
$916C	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,95 :: 			len += putShConstString(".") ;
$916E	$0EFA	    			MOVLW	#lstr_3_ethernet
$9170	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$9172	$0ED1	    			MOVLW	@#lstr_3_ethernet
$9174	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$9176	$0E00	    			MOVLW	@@#lstr_3_ethernet
$9178	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$917A	$EC68	F042			CALL	_putShConstString
$917E	$5000	    			MOVF	STACK_0, 0, 0
$9180	$0106	    			MOVLB	6
$9182	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9184	$5001	    			MOVF	STACK_0+1, 0, 0
$9186	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,97 :: 			Num_to_0str(myIpAddr[2], dyna);  // преобразует число (0..255) в строку из трех символов  лидирующие - нули
$9188	$C291	F8D5			MOVFF	_myIpAddr+2, FARG_Num_to_0str+0
$918C	$0ECF	    			MOVLW	_dyna
$918E	$0108	    			MOVLB	8
$9190	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$9192	$0E02	    			MOVLW	@_dyna
$9194	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$9196	$EC4D	F017			CALL	_Num_to_0str
;ethernet.c,98 :: 			len += putShString(dyna) ;
$919A	$0ECF	    			MOVLW	_dyna
$919C	$0106	    			MOVLB	6
$919E	$6FCD	    			MOVWF	FARG_putShString+0, 1
$91A0	$0E02	    			MOVLW	@_dyna
$91A2	$6FCE	    			MOVWF	FARG_putShString+1, 1
$91A4	$EC99	F042			CALL	_putShString
$91A8	$5000	    			MOVF	STACK_0, 0, 0
$91AA	$0106	    			MOVLB	6
$91AC	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$91AE	$5001	    			MOVF	STACK_0+1, 0, 0
$91B0	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,99 :: 			len += putShConstString(".") ;
$91B2	$0EFC	    			MOVLW	#lstr_4_ethernet
$91B4	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$91B6	$0ED1	    			MOVLW	@#lstr_4_ethernet
$91B8	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$91BA	$0E00	    			MOVLW	@@#lstr_4_ethernet
$91BC	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$91BE	$EC68	F042			CALL	_putShConstString
$91C2	$5000	    			MOVF	STACK_0, 0, 0
$91C4	$0106	    			MOVLB	6
$91C6	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$91C8	$5001	    			MOVF	STACK_0+1, 0, 0
$91CA	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,101 :: 			Num_to_0str(myIpAddr[3], dyna);  // преобразует число (0..255) в строку из трех символов  лидирующие - нули
$91CC	$C292	F8D5			MOVFF	_myIpAddr+3, FARG_Num_to_0str+0
$91D0	$0ECF	    			MOVLW	_dyna
$91D2	$0108	    			MOVLB	8
$91D4	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$91D6	$0E02	    			MOVLW	@_dyna
$91D8	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$91DA	$EC4D	F017			CALL	_Num_to_0str
;ethernet.c,102 :: 			len += putShString(dyna) ;
$91DE	$0ECF	    			MOVLW	_dyna
$91E0	$0106	    			MOVLB	6
$91E2	$6FCD	    			MOVWF	FARG_putShString+0, 1
$91E4	$0E02	    			MOVLW	@_dyna
$91E6	$6FCE	    			MOVWF	FARG_putShString+1, 1
$91E8	$EC99	F042			CALL	_putShString
$91EC	$5000	    			MOVF	STACK_0, 0, 0
$91EE	$0106	    			MOVLB	6
$91F0	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$91F2	$5001	    			MOVF	STACK_0+1, 0, 0
$91F4	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,104 :: 			if (!memcmp(getRequest+5, txt_command, 13)) {         // начало команды: command port
$91F6	$0E96	    			MOVLW	_getRequest+5
$91F8	$0108	    			MOVLB	8
$91FA	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$91FC	$0E03	    			MOVLW	@_getRequest+5
$91FE	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9200	$0E29	    			MOVLW	_txt_command
$9202	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$9204	$0E04	    			MOVLW	@_txt_command
$9206	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$9208	$0E0D	    			MOVLW	13
$920A	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$920C	$0E00	    			MOVLW	0
$920E	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9210	$EC23	F021			CALL	_memcmp
$9214	$5000	    			MOVF	STACK_0, 0, 0
$9216	$1001	    			IORWF	STACK_0+1, 0, 0
$9218	$A4D8	    			BTFSS	STATUS, Z, 0
$921A	$EF75	F054			GOTO	L_Ethernet_UserTCP_8
;ethernet.c,105 :: 			cmd_port_num =  (getRequest[19] - '0') + 10*(getRequest[18] - '0');  // вычисляем номер порта, куда идет обращение
$921E	$0E30	    			MOVLW	48
$9220	$0103	    			MOVLB	3
$9222	$5DA4	    			SUBWF	_getRequest+19, 0, 1
$9224	$0104	    			MOVLB	4
$9226	$6F37	    			MOVWF	_cmd_port_num, 1
$9228	$0E30	    			MOVLW	48
$922A	$0103	    			MOVLB	3
$922C	$5DA3	    			SUBWF	_getRequest+18, 0, 1
$922E	$6E00	    			MOVWF	STACK_0, 0
$9230	$0E0A	    			MOVLW	10
$9232	$0200	    			MULWF	STACK_0, 0
$9234	$CFF3	F000			MOVFF	PRODL, STACK_0
$9238	$5000	    			MOVF	STACK_0, 0, 0
$923A	$0104	    			MOVLB	4
$923C	$2737	    			ADDWF	_cmd_port_num, 1, 1
;ethernet.c,106 :: 			if (ip_new_flag) {     // - флаг запуска в режиме установки нового IP (=1)
$923E	$5338	    			MOVF	_ip_new_flag, 1, 1
$9240	$B4D8	    			BTFSC	STATUS, Z, 0
$9242	$D0E2	    			BRA	L_Ethernet_UserTCP_9
;ethernet.c,107 :: 			if (! ( cmd_port_num == 0)  )  goto ERR_CMD;   // команда для всей стойки
$9244	$5137	    			MOVF	_cmd_port_num, 0, 1
$9246	$0A00	    			XORLW	0
$9248	$A4D8	    			BTFSS	STATUS, Z, 0
$924A	$D0B9	    			BRA	___Ethernet_UserTCP_ERR_CMD
$924C	$	L_Ethernet_UserTCP_10:
;ethernet.c,108 :: 			if(!memcmp(getRequest+21, txt_iset, 4))  {     // команда IP SET стойки
$924C	$0EA6	    			MOVLW	_getRequest+21
$924E	$0108	    			MOVLB	8
$9250	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$9252	$0E03	    			MOVLW	@_getRequest+21
$9254	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9256	$0E39	    			MOVLW	_txt_iset
$9258	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$925A	$0E04	    			MOVLW	@_txt_iset
$925C	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$925E	$0E04	    			MOVLW	4
$9260	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$9262	$0E00	    			MOVLW	0
$9264	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9266	$EC23	F021			CALL	_memcmp
$926A	$5000	    			MOVF	STACK_0, 0, 0
$926C	$1001	    			IORWF	STACK_0+1, 0, 0
$926E	$A4D8	    			BTFSS	STATUS, Z, 0
$9270	$D090	    			BRA	L_Ethernet_UserTCP_11
;ethernet.c,109 :: 			myIpAddr[0] =  10*(getRequest[30] - '0') + (getRequest[31] - '0');   // вычисление первого байта IP
$9272	$0E30	    			MOVLW	48
$9274	$0103	    			MOVLB	3
$9276	$5DAF	    			SUBWF	_getRequest+30, 0, 1
$9278	$6E00	    			MOVWF	STACK_0, 0
$927A	$0E0A	    			MOVLW	10
$927C	$0200	    			MULWF	STACK_0, 0
$927E	$CFF3	F000			MOVFF	PRODL, STACK_0
$9282	$0E30	    			MOVLW	48
$9284	$5DB0	    			SUBWF	_getRequest+31, 0, 1
$9286	$6E02	    			MOVWF	STACK_2, 0
$9288	$5002	    			MOVF	STACK_2, 0, 0
$928A	$2400	    			ADDWF	STACK_0, 0, 0
$928C	$0102	    			MOVLB	2
$928E	$6F8F	    			MOVWF	_myIpAddr, 1
;ethernet.c,110 :: 			if  (getRequest[29] == '1')   myIpAddr[0] +=  100;
$9290	$0103	    			MOVLB	3
$9292	$51AE	    			MOVF	_getRequest+29, 0, 1
$9294	$0A31	    			XORLW	49
$9296	$E104	    			BNZ	L_Ethernet_UserTCP_12
$9298	$0E64	    			MOVLW	100
$929A	$0102	    			MOVLB	2
$929C	$278F	    			ADDWF	_myIpAddr, 1, 1
$929E	$D007	    			BRA	L_Ethernet_UserTCP_13
$92A0	$	L_Ethernet_UserTCP_12:
;ethernet.c,111 :: 			else if  (getRequest[29] == '2') myIpAddr[0] +=  200;
$92A0	$0103	    			MOVLB	3
$92A2	$51AE	    			MOVF	_getRequest+29, 0, 1
$92A4	$0A32	    			XORLW	50
$92A6	$E103	    			BNZ	L_Ethernet_UserTCP_14
$92A8	$0EC8	    			MOVLW	200
$92AA	$0102	    			MOVLB	2
$92AC	$278F	    			ADDWF	_myIpAddr, 1, 1
$92AE	$	L_Ethernet_UserTCP_14:
$92AE	$	L_Ethernet_UserTCP_13:
;ethernet.c,113 :: 			myIpAddr[1] =  10*(getRequest[34] - '0') + (getRequest[35] - '0');    // вычисление 2 байта IP
$92AE	$0102	    			MOVLB	2
$92B0	$0E30	    			MOVLW	48
$92B2	$0103	    			MOVLB	3
$92B4	$5DB3	    			SUBWF	_getRequest+34, 0, 1
$92B6	$6E00	    			MOVWF	STACK_0, 0
$92B8	$0E0A	    			MOVLW	10
$92BA	$0200	    			MULWF	STACK_0, 0
$92BC	$CFF3	F000			MOVFF	PRODL, STACK_0
$92C0	$0E30	    			MOVLW	48
$92C2	$5DB4	    			SUBWF	_getRequest+35, 0, 1
$92C4	$6E02	    			MOVWF	STACK_2, 0
$92C6	$5002	    			MOVF	STACK_2, 0, 0
$92C8	$2400	    			ADDWF	STACK_0, 0, 0
$92CA	$0102	    			MOVLB	2
$92CC	$6F90	    			MOVWF	_myIpAddr+1, 1
;ethernet.c,114 :: 			if  (getRequest[33] == '1')   myIpAddr[1] +=  100;
$92CE	$0103	    			MOVLB	3
$92D0	$51B2	    			MOVF	_getRequest+33, 0, 1
$92D2	$0A31	    			XORLW	49
$92D4	$E104	    			BNZ	L_Ethernet_UserTCP_15
$92D6	$0E64	    			MOVLW	100
$92D8	$0102	    			MOVLB	2
$92DA	$2790	    			ADDWF	_myIpAddr+1, 1, 1
$92DC	$D007	    			BRA	L_Ethernet_UserTCP_16
$92DE	$	L_Ethernet_UserTCP_15:
;ethernet.c,115 :: 			else if  (getRequest[33] == '2') myIpAddr[1] +=  200;
$92DE	$0103	    			MOVLB	3
$92E0	$51B2	    			MOVF	_getRequest+33, 0, 1
$92E2	$0A32	    			XORLW	50
$92E4	$E103	    			BNZ	L_Ethernet_UserTCP_17
$92E6	$0EC8	    			MOVLW	200
$92E8	$0102	    			MOVLB	2
$92EA	$2790	    			ADDWF	_myIpAddr+1, 1, 1
$92EC	$	L_Ethernet_UserTCP_17:
$92EC	$	L_Ethernet_UserTCP_16:
;ethernet.c,117 :: 			myIpAddr[2] =  10*(getRequest[38] - '0') + (getRequest[39] - '0');    // вычисление 3 байта IP
$92EC	$0102	    			MOVLB	2
$92EE	$0E30	    			MOVLW	48
$92F0	$0103	    			MOVLB	3
$92F2	$5DB7	    			SUBWF	_getRequest+38, 0, 1
$92F4	$6E00	    			MOVWF	STACK_0, 0
$92F6	$0E0A	    			MOVLW	10
$92F8	$0200	    			MULWF	STACK_0, 0
$92FA	$CFF3	F000			MOVFF	PRODL, STACK_0
$92FE	$0E30	    			MOVLW	48
$9300	$5DB8	    			SUBWF	_getRequest+39, 0, 1
$9302	$6E02	    			MOVWF	STACK_2, 0
$9304	$5002	    			MOVF	STACK_2, 0, 0
$9306	$2400	    			ADDWF	STACK_0, 0, 0
$9308	$0102	    			MOVLB	2
$930A	$6F91	    			MOVWF	_myIpAddr+2, 1
;ethernet.c,118 :: 			if  (getRequest[37] == '1')   myIpAddr[2] +=  100;
$930C	$0103	    			MOVLB	3
$930E	$51B6	    			MOVF	_getRequest+37, 0, 1
$9310	$0A31	    			XORLW	49
$9312	$E104	    			BNZ	L_Ethernet_UserTCP_18
$9314	$0E64	    			MOVLW	100
$9316	$0102	    			MOVLB	2
$9318	$2791	    			ADDWF	_myIpAddr+2, 1, 1
$931A	$D007	    			BRA	L_Ethernet_UserTCP_19
$931C	$	L_Ethernet_UserTCP_18:
;ethernet.c,119 :: 			else if  (getRequest[37] == '2') myIpAddr[2] +=  200;
$931C	$0103	    			MOVLB	3
$931E	$51B6	    			MOVF	_getRequest+37, 0, 1
$9320	$0A32	    			XORLW	50
$9322	$E103	    			BNZ	L_Ethernet_UserTCP_20
$9324	$0EC8	    			MOVLW	200
$9326	$0102	    			MOVLB	2
$9328	$2791	    			ADDWF	_myIpAddr+2, 1, 1
$932A	$	L_Ethernet_UserTCP_20:
$932A	$	L_Ethernet_UserTCP_19:
;ethernet.c,121 :: 			myIpAddr[3] =  10*(getRequest[42] - '0') + (getRequest[43] - '0');    // вычисление 4 байта IP
$932A	$0102	    			MOVLB	2
$932C	$0E30	    			MOVLW	48
$932E	$0103	    			MOVLB	3
$9330	$5DBB	    			SUBWF	_getRequest+42, 0, 1
$9332	$6E00	    			MOVWF	STACK_0, 0
$9334	$0E0A	    			MOVLW	10
$9336	$0200	    			MULWF	STACK_0, 0
$9338	$CFF3	F000			MOVFF	PRODL, STACK_0
$933C	$0E30	    			MOVLW	48
$933E	$5DBC	    			SUBWF	_getRequest+43, 0, 1
$9340	$6E02	    			MOVWF	STACK_2, 0
$9342	$5002	    			MOVF	STACK_2, 0, 0
$9344	$2400	    			ADDWF	STACK_0, 0, 0
$9346	$0102	    			MOVLB	2
$9348	$6F92	    			MOVWF	_myIpAddr+3, 1
;ethernet.c,122 :: 			if  (getRequest[41] == '1')   myIpAddr[3] +=  100;
$934A	$0103	    			MOVLB	3
$934C	$51BA	    			MOVF	_getRequest+41, 0, 1
$934E	$0A31	    			XORLW	49
$9350	$E104	    			BNZ	L_Ethernet_UserTCP_21
$9352	$0E64	    			MOVLW	100
$9354	$0102	    			MOVLB	2
$9356	$2792	    			ADDWF	_myIpAddr+3, 1, 1
$9358	$D007	    			BRA	L_Ethernet_UserTCP_22
$935A	$	L_Ethernet_UserTCP_21:
;ethernet.c,123 :: 			else if  (getRequest[41] == '2') myIpAddr[3] +=  200;
$935A	$0103	    			MOVLB	3
$935C	$51BA	    			MOVF	_getRequest+41, 0, 1
$935E	$0A32	    			XORLW	50
$9360	$E103	    			BNZ	L_Ethernet_UserTCP_23
$9362	$0EC8	    			MOVLW	200
$9364	$0102	    			MOVLB	2
$9366	$2792	    			ADDWF	_myIpAddr+3, 1, 1
$9368	$	L_Ethernet_UserTCP_23:
$9368	$	L_Ethernet_UserTCP_22:
;ethernet.c,124 :: 			tmp =Set_fnum();
$9368	$0102	    			MOVLB	2
$936A	$EC5D	F021			CALL	_Set_fnum
$936E	$C000	F6AD			MOVFF	STACK_0, Ethernet_UserTCP_tmp_L0
$9372	$0E00	    			MOVLW	0
$9374	$0106	    			MOVLB	6
$9376	$6FAE	    			MOVWF	Ethernet_UserTCP_tmp_L0+1, 1
;ethernet.c,126 :: 			log_write ( IP, " :new_ip                    ", tmp );   // записать в журнал - команда  (28 символов )
$9378	$0E05	    			MOVLW	5
$937A	$6FCD	    			MOVWF	FARG_log_write+0, 1
$937C	$0E4B	    			MOVLW	lstr5_ethernet
$937E	$6FCE	    			MOVWF	FARG_log_write+1, 1
$9380	$0E06	    			MOVLW	@lstr5_ethernet
$9382	$6FCF	    			MOVWF	FARG_log_write+2, 1
$9384	$C6AD	F6D0			MOVFF	Ethernet_UserTCP_tmp_L0, FARG_log_write+3
$9388	$ECC2	F03C			CALL	_log_write
;ethernet.c,127 :: 			ip_new_flag = 0; // сброс - флаг запуска в режиме установки нового IP (=1)
$938C	$0104	    			MOVLB	4
$938E	$6B38	    			CLRF	_ip_new_flag, 1
;ethernet.c,128 :: 			}
$9390	$D002	    			BRA	L_Ethernet_UserTCP_24
$9392	$	L_Ethernet_UserTCP_11:
;ethernet.c,129 :: 			else goto ERR_CMD;
$9392	$0104	    			MOVLB	4
$9394	$D014	    			BRA	___Ethernet_UserTCP_ERR_CMD
$9396	$	L_Ethernet_UserTCP_24:
;ethernet.c,131 :: 			len += putShConstString("result=accepted") ;
$9396	$0EFE	    			MOVLW	#lstr_6_ethernet
$9398	$0106	    			MOVLB	6
$939A	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$939C	$0ED1	    			MOVLW	@#lstr_6_ethernet
$939E	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$93A0	$0E00	    			MOVLW	@@#lstr_6_ethernet
$93A2	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$93A4	$EC68	F042			CALL	_putShConstString
$93A8	$0106	    			MOVLB	6
$93AA	$51A3	    			MOVF	Ethernet_UserTCP_len_L0, 0, 1
$93AC	$2600	    			ADDWF	STACK_0, 1, 0
$93AE	$51A4	    			MOVF	Ethernet_UserTCP_len_L0+1, 0, 1
$93B0	$2201	    			ADDWFC	STACK_0+1, 1, 0
$93B2	$C000	F6A3			MOVFF	STACK_0, Ethernet_UserTCP_len_L0
$93B6	$C001	F6A4			MOVFF	STACK_0+1, Ethernet_UserTCP_len_L0+1
;ethernet.c,132 :: 			Led_Y  = 1;
$93BA	$8282	    			BSF	PORTC, 1, 0
;ethernet.c,133 :: 			return(len) ;
$93BC	$0012	    			RETURN
;ethernet.c,135 :: 			ERR_CMD:                  len += putShConstString("result=error_ip_command") ;
$93BE	$	___Ethernet_UserTCP_ERR_CMD:
$93BE	$0E0E	    			MOVLW	#lstr_7_ethernet
$93C0	$0106	    			MOVLB	6
$93C2	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$93C4	$0ED2	    			MOVLW	@#lstr_7_ethernet
$93C6	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$93C8	$0E00	    			MOVLW	@@#lstr_7_ethernet
$93CA	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$93CC	$EC68	F042			CALL	_putShConstString
$93D0	$5000	    			MOVF	STACK_0, 0, 0
$93D2	$0106	    			MOVLB	6
$93D4	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$93D6	$5001	    			MOVF	STACK_0+1, 0, 0
$93D8	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,136 :: 			tmp =Set_fnum();
$93DA	$EC5D	F021			CALL	_Set_fnum
$93DE	$C000	F6AD			MOVFF	STACK_0, Ethernet_UserTCP_tmp_L0
$93E2	$0E00	    			MOVLW	0
$93E4	$0106	    			MOVLB	6
$93E6	$6FAE	    			MOVWF	Ethernet_UserTCP_tmp_L0+1, 1
;ethernet.c,138 :: 			log_write ( CMD, " error_ip_command           ", tmp );   // записать в журнал - команда  (28 символов )
$93E8	$0E03	    			MOVLW	3
$93EA	$6FCD	    			MOVWF	FARG_log_write+0, 1
$93EC	$0E68	    			MOVLW	lstr8_ethernet
$93EE	$6FCE	    			MOVWF	FARG_log_write+1, 1
$93F0	$0E06	    			MOVLW	@lstr8_ethernet
$93F2	$6FCF	    			MOVWF	FARG_log_write+2, 1
$93F4	$C6AD	F6D0			MOVFF	Ethernet_UserTCP_tmp_L0, FARG_log_write+3
$93F8	$ECC2	F03C			CALL	_log_write
;ethernet.c,139 :: 			Led_Y  = 1;
$93FC	$8282	    			BSF	PORTC, 1, 0
;ethernet.c,140 :: 			return(len) ;                                             // return to the library with the number of bytes to transmit
$93FE	$C6A3	F000			MOVFF	Ethernet_UserTCP_len_L0, STACK_0
$9402	$C6A4	F001			MOVFF	Ethernet_UserTCP_len_L0+1, STACK_0+1
$9406	$0012	    			RETURN
;ethernet.c,141 :: 			}
$9408	$	L_Ethernet_UserTCP_9:
;ethernet.c,143 :: 			if ( cmd_port_num == 0) { // команда для всей стойки
$9408	$0104	    			MOVLB	4
$940A	$5137	    			MOVF	_cmd_port_num, 0, 1
$940C	$0A00	    			XORLW	0
$940E	$A4D8	    			BTFSS	STATUS, Z, 0
$9410	$EF7E	F052			GOTO	L_Ethernet_UserTCP_25
;ethernet.c,144 :: 			if(!memcmp(getRequest+21, txt_status, 4)) {   // команда status стойки
$9414	$0EA6	    			MOVLW	_getRequest+21
$9416	$0108	    			MOVLB	8
$9418	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$941A	$0E03	    			MOVLW	@_getRequest+21
$941C	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$941E	$0E22	    			MOVLW	_txt_status
$9420	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$9422	$0E04	    			MOVLW	@_txt_status
$9424	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$9426	$0E04	    			MOVLW	4
$9428	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$942A	$0E00	    			MOVLW	0
$942C	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$942E	$EC23	F021			CALL	_memcmp
$9432	$5000	    			MOVF	STACK_0, 0, 0
$9434	$1001	    			IORWF	STACK_0+1, 0, 0
$9436	$A4D8	    			BTFSS	STATUS, Z, 0
$9438	$D2FD	    			BRA	L_Ethernet_UserTCP_26
;ethernet.c,145 :: 			len += putShConstString("&state=OK\r\n");
$943A	$0E26	    			MOVLW	#lstr_9_ethernet
$943C	$0106	    			MOVLB	6
$943E	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$9440	$0ED2	    			MOVLW	@#lstr_9_ethernet
$9442	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$9444	$0E00	    			MOVLW	@@#lstr_9_ethernet
$9446	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$9448	$EC68	F042			CALL	_putShConstString
$944C	$5000	    			MOVF	STACK_0, 0, 0
$944E	$0106	    			MOVLB	6
$9450	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9452	$5001	    			MOVF	STACK_0+1, 0, 0
$9454	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,146 :: 			for (tmp=1;tmp<15;tmp++)
$9456	$0E01	    			MOVLW	1
$9458	$6FAD	    			MOVWF	Ethernet_UserTCP_tmp_L0, 1
$945A	$0E00	    			MOVLW	0
$945C	$6FAE	    			MOVWF	Ethernet_UserTCP_tmp_L0+1, 1
$945E	$	L_Ethernet_UserTCP_27:
$945E	$0E00	    			MOVLW	0
$9460	$0106	    			MOVLB	6
$9462	$5DAE	    			SUBWF	Ethernet_UserTCP_tmp_L0+1, 0, 1
$9464	$E102	    			BNZ	L_Ethernet_UserTCP_129
$9466	$0E0F	    			MOVLW	15
$9468	$5DAD	    			SUBWF	Ethernet_UserTCP_tmp_L0, 0, 1
$946A	$	L_Ethernet_UserTCP_129:
$946A	$B0D8	    			BTFSC	STATUS, C, 0
$946C	$D2E0	    			BRA	L_Ethernet_UserTCP_28
;ethernet.c,148 :: 			sprintf(tmpBuf,"cell_%02d=",tmp);
$946E	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9470	$0106	    			MOVLB	6
$9472	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$9474	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9476	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$9478	$0E32	    			MOVLW	#lstr_10_ethernet
$947A	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$947C	$0ED2	    			MOVLW	@#lstr_10_ethernet
$947E	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$9480	$0E00	    			MOVLW	@@#lstr_10_ethernet
$9482	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$9484	$C6AD	F6D2			MOVFF	Ethernet_UserTCP_tmp_L0, FARG_sprintf+5
$9488	$C6AE	F6D3			MOVFF	Ethernet_UserTCP_tmp_L0+1, FARG_sprintf+6
$948C	$ECC1	F042			CALL	_sprintf
;ethernet.c,149 :: 			len += putShString(tmpBuf);
$9490	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9492	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9494	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9496	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9498	$EC99	F042			CALL	_putShString
$949C	$5000	    			MOVF	STACK_0, 0, 0
$949E	$0106	    			MOVLB	6
$94A0	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$94A2	$5001	    			MOVF	STACK_0+1, 0, 0
$94A4	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,150 :: 			if(cellState[tmp][4]=='8') {
$94A6	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$94AA	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$94AE	$0E05	    			MOVLW	5
$94B0	$6E04	    			MOVWF	STACK_4, 0
$94B2	$0E00	    			MOVLW	0
$94B4	$6E05	    			MOVWF	STACK_4+1, 0
$94B6	$ECB1	F001			CALL	_mul_16x16_u
$94BA	$0E3E	    			MOVLW	_cellState
$94BC	$2600	    			ADDWF	STACK_0, 1, 0
$94BE	$0E04	    			MOVLW	@_cellState
$94C0	$2201	    			ADDWFC	STACK_0+1, 1, 0
$94C2	$0E04	    			MOVLW	4
$94C4	$2400	    			ADDWF	STACK_0, 0, 0
$94C6	$6EE9	    			MOVWF	FSR0L, 0
$94C8	$0E00	    			MOVLW	0
$94CA	$2001	    			ADDWFC	STACK_0+1, 0, 0
$94CC	$6EEA	    			MOVWF	FSR0L+1, 0
$94CE	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$94D2	$5002	    			MOVF	STACK_2, 0, 0
$94D4	$0A38	    			XORLW	56
$94D6	$E10F	    			BNZ	L_Ethernet_UserTCP_30
;ethernet.c,151 :: 			len += putShConstString("no\r\n");
$94D8	$0E3E	    			MOVLW	#lstr_11_ethernet
$94DA	$0106	    			MOVLB	6
$94DC	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$94DE	$0ED2	    			MOVLW	@#lstr_11_ethernet
$94E0	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$94E2	$0E00	    			MOVLW	@@#lstr_11_ethernet
$94E4	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$94E6	$EC68	F042			CALL	_putShConstString
$94EA	$5000	    			MOVF	STACK_0, 0, 0
$94EC	$0106	    			MOVLB	6
$94EE	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$94F0	$5001	    			MOVF	STACK_0+1, 0, 0
$94F2	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,152 :: 			}
$94F4	$D298	    			BRA	L_Ethernet_UserTCP_31
$94F6	$	L_Ethernet_UserTCP_30:
;ethernet.c,154 :: 			if (tmp == 14)            //для 14 ячейки особые условия
$94F6	$0E00	    			MOVLW	0
$94F8	$0106	    			MOVLB	6
$94FA	$19AE	    			XORWF	Ethernet_UserTCP_tmp_L0+1, 0, 1
$94FC	$E102	    			BNZ	L_Ethernet_UserTCP_130
$94FE	$0E0E	    			MOVLW	14
$9500	$19AD	    			XORWF	Ethernet_UserTCP_tmp_L0, 0, 1
$9502	$	L_Ethernet_UserTCP_130:
$9502	$A4D8	    			BTFSS	STATUS, Z, 0
$9504	$D1B2	    			BRA	L_Ethernet_UserTCP_32
;ethernet.c,156 :: 			sprintf(tmpBuf,"%c,",cellState[tmp][0]);
$9506	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9508	$0106	    			MOVLB	6
$950A	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$950C	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$950E	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$9510	$0E44	    			MOVLW	#lstr_12_ethernet
$9512	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$9514	$0ED2	    			MOVLW	@#lstr_12_ethernet
$9516	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$9518	$0E00	    			MOVLW	@@#lstr_12_ethernet
$951A	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$951C	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$9520	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$9524	$0E05	    			MOVLW	5
$9526	$6E04	    			MOVWF	STACK_4, 0
$9528	$0E00	    			MOVLW	0
$952A	$6E05	    			MOVWF	STACK_4+1, 0
$952C	$ECB1	F001			CALL	_mul_16x16_u
$9530	$0E3E	    			MOVLW	_cellState
$9532	$2400	    			ADDWF	STACK_0, 0, 0
$9534	$6EE9	    			MOVWF	FSR0L, 0
$9536	$0E04	    			MOVLW	@_cellState
$9538	$2001	    			ADDWFC	STACK_0+1, 0, 0
$953A	$6EEA	    			MOVWF	FSR0L+1, 0
$953C	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$9540	$ECC1	F042			CALL	_sprintf
;ethernet.c,157 :: 			len += putShString(tmpBuf);
$9544	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9546	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9548	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$954A	$6FCE	    			MOVWF	FARG_putShString+1, 1
$954C	$EC99	F042			CALL	_putShString
$9550	$5000	    			MOVF	STACK_0, 0, 0
$9552	$0106	    			MOVLB	6
$9554	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9556	$5001	    			MOVF	STACK_0+1, 0, 0
$9558	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,158 :: 			if (cellState[tmp][1] == '0')   //инверсия 2-го байта
$955A	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$955E	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$9562	$0E05	    			MOVLW	5
$9564	$6E04	    			MOVWF	STACK_4, 0
$9566	$0E00	    			MOVLW	0
$9568	$6E05	    			MOVWF	STACK_4+1, 0
$956A	$ECB1	F001			CALL	_mul_16x16_u
$956E	$0E3E	    			MOVLW	_cellState
$9570	$2600	    			ADDWF	STACK_0, 1, 0
$9572	$0E04	    			MOVLW	@_cellState
$9574	$2201	    			ADDWFC	STACK_0+1, 1, 0
$9576	$0E01	    			MOVLW	1
$9578	$2400	    			ADDWF	STACK_0, 0, 0
$957A	$6EE9	    			MOVWF	FSR0L, 0
$957C	$0E00	    			MOVLW	0
$957E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$9580	$6EEA	    			MOVWF	FSR0L+1, 0
$9582	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$9586	$5002	    			MOVF	STACK_2, 0, 0
$9588	$0A30	    			XORLW	48
$958A	$E11B	    			BNZ	L_Ethernet_UserTCP_33
;ethernet.c,160 :: 			sprintf(tmpBuf,"%c,",'1');
$958C	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$958E	$0106	    			MOVLB	6
$9590	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$9592	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9594	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$9596	$0E48	    			MOVLW	#lstr_13_ethernet
$9598	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$959A	$0ED2	    			MOVLW	@#lstr_13_ethernet
$959C	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$959E	$0E00	    			MOVLW	@@#lstr_13_ethernet
$95A0	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$95A2	$0E31	    			MOVLW	49
$95A4	$6FD2	    			MOVWF	FARG_sprintf+5, 1
$95A6	$ECC1	F042			CALL	_sprintf
;ethernet.c,161 :: 			len += putShString(tmpBuf);
$95AA	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$95AC	$6FCD	    			MOVWF	FARG_putShString+0, 1
$95AE	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$95B0	$6FCE	    			MOVWF	FARG_putShString+1, 1
$95B2	$EC99	F042			CALL	_putShString
$95B6	$5000	    			MOVF	STACK_0, 0, 0
$95B8	$0106	    			MOVLB	6
$95BA	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$95BC	$5001	    			MOVF	STACK_0+1, 0, 0
$95BE	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,162 :: 			}
$95C0	$D062	    			BRA	L_Ethernet_UserTCP_34
$95C2	$	L_Ethernet_UserTCP_33:
;ethernet.c,165 :: 			if (cellState[tmp][1] == '1')
$95C2	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$95C6	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$95CA	$0E05	    			MOVLW	5
$95CC	$6E04	    			MOVWF	STACK_4, 0
$95CE	$0E00	    			MOVLW	0
$95D0	$6E05	    			MOVWF	STACK_4+1, 0
$95D2	$ECB1	F001			CALL	_mul_16x16_u
$95D6	$0E3E	    			MOVLW	_cellState
$95D8	$2600	    			ADDWF	STACK_0, 1, 0
$95DA	$0E04	    			MOVLW	@_cellState
$95DC	$2201	    			ADDWFC	STACK_0+1, 1, 0
$95DE	$0E01	    			MOVLW	1
$95E0	$2400	    			ADDWF	STACK_0, 0, 0
$95E2	$6EE9	    			MOVWF	FSR0L, 0
$95E4	$0E00	    			MOVLW	0
$95E6	$2001	    			ADDWFC	STACK_0+1, 0, 0
$95E8	$6EEA	    			MOVWF	FSR0L+1, 0
$95EA	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$95EE	$5002	    			MOVF	STACK_2, 0, 0
$95F0	$0A31	    			XORLW	49
$95F2	$E11B	    			BNZ	L_Ethernet_UserTCP_35
;ethernet.c,167 :: 			sprintf(tmpBuf,"%c,",'0');
$95F4	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$95F6	$0106	    			MOVLB	6
$95F8	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$95FA	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$95FC	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$95FE	$0E4C	    			MOVLW	#lstr_14_ethernet
$9600	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$9602	$0ED2	    			MOVLW	@#lstr_14_ethernet
$9604	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$9606	$0E00	    			MOVLW	@@#lstr_14_ethernet
$9608	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$960A	$0E30	    			MOVLW	48
$960C	$6FD2	    			MOVWF	FARG_sprintf+5, 1
$960E	$ECC1	F042			CALL	_sprintf
;ethernet.c,168 :: 			len += putShString(tmpBuf);
$9612	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9614	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9616	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9618	$6FCE	    			MOVWF	FARG_putShString+1, 1
$961A	$EC99	F042			CALL	_putShString
$961E	$5000	    			MOVF	STACK_0, 0, 0
$9620	$0106	    			MOVLB	6
$9622	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9624	$5001	    			MOVF	STACK_0+1, 0, 0
$9626	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,169 :: 			}
$9628	$D02E	    			BRA	L_Ethernet_UserTCP_36
$962A	$	L_Ethernet_UserTCP_35:
;ethernet.c,172 :: 			sprintf(tmpBuf,"%c,",cellState[tmp][1]);
$962A	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$962C	$0106	    			MOVLB	6
$962E	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$9630	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9632	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$9634	$0E50	    			MOVLW	#lstr_15_ethernet
$9636	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$9638	$0ED2	    			MOVLW	@#lstr_15_ethernet
$963A	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$963C	$0E00	    			MOVLW	@@#lstr_15_ethernet
$963E	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$9640	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$9644	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$9648	$0E05	    			MOVLW	5
$964A	$6E04	    			MOVWF	STACK_4, 0
$964C	$0E00	    			MOVLW	0
$964E	$6E05	    			MOVWF	STACK_4+1, 0
$9650	$ECB1	F001			CALL	_mul_16x16_u
$9654	$0E3E	    			MOVLW	_cellState
$9656	$2600	    			ADDWF	STACK_0, 1, 0
$9658	$0E04	    			MOVLW	@_cellState
$965A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$965C	$0E01	    			MOVLW	1
$965E	$2400	    			ADDWF	STACK_0, 0, 0
$9660	$6EE9	    			MOVWF	FSR0L, 0
$9662	$0E00	    			MOVLW	0
$9664	$2001	    			ADDWFC	STACK_0+1, 0, 0
$9666	$6EEA	    			MOVWF	FSR0L+1, 0
$9668	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$966C	$ECC1	F042			CALL	_sprintf
;ethernet.c,173 :: 			len += putShString(tmpBuf);
$9670	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9672	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9674	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9676	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9678	$EC99	F042			CALL	_putShString
$967C	$5000	    			MOVF	STACK_0, 0, 0
$967E	$0106	    			MOVLB	6
$9680	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9682	$5001	    			MOVF	STACK_0+1, 0, 0
$9684	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,174 :: 			}
$9686	$	L_Ethernet_UserTCP_36:
;ethernet.c,175 :: 			}
$9686	$	L_Ethernet_UserTCP_34:
;ethernet.c,176 :: 			if (cellState[tmp][2] == '0')  //инверсия 3-го байта
$9686	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$968A	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$968E	$0E05	    			MOVLW	5
$9690	$6E04	    			MOVWF	STACK_4, 0
$9692	$0E00	    			MOVLW	0
$9694	$6E05	    			MOVWF	STACK_4+1, 0
$9696	$ECB1	F001			CALL	_mul_16x16_u
$969A	$0E3E	    			MOVLW	_cellState
$969C	$2600	    			ADDWF	STACK_0, 1, 0
$969E	$0E04	    			MOVLW	@_cellState
$96A0	$2201	    			ADDWFC	STACK_0+1, 1, 0
$96A2	$0E02	    			MOVLW	2
$96A4	$2400	    			ADDWF	STACK_0, 0, 0
$96A6	$6EE9	    			MOVWF	FSR0L, 0
$96A8	$0E00	    			MOVLW	0
$96AA	$2001	    			ADDWFC	STACK_0+1, 0, 0
$96AC	$6EEA	    			MOVWF	FSR0L+1, 0
$96AE	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$96B2	$5002	    			MOVF	STACK_2, 0, 0
$96B4	$0A30	    			XORLW	48
$96B6	$E11B	    			BNZ	L_Ethernet_UserTCP_37
;ethernet.c,178 :: 			sprintf(tmpBuf,"%c,",'1');
$96B8	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$96BA	$0106	    			MOVLB	6
$96BC	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$96BE	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$96C0	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$96C2	$0E54	    			MOVLW	#lstr_16_ethernet
$96C4	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$96C6	$0ED2	    			MOVLW	@#lstr_16_ethernet
$96C8	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$96CA	$0E00	    			MOVLW	@@#lstr_16_ethernet
$96CC	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$96CE	$0E31	    			MOVLW	49
$96D0	$6FD2	    			MOVWF	FARG_sprintf+5, 1
$96D2	$ECC1	F042			CALL	_sprintf
;ethernet.c,179 :: 			len += putShString(tmpBuf);
$96D6	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$96D8	$6FCD	    			MOVWF	FARG_putShString+0, 1
$96DA	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$96DC	$6FCE	    			MOVWF	FARG_putShString+1, 1
$96DE	$EC99	F042			CALL	_putShString
$96E2	$5000	    			MOVF	STACK_0, 0, 0
$96E4	$0106	    			MOVLB	6
$96E6	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$96E8	$5001	    			MOVF	STACK_0+1, 0, 0
$96EA	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,180 :: 			}
$96EC	$D062	    			BRA	L_Ethernet_UserTCP_38
$96EE	$	L_Ethernet_UserTCP_37:
;ethernet.c,183 :: 			if (cellState[tmp][2] == '1')
$96EE	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$96F2	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$96F6	$0E05	    			MOVLW	5
$96F8	$6E04	    			MOVWF	STACK_4, 0
$96FA	$0E00	    			MOVLW	0
$96FC	$6E05	    			MOVWF	STACK_4+1, 0
$96FE	$ECB1	F001			CALL	_mul_16x16_u
$9702	$0E3E	    			MOVLW	_cellState
$9704	$2600	    			ADDWF	STACK_0, 1, 0
$9706	$0E04	    			MOVLW	@_cellState
$9708	$2201	    			ADDWFC	STACK_0+1, 1, 0
$970A	$0E02	    			MOVLW	2
$970C	$2400	    			ADDWF	STACK_0, 0, 0
$970E	$6EE9	    			MOVWF	FSR0L, 0
$9710	$0E00	    			MOVLW	0
$9712	$2001	    			ADDWFC	STACK_0+1, 0, 0
$9714	$6EEA	    			MOVWF	FSR0L+1, 0
$9716	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$971A	$5002	    			MOVF	STACK_2, 0, 0
$971C	$0A31	    			XORLW	49
$971E	$E11B	    			BNZ	L_Ethernet_UserTCP_39
;ethernet.c,185 :: 			sprintf(tmpBuf,"%c,",'0');
$9720	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9722	$0106	    			MOVLB	6
$9724	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$9726	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9728	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$972A	$0E58	    			MOVLW	#lstr_17_ethernet
$972C	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$972E	$0ED2	    			MOVLW	@#lstr_17_ethernet
$9730	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$9732	$0E00	    			MOVLW	@@#lstr_17_ethernet
$9734	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$9736	$0E30	    			MOVLW	48
$9738	$6FD2	    			MOVWF	FARG_sprintf+5, 1
$973A	$ECC1	F042			CALL	_sprintf
;ethernet.c,186 :: 			len += putShString(tmpBuf);
$973E	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9740	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9742	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9744	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9746	$EC99	F042			CALL	_putShString
$974A	$5000	    			MOVF	STACK_0, 0, 0
$974C	$0106	    			MOVLB	6
$974E	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9750	$5001	    			MOVF	STACK_0+1, 0, 0
$9752	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,187 :: 			}
$9754	$D02E	    			BRA	L_Ethernet_UserTCP_40
$9756	$	L_Ethernet_UserTCP_39:
;ethernet.c,190 :: 			sprintf(tmpBuf,"%c,",cellState[tmp][2]);
$9756	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9758	$0106	    			MOVLB	6
$975A	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$975C	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$975E	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$9760	$0E5C	    			MOVLW	#lstr_18_ethernet
$9762	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$9764	$0ED2	    			MOVLW	@#lstr_18_ethernet
$9766	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$9768	$0E00	    			MOVLW	@@#lstr_18_ethernet
$976A	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$976C	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$9770	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$9774	$0E05	    			MOVLW	5
$9776	$6E04	    			MOVWF	STACK_4, 0
$9778	$0E00	    			MOVLW	0
$977A	$6E05	    			MOVWF	STACK_4+1, 0
$977C	$ECB1	F001			CALL	_mul_16x16_u
$9780	$0E3E	    			MOVLW	_cellState
$9782	$2600	    			ADDWF	STACK_0, 1, 0
$9784	$0E04	    			MOVLW	@_cellState
$9786	$2201	    			ADDWFC	STACK_0+1, 1, 0
$9788	$0E02	    			MOVLW	2
$978A	$2400	    			ADDWF	STACK_0, 0, 0
$978C	$6EE9	    			MOVWF	FSR0L, 0
$978E	$0E00	    			MOVLW	0
$9790	$2001	    			ADDWFC	STACK_0+1, 0, 0
$9792	$6EEA	    			MOVWF	FSR0L+1, 0
$9794	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$9798	$ECC1	F042			CALL	_sprintf
;ethernet.c,191 :: 			len += putShString(tmpBuf);
$979C	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$979E	$6FCD	    			MOVWF	FARG_putShString+0, 1
$97A0	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$97A2	$6FCE	    			MOVWF	FARG_putShString+1, 1
$97A4	$EC99	F042			CALL	_putShString
$97A8	$5000	    			MOVF	STACK_0, 0, 0
$97AA	$0106	    			MOVLB	6
$97AC	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$97AE	$5001	    			MOVF	STACK_0+1, 0, 0
$97B0	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,192 :: 			}
$97B2	$	L_Ethernet_UserTCP_40:
;ethernet.c,193 :: 			}
$97B2	$	L_Ethernet_UserTCP_38:
;ethernet.c,194 :: 			sprintf(tmpBuf,"%c,",cellState[tmp][3]);
$97B2	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$97B4	$0106	    			MOVLB	6
$97B6	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$97B8	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$97BA	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$97BC	$0E60	    			MOVLW	#lstr_19_ethernet
$97BE	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$97C0	$0ED2	    			MOVLW	@#lstr_19_ethernet
$97C2	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$97C4	$0E00	    			MOVLW	@@#lstr_19_ethernet
$97C6	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$97C8	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$97CC	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$97D0	$0E05	    			MOVLW	5
$97D2	$6E04	    			MOVWF	STACK_4, 0
$97D4	$0E00	    			MOVLW	0
$97D6	$6E05	    			MOVWF	STACK_4+1, 0
$97D8	$ECB1	F001			CALL	_mul_16x16_u
$97DC	$0E3E	    			MOVLW	_cellState
$97DE	$2600	    			ADDWF	STACK_0, 1, 0
$97E0	$0E04	    			MOVLW	@_cellState
$97E2	$2201	    			ADDWFC	STACK_0+1, 1, 0
$97E4	$0E03	    			MOVLW	3
$97E6	$2400	    			ADDWF	STACK_0, 0, 0
$97E8	$6EE9	    			MOVWF	FSR0L, 0
$97EA	$0E00	    			MOVLW	0
$97EC	$2001	    			ADDWFC	STACK_0+1, 0, 0
$97EE	$6EEA	    			MOVWF	FSR0L+1, 0
$97F0	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$97F4	$ECC1	F042			CALL	_sprintf
;ethernet.c,195 :: 			len += putShString(tmpBuf);
$97F8	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$97FA	$6FCD	    			MOVWF	FARG_putShString+0, 1
$97FC	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$97FE	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9800	$EC99	F042			CALL	_putShString
$9804	$5000	    			MOVF	STACK_0, 0, 0
$9806	$0106	    			MOVLB	6
$9808	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$980A	$5001	    			MOVF	STACK_0+1, 0, 0
$980C	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,196 :: 			sprintf(tmpBuf,"%c\r\n",cellState[tmp][4]);
$980E	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9810	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$9812	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9814	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$9816	$0E64	    			MOVLW	#lstr_20_ethernet
$9818	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$981A	$0ED2	    			MOVLW	@#lstr_20_ethernet
$981C	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$981E	$0E00	    			MOVLW	@@#lstr_20_ethernet
$9820	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$9822	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$9826	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$982A	$0E05	    			MOVLW	5
$982C	$6E04	    			MOVWF	STACK_4, 0
$982E	$0E00	    			MOVLW	0
$9830	$6E05	    			MOVWF	STACK_4+1, 0
$9832	$ECB1	F001			CALL	_mul_16x16_u
$9836	$0E3E	    			MOVLW	_cellState
$9838	$2600	    			ADDWF	STACK_0, 1, 0
$983A	$0E04	    			MOVLW	@_cellState
$983C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$983E	$0E04	    			MOVLW	4
$9840	$2400	    			ADDWF	STACK_0, 0, 0
$9842	$6EE9	    			MOVWF	FSR0L, 0
$9844	$0E00	    			MOVLW	0
$9846	$2001	    			ADDWFC	STACK_0+1, 0, 0
$9848	$6EEA	    			MOVWF	FSR0L+1, 0
$984A	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$984E	$ECC1	F042			CALL	_sprintf
;ethernet.c,197 :: 			len += putShString(tmpBuf);
$9852	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9854	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9856	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9858	$6FCE	    			MOVWF	FARG_putShString+1, 1
$985A	$EC99	F042			CALL	_putShString
$985E	$5000	    			MOVF	STACK_0, 0, 0
$9860	$0106	    			MOVLB	6
$9862	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9864	$5001	    			MOVF	STACK_0+1, 0, 0
$9866	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,198 :: 			}
$9868	$D0DE	    			BRA	L_Ethernet_UserTCP_41
$986A	$	L_Ethernet_UserTCP_32:
;ethernet.c,201 :: 			sprintf(tmpBuf,"%c,",cellState[tmp][0]);
$986A	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$986C	$0106	    			MOVLB	6
$986E	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$9870	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9872	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$9874	$0E6A	    			MOVLW	#lstr_21_ethernet
$9876	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$9878	$0ED2	    			MOVLW	@#lstr_21_ethernet
$987A	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$987C	$0E00	    			MOVLW	@@#lstr_21_ethernet
$987E	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$9880	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$9884	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$9888	$0E05	    			MOVLW	5
$988A	$6E04	    			MOVWF	STACK_4, 0
$988C	$0E00	    			MOVLW	0
$988E	$6E05	    			MOVWF	STACK_4+1, 0
$9890	$ECB1	F001			CALL	_mul_16x16_u
$9894	$0E3E	    			MOVLW	_cellState
$9896	$2400	    			ADDWF	STACK_0, 0, 0
$9898	$6EE9	    			MOVWF	FSR0L, 0
$989A	$0E04	    			MOVLW	@_cellState
$989C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$989E	$6EEA	    			MOVWF	FSR0L+1, 0
$98A0	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$98A4	$ECC1	F042			CALL	_sprintf
;ethernet.c,202 :: 			len += putShString(tmpBuf);
$98A8	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$98AA	$6FCD	    			MOVWF	FARG_putShString+0, 1
$98AC	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$98AE	$6FCE	    			MOVWF	FARG_putShString+1, 1
$98B0	$EC99	F042			CALL	_putShString
$98B4	$5000	    			MOVF	STACK_0, 0, 0
$98B6	$0106	    			MOVLB	6
$98B8	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$98BA	$5001	    			MOVF	STACK_0+1, 0, 0
$98BC	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,203 :: 			sprintf(tmpBuf,"%c,",cellState[tmp][1]);
$98BE	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$98C0	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$98C2	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$98C4	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$98C6	$0E6E	    			MOVLW	#lstr_22_ethernet
$98C8	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$98CA	$0ED2	    			MOVLW	@#lstr_22_ethernet
$98CC	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$98CE	$0E00	    			MOVLW	@@#lstr_22_ethernet
$98D0	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$98D2	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$98D6	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$98DA	$0E05	    			MOVLW	5
$98DC	$6E04	    			MOVWF	STACK_4, 0
$98DE	$0E00	    			MOVLW	0
$98E0	$6E05	    			MOVWF	STACK_4+1, 0
$98E2	$ECB1	F001			CALL	_mul_16x16_u
$98E6	$0E3E	    			MOVLW	_cellState
$98E8	$2600	    			ADDWF	STACK_0, 1, 0
$98EA	$0E04	    			MOVLW	@_cellState
$98EC	$2201	    			ADDWFC	STACK_0+1, 1, 0
$98EE	$0E01	    			MOVLW	1
$98F0	$2400	    			ADDWF	STACK_0, 0, 0
$98F2	$6EE9	    			MOVWF	FSR0L, 0
$98F4	$0E00	    			MOVLW	0
$98F6	$2001	    			ADDWFC	STACK_0+1, 0, 0
$98F8	$6EEA	    			MOVWF	FSR0L+1, 0
$98FA	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$98FE	$ECC1	F042			CALL	_sprintf
;ethernet.c,204 :: 			len += putShString(tmpBuf);
$9902	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9904	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9906	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9908	$6FCE	    			MOVWF	FARG_putShString+1, 1
$990A	$EC99	F042			CALL	_putShString
$990E	$5000	    			MOVF	STACK_0, 0, 0
$9910	$0106	    			MOVLB	6
$9912	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9914	$5001	    			MOVF	STACK_0+1, 0, 0
$9916	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,205 :: 			sprintf(tmpBuf,"%c,",cellState[tmp][2]);
$9918	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$991A	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$991C	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$991E	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$9920	$0E72	    			MOVLW	#lstr_23_ethernet
$9922	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$9924	$0ED2	    			MOVLW	@#lstr_23_ethernet
$9926	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$9928	$0E00	    			MOVLW	@@#lstr_23_ethernet
$992A	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$992C	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$9930	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$9934	$0E05	    			MOVLW	5
$9936	$6E04	    			MOVWF	STACK_4, 0
$9938	$0E00	    			MOVLW	0
$993A	$6E05	    			MOVWF	STACK_4+1, 0
$993C	$ECB1	F001			CALL	_mul_16x16_u
$9940	$0E3E	    			MOVLW	_cellState
$9942	$2600	    			ADDWF	STACK_0, 1, 0
$9944	$0E04	    			MOVLW	@_cellState
$9946	$2201	    			ADDWFC	STACK_0+1, 1, 0
$9948	$0E02	    			MOVLW	2
$994A	$2400	    			ADDWF	STACK_0, 0, 0
$994C	$6EE9	    			MOVWF	FSR0L, 0
$994E	$0E00	    			MOVLW	0
$9950	$2001	    			ADDWFC	STACK_0+1, 0, 0
$9952	$6EEA	    			MOVWF	FSR0L+1, 0
$9954	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$9958	$ECC1	F042			CALL	_sprintf
;ethernet.c,206 :: 			len += putShString(tmpBuf);
$995C	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$995E	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9960	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9962	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9964	$EC99	F042			CALL	_putShString
$9968	$5000	    			MOVF	STACK_0, 0, 0
$996A	$0106	    			MOVLB	6
$996C	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$996E	$5001	    			MOVF	STACK_0+1, 0, 0
$9970	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,207 :: 			sprintf(tmpBuf,"%c,",cellState[tmp][3]);
$9972	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9974	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$9976	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9978	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$997A	$0E76	    			MOVLW	#lstr_24_ethernet
$997C	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$997E	$0ED2	    			MOVLW	@#lstr_24_ethernet
$9980	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$9982	$0E00	    			MOVLW	@@#lstr_24_ethernet
$9984	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$9986	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$998A	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$998E	$0E05	    			MOVLW	5
$9990	$6E04	    			MOVWF	STACK_4, 0
$9992	$0E00	    			MOVLW	0
$9994	$6E05	    			MOVWF	STACK_4+1, 0
$9996	$ECB1	F001			CALL	_mul_16x16_u
$999A	$0E3E	    			MOVLW	_cellState
$999C	$2600	    			ADDWF	STACK_0, 1, 0
$999E	$0E04	    			MOVLW	@_cellState
$99A0	$2201	    			ADDWFC	STACK_0+1, 1, 0
$99A2	$0E03	    			MOVLW	3
$99A4	$2400	    			ADDWF	STACK_0, 0, 0
$99A6	$6EE9	    			MOVWF	FSR0L, 0
$99A8	$0E00	    			MOVLW	0
$99AA	$2001	    			ADDWFC	STACK_0+1, 0, 0
$99AC	$6EEA	    			MOVWF	FSR0L+1, 0
$99AE	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$99B2	$ECC1	F042			CALL	_sprintf
;ethernet.c,208 :: 			len += putShString(tmpBuf);
$99B6	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$99B8	$6FCD	    			MOVWF	FARG_putShString+0, 1
$99BA	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$99BC	$6FCE	    			MOVWF	FARG_putShString+1, 1
$99BE	$EC99	F042			CALL	_putShString
$99C2	$5000	    			MOVF	STACK_0, 0, 0
$99C4	$0106	    			MOVLB	6
$99C6	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$99C8	$5001	    			MOVF	STACK_0+1, 0, 0
$99CA	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,209 :: 			sprintf(tmpBuf,"%c\r\n",cellState[tmp][4]);
$99CC	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$99CE	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$99D0	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$99D2	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$99D4	$0E7A	    			MOVLW	#lstr_25_ethernet
$99D6	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$99D8	$0ED2	    			MOVLW	@#lstr_25_ethernet
$99DA	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$99DC	$0E00	    			MOVLW	@@#lstr_25_ethernet
$99DE	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$99E0	$C6AD	F000			MOVFF	Ethernet_UserTCP_tmp_L0, STACK_0
$99E4	$C6AE	F001			MOVFF	Ethernet_UserTCP_tmp_L0+1, STACK_0+1
$99E8	$0E05	    			MOVLW	5
$99EA	$6E04	    			MOVWF	STACK_4, 0
$99EC	$0E00	    			MOVLW	0
$99EE	$6E05	    			MOVWF	STACK_4+1, 0
$99F0	$ECB1	F001			CALL	_mul_16x16_u
$99F4	$0E3E	    			MOVLW	_cellState
$99F6	$2600	    			ADDWF	STACK_0, 1, 0
$99F8	$0E04	    			MOVLW	@_cellState
$99FA	$2201	    			ADDWFC	STACK_0+1, 1, 0
$99FC	$0E04	    			MOVLW	4
$99FE	$2400	    			ADDWF	STACK_0, 0, 0
$9A00	$6EE9	    			MOVWF	FSR0L, 0
$9A02	$0E00	    			MOVLW	0
$9A04	$2001	    			ADDWFC	STACK_0+1, 0, 0
$9A06	$6EEA	    			MOVWF	FSR0L+1, 0
$9A08	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$9A0C	$ECC1	F042			CALL	_sprintf
;ethernet.c,210 :: 			len += putShString(tmpBuf);
$9A10	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$9A12	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9A14	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$9A16	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9A18	$EC99	F042			CALL	_putShString
$9A1C	$5000	    			MOVF	STACK_0, 0, 0
$9A1E	$0106	    			MOVLB	6
$9A20	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9A22	$5001	    			MOVF	STACK_0+1, 0, 0
$9A24	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,211 :: 			}
$9A26	$	L_Ethernet_UserTCP_41:
;ethernet.c,212 :: 			}
$9A26	$	L_Ethernet_UserTCP_31:
;ethernet.c,213 :: 			}
$9A26	$	L_Ethernet_UserTCP_29:
;ethernet.c,146 :: 			for (tmp=1;tmp<15;tmp++)
$9A26	$0106	    			MOVLB	6
$9A28	$4BAD	    			INFSNZ	Ethernet_UserTCP_tmp_L0, 1, 1
$9A2A	$2BAE	    			INCF	Ethernet_UserTCP_tmp_L0+1, 1, 1
;ethernet.c,213 :: 			}
$9A2C	$D518	    			BRA	L_Ethernet_UserTCP_27
$9A2E	$	L_Ethernet_UserTCP_28:
;ethernet.c,214 :: 			}
$9A2E	$0106	    			MOVLB	6
$9A30	$EF7B	F052			GOTO	L_Ethernet_UserTCP_42
$9A34	$	L_Ethernet_UserTCP_26:
;ethernet.c,217 :: 			else if(!memcmp(getRequest+21, txt_rtcr, 4))  {  // команда 	rtcr:
$9A34	$0EA6	    			MOVLW	_getRequest+21
$9A36	$0108	    			MOVLB	8
$9A38	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$9A3A	$0E03	    			MOVLW	@_getRequest+21
$9A3C	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9A3E	$0E89	    			MOVLW	_txt_rtcr
$9A40	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$9A42	$0E04	    			MOVLW	@_txt_rtcr
$9A44	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$9A46	$0E04	    			MOVLW	4
$9A48	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$9A4A	$0E00	    			MOVLW	0
$9A4C	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9A4E	$EC23	F021			CALL	_memcmp
$9A52	$5000	    			MOVF	STACK_0, 0, 0
$9A54	$1001	    			IORWF	STACK_0+1, 0, 0
$9A56	$E11E	    			BNZ	L_Ethernet_UserTCP_43
;ethernet.c,218 :: 			len += putShConstString("&rtcr=") ;
$9A58	$0E80	    			MOVLW	#lstr_26_ethernet
$9A5A	$0106	    			MOVLB	6
$9A5C	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$9A5E	$0ED2	    			MOVLW	@#lstr_26_ethernet
$9A60	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$9A62	$0E00	    			MOVLW	@@#lstr_26_ethernet
$9A64	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$9A66	$EC68	F042			CALL	_putShConstString
$9A6A	$5000	    			MOVF	STACK_0, 0, 0
$9A6C	$0106	    			MOVLB	6
$9A6E	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9A70	$5001	    			MOVF	STACK_0+1, 0, 0
$9A72	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,219 :: 			rtc_read();     //  Чтение RTC  в dyna[]
$9A74	$ECE8	F042			CALL	_rtc_read
;ethernet.c,220 :: 			len += putShString(dyna) ;
$9A78	$0ECF	    			MOVLW	_dyna
$9A7A	$0106	    			MOVLB	6
$9A7C	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9A7E	$0E02	    			MOVLW	@_dyna
$9A80	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9A82	$EC99	F042			CALL	_putShString
$9A86	$5000	    			MOVF	STACK_0, 0, 0
$9A88	$0106	    			MOVLB	6
$9A8A	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9A8C	$5001	    			MOVF	STACK_0+1, 0, 0
$9A8E	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,221 :: 			}
$9A90	$EF7B	F052			GOTO	L_Ethernet_UserTCP_44
$9A94	$	L_Ethernet_UserTCP_43:
;ethernet.c,223 :: 			else if(!memcmp(getRequest+21, txt_rtds, 4)) {   // команда 	rtds:
$9A94	$0EA6	    			MOVLW	_getRequest+21
$9A96	$0108	    			MOVLB	8
$9A98	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$9A9A	$0E03	    			MOVLW	@_getRequest+21
$9A9C	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9A9E	$0E8E	    			MOVLW	_txt_rtds
$9AA0	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$9AA2	$0E04	    			MOVLW	@_txt_rtds
$9AA4	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$9AA6	$0E04	    			MOVLW	4
$9AA8	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$9AAA	$0E00	    			MOVLW	0
$9AAC	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9AAE	$EC23	F021			CALL	_memcmp
$9AB2	$5000	    			MOVF	STACK_0, 0, 0
$9AB4	$1001	    			IORWF	STACK_0+1, 0, 0
$9AB6	$A4D8	    			BTFSS	STATUS, Z, 0
$9AB8	$D0E0	    			BRA	L_Ethernet_UserTCP_45
;ethernet.c,224 :: 			len += putConstString("&rtds=") ;
$9ABA	$0E88	    			MOVLW	#lstr_27_ethernet
$9ABC	$0106	    			MOVLB	6
$9ABE	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9AC0	$0ED2	    			MOVLW	@#lstr_27_ethernet
$9AC2	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$9AC4	$0E00	    			MOVLW	@@#lstr_27_ethernet
$9AC6	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$9AC8	$EC2C	F03C			CALL	_Ethernet_putConstString
$9ACC	$5000	    			MOVF	STACK_0, 0, 0
$9ACE	$0106	    			MOVLB	6
$9AD0	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9AD2	$5001	    			MOVF	STACK_0+1, 0, 0
$9AD4	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,226 :: 			if (   ( ( (getRequest[28] - '0')*10 ) + (getRequest[29] - '0')  )  >31 )
$9AD6	$0E30	    			MOVLW	48
$9AD8	$0103	    			MOVLB	3
$9ADA	$5DAD	    			SUBWF	_getRequest+28, 0, 1
$9ADC	$6E00	    			MOVWF	STACK_0, 0
$9ADE	$6A01	    			CLRF	STACK_0+1, 0
$9AE0	$0E00	    			MOVLW	0
$9AE2	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$9AE4	$0E0A	    			MOVLW	10
$9AE6	$6E04	    			MOVWF	STACK_4, 0
$9AE8	$0E00	    			MOVLW	0
$9AEA	$6E05	    			MOVWF	STACK_4+1, 0
$9AEC	$ECC8	F01C			CALL	_mul_16x16_s
$9AF0	$0E30	    			MOVLW	48
$9AF2	$0103	    			MOVLB	3
$9AF4	$5DAE	    			SUBWF	_getRequest+29, 0, 1
$9AF6	$6E02	    			MOVWF	STACK_2, 0
$9AF8	$6A03	    			CLRF	STACK_2+1, 0
$9AFA	$0E00	    			MOVLW	0
$9AFC	$5A03	    			SUBWFB	STACK_2+1, 1, 0
$9AFE	$5000	    			MOVF	STACK_0, 0, 0
$9B00	$2602	    			ADDWF	STACK_2, 1, 0
$9B02	$5001	    			MOVF	STACK_0+1, 0, 0
$9B04	$2203	    			ADDWFC	STACK_2+1, 1, 0
$9B06	$0E80	    			MOVLW	128
$9B08	$6E00	    			MOVWF	STACK_0, 0
$9B0A	$0E80	    			MOVLW	128
$9B0C	$1803	    			XORWF	STACK_2+1, 0, 0
$9B0E	$5C00	    			SUBWF	STACK_0, 0, 0
$9B10	$E102	    			BNZ	L_Ethernet_UserTCP_131
$9B12	$5002	    			MOVF	STACK_2, 0, 0
$9B14	$081F	    			SUBLW	31
$9B16	$	L_Ethernet_UserTCP_131:
$9B16	$E210	    			BC	L_Ethernet_UserTCP_46
;ethernet.c,227 :: 			{ len += putConstString("error") ; goto ILLEGAL_COMMAND;  }  //  date
$9B18	$0E90	    			MOVLW	#lstr_28_ethernet
$9B1A	$0106	    			MOVLB	6
$9B1C	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9B1E	$0ED2	    			MOVLW	@#lstr_28_ethernet
$9B20	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$9B22	$0E00	    			MOVLW	@@#lstr_28_ethernet
$9B24	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$9B26	$EC2C	F03C			CALL	_Ethernet_putConstString
$9B2A	$5000	    			MOVF	STACK_0, 0, 0
$9B2C	$0106	    			MOVLB	6
$9B2E	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9B30	$5001	    			MOVF	STACK_0+1, 0, 0
$9B32	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
$9B34	$EF75	F054			GOTO	___Ethernet_UserTCP_ILLEGAL_COMMAND
$9B38	$	L_Ethernet_UserTCP_46:
;ethernet.c,228 :: 			if (   ( ( (getRequest[33] - '0')*10 ) + (getRequest[34] - '0')  )  >12 )
$9B38	$0E30	    			MOVLW	48
$9B3A	$0103	    			MOVLB	3
$9B3C	$5DB2	    			SUBWF	_getRequest+33, 0, 1
$9B3E	$6E00	    			MOVWF	STACK_0, 0
$9B40	$6A01	    			CLRF	STACK_0+1, 0
$9B42	$0E00	    			MOVLW	0
$9B44	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$9B46	$0E0A	    			MOVLW	10
$9B48	$6E04	    			MOVWF	STACK_4, 0
$9B4A	$0E00	    			MOVLW	0
$9B4C	$6E05	    			MOVWF	STACK_4+1, 0
$9B4E	$ECC8	F01C			CALL	_mul_16x16_s
$9B52	$0E30	    			MOVLW	48
$9B54	$0103	    			MOVLB	3
$9B56	$5DB3	    			SUBWF	_getRequest+34, 0, 1
$9B58	$6E02	    			MOVWF	STACK_2, 0
$9B5A	$6A03	    			CLRF	STACK_2+1, 0
$9B5C	$0E00	    			MOVLW	0
$9B5E	$5A03	    			SUBWFB	STACK_2+1, 1, 0
$9B60	$5000	    			MOVF	STACK_0, 0, 0
$9B62	$2602	    			ADDWF	STACK_2, 1, 0
$9B64	$5001	    			MOVF	STACK_0+1, 0, 0
$9B66	$2203	    			ADDWFC	STACK_2+1, 1, 0
$9B68	$0E80	    			MOVLW	128
$9B6A	$6E00	    			MOVWF	STACK_0, 0
$9B6C	$0E80	    			MOVLW	128
$9B6E	$1803	    			XORWF	STACK_2+1, 0, 0
$9B70	$5C00	    			SUBWF	STACK_0, 0, 0
$9B72	$E102	    			BNZ	L_Ethernet_UserTCP_132
$9B74	$5002	    			MOVF	STACK_2, 0, 0
$9B76	$080C	    			SUBLW	12
$9B78	$	L_Ethernet_UserTCP_132:
$9B78	$E210	    			BC	L_Ethernet_UserTCP_47
;ethernet.c,229 :: 			{ len += putConstString("error") ; goto ILLEGAL_COMMAND;  }   //  month
$9B7A	$0E96	    			MOVLW	#lstr_29_ethernet
$9B7C	$0106	    			MOVLB	6
$9B7E	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9B80	$0ED2	    			MOVLW	@#lstr_29_ethernet
$9B82	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$9B84	$0E00	    			MOVLW	@@#lstr_29_ethernet
$9B86	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$9B88	$EC2C	F03C			CALL	_Ethernet_putConstString
$9B8C	$5000	    			MOVF	STACK_0, 0, 0
$9B8E	$0106	    			MOVLB	6
$9B90	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9B92	$5001	    			MOVF	STACK_0+1, 0, 0
$9B94	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
$9B96	$EF75	F054			GOTO	___Ethernet_UserTCP_ILLEGAL_COMMAND
$9B9A	$	L_Ethernet_UserTCP_47:
;ethernet.c,230 :: 			if (   ( ( (getRequest[38] - '0')*10 ) + (getRequest[39] - '0')  )  >99 )
$9B9A	$0E30	    			MOVLW	48
$9B9C	$0103	    			MOVLB	3
$9B9E	$5DB7	    			SUBWF	_getRequest+38, 0, 1
$9BA0	$6E00	    			MOVWF	STACK_0, 0
$9BA2	$6A01	    			CLRF	STACK_0+1, 0
$9BA4	$0E00	    			MOVLW	0
$9BA6	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$9BA8	$0E0A	    			MOVLW	10
$9BAA	$6E04	    			MOVWF	STACK_4, 0
$9BAC	$0E00	    			MOVLW	0
$9BAE	$6E05	    			MOVWF	STACK_4+1, 0
$9BB0	$ECC8	F01C			CALL	_mul_16x16_s
$9BB4	$0E30	    			MOVLW	48
$9BB6	$0103	    			MOVLB	3
$9BB8	$5DB8	    			SUBWF	_getRequest+39, 0, 1
$9BBA	$6E02	    			MOVWF	STACK_2, 0
$9BBC	$6A03	    			CLRF	STACK_2+1, 0
$9BBE	$0E00	    			MOVLW	0
$9BC0	$5A03	    			SUBWFB	STACK_2+1, 1, 0
$9BC2	$5000	    			MOVF	STACK_0, 0, 0
$9BC4	$2602	    			ADDWF	STACK_2, 1, 0
$9BC6	$5001	    			MOVF	STACK_0+1, 0, 0
$9BC8	$2203	    			ADDWFC	STACK_2+1, 1, 0
$9BCA	$0E80	    			MOVLW	128
$9BCC	$6E00	    			MOVWF	STACK_0, 0
$9BCE	$0E80	    			MOVLW	128
$9BD0	$1803	    			XORWF	STACK_2+1, 0, 0
$9BD2	$5C00	    			SUBWF	STACK_0, 0, 0
$9BD4	$E102	    			BNZ	L_Ethernet_UserTCP_133
$9BD6	$5002	    			MOVF	STACK_2, 0, 0
$9BD8	$0863	    			SUBLW	99
$9BDA	$	L_Ethernet_UserTCP_133:
$9BDA	$E210	    			BC	L_Ethernet_UserTCP_48
;ethernet.c,231 :: 			{ len += putConstString("error") ; goto ILLEGAL_COMMAND;  }   //  year
$9BDC	$0E9C	    			MOVLW	#lstr_30_ethernet
$9BDE	$0106	    			MOVLB	6
$9BE0	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9BE2	$0ED2	    			MOVLW	@#lstr_30_ethernet
$9BE4	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$9BE6	$0E00	    			MOVLW	@@#lstr_30_ethernet
$9BE8	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$9BEA	$EC2C	F03C			CALL	_Ethernet_putConstString
$9BEE	$5000	    			MOVF	STACK_0, 0, 0
$9BF0	$0106	    			MOVLB	6
$9BF2	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9BF4	$5001	    			MOVF	STACK_0+1, 0, 0
$9BF6	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
$9BF8	$EF75	F054			GOTO	___Ethernet_UserTCP_ILLEGAL_COMMAND
$9BFC	$	L_Ethernet_UserTCP_48:
;ethernet.c,233 :: 			rtc_read();
$9BFC	$ECE8	F042			CALL	_rtc_read
;ethernet.c,234 :: 			date =     ( (getRequest[28] - '0')*10 ) + (getRequest[29] - '0');
$9C00	$0E30	    			MOVLW	48
$9C02	$0103	    			MOVLB	3
$9C04	$5DAD	    			SUBWF	_getRequest+28, 0, 1
$9C06	$6E00	    			MOVWF	STACK_0, 0
$9C08	$0E0A	    			MOVLW	10
$9C0A	$0200	    			MULWF	STACK_0, 0
$9C0C	$CFF3	F000			MOVFF	PRODL, STACK_0
$9C10	$0E30	    			MOVLW	48
$9C12	$5DAE	    			SUBWF	_getRequest+29, 0, 1
$9C14	$6E02	    			MOVWF	STACK_2, 0
$9C16	$5002	    			MOVF	STACK_2, 0, 0
$9C18	$2400	    			ADDWF	STACK_0, 0, 0
$9C1A	$0102	    			MOVLB	2
$9C1C	$6F69	    			MOVWF	_date, 1
;ethernet.c,235 :: 			month =    ( (getRequest[33] - '0')*10 ) + (getRequest[34] - '0');
$9C1E	$0E30	    			MOVLW	48
$9C20	$0103	    			MOVLB	3
$9C22	$5DB2	    			SUBWF	_getRequest+33, 0, 1
$9C24	$6E00	    			MOVWF	STACK_0, 0
$9C26	$0E0A	    			MOVLW	10
$9C28	$0200	    			MULWF	STACK_0, 0
$9C2A	$CFF3	F000			MOVFF	PRODL, STACK_0
$9C2E	$0E30	    			MOVLW	48
$9C30	$5DB3	    			SUBWF	_getRequest+34, 0, 1
$9C32	$6E02	    			MOVWF	STACK_2, 0
$9C34	$5002	    			MOVF	STACK_2, 0, 0
$9C36	$2400	    			ADDWF	STACK_0, 0, 0
$9C38	$0102	    			MOVLB	2
$9C3A	$6F6A	    			MOVWF	_month, 1
;ethernet.c,236 :: 			year =     ( (getRequest[38] - '0')*10 ) + (getRequest[39] - '0');
$9C3C	$0E30	    			MOVLW	48
$9C3E	$0103	    			MOVLB	3
$9C40	$5DB7	    			SUBWF	_getRequest+38, 0, 1
$9C42	$6E00	    			MOVWF	STACK_0, 0
$9C44	$0E0A	    			MOVLW	10
$9C46	$0200	    			MULWF	STACK_0, 0
$9C48	$CFF3	F000			MOVFF	PRODL, STACK_0
$9C4C	$0E30	    			MOVLW	48
$9C4E	$5DB8	    			SUBWF	_getRequest+39, 0, 1
$9C50	$6E02	    			MOVWF	STACK_2, 0
$9C52	$5002	    			MOVF	STACK_2, 0, 0
$9C54	$2400	    			ADDWF	STACK_0, 0, 0
$9C56	$0102	    			MOVLB	2
$9C58	$6F6B	    			MOVWF	_year, 1
;ethernet.c,237 :: 			rtc_set();  // установка часов
$9C5A	$ECED	F042			CALL	_rtc_set
;ethernet.c,239 :: 			len += putString(dyna) ;
$9C5E	$0ECF	    			MOVLW	_dyna
$9C60	$0108	    			MOVLB	8
$9C62	$6FAC	    			MOVWF	FARG_Ethernet_putString+0, 1
$9C64	$0E02	    			MOVLW	@_dyna
$9C66	$6FAD	    			MOVWF	FARG_Ethernet_putString+1, 1
$9C68	$ECFB	F025			CALL	_Ethernet_putString
$9C6C	$5000	    			MOVF	STACK_0, 0, 0
$9C6E	$0106	    			MOVLB	6
$9C70	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9C72	$5001	    			MOVF	STACK_0+1, 0, 0
$9C74	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,240 :: 			}
$9C76	$EF7B	F052			GOTO	L_Ethernet_UserTCP_49
$9C7A	$	L_Ethernet_UserTCP_45:
;ethernet.c,243 :: 			else if(!memcmp(getRequest+21, txt_rtss, 4)) {   // команда 	rtss:
$9C7A	$0EA6	    			MOVLW	_getRequest+21
$9C7C	$0108	    			MOVLB	8
$9C7E	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$9C80	$0E03	    			MOVLW	@_getRequest+21
$9C82	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9C84	$0E93	    			MOVLW	_txt_rtss
$9C86	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$9C88	$0E04	    			MOVLW	@_txt_rtss
$9C8A	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$9C8C	$0E04	    			MOVLW	4
$9C8E	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$9C90	$0E00	    			MOVLW	0
$9C92	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9C94	$EC23	F021			CALL	_memcmp
$9C98	$5000	    			MOVF	STACK_0, 0, 0
$9C9A	$1001	    			IORWF	STACK_0+1, 0, 0
$9C9C	$A4D8	    			BTFSS	STATUS, Z, 0
$9C9E	$D0DF	    			BRA	L_Ethernet_UserTCP_50
;ethernet.c,244 :: 			len += putConstString("&rtss=") ;
$9CA0	$0EA2	    			MOVLW	#lstr_31_ethernet
$9CA2	$0106	    			MOVLB	6
$9CA4	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9CA6	$0ED2	    			MOVLW	@#lstr_31_ethernet
$9CA8	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$9CAA	$0E00	    			MOVLW	@@#lstr_31_ethernet
$9CAC	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$9CAE	$EC2C	F03C			CALL	_Ethernet_putConstString
$9CB2	$5000	    			MOVF	STACK_0, 0, 0
$9CB4	$0106	    			MOVLB	6
$9CB6	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9CB8	$5001	    			MOVF	STACK_0+1, 0, 0
$9CBA	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,246 :: 			if (   ( ( (getRequest[28] - '0')*10 ) + (getRequest[29] - '0')  )  >24 )
$9CBC	$0E30	    			MOVLW	48
$9CBE	$0103	    			MOVLB	3
$9CC0	$5DAD	    			SUBWF	_getRequest+28, 0, 1
$9CC2	$6E00	    			MOVWF	STACK_0, 0
$9CC4	$6A01	    			CLRF	STACK_0+1, 0
$9CC6	$0E00	    			MOVLW	0
$9CC8	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$9CCA	$0E0A	    			MOVLW	10
$9CCC	$6E04	    			MOVWF	STACK_4, 0
$9CCE	$0E00	    			MOVLW	0
$9CD0	$6E05	    			MOVWF	STACK_4+1, 0
$9CD2	$ECC8	F01C			CALL	_mul_16x16_s
$9CD6	$0E30	    			MOVLW	48
$9CD8	$0103	    			MOVLB	3
$9CDA	$5DAE	    			SUBWF	_getRequest+29, 0, 1
$9CDC	$6E02	    			MOVWF	STACK_2, 0
$9CDE	$6A03	    			CLRF	STACK_2+1, 0
$9CE0	$0E00	    			MOVLW	0
$9CE2	$5A03	    			SUBWFB	STACK_2+1, 1, 0
$9CE4	$5000	    			MOVF	STACK_0, 0, 0
$9CE6	$2602	    			ADDWF	STACK_2, 1, 0
$9CE8	$5001	    			MOVF	STACK_0+1, 0, 0
$9CEA	$2203	    			ADDWFC	STACK_2+1, 1, 0
$9CEC	$0E80	    			MOVLW	128
$9CEE	$6E00	    			MOVWF	STACK_0, 0
$9CF0	$0E80	    			MOVLW	128
$9CF2	$1803	    			XORWF	STACK_2+1, 0, 0
$9CF4	$5C00	    			SUBWF	STACK_0, 0, 0
$9CF6	$E102	    			BNZ	L_Ethernet_UserTCP_134
$9CF8	$5002	    			MOVF	STACK_2, 0, 0
$9CFA	$0818	    			SUBLW	24
$9CFC	$	L_Ethernet_UserTCP_134:
$9CFC	$E210	    			BC	L_Ethernet_UserTCP_51
;ethernet.c,247 :: 			{ len += putConstString("error") ; goto ILLEGAL_COMMAND;  } //  hour
$9CFE	$0EAA	    			MOVLW	#lstr_32_ethernet
$9D00	$0106	    			MOVLB	6
$9D02	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9D04	$0ED2	    			MOVLW	@#lstr_32_ethernet
$9D06	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$9D08	$0E00	    			MOVLW	@@#lstr_32_ethernet
$9D0A	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$9D0C	$EC2C	F03C			CALL	_Ethernet_putConstString
$9D10	$5000	    			MOVF	STACK_0, 0, 0
$9D12	$0106	    			MOVLB	6
$9D14	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9D16	$5001	    			MOVF	STACK_0+1, 0, 0
$9D18	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
$9D1A	$EF75	F054			GOTO	___Ethernet_UserTCP_ILLEGAL_COMMAND
$9D1E	$	L_Ethernet_UserTCP_51:
;ethernet.c,248 :: 			if (   ( ( (getRequest[33] - '0')*10 ) + (getRequest[34] - '0')  )  >59 )
$9D1E	$0E30	    			MOVLW	48
$9D20	$0103	    			MOVLB	3
$9D22	$5DB2	    			SUBWF	_getRequest+33, 0, 1
$9D24	$6E00	    			MOVWF	STACK_0, 0
$9D26	$6A01	    			CLRF	STACK_0+1, 0
$9D28	$0E00	    			MOVLW	0
$9D2A	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$9D2C	$0E0A	    			MOVLW	10
$9D2E	$6E04	    			MOVWF	STACK_4, 0
$9D30	$0E00	    			MOVLW	0
$9D32	$6E05	    			MOVWF	STACK_4+1, 0
$9D34	$ECC8	F01C			CALL	_mul_16x16_s
$9D38	$0E30	    			MOVLW	48
$9D3A	$0103	    			MOVLB	3
$9D3C	$5DB3	    			SUBWF	_getRequest+34, 0, 1
$9D3E	$6E02	    			MOVWF	STACK_2, 0
$9D40	$6A03	    			CLRF	STACK_2+1, 0
$9D42	$0E00	    			MOVLW	0
$9D44	$5A03	    			SUBWFB	STACK_2+1, 1, 0
$9D46	$5000	    			MOVF	STACK_0, 0, 0
$9D48	$2602	    			ADDWF	STACK_2, 1, 0
$9D4A	$5001	    			MOVF	STACK_0+1, 0, 0
$9D4C	$2203	    			ADDWFC	STACK_2+1, 1, 0
$9D4E	$0E80	    			MOVLW	128
$9D50	$6E00	    			MOVWF	STACK_0, 0
$9D52	$0E80	    			MOVLW	128
$9D54	$1803	    			XORWF	STACK_2+1, 0, 0
$9D56	$5C00	    			SUBWF	STACK_0, 0, 0
$9D58	$E102	    			BNZ	L_Ethernet_UserTCP_135
$9D5A	$5002	    			MOVF	STACK_2, 0, 0
$9D5C	$083B	    			SUBLW	59
$9D5E	$	L_Ethernet_UserTCP_135:
$9D5E	$E210	    			BC	L_Ethernet_UserTCP_52
;ethernet.c,249 :: 			{ len += putConstString("error") ; goto ILLEGAL_COMMAND;  }   //  minute
$9D60	$0EB0	    			MOVLW	#lstr_33_ethernet
$9D62	$0106	    			MOVLB	6
$9D64	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9D66	$0ED2	    			MOVLW	@#lstr_33_ethernet
$9D68	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$9D6A	$0E00	    			MOVLW	@@#lstr_33_ethernet
$9D6C	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$9D6E	$EC2C	F03C			CALL	_Ethernet_putConstString
$9D72	$5000	    			MOVF	STACK_0, 0, 0
$9D74	$0106	    			MOVLB	6
$9D76	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9D78	$5001	    			MOVF	STACK_0+1, 0, 0
$9D7A	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
$9D7C	$EF75	F054			GOTO	___Ethernet_UserTCP_ILLEGAL_COMMAND
$9D80	$	L_Ethernet_UserTCP_52:
;ethernet.c,250 :: 			if (   ( ( (getRequest[38] - '0')*10 ) + (getRequest[39] - '0')  )  >59 )
$9D80	$0E30	    			MOVLW	48
$9D82	$0103	    			MOVLB	3
$9D84	$5DB7	    			SUBWF	_getRequest+38, 0, 1
$9D86	$6E00	    			MOVWF	STACK_0, 0
$9D88	$6A01	    			CLRF	STACK_0+1, 0
$9D8A	$0E00	    			MOVLW	0
$9D8C	$5A01	    			SUBWFB	STACK_0+1, 1, 0
$9D8E	$0E0A	    			MOVLW	10
$9D90	$6E04	    			MOVWF	STACK_4, 0
$9D92	$0E00	    			MOVLW	0
$9D94	$6E05	    			MOVWF	STACK_4+1, 0
$9D96	$ECC8	F01C			CALL	_mul_16x16_s
$9D9A	$0E30	    			MOVLW	48
$9D9C	$0103	    			MOVLB	3
$9D9E	$5DB8	    			SUBWF	_getRequest+39, 0, 1
$9DA0	$6E02	    			MOVWF	STACK_2, 0
$9DA2	$6A03	    			CLRF	STACK_2+1, 0
$9DA4	$0E00	    			MOVLW	0
$9DA6	$5A03	    			SUBWFB	STACK_2+1, 1, 0
$9DA8	$5000	    			MOVF	STACK_0, 0, 0
$9DAA	$2602	    			ADDWF	STACK_2, 1, 0
$9DAC	$5001	    			MOVF	STACK_0+1, 0, 0
$9DAE	$2203	    			ADDWFC	STACK_2+1, 1, 0
$9DB0	$0E80	    			MOVLW	128
$9DB2	$6E00	    			MOVWF	STACK_0, 0
$9DB4	$0E80	    			MOVLW	128
$9DB6	$1803	    			XORWF	STACK_2+1, 0, 0
$9DB8	$5C00	    			SUBWF	STACK_0, 0, 0
$9DBA	$E102	    			BNZ	L_Ethernet_UserTCP_136
$9DBC	$5002	    			MOVF	STACK_2, 0, 0
$9DBE	$083B	    			SUBLW	59
$9DC0	$	L_Ethernet_UserTCP_136:
$9DC0	$E210	    			BC	L_Ethernet_UserTCP_53
;ethernet.c,251 :: 			{ len += putConstString("error") ; goto ILLEGAL_COMMAND;  }   //  second
$9DC2	$0EB6	    			MOVLW	#lstr_34_ethernet
$9DC4	$0106	    			MOVLB	6
$9DC6	$6FCD	    			MOVWF	FARG_Ethernet_putConstString+0, 1
$9DC8	$0ED2	    			MOVLW	@#lstr_34_ethernet
$9DCA	$6FCE	    			MOVWF	FARG_Ethernet_putConstString+1, 1
$9DCC	$0E00	    			MOVLW	@@#lstr_34_ethernet
$9DCE	$6FCF	    			MOVWF	FARG_Ethernet_putConstString+2, 1
$9DD0	$EC2C	F03C			CALL	_Ethernet_putConstString
$9DD4	$5000	    			MOVF	STACK_0, 0, 0
$9DD6	$0106	    			MOVLB	6
$9DD8	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9DDA	$5001	    			MOVF	STACK_0+1, 0, 0
$9DDC	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
$9DDE	$EF75	F054			GOTO	___Ethernet_UserTCP_ILLEGAL_COMMAND
$9DE2	$	L_Ethernet_UserTCP_53:
;ethernet.c,253 :: 			rtc_read();
$9DE2	$ECE8	F042			CALL	_rtc_read
;ethernet.c,254 :: 			hour =     ( (getRequest[28] - '0')*10 ) + (getRequest[29] - '0');
$9DE6	$0E30	    			MOVLW	48
$9DE8	$0103	    			MOVLB	3
$9DEA	$5DAD	    			SUBWF	_getRequest+28, 0, 1
$9DEC	$6E00	    			MOVWF	STACK_0, 0
$9DEE	$0E0A	    			MOVLW	10
$9DF0	$0200	    			MULWF	STACK_0, 0
$9DF2	$CFF3	F000			MOVFF	PRODL, STACK_0
$9DF6	$0E30	    			MOVLW	48
$9DF8	$5DAE	    			SUBWF	_getRequest+29, 0, 1
$9DFA	$6E02	    			MOVWF	STACK_2, 0
$9DFC	$5002	    			MOVF	STACK_2, 0, 0
$9DFE	$2400	    			ADDWF	STACK_0, 0, 0
$9E00	$0102	    			MOVLB	2
$9E02	$6F68	    			MOVWF	_hour, 1
;ethernet.c,255 :: 			minute =   ( (getRequest[33] - '0')*10 ) + (getRequest[34] - '0');
$9E04	$0E30	    			MOVLW	48
$9E06	$0103	    			MOVLB	3
$9E08	$5DB2	    			SUBWF	_getRequest+33, 0, 1
$9E0A	$6E00	    			MOVWF	STACK_0, 0
$9E0C	$0E0A	    			MOVLW	10
$9E0E	$0200	    			MULWF	STACK_0, 0
$9E10	$CFF3	F000			MOVFF	PRODL, STACK_0
$9E14	$0E30	    			MOVLW	48
$9E16	$5DB3	    			SUBWF	_getRequest+34, 0, 1
$9E18	$6E02	    			MOVWF	STACK_2, 0
$9E1A	$5002	    			MOVF	STACK_2, 0, 0
$9E1C	$2400	    			ADDWF	STACK_0, 0, 0
$9E1E	$0102	    			MOVLB	2
$9E20	$6F67	    			MOVWF	_minute, 1
;ethernet.c,256 :: 			second =   ( (getRequest[38] - '0')*10 ) + (getRequest[39] - '0');
$9E22	$0E30	    			MOVLW	48
$9E24	$0103	    			MOVLB	3
$9E26	$5DB7	    			SUBWF	_getRequest+38, 0, 1
$9E28	$6E00	    			MOVWF	STACK_0, 0
$9E2A	$0E0A	    			MOVLW	10
$9E2C	$0200	    			MULWF	STACK_0, 0
$9E2E	$CFF3	F000			MOVFF	PRODL, STACK_0
$9E32	$0E30	    			MOVLW	48
$9E34	$5DB8	    			SUBWF	_getRequest+39, 0, 1
$9E36	$6E02	    			MOVWF	STACK_2, 0
$9E38	$5002	    			MOVF	STACK_2, 0, 0
$9E3A	$2400	    			ADDWF	STACK_0, 0, 0
$9E3C	$0102	    			MOVLB	2
$9E3E	$6F66	    			MOVWF	_second, 1
;ethernet.c,257 :: 			rtc_set();  // установка часов
$9E40	$ECED	F042			CALL	_rtc_set
;ethernet.c,259 :: 			len += putString(dyna) ;
$9E44	$0ECF	    			MOVLW	_dyna
$9E46	$0108	    			MOVLB	8
$9E48	$6FAC	    			MOVWF	FARG_Ethernet_putString+0, 1
$9E4A	$0E02	    			MOVLW	@_dyna
$9E4C	$6FAD	    			MOVWF	FARG_Ethernet_putString+1, 1
$9E4E	$ECFB	F025			CALL	_Ethernet_putString
$9E52	$5000	    			MOVF	STACK_0, 0, 0
$9E54	$0106	    			MOVLB	6
$9E56	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9E58	$5001	    			MOVF	STACK_0+1, 0, 0
$9E5A	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,260 :: 			}
$9E5C	$D34C	    			BRA	L_Ethernet_UserTCP_54
$9E5E	$	L_Ethernet_UserTCP_50:
;ethernet.c,262 :: 			else if(!memcmp(getRequest+21, txt_term, 4)) {   // команда 	term:
$9E5E	$0EA6	    			MOVLW	_getRequest+21
$9E60	$0108	    			MOVLB	8
$9E62	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$9E64	$0E03	    			MOVLW	@_getRequest+21
$9E66	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9E68	$0E98	    			MOVLW	_txt_term
$9E6A	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$9E6C	$0E04	    			MOVLW	@_txt_term
$9E6E	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$9E70	$0E04	    			MOVLW	4
$9E72	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$9E74	$0E00	    			MOVLW	0
$9E76	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9E78	$EC23	F021			CALL	_memcmp
$9E7C	$5000	    			MOVF	STACK_0, 0, 0
$9E7E	$1001	    			IORWF	STACK_0+1, 0, 0
$9E80	$E126	    			BNZ	L_Ethernet_UserTCP_55
;ethernet.c,263 :: 			len += putShConstString("&term=") ;
$9E82	$0EBC	    			MOVLW	#lstr_35_ethernet
$9E84	$0106	    			MOVLB	6
$9E86	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$9E88	$0ED2	    			MOVLW	@#lstr_35_ethernet
$9E8A	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$9E8C	$0E00	    			MOVLW	@@#lstr_35_ethernet
$9E8E	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$9E90	$EC68	F042			CALL	_putShConstString
$9E94	$5000	    			MOVF	STACK_0, 0, 0
$9E96	$0106	    			MOVLB	6
$9E98	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9E9A	$5001	    			MOVF	STACK_0+1, 0, 0
$9E9C	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,264 :: 			Num_to_0str(Termo_measure(), dyna);  //преобразует число (0..255) в строку из трех символов  лидирующие - нули
$9E9E	$ECBC	F043			CALL	_Termo_measure
$9EA2	$C000	F8D5			MOVFF	STACK_0, FARG_Num_to_0str+0
$9EA6	$0ECF	    			MOVLW	_dyna
$9EA8	$0108	    			MOVLB	8
$9EAA	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$9EAC	$0E02	    			MOVLW	@_dyna
$9EAE	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$9EB0	$EC4D	F017			CALL	_Num_to_0str
;ethernet.c,265 :: 			len += putShString(dyna) ;
$9EB4	$0ECF	    			MOVLW	_dyna
$9EB6	$0106	    			MOVLB	6
$9EB8	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9EBA	$0E02	    			MOVLW	@_dyna
$9EBC	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9EBE	$EC99	F042			CALL	_putShString
$9EC2	$5000	    			MOVF	STACK_0, 0, 0
$9EC4	$0106	    			MOVLB	6
$9EC6	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9EC8	$5001	    			MOVF	STACK_0+1, 0, 0
$9ECA	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,266 :: 			}
$9ECC	$D314	    			BRA	L_Ethernet_UserTCP_56
$9ECE	$	L_Ethernet_UserTCP_55:
;ethernet.c,270 :: 			else if(!memcmp(getRequest+21, txt_0read, 4))   {    //  подана  команда, 0read
$9ECE	$0EA6	    			MOVLW	_getRequest+21
$9ED0	$0108	    			MOVLB	8
$9ED2	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$9ED4	$0E03	    			MOVLW	@_getRequest+21
$9ED6	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9ED8	$0E17	    			MOVLW	_txt_0read
$9EDA	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$9EDC	$0E04	    			MOVLW	@_txt_0read
$9EDE	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$9EE0	$0E04	    			MOVLW	4
$9EE2	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$9EE4	$0E00	    			MOVLW	0
$9EE6	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9EE8	$EC23	F021			CALL	_memcmp
$9EEC	$5000	    			MOVF	STACK_0, 0, 0
$9EEE	$1001	    			IORWF	STACK_0+1, 0, 0
$9EF0	$E114	    			BNZ	L_Ethernet_UserTCP_57
;ethernet.c,271 :: 			cf_r_ptr =0;             // - сбросить продолжение read
$9EF2	$0104	    			MOVLB	4
$9EF4	$6B9D	    			CLRF	_cf_r_ptr, 1
$9EF6	$6B9E	    			CLRF	_cf_r_ptr+1, 1
$9EF8	$6B9F	    			CLRF	_cf_r_ptr+2, 1
$9EFA	$6BA0	    			CLRF	_cf_r_ptr+3, 1
;ethernet.c,272 :: 			len += putShConstString("&cf_fat_0read=ok") ;
$9EFC	$0EC4	    			MOVLW	#lstr_36_ethernet
$9EFE	$0106	    			MOVLB	6
$9F00	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$9F02	$0ED2	    			MOVLW	@#lstr_36_ethernet
$9F04	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$9F06	$0E00	    			MOVLW	@@#lstr_36_ethernet
$9F08	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$9F0A	$EC68	F042			CALL	_putShConstString
$9F0E	$5000	    			MOVF	STACK_0, 0, 0
$9F10	$0106	    			MOVLB	6
$9F12	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9F14	$5001	    			MOVF	STACK_0+1, 0, 0
$9F16	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,273 :: 			}
$9F18	$D2EE	    			BRA	L_Ethernet_UserTCP_58
$9F1A	$	L_Ethernet_UserTCP_57:
;ethernet.c,275 :: 			else if(!memcmp(getRequest+21, txt_read, 4)) {   // команда 	read:
$9F1A	$0EA6	    			MOVLW	_getRequest+21
$9F1C	$0108	    			MOVLB	8
$9F1E	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$9F20	$0E03	    			MOVLW	@_getRequest+21
$9F22	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$9F24	$0E1D	    			MOVLW	_txt_read
$9F26	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$9F28	$0E04	    			MOVLW	@_txt_read
$9F2A	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$9F2C	$0E04	    			MOVLW	4
$9F2E	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$9F30	$0E00	    			MOVLW	0
$9F32	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$9F34	$EC23	F021			CALL	_memcmp
$9F38	$5000	    			MOVF	STACK_0, 0, 0
$9F3A	$1001	    			IORWF	STACK_0+1, 0, 0
$9F3C	$A4D8	    			BTFSS	STATUS, Z, 0
$9F3E	$D1FB	    			BRA	L_Ethernet_UserTCP_59
;ethernet.c,276 :: 			fread_num[0] =  getRequest[35];
$9F40	$C3B4	F6B3			MOVFF	_getRequest+35, Ethernet_UserTCP_fread_num_L0
;ethernet.c,277 :: 			fread_num[1] =  getRequest[36];
$9F44	$C3B5	F6B4			MOVFF	_getRequest+36, Ethernet_UserTCP_fread_num_L0+1
;ethernet.c,278 :: 			fread_num[2] =  getRequest[37];
$9F48	$C3B6	F6B5			MOVFF	_getRequest+37, Ethernet_UserTCP_fread_num_L0+2
;ethernet.c,279 :: 			if ( (LOG_TXT[5] !=  fread_num[0]) || (LOG_TXT[6] !=  fread_num[1]) || (LOG_TXT[7] !=  fread_num[2]) ) {
$9F4C	$0104	    			MOVLB	4
$9F4E	$51A6	    			MOVF	_LOG_TXT+5, 0, 1
$9F50	$0103	    			MOVLB	3
$9F52	$19B4	    			XORWF	_getRequest+35, 0, 1
$9F54	$E10A	    			BNZ	L679_ex_L_Ethernet_UserTCP_62
$9F56	$0104	    			MOVLB	4
$9F58	$51A7	    			MOVF	_LOG_TXT+6, 0, 1
$9F5A	$0106	    			MOVLB	6
$9F5C	$19B4	    			XORWF	Ethernet_UserTCP_fread_num_L0+1, 0, 1
$9F5E	$E105	    			BNZ	L679_ex_L_Ethernet_UserTCP_62
$9F60	$0104	    			MOVLB	4
$9F62	$51A8	    			MOVF	_LOG_TXT+7, 0, 1
$9F64	$0106	    			MOVLB	6
$9F66	$19B5	    			XORWF	Ethernet_UserTCP_fread_num_L0+2, 0, 1
$9F68	$E005	    			BZ	L_Ethernet_UserTCP_62
$9F6A	$	L679_ex_L_Ethernet_UserTCP_62:
;ethernet.c,280 :: 			cf_r_ptr =0;  // поступила команда чтения другого файла
$9F6A	$0104	    			MOVLB	4
$9F6C	$6B9D	    			CLRF	_cf_r_ptr, 1
$9F6E	$6B9E	    			CLRF	_cf_r_ptr+1, 1
$9F70	$6B9F	    			CLRF	_cf_r_ptr+2, 1
$9F72	$6BA0	    			CLRF	_cf_r_ptr+3, 1
;ethernet.c,281 :: 			}
$9F74	$	L_Ethernet_UserTCP_62:
;ethernet.c,282 :: 			LOG_TXT[5] =  fread_num[0];
$9F74	$C6B3	F4A6			MOVFF	Ethernet_UserTCP_fread_num_L0, _LOG_TXT+5
;ethernet.c,283 :: 			LOG_TXT[6] =  fread_num[1];
$9F78	$C6B4	F4A7			MOVFF	Ethernet_UserTCP_fread_num_L0+1, _LOG_TXT+6
;ethernet.c,284 :: 			LOG_TXT[7] =  fread_num[2];
$9F7C	$C6B5	F4A8			MOVFF	Ethernet_UserTCP_fread_num_L0+2, _LOG_TXT+7
;ethernet.c,286 :: 			if(cf_r_ptr ==0) flag_read_fat = 0;  //flag_read_fat: FAT в состоянии read =1, иначе 0
$9F80	$0E00	    			MOVLW	0
$9F82	$6E00	    			MOVWF	STACK_0, 0
$9F84	$0104	    			MOVLB	4
$9F86	$19A0	    			XORWF	_cf_r_ptr+3, 0, 1
$9F88	$E108	    			BNZ	L_Ethernet_UserTCP_137
$9F8A	$5000	    			MOVF	STACK_0, 0, 0
$9F8C	$199F	    			XORWF	_cf_r_ptr+2, 0, 1
$9F8E	$E105	    			BNZ	L_Ethernet_UserTCP_137
$9F90	$5000	    			MOVF	STACK_0, 0, 0
$9F92	$199E	    			XORWF	_cf_r_ptr+1, 0, 1
$9F94	$E102	    			BNZ	L_Ethernet_UserTCP_137
$9F96	$519D	    			MOVF	_cf_r_ptr, 0, 1
$9F98	$0A00	    			XORLW	0
$9F9A	$	L_Ethernet_UserTCP_137:
$9F9A	$E102	    			BNZ	L_Ethernet_UserTCP_63
$9F9C	$0102	    			MOVLB	2
$9F9E	$6B7D	    			CLRF	_flag_read_fat, 1
$9FA0	$	L_Ethernet_UserTCP_63:
;ethernet.c,287 :: 			len += putShConstString("&file_num=");
$9FA0	$0ED6	    			MOVLW	#lstr_37_ethernet
$9FA2	$0106	    			MOVLB	6
$9FA4	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$9FA6	$0ED2	    			MOVLW	@#lstr_37_ethernet
$9FA8	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$9FAA	$0E00	    			MOVLW	@@#lstr_37_ethernet
$9FAC	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$9FAE	$EC68	F042			CALL	_putShConstString
$9FB2	$5000	    			MOVF	STACK_0, 0, 0
$9FB4	$0106	    			MOVLB	6
$9FB6	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9FB8	$5001	    			MOVF	STACK_0+1, 0, 0
$9FBA	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,288 :: 			len += putShString(fread_num) ;
$9FBC	$0EB3	    			MOVLW	Ethernet_UserTCP_fread_num_L0
$9FBE	$6FCD	    			MOVWF	FARG_putShString+0, 1
$9FC0	$0E06	    			MOVLW	@Ethernet_UserTCP_fread_num_L0
$9FC2	$6FCE	    			MOVWF	FARG_putShString+1, 1
$9FC4	$EC99	F042			CALL	_putShString
$9FC8	$5000	    			MOVF	STACK_0, 0, 0
$9FCA	$0106	    			MOVLB	6
$9FCC	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9FCE	$5001	    			MOVF	STACK_0+1, 0, 0
$9FD0	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,290 :: 			if(flag_read_fat != 1) { //flag_read_fat: FAT в состоянии read =1, иначе 0
$9FD2	$0102	    			MOVLB	2
$9FD4	$517D	    			MOVF	_flag_read_fat, 0, 1
$9FD6	$0A01	    			XORLW	1
$9FD8	$B4D8	    			BTFSC	STATUS, Z, 0
$9FDA	$D0B6	    			BRA	L_Ethernet_UserTCP_64
;ethernet.c,291 :: 			len += putShConstString("&cf_fat_init=") ;
$9FDC	$0EE2	    			MOVLW	#lstr_38_ethernet
$9FDE	$0106	    			MOVLB	6
$9FE0	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$9FE2	$0ED2	    			MOVLW	@#lstr_38_ethernet
$9FE4	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$9FE6	$0E00	    			MOVLW	@@#lstr_38_ethernet
$9FE8	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$9FEA	$EC68	F042			CALL	_putShConstString
$9FEE	$5000	    			MOVF	STACK_0, 0, 0
$9FF0	$0106	    			MOVLB	6
$9FF2	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$9FF4	$5001	    			MOVF	STACK_0+1, 0, 0
$9FF6	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,292 :: 			tmp =  Cf_Fat_Init(&portH,&portE);
$9FF8	$0E87	    			MOVLW	PORTH
$9FFA	$0108	    			MOVLB	8
$9FFC	$6FD5	    			MOVWF	FARG_Cf_Fat_Init+0, 1
$9FFE	$0E0F	    			MOVLW	@PORTH
$A000	$6FD6	    			MOVWF	FARG_Cf_Fat_Init+1, 1
$A002	$0E84	    			MOVLW	PORTE
$A004	$6FD7	    			MOVWF	FARG_Cf_Fat_Init+2, 1
$A006	$0E0F	    			MOVLW	@PORTE
$A008	$6FD8	    			MOVWF	FARG_Cf_Fat_Init+3, 1
$A00A	$ECFC	F011			CALL	_Cf_Fat_Init
$A00E	$C000	F6AD			MOVFF	STACK_0, Ethernet_UserTCP_tmp_L0
$A012	$0E00	    			MOVLW	0
$A014	$0106	    			MOVLB	6
$A016	$6FAE	    			MOVWF	Ethernet_UserTCP_tmp_L0+1, 1
;ethernet.c,293 :: 			if ( tmp != 0)  {// Cf_Fat_Init err
$A018	$0E00	    			MOVLW	0
$A01A	$19AE	    			XORWF	Ethernet_UserTCP_tmp_L0+1, 0, 1
$A01C	$E102	    			BNZ	L_Ethernet_UserTCP_138
$A01E	$0E00	    			MOVLW	0
$A020	$19AD	    			XORWF	Ethernet_UserTCP_tmp_L0, 0, 1
$A022	$	L_Ethernet_UserTCP_138:
$A022	$E018	    			BZ	L_Ethernet_UserTCP_65
;ethernet.c,294 :: 			intToStr(tmp, dyna) ;     // Cf_Fat_Init err
$A024	$C6AD	F8D5			MOVFF	Ethernet_UserTCP_tmp_L0, FARG_IntToStr+0
$A028	$C6AE	F8D6			MOVFF	Ethernet_UserTCP_tmp_L0+1, FARG_IntToStr+1
$A02C	$0ECF	    			MOVLW	_dyna
$A02E	$0108	    			MOVLB	8
$A030	$6FD7	    			MOVWF	FARG_IntToStr+2, 1
$A032	$0E02	    			MOVLW	@_dyna
$A034	$6FD8	    			MOVWF	FARG_IntToStr+3, 1
$A036	$EC83	F016			CALL	_IntToStr
;ethernet.c,295 :: 			len += putShString(dyna) ;
$A03A	$0ECF	    			MOVLW	_dyna
$A03C	$0106	    			MOVLB	6
$A03E	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A040	$0E02	    			MOVLW	@_dyna
$A042	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A044	$EC99	F042			CALL	_putShString
$A048	$5000	    			MOVF	STACK_0, 0, 0
$A04A	$0106	    			MOVLB	6
$A04C	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A04E	$5001	    			MOVF	STACK_0+1, 0, 0
$A050	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,296 :: 			goto  TXT_READ_END;
$A052	$D16C	    			BRA	___Ethernet_UserTCP_TXT_READ_END
;ethernet.c,297 :: 			}
$A054	$	L_Ethernet_UserTCP_65:
;ethernet.c,298 :: 			len += putShConstString("ok") ;
$A054	$0EF0	    			MOVLW	#lstr_39_ethernet
$A056	$0106	    			MOVLB	6
$A058	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A05A	$0ED2	    			MOVLW	@#lstr_39_ethernet
$A05C	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A05E	$0E00	    			MOVLW	@@#lstr_39_ethernet
$A060	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A062	$EC68	F042			CALL	_putShConstString
$A066	$5000	    			MOVF	STACK_0, 0, 0
$A068	$0106	    			MOVLB	6
$A06A	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A06C	$5001	    			MOVF	STACK_0+1, 0, 0
$A06E	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,299 :: 			len += putShConstString("&cf_fat_assign0x00=") ;
$A070	$0EF4	    			MOVLW	#lstr_40_ethernet
$A072	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A074	$0ED2	    			MOVLW	@#lstr_40_ethernet
$A076	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A078	$0E00	    			MOVLW	@@#lstr_40_ethernet
$A07A	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A07C	$EC68	F042			CALL	_putShConstString
$A080	$5000	    			MOVF	STACK_0, 0, 0
$A082	$0106	    			MOVLB	6
$A084	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A086	$5001	    			MOVF	STACK_0+1, 0, 0
$A088	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,300 :: 			tmp = Cf_Fat_Assign(LOG_TXT,0x00);
$A08A	$0EA1	    			MOVLW	_LOG_TXT
$A08C	$0108	    			MOVLB	8
$A08E	$6FD5	    			MOVWF	FARG_Cf_Fat_Assign+0, 1
$A090	$0E04	    			MOVLW	@_LOG_TXT
$A092	$6FD6	    			MOVWF	FARG_Cf_Fat_Assign+1, 1
$A094	$6BD7	    			CLRF	FARG_Cf_Fat_Assign+2, 1
$A096	$EC44	F014			CALL	_Cf_Fat_Assign
$A09A	$C000	F6AD			MOVFF	STACK_0, Ethernet_UserTCP_tmp_L0
$A09E	$0E00	    			MOVLW	0
$A0A0	$0106	    			MOVLB	6
$A0A2	$6FAE	    			MOVWF	Ethernet_UserTCP_tmp_L0+1, 1
;ethernet.c,301 :: 			if ( tmp != 1) { // Cf_Fat_Assign   if file does not exist and no new file is created.
$A0A4	$0E00	    			MOVLW	0
$A0A6	$19AE	    			XORWF	Ethernet_UserTCP_tmp_L0+1, 0, 1
$A0A8	$E102	    			BNZ	L_Ethernet_UserTCP_139
$A0AA	$0E01	    			MOVLW	1
$A0AC	$19AD	    			XORWF	Ethernet_UserTCP_tmp_L0, 0, 1
$A0AE	$	L_Ethernet_UserTCP_139:
$A0AE	$E00F	    			BZ	L_Ethernet_UserTCP_66
;ethernet.c,302 :: 			len += putShConstString("no_file") ;
$A0B0	$0E08	    			MOVLW	#lstr_41_ethernet
$A0B2	$0106	    			MOVLB	6
$A0B4	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A0B6	$0ED3	    			MOVLW	@#lstr_41_ethernet
$A0B8	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A0BA	$0E00	    			MOVLW	@@#lstr_41_ethernet
$A0BC	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A0BE	$EC68	F042			CALL	_putShConstString
$A0C2	$5000	    			MOVF	STACK_0, 0, 0
$A0C4	$0106	    			MOVLB	6
$A0C6	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A0C8	$5001	    			MOVF	STACK_0+1, 0, 0
$A0CA	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,303 :: 			goto  TXT_READ_END;
$A0CC	$D12F	    			BRA	___Ethernet_UserTCP_TXT_READ_END
;ethernet.c,304 :: 			}
$A0CE	$	L_Ethernet_UserTCP_66:
;ethernet.c,305 :: 			len += putShConstString("file_ok") ;
$A0CE	$0E10	    			MOVLW	#lstr_42_ethernet
$A0D0	$0106	    			MOVLB	6
$A0D2	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A0D4	$0ED3	    			MOVLW	@#lstr_42_ethernet
$A0D6	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A0D8	$0E00	    			MOVLW	@@#lstr_42_ethernet
$A0DA	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A0DC	$EC68	F042			CALL	_putShConstString
$A0E0	$5000	    			MOVF	STACK_0, 0, 0
$A0E2	$0106	    			MOVLB	6
$A0E4	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A0E6	$5001	    			MOVF	STACK_0+1, 0, 0
$A0E8	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,306 :: 			Cf_Fat_Reset(&size);            // To read file, procedure returns size of file
$A0EA	$0EA9	    			MOVLW	Ethernet_UserTCP_size_L0
$A0EC	$0108	    			MOVLB	8
$A0EE	$6FD5	    			MOVWF	FARG_Cf_Fat_Reset+0, 1
$A0F0	$0E06	    			MOVLW	@Ethernet_UserTCP_size_L0
$A0F2	$6FD6	    			MOVWF	FARG_Cf_Fat_Reset+1, 1
$A0F4	$ECE7	F016			CALL	_Cf_Fat_Reset
;ethernet.c,307 :: 			len += putShConstString("&size=") ;
$A0F8	$0E18	    			MOVLW	#lstr_43_ethernet
$A0FA	$0106	    			MOVLB	6
$A0FC	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A0FE	$0ED3	    			MOVLW	@#lstr_43_ethernet
$A100	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A102	$0E00	    			MOVLW	@@#lstr_43_ethernet
$A104	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A106	$EC68	F042			CALL	_putShConstString
$A10A	$5000	    			MOVF	STACK_0, 0, 0
$A10C	$0106	    			MOVLB	6
$A10E	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A110	$5001	    			MOVF	STACK_0+1, 0, 0
$A112	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,308 :: 			My_long_to_str( size, dyna );  // преобразует long число в строку из 11 символов, лидирующие нули
$A114	$C6A9	F6CD			MOVFF	Ethernet_UserTCP_size_L0, FARG_My_long_to_str+0
$A118	$C6AA	F6CE			MOVFF	Ethernet_UserTCP_size_L0+1, FARG_My_long_to_str+1
$A11C	$C6AB	F6CF			MOVFF	Ethernet_UserTCP_size_L0+2, FARG_My_long_to_str+2
$A120	$C6AC	F6D0			MOVFF	Ethernet_UserTCP_size_L0+3, FARG_My_long_to_str+3
$A124	$0ECF	    			MOVLW	_dyna
$A126	$6FD1	    			MOVWF	FARG_My_long_to_str+4, 1
$A128	$0E02	    			MOVLW	@_dyna
$A12A	$6FD2	    			MOVWF	FARG_My_long_to_str+5, 1
$A12C	$EC14	F044			CALL	_My_long_to_str
;ethernet.c,310 :: 			len += putShString(dyna) ;
$A130	$0ECF	    			MOVLW	_dyna
$A132	$0106	    			MOVLB	6
$A134	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A136	$0E02	    			MOVLW	@_dyna
$A138	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A13A	$EC99	F042			CALL	_putShString
$A13E	$5000	    			MOVF	STACK_0, 0, 0
$A140	$0106	    			MOVLB	6
$A142	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A144	$5001	    			MOVF	STACK_0+1, 0, 0
$A146	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,311 :: 			} // end    if(flag_read_fat != 1)
$A148	$	L_Ethernet_UserTCP_64:
;ethernet.c,312 :: 			len += putShConstString("&cf_fat_read=\n") ;
$A148	$0E20	    			MOVLW	#lstr_44_ethernet
$A14A	$0106	    			MOVLB	6
$A14C	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A14E	$0ED3	    			MOVLW	@#lstr_44_ethernet
$A150	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A152	$0E00	    			MOVLW	@@#lstr_44_ethernet
$A154	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A156	$EC68	F042			CALL	_putShConstString
$A15A	$5000	    			MOVF	STACK_0, 0, 0
$A15C	$0106	    			MOVLB	6
$A15E	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A160	$5001	    			MOVF	STACK_0+1, 0, 0
$A162	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,313 :: 			if (cf_r_ptr !=0 )    {      // считывание журнала уже начато
$A164	$0E00	    			MOVLW	0
$A166	$6E00	    			MOVWF	STACK_0, 0
$A168	$0104	    			MOVLB	4
$A16A	$19A0	    			XORWF	_cf_r_ptr+3, 0, 1
$A16C	$E108	    			BNZ	L_Ethernet_UserTCP_140
$A16E	$5000	    			MOVF	STACK_0, 0, 0
$A170	$199F	    			XORWF	_cf_r_ptr+2, 0, 1
$A172	$E105	    			BNZ	L_Ethernet_UserTCP_140
$A174	$5000	    			MOVF	STACK_0, 0, 0
$A176	$199E	    			XORWF	_cf_r_ptr+1, 0, 1
$A178	$E102	    			BNZ	L_Ethernet_UserTCP_140
$A17A	$519D	    			MOVF	_cf_r_ptr, 0, 1
$A17C	$0A00	    			XORLW	0
$A17E	$	L_Ethernet_UserTCP_140:
$A17E	$E031	    			BZ	L_Ethernet_UserTCP_67
;ethernet.c,314 :: 			if(flag_read_fat != 1) { //flag_read_fat: FAT в состоянии read =1, иначе 0
$A180	$0102	    			MOVLB	2
$A182	$517D	    			MOVF	_flag_read_fat, 0, 1
$A184	$0A01	    			XORLW	1
$A186	$E02A	    			BZ	L_Ethernet_UserTCP_68
;ethernet.c,315 :: 			for (i = 1; i < cf_r_ptr ; i++)  // 1..1280
$A188	$0E01	    			MOVLW	1
$A18A	$0106	    			MOVLB	6
$A18C	$6FA5	    			MOVWF	Ethernet_UserTCP_i_L0, 1
$A18E	$0E00	    			MOVLW	0
$A190	$6FA6	    			MOVWF	Ethernet_UserTCP_i_L0+1, 1
$A192	$6FA7	    			MOVWF	Ethernet_UserTCP_i_L0+2, 1
$A194	$6FA8	    			MOVWF	Ethernet_UserTCP_i_L0+3, 1
$A196	$	L_Ethernet_UserTCP_69:
$A196	$0104	    			MOVLB	4
$A198	$51A0	    			MOVF	_cf_r_ptr+3, 0, 1
$A19A	$0106	    			MOVLB	6
$A19C	$5DA8	    			SUBWF	Ethernet_UserTCP_i_L0+3, 0, 1
$A19E	$E10E	    			BNZ	L_Ethernet_UserTCP_141
$A1A0	$0104	    			MOVLB	4
$A1A2	$519F	    			MOVF	_cf_r_ptr+2, 0, 1
$A1A4	$0106	    			MOVLB	6
$A1A6	$5DA7	    			SUBWF	Ethernet_UserTCP_i_L0+2, 0, 1
$A1A8	$E109	    			BNZ	L_Ethernet_UserTCP_141
$A1AA	$0104	    			MOVLB	4
$A1AC	$519E	    			MOVF	_cf_r_ptr+1, 0, 1
$A1AE	$0106	    			MOVLB	6
$A1B0	$5DA6	    			SUBWF	Ethernet_UserTCP_i_L0+1, 0, 1
$A1B2	$E104	    			BNZ	L_Ethernet_UserTCP_141
$A1B4	$0104	    			MOVLB	4
$A1B6	$519D	    			MOVF	_cf_r_ptr, 0, 1
$A1B8	$0106	    			MOVLB	6
$A1BA	$5DA5	    			SUBWF	Ethernet_UserTCP_i_L0, 0, 1
$A1BC	$	L_Ethernet_UserTCP_141:
$A1BC	$E20F	    			BC	L_Ethernet_UserTCP_70
;ethernet.c,317 :: 			Cf_Fat_Read(caracter);    // пройти уже считанное
$A1BE	$0EB1	    			MOVLW	Ethernet_UserTCP_caracter_L0
$A1C0	$0108	    			MOVLB	8
$A1C2	$6FD5	    			MOVWF	FARG_Cf_Fat_Read+0, 1
$A1C4	$0E06	    			MOVLW	@Ethernet_UserTCP_caracter_L0
$A1C6	$6FD6	    			MOVWF	FARG_Cf_Fat_Read+1, 1
$A1C8	$EC09	F017			CALL	_Cf_Fat_Read
;ethernet.c,318 :: 			}
$A1CC	$	L_Ethernet_UserTCP_71:
;ethernet.c,315 :: 			for (i = 1; i < cf_r_ptr ; i++)  // 1..1280
$A1CC	$0E01	    			MOVLW	1
$A1CE	$0106	    			MOVLB	6
$A1D0	$27A5	    			ADDWF	Ethernet_UserTCP_i_L0, 1, 1
$A1D2	$0E00	    			MOVLW	0
$A1D4	$23A6	    			ADDWFC	Ethernet_UserTCP_i_L0+1, 1, 1
$A1D6	$23A7	    			ADDWFC	Ethernet_UserTCP_i_L0+2, 1, 1
$A1D8	$23A8	    			ADDWFC	Ethernet_UserTCP_i_L0+3, 1, 1
;ethernet.c,318 :: 			}
$A1DA	$D7DD	    			BRA	L_Ethernet_UserTCP_69
$A1DC	$	L_Ethernet_UserTCP_70:
;ethernet.c,319 :: 			}
$A1DC	$	L_Ethernet_UserTCP_68:
;ethernet.c,320 :: 			}
$A1DC	$0106	    			MOVLB	6
$A1DE	$0106	    			MOVLB	6
$A1E0	$D007	    			BRA	L_Ethernet_UserTCP_72
$A1E2	$	L_Ethernet_UserTCP_67:
;ethernet.c,321 :: 			else  cf_r_ptr =1;
$A1E2	$0E01	    			MOVLW	1
$A1E4	$0104	    			MOVLB	4
$A1E6	$6F9D	    			MOVWF	_cf_r_ptr, 1
$A1E8	$0E00	    			MOVLW	0
$A1EA	$6F9E	    			MOVWF	_cf_r_ptr+1, 1
$A1EC	$6F9F	    			MOVWF	_cf_r_ptr+2, 1
$A1EE	$6FA0	    			MOVWF	_cf_r_ptr+3, 1
$A1F0	$	L_Ethernet_UserTCP_72:
;ethernet.c,322 :: 			flag_read_fat = 1;  //flag_read_fat: FAT в состоянии read =1, иначе 0
$A1F0	$0E01	    			MOVLW	1
$A1F2	$0102	    			MOVLB	2
$A1F4	$6F7D	    			MOVWF	_flag_read_fat, 1
;ethernet.c,323 :: 			j = 0; // число переносов строк
$A1F6	$0106	    			MOVLB	6
$A1F8	$6BAF	    			CLRF	Ethernet_UserTCP_j_L0, 1
$A1FA	$6BB0	    			CLRF	Ethernet_UserTCP_j_L0+1, 1
;ethernet.c,324 :: 			for (i = 1; i < 1361 ; i++)    // i=1..1281
$A1FC	$0E01	    			MOVLW	1
$A1FE	$6FA5	    			MOVWF	Ethernet_UserTCP_i_L0, 1
$A200	$0E00	    			MOVLW	0
$A202	$6FA6	    			MOVWF	Ethernet_UserTCP_i_L0+1, 1
$A204	$6FA7	    			MOVWF	Ethernet_UserTCP_i_L0+2, 1
$A206	$6FA8	    			MOVWF	Ethernet_UserTCP_i_L0+3, 1
$A208	$	L_Ethernet_UserTCP_73:
$A208	$0E00	    			MOVLW	0
$A20A	$0106	    			MOVLB	6
$A20C	$5DA8	    			SUBWF	Ethernet_UserTCP_i_L0+3, 0, 1
$A20E	$E108	    			BNZ	L_Ethernet_UserTCP_142
$A210	$0E00	    			MOVLW	0
$A212	$5DA7	    			SUBWF	Ethernet_UserTCP_i_L0+2, 0, 1
$A214	$E105	    			BNZ	L_Ethernet_UserTCP_142
$A216	$0E05	    			MOVLW	5
$A218	$5DA6	    			SUBWF	Ethernet_UserTCP_i_L0+1, 0, 1
$A21A	$E102	    			BNZ	L_Ethernet_UserTCP_142
$A21C	$0E51	    			MOVLW	81
$A21E	$5DA5	    			SUBWF	Ethernet_UserTCP_i_L0, 0, 1
$A220	$	L_Ethernet_UserTCP_142:
$A220	$B0D8	    			BTFSC	STATUS, C, 0
$A222	$D084	    			BRA	L_Ethernet_UserTCP_74
;ethernet.c,326 :: 			Cf_Fat_Read(caracter);
$A224	$0EB1	    			MOVLW	Ethernet_UserTCP_caracter_L0
$A226	$0108	    			MOVLB	8
$A228	$6FD5	    			MOVWF	FARG_Cf_Fat_Read+0, 1
$A22A	$0E06	    			MOVLW	@Ethernet_UserTCP_caracter_L0
$A22C	$6FD6	    			MOVWF	FARG_Cf_Fat_Read+1, 1
$A22E	$EC09	F017			CALL	_Cf_Fat_Read
;ethernet.c,327 :: 			caracter[1] = '\0';
$A232	$0106	    			MOVLB	6
$A234	$6BB2	    			CLRF	Ethernet_UserTCP_caracter_L0+1, 1
;ethernet.c,328 :: 			len += putShString(caracter) ;
$A236	$0EB1	    			MOVLW	Ethernet_UserTCP_caracter_L0
$A238	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A23A	$0E06	    			MOVLW	@Ethernet_UserTCP_caracter_L0
$A23C	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A23E	$EC99	F042			CALL	_putShString
$A242	$5000	    			MOVF	STACK_0, 0, 0
$A244	$0106	    			MOVLB	6
$A246	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A248	$5001	    			MOVF	STACK_0+1, 0, 0
$A24A	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,329 :: 			cf_r_ptr++;
$A24C	$0E01	    			MOVLW	1
$A24E	$0104	    			MOVLB	4
$A250	$279D	    			ADDWF	_cf_r_ptr, 1, 1
$A252	$0E00	    			MOVLW	0
$A254	$239E	    			ADDWFC	_cf_r_ptr+1, 1, 1
$A256	$239F	    			ADDWFC	_cf_r_ptr+2, 1, 1
$A258	$23A0	    			ADDWFC	_cf_r_ptr+3, 1, 1
;ethernet.c,330 :: 			if (cf_r_ptr > size) {cf_r_ptr = 0; len += putShConstString("\n&continued=false") ; break; } // вывод завершен
$A25A	$51A0	    			MOVF	_cf_r_ptr+3, 0, 1
$A25C	$0106	    			MOVLB	6
$A25E	$5DAC	    			SUBWF	Ethernet_UserTCP_size_L0+3, 0, 1
$A260	$E10E	    			BNZ	L_Ethernet_UserTCP_143
$A262	$0104	    			MOVLB	4
$A264	$519F	    			MOVF	_cf_r_ptr+2, 0, 1
$A266	$0106	    			MOVLB	6
$A268	$5DAB	    			SUBWF	Ethernet_UserTCP_size_L0+2, 0, 1
$A26A	$E109	    			BNZ	L_Ethernet_UserTCP_143
$A26C	$0104	    			MOVLB	4
$A26E	$519E	    			MOVF	_cf_r_ptr+1, 0, 1
$A270	$0106	    			MOVLB	6
$A272	$5DAA	    			SUBWF	Ethernet_UserTCP_size_L0+1, 0, 1
$A274	$E104	    			BNZ	L_Ethernet_UserTCP_143
$A276	$0104	    			MOVLB	4
$A278	$519D	    			MOVF	_cf_r_ptr, 0, 1
$A27A	$0106	    			MOVLB	6
$A27C	$5DA9	    			SUBWF	Ethernet_UserTCP_size_L0, 0, 1
$A27E	$	L_Ethernet_UserTCP_143:
$A27E	$E214	    			BC	L_Ethernet_UserTCP_76
$A280	$0104	    			MOVLB	4
$A282	$6B9D	    			CLRF	_cf_r_ptr, 1
$A284	$6B9E	    			CLRF	_cf_r_ptr+1, 1
$A286	$6B9F	    			CLRF	_cf_r_ptr+2, 1
$A288	$6BA0	    			CLRF	_cf_r_ptr+3, 1
$A28A	$0E30	    			MOVLW	#lstr_45_ethernet
$A28C	$0106	    			MOVLB	6
$A28E	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A290	$0ED3	    			MOVLW	@#lstr_45_ethernet
$A292	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A294	$0E00	    			MOVLW	@@#lstr_45_ethernet
$A296	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A298	$EC68	F042			CALL	_putShConstString
$A29C	$5000	    			MOVF	STACK_0, 0, 0
$A29E	$0106	    			MOVLB	6
$A2A0	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A2A2	$5001	    			MOVF	STACK_0+1, 0, 0
$A2A4	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
$A2A6	$D042	    			BRA	L_Ethernet_UserTCP_74
$A2A8	$	L_Ethernet_UserTCP_76:
;ethernet.c,331 :: 			if (caracter[0]=='\n') j++;
$A2A8	$0106	    			MOVLB	6
$A2AA	$51B1	    			MOVF	Ethernet_UserTCP_caracter_L0, 0, 1
$A2AC	$0A0A	    			XORLW	10
$A2AE	$E102	    			BNZ	L_Ethernet_UserTCP_77
$A2B0	$4BAF	    			INFSNZ	Ethernet_UserTCP_j_L0, 1, 1
$A2B2	$2BB0	    			INCF	Ethernet_UserTCP_j_L0+1, 1, 1
$A2B4	$	L_Ethernet_UserTCP_77:
;ethernet.c,332 :: 			if (j==4) { len+= putShConstString("&continued=true"); break;}   // вывод 10 строк завершен
$A2B4	$0E00	    			MOVLW	0
$A2B6	$0106	    			MOVLB	6
$A2B8	$19B0	    			XORWF	Ethernet_UserTCP_j_L0+1, 0, 1
$A2BA	$E102	    			BNZ	L_Ethernet_UserTCP_144
$A2BC	$0E04	    			MOVLW	4
$A2BE	$19AF	    			XORWF	Ethernet_UserTCP_j_L0, 0, 1
$A2C0	$	L_Ethernet_UserTCP_144:
$A2C0	$E10F	    			BNZ	L_Ethernet_UserTCP_78
$A2C2	$0E42	    			MOVLW	#lstr_46_ethernet
$A2C4	$0106	    			MOVLB	6
$A2C6	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A2C8	$0ED3	    			MOVLW	@#lstr_46_ethernet
$A2CA	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A2CC	$0E00	    			MOVLW	@@#lstr_46_ethernet
$A2CE	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A2D0	$EC68	F042			CALL	_putShConstString
$A2D4	$5000	    			MOVF	STACK_0, 0, 0
$A2D6	$0106	    			MOVLB	6
$A2D8	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A2DA	$5001	    			MOVF	STACK_0+1, 0, 0
$A2DC	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
$A2DE	$D026	    			BRA	L_Ethernet_UserTCP_74
$A2E0	$	L_Ethernet_UserTCP_78:
;ethernet.c,333 :: 			if ( i == 1360 )  {len += putShConstString("\n&continued=error"); break; }  // ошибка формата записи :вывод макс числа символов завершен
$A2E0	$0E00	    			MOVLW	0
$A2E2	$6E00	    			MOVWF	STACK_0, 0
$A2E4	$0106	    			MOVLB	6
$A2E6	$19A8	    			XORWF	Ethernet_UserTCP_i_L0+3, 0, 1
$A2E8	$E108	    			BNZ	L_Ethernet_UserTCP_145
$A2EA	$5000	    			MOVF	STACK_0, 0, 0
$A2EC	$19A7	    			XORWF	Ethernet_UserTCP_i_L0+2, 0, 1
$A2EE	$E105	    			BNZ	L_Ethernet_UserTCP_145
$A2F0	$0E05	    			MOVLW	5
$A2F2	$19A6	    			XORWF	Ethernet_UserTCP_i_L0+1, 0, 1
$A2F4	$E102	    			BNZ	L_Ethernet_UserTCP_145
$A2F6	$51A5	    			MOVF	Ethernet_UserTCP_i_L0, 0, 1
$A2F8	$0A50	    			XORLW	80
$A2FA	$	L_Ethernet_UserTCP_145:
$A2FA	$E10F	    			BNZ	L_Ethernet_UserTCP_79
$A2FC	$0E52	    			MOVLW	#lstr_47_ethernet
$A2FE	$0106	    			MOVLB	6
$A300	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A302	$0ED3	    			MOVLW	@#lstr_47_ethernet
$A304	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A306	$0E00	    			MOVLW	@@#lstr_47_ethernet
$A308	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A30A	$EC68	F042			CALL	_putShConstString
$A30E	$5000	    			MOVF	STACK_0, 0, 0
$A310	$0106	    			MOVLB	6
$A312	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A314	$5001	    			MOVF	STACK_0+1, 0, 0
$A316	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
$A318	$D009	    			BRA	L_Ethernet_UserTCP_74
$A31A	$	L_Ethernet_UserTCP_79:
;ethernet.c,335 :: 			}
$A31A	$	L_Ethernet_UserTCP_75:
;ethernet.c,324 :: 			for (i = 1; i < 1361 ; i++)    // i=1..1281
$A31A	$0106	    			MOVLB	6
$A31C	$0E01	    			MOVLW	1
$A31E	$0106	    			MOVLB	6
$A320	$27A5	    			ADDWF	Ethernet_UserTCP_i_L0, 1, 1
$A322	$0E00	    			MOVLW	0
$A324	$23A6	    			ADDWFC	Ethernet_UserTCP_i_L0+1, 1, 1
$A326	$23A7	    			ADDWFC	Ethernet_UserTCP_i_L0+2, 1, 1
$A328	$23A8	    			ADDWFC	Ethernet_UserTCP_i_L0+3, 1, 1
;ethernet.c,335 :: 			}
$A32A	$D76E	    			BRA	L_Ethernet_UserTCP_73
$A32C	$	L_Ethernet_UserTCP_74:
;ethernet.c,336 :: 			TXT_READ_END:  tmp =0;
$A32C	$	___Ethernet_UserTCP_TXT_READ_END:
$A32C	$0106	    			MOVLB	6
$A32E	$0106	    			MOVLB	6
$A330	$6BAD	    			CLRF	Ethernet_UserTCP_tmp_L0, 1
$A332	$6BAE	    			CLRF	Ethernet_UserTCP_tmp_L0+1, 1
;ethernet.c,337 :: 			} // end else if(!memcmp(getRequest+21, txt_read, 4))    // команда 	read:
$A334	$D0E0	    			BRA	L_Ethernet_UserTCP_80
$A336	$	L_Ethernet_UserTCP_59:
;ethernet.c,341 :: 			else if(!memcmp(getRequest+21, txt_cf_d, 4))   { // команда 	cf_d:
$A336	$0EA6	    			MOVLW	_getRequest+21
$A338	$0108	    			MOVLB	8
$A33A	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$A33C	$0E03	    			MOVLW	@_getRequest+21
$A33E	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$A340	$0EAE	    			MOVLW	_txt_cf_d
$A342	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$A344	$0E04	    			MOVLW	@_txt_cf_d
$A346	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$A348	$0E04	    			MOVLW	4
$A34A	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$A34C	$0E00	    			MOVLW	0
$A34E	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$A350	$EC23	F021			CALL	_memcmp
$A354	$5000	    			MOVF	STACK_0, 0, 0
$A356	$1001	    			IORWF	STACK_0+1, 0, 0
$A358	$A4D8	    			BTFSS	STATUS, Z, 0
$A35A	$D0CB	    			BRA	L_Ethernet_UserTCP_81
;ethernet.c,342 :: 			len += putShConstString("&\ncf_fat_init=") ;
$A35C	$0E64	    			MOVLW	#lstr_48_ethernet
$A35E	$0106	    			MOVLB	6
$A360	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A362	$0ED3	    			MOVLW	@#lstr_48_ethernet
$A364	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A366	$0E00	    			MOVLW	@@#lstr_48_ethernet
$A368	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A36A	$EC68	F042			CALL	_putShConstString
$A36E	$5000	    			MOVF	STACK_0, 0, 0
$A370	$0106	    			MOVLB	6
$A372	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A374	$5001	    			MOVF	STACK_0+1, 0, 0
$A376	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,343 :: 			tmp =  Cf_Fat_Init(&portH,&portE);
$A378	$0E87	    			MOVLW	PORTH
$A37A	$0108	    			MOVLB	8
$A37C	$6FD5	    			MOVWF	FARG_Cf_Fat_Init+0, 1
$A37E	$0E0F	    			MOVLW	@PORTH
$A380	$6FD6	    			MOVWF	FARG_Cf_Fat_Init+1, 1
$A382	$0E84	    			MOVLW	PORTE
$A384	$6FD7	    			MOVWF	FARG_Cf_Fat_Init+2, 1
$A386	$0E0F	    			MOVLW	@PORTE
$A388	$6FD8	    			MOVWF	FARG_Cf_Fat_Init+3, 1
$A38A	$ECFC	F011			CALL	_Cf_Fat_Init
$A38E	$C000	F6AD			MOVFF	STACK_0, Ethernet_UserTCP_tmp_L0
$A392	$0E00	    			MOVLW	0
$A394	$0106	    			MOVLB	6
$A396	$6FAE	    			MOVWF	Ethernet_UserTCP_tmp_L0+1, 1
;ethernet.c,344 :: 			if ( tmp == 0) { // Cf_Fat_Init
$A398	$0E00	    			MOVLW	0
$A39A	$19AE	    			XORWF	Ethernet_UserTCP_tmp_L0+1, 0, 1
$A39C	$E102	    			BNZ	L_Ethernet_UserTCP_146
$A39E	$0E00	    			MOVLW	0
$A3A0	$19AD	    			XORWF	Ethernet_UserTCP_tmp_L0, 0, 1
$A3A2	$	L_Ethernet_UserTCP_146:
$A3A2	$A4D8	    			BTFSS	STATUS, Z, 0
$A3A4	$D08D	    			BRA	L_Ethernet_UserTCP_82
;ethernet.c,345 :: 			len += putShConstString(" ok ") ;
$A3A6	$0E74	    			MOVLW	#lstr_49_ethernet
$A3A8	$0106	    			MOVLB	6
$A3AA	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A3AC	$0ED3	    			MOVLW	@#lstr_49_ethernet
$A3AE	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A3B0	$0E00	    			MOVLW	@@#lstr_49_ethernet
$A3B2	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A3B4	$EC68	F042			CALL	_putShConstString
$A3B8	$5000	    			MOVF	STACK_0, 0, 0
$A3BA	$0106	    			MOVLB	6
$A3BC	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A3BE	$5001	    			MOVF	STACK_0+1, 0, 0
$A3C0	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,346 :: 			len += putShConstString("\ncf_fat_assign0x00=") ;
$A3C2	$0E7A	    			MOVLW	#lstr_50_ethernet
$A3C4	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A3C6	$0ED3	    			MOVLW	@#lstr_50_ethernet
$A3C8	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A3CA	$0E00	    			MOVLW	@@#lstr_50_ethernet
$A3CC	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A3CE	$EC68	F042			CALL	_putShConstString
$A3D2	$5000	    			MOVF	STACK_0, 0, 0
$A3D4	$0106	    			MOVLB	6
$A3D6	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A3D8	$5001	    			MOVF	STACK_0+1, 0, 0
$A3DA	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,347 :: 			tmp = Cf_Fat_Assign(LOG_TXT,0x00);
$A3DC	$0EA1	    			MOVLW	_LOG_TXT
$A3DE	$0108	    			MOVLB	8
$A3E0	$6FD5	    			MOVWF	FARG_Cf_Fat_Assign+0, 1
$A3E2	$0E04	    			MOVLW	@_LOG_TXT
$A3E4	$6FD6	    			MOVWF	FARG_Cf_Fat_Assign+1, 1
$A3E6	$6BD7	    			CLRF	FARG_Cf_Fat_Assign+2, 1
$A3E8	$EC44	F014			CALL	_Cf_Fat_Assign
$A3EC	$C000	F6AD			MOVFF	STACK_0, Ethernet_UserTCP_tmp_L0
$A3F0	$0E00	    			MOVLW	0
$A3F2	$0106	    			MOVLB	6
$A3F4	$6FAE	    			MOVWF	Ethernet_UserTCP_tmp_L0+1, 1
;ethernet.c,348 :: 			if ( tmp == 0) { // Cf_Fat_Assign
$A3F6	$0E00	    			MOVLW	0
$A3F8	$19AE	    			XORWF	Ethernet_UserTCP_tmp_L0+1, 0, 1
$A3FA	$E102	    			BNZ	L_Ethernet_UserTCP_147
$A3FC	$0E00	    			MOVLW	0
$A3FE	$19AD	    			XORWF	Ethernet_UserTCP_tmp_L0, 0, 1
$A400	$	L_Ethernet_UserTCP_147:
$A400	$E10F	    			BNZ	L_Ethernet_UserTCP_83
;ethernet.c,349 :: 			len += putShConstString("no file") ;
$A402	$0E8E	    			MOVLW	#lstr_51_ethernet
$A404	$0106	    			MOVLB	6
$A406	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A408	$0ED3	    			MOVLW	@#lstr_51_ethernet
$A40A	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A40C	$0E00	    			MOVLW	@@#lstr_51_ethernet
$A40E	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A410	$EC68	F042			CALL	_putShConstString
$A414	$5000	    			MOVF	STACK_0, 0, 0
$A416	$0106	    			MOVLB	6
$A418	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A41A	$5001	    			MOVF	STACK_0+1, 0, 0
$A41C	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,350 :: 			}
$A41E	$D04F	    			BRA	L_Ethernet_UserTCP_84
$A420	$	L_Ethernet_UserTCP_83:
;ethernet.c,351 :: 			else if ( tmp == 1) { // Cf_Fat_Assign
$A420	$0E00	    			MOVLW	0
$A422	$0106	    			MOVLB	6
$A424	$19AE	    			XORWF	Ethernet_UserTCP_tmp_L0+1, 0, 1
$A426	$E102	    			BNZ	L_Ethernet_UserTCP_148
$A428	$0E01	    			MOVLW	1
$A42A	$19AD	    			XORWF	Ethernet_UserTCP_tmp_L0, 0, 1
$A42C	$	L_Ethernet_UserTCP_148:
$A42C	$E131	    			BNZ	L_Ethernet_UserTCP_85
;ethernet.c,352 :: 			len += putShConstString("file ok") ;
$A42E	$0E96	    			MOVLW	#lstr_52_ethernet
$A430	$0106	    			MOVLB	6
$A432	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A434	$0ED3	    			MOVLW	@#lstr_52_ethernet
$A436	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A438	$0E00	    			MOVLW	@@#lstr_52_ethernet
$A43A	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A43C	$EC68	F042			CALL	_putShConstString
$A440	$5000	    			MOVF	STACK_0, 0, 0
$A442	$0106	    			MOVLB	6
$A444	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A446	$5001	    			MOVF	STACK_0+1, 0, 0
$A448	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,353 :: 			len += putShConstString("\ncf_fat_delete=") ;
$A44A	$0E9E	    			MOVLW	#lstr_53_ethernet
$A44C	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A44E	$0ED3	    			MOVLW	@#lstr_53_ethernet
$A450	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A452	$0E00	    			MOVLW	@@#lstr_53_ethernet
$A454	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A456	$EC68	F042			CALL	_putShConstString
$A45A	$5000	    			MOVF	STACK_0, 0, 0
$A45C	$0106	    			MOVLB	6
$A45E	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A460	$5001	    			MOVF	STACK_0+1, 0, 0
$A462	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,354 :: 			Cf_Fat_Delete();
$A464	$EC57	F044			CALL	_Cf_Fat_Delete
;ethernet.c,355 :: 			cf_r_ptr = 0;
$A468	$0104	    			MOVLB	4
$A46A	$6B9D	    			CLRF	_cf_r_ptr, 1
$A46C	$6B9E	    			CLRF	_cf_r_ptr+1, 1
$A46E	$6B9F	    			CLRF	_cf_r_ptr+2, 1
$A470	$6BA0	    			CLRF	_cf_r_ptr+3, 1
;ethernet.c,356 :: 			len += putShConstString(" ok ") ;
$A472	$0EAE	    			MOVLW	#lstr_54_ethernet
$A474	$0106	    			MOVLB	6
$A476	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A478	$0ED3	    			MOVLW	@#lstr_54_ethernet
$A47A	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A47C	$0E00	    			MOVLW	@@#lstr_54_ethernet
$A47E	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A480	$EC68	F042			CALL	_putShConstString
$A484	$5000	    			MOVF	STACK_0, 0, 0
$A486	$0106	    			MOVLB	6
$A488	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A48A	$5001	    			MOVF	STACK_0+1, 0, 0
$A48C	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,357 :: 			} // end else if ( tmp == 1)  // Cf_Fat_Assign
$A48E	$D017	    			BRA	L_Ethernet_UserTCP_86
$A490	$	L_Ethernet_UserTCP_85:
;ethernet.c,359 :: 			intToStr(tmp, dyna) ;     // Cf_Fat_Assign err
$A490	$C6AD	F8D5			MOVFF	Ethernet_UserTCP_tmp_L0, FARG_IntToStr+0
$A494	$C6AE	F8D6			MOVFF	Ethernet_UserTCP_tmp_L0+1, FARG_IntToStr+1
$A498	$0ECF	    			MOVLW	_dyna
$A49A	$0108	    			MOVLB	8
$A49C	$6FD7	    			MOVWF	FARG_IntToStr+2, 1
$A49E	$0E02	    			MOVLW	@_dyna
$A4A0	$6FD8	    			MOVWF	FARG_IntToStr+3, 1
$A4A2	$EC83	F016			CALL	_IntToStr
;ethernet.c,360 :: 			len += putShString(dyna) ;
$A4A6	$0ECF	    			MOVLW	_dyna
$A4A8	$0106	    			MOVLB	6
$A4AA	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A4AC	$0E02	    			MOVLW	@_dyna
$A4AE	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A4B0	$EC99	F042			CALL	_putShString
$A4B4	$5000	    			MOVF	STACK_0, 0, 0
$A4B6	$0106	    			MOVLB	6
$A4B8	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A4BA	$5001	    			MOVF	STACK_0+1, 0, 0
$A4BC	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,361 :: 			}
$A4BE	$	L_Ethernet_UserTCP_86:
$A4BE	$	L_Ethernet_UserTCP_84:
;ethernet.c,362 :: 			}   // end if ( tmp == 0)  // Cf_Fat_Init
$A4BE	$D017	    			BRA	L_Ethernet_UserTCP_87
$A4C0	$	L_Ethernet_UserTCP_82:
;ethernet.c,364 :: 			intToStr(tmp, dyna) ;     // Cf_Fat_Init err
$A4C0	$C6AD	F8D5			MOVFF	Ethernet_UserTCP_tmp_L0, FARG_IntToStr+0
$A4C4	$C6AE	F8D6			MOVFF	Ethernet_UserTCP_tmp_L0+1, FARG_IntToStr+1
$A4C8	$0ECF	    			MOVLW	_dyna
$A4CA	$0108	    			MOVLB	8
$A4CC	$6FD7	    			MOVWF	FARG_IntToStr+2, 1
$A4CE	$0E02	    			MOVLW	@_dyna
$A4D0	$6FD8	    			MOVWF	FARG_IntToStr+3, 1
$A4D2	$EC83	F016			CALL	_IntToStr
;ethernet.c,365 :: 			len += putShString(dyna) ;
$A4D6	$0ECF	    			MOVLW	_dyna
$A4D8	$0106	    			MOVLB	6
$A4DA	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A4DC	$0E02	    			MOVLW	@_dyna
$A4DE	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A4E0	$EC99	F042			CALL	_putShString
$A4E4	$5000	    			MOVF	STACK_0, 0, 0
$A4E6	$0106	    			MOVLB	6
$A4E8	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A4EA	$5001	    			MOVF	STACK_0+1, 0, 0
$A4EC	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,366 :: 			}
$A4EE	$	L_Ethernet_UserTCP_87:
;ethernet.c,367 :: 			}
$A4EE	$0106	    			MOVLB	6
$A4F0	$D002	    			BRA	L_Ethernet_UserTCP_88
$A4F2	$	L_Ethernet_UserTCP_81:
;ethernet.c,369 :: 			else   goto ILLEGAL_COMMAND;
$A4F2	$0106	    			MOVLB	6
$A4F4	$D1FA	    			BRA	___Ethernet_UserTCP_ILLEGAL_COMMAND
$A4F6	$	L_Ethernet_UserTCP_88:
$A4F6	$	L_Ethernet_UserTCP_80:
$A4F6	$	L_Ethernet_UserTCP_58:
$A4F6	$	L_Ethernet_UserTCP_56:
$A4F6	$	L_Ethernet_UserTCP_54:
$A4F6	$	L_Ethernet_UserTCP_49:
$A4F6	$	L_Ethernet_UserTCP_44:
$A4F6	$	L_Ethernet_UserTCP_42:
;ethernet.c,371 :: 			} // end if ( cmd_port_num == 0)  // команда для всей стойки
$A4F6	$0106	    			MOVLB	6
$A4F8	$0106	    			MOVLB	6
$A4FA	$D1F4	    			BRA	L_Ethernet_UserTCP_89
$A4FC	$	L_Ethernet_UserTCP_25:
;ethernet.c,374 :: 			if(!memcmp(getRequest+21, txt_open, 4))  { // команда open
$A4FC	$0EA6	    			MOVLW	_getRequest+21
$A4FE	$0108	    			MOVLB	8
$A500	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$A502	$0E03	    			MOVLW	@_getRequest+21
$A504	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$A506	$0EB3	    			MOVLW	_txt_open
$A508	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$A50A	$0E04	    			MOVLW	@_txt_open
$A50C	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$A50E	$0E04	    			MOVLW	4
$A510	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$A512	$0E00	    			MOVLW	0
$A514	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$A516	$EC23	F021			CALL	_memcmp
$A51A	$5000	    			MOVF	STACK_0, 0, 0
$A51C	$1001	    			IORWF	STACK_0+1, 0, 0
$A51E	$E142	    			BNZ	L_Ethernet_UserTCP_90
;ethernet.c,375 :: 			len += putShConstString("&open_port=") ;
$A520	$0EB4	    			MOVLW	#lstr_55_ethernet
$A522	$0106	    			MOVLB	6
$A524	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A526	$0ED3	    			MOVLW	@#lstr_55_ethernet
$A528	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A52A	$0E00	    			MOVLW	@@#lstr_55_ethernet
$A52C	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A52E	$EC68	F042			CALL	_putShConstString
$A532	$5000	    			MOVF	STACK_0, 0, 0
$A534	$0106	    			MOVLB	6
$A536	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A538	$5001	    			MOVF	STACK_0+1, 0, 0
$A53A	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,376 :: 			Num_to_0str(cmd_port_num, dyna);  // преобразует число (0..255) в строку из трех символов  лидирующие - нули
$A53C	$C437	F8D5			MOVFF	_cmd_port_num, FARG_Num_to_0str+0
$A540	$0ECF	    			MOVLW	_dyna
$A542	$0108	    			MOVLB	8
$A544	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$A546	$0E02	    			MOVLW	@_dyna
$A548	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$A54A	$EC4D	F017			CALL	_Num_to_0str
;ethernet.c,378 :: 			len += putShString(dyna) ;
$A54E	$0ECF	    			MOVLW	_dyna
$A550	$0106	    			MOVLB	6
$A552	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A554	$0E02	    			MOVLW	@_dyna
$A556	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A558	$EC99	F042			CALL	_putShString
$A55C	$5000	    			MOVF	STACK_0, 0, 0
$A55E	$0106	    			MOVLB	6
$A560	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A562	$5001	    			MOVF	STACK_0+1, 0, 0
$A564	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,379 :: 			if ( (cmd_port_num > 40) || (cmd_port_num < 1) ) goto ILLEGAL_COMMAND;
$A566	$0104	    			MOVLB	4
$A568	$5137	    			MOVF	_cmd_port_num, 0, 1
$A56A	$0828	    			SUBLW	40
$A56C	$E303	    			BNC	L947_ex_L_Ethernet_UserTCP_93
$A56E	$0E01	    			MOVLW	1
$A570	$5D37	    			SUBWF	_cmd_port_num, 0, 1
$A572	$E201	    			BC	L_Ethernet_UserTCP_93
$A574	$	L947_ex_L_Ethernet_UserTCP_93:
$A574	$D1BA	    			BRA	___Ethernet_UserTCP_ILLEGAL_COMMAND
$A576	$	L_Ethernet_UserTCP_93:
;ethernet.c,380 :: 			open_port(cmd_port_num);
$A576	$C437	F6CD			MOVFF	_cmd_port_num, FARG_open_port+0
$A57A	$EC97	F044			CALL	_open_port
;ethernet.c,381 :: 			l_w_port(cmd_port_num);   //запись в строку dyna начала строки с номером порта( 7 символов)
$A57E	$C437	F6CD			MOVFF	_cmd_port_num, FARG_l_w_port+0
$A582	$ECB7	F044			CALL	_l_w_port
;ethernet.c,383 :: 			len += putShConstString("&result=accepted") ;
$A586	$0EC0	    			MOVLW	#lstr_56_ethernet
$A588	$0106	    			MOVLB	6
$A58A	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A58C	$0ED3	    			MOVLW	@#lstr_56_ethernet
$A58E	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A590	$0E00	    			MOVLW	@@#lstr_56_ethernet
$A592	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A594	$EC68	F042			CALL	_putShConstString
$A598	$5000	    			MOVF	STACK_0, 0, 0
$A59A	$0106	    			MOVLB	6
$A59C	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A59E	$5001	    			MOVF	STACK_0+1, 0, 0
$A5A0	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,384 :: 			}
$A5A2	$D1A0	    			BRA	L_Ethernet_UserTCP_94
$A5A4	$	L_Ethernet_UserTCP_90:
;ethernet.c,386 :: 			else if(!memcmp(getRequest+21, txt_close, 4))  {  // команда CLOSE
$A5A4	$0EA6	    			MOVLW	_getRequest+21
$A5A6	$0108	    			MOVLB	8
$A5A8	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$A5AA	$0E03	    			MOVLW	@_getRequest+21
$A5AC	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$A5AE	$0EB8	    			MOVLW	_txt_close
$A5B0	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$A5B2	$0E04	    			MOVLW	@_txt_close
$A5B4	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$A5B6	$0E04	    			MOVLW	4
$A5B8	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$A5BA	$0E00	    			MOVLW	0
$A5BC	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$A5BE	$EC23	F021			CALL	_memcmp
$A5C2	$5000	    			MOVF	STACK_0, 0, 0
$A5C4	$1001	    			IORWF	STACK_0+1, 0, 0
$A5C6	$E142	    			BNZ	L_Ethernet_UserTCP_95
;ethernet.c,387 :: 			len += putShConstString("&close_port=") ;
$A5C8	$0ED2	    			MOVLW	#lstr_57_ethernet
$A5CA	$0106	    			MOVLB	6
$A5CC	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A5CE	$0ED3	    			MOVLW	@#lstr_57_ethernet
$A5D0	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A5D2	$0E00	    			MOVLW	@@#lstr_57_ethernet
$A5D4	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A5D6	$EC68	F042			CALL	_putShConstString
$A5DA	$5000	    			MOVF	STACK_0, 0, 0
$A5DC	$0106	    			MOVLB	6
$A5DE	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A5E0	$5001	    			MOVF	STACK_0+1, 0, 0
$A5E2	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,388 :: 			Num_to_0str(cmd_port_num, dyna);  // преобразует число (0..255) в строку из трех символов  лидирующие - нули
$A5E4	$C437	F8D5			MOVFF	_cmd_port_num, FARG_Num_to_0str+0
$A5E8	$0ECF	    			MOVLW	_dyna
$A5EA	$0108	    			MOVLB	8
$A5EC	$6FD6	    			MOVWF	FARG_Num_to_0str+1, 1
$A5EE	$0E02	    			MOVLW	@_dyna
$A5F0	$6FD7	    			MOVWF	FARG_Num_to_0str+2, 1
$A5F2	$EC4D	F017			CALL	_Num_to_0str
;ethernet.c,390 :: 			len += putShString(dyna) ;
$A5F6	$0ECF	    			MOVLW	_dyna
$A5F8	$0106	    			MOVLB	6
$A5FA	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A5FC	$0E02	    			MOVLW	@_dyna
$A5FE	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A600	$EC99	F042			CALL	_putShString
$A604	$5000	    			MOVF	STACK_0, 0, 0
$A606	$0106	    			MOVLB	6
$A608	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A60A	$5001	    			MOVF	STACK_0+1, 0, 0
$A60C	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,391 :: 			if ( (cmd_port_num > 40) || (cmd_port_num < 1) ) goto ILLEGAL_COMMAND;
$A60E	$0104	    			MOVLB	4
$A610	$5137	    			MOVF	_cmd_port_num, 0, 1
$A612	$0828	    			SUBLW	40
$A614	$E303	    			BNC	L987_ex_L_Ethernet_UserTCP_98
$A616	$0E01	    			MOVLW	1
$A618	$5D37	    			SUBWF	_cmd_port_num, 0, 1
$A61A	$E201	    			BC	L_Ethernet_UserTCP_98
$A61C	$	L987_ex_L_Ethernet_UserTCP_98:
$A61C	$D166	    			BRA	___Ethernet_UserTCP_ILLEGAL_COMMAND
$A61E	$	L_Ethernet_UserTCP_98:
;ethernet.c,392 :: 			close_port(cmd_port_num);
$A61E	$C437	F6CD			MOVFF	_cmd_port_num, FARG_close_port+0
$A622	$ECD2	F044			CALL	_close_port
;ethernet.c,393 :: 			l_w_port(cmd_port_num);   //запись в строку dyna начала строки с номером порта( 7 символов)
$A626	$C437	F6CD			MOVFF	_cmd_port_num, FARG_l_w_port+0
$A62A	$ECB7	F044			CALL	_l_w_port
;ethernet.c,395 :: 			len += putShConstString("&result=accepted") ;
$A62E	$0EE0	    			MOVLW	#lstr_58_ethernet
$A630	$0106	    			MOVLB	6
$A632	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A634	$0ED3	    			MOVLW	@#lstr_58_ethernet
$A636	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A638	$0E00	    			MOVLW	@@#lstr_58_ethernet
$A63A	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A63C	$EC68	F042			CALL	_putShConstString
$A640	$5000	    			MOVF	STACK_0, 0, 0
$A642	$0106	    			MOVLB	6
$A644	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A646	$5001	    			MOVF	STACK_0+1, 0, 0
$A648	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,396 :: 			}
$A64A	$D14C	    			BRA	L_Ethernet_UserTCP_99
$A64C	$	L_Ethernet_UserTCP_95:
;ethernet.c,398 :: 			else if(!memcmp(getRequest+21, txt_status, 4)) {   // команда status  ячеек
$A64C	$0EA6	    			MOVLW	_getRequest+21
$A64E	$0108	    			MOVLB	8
$A650	$6FAC	    			MOVWF	FARG_memcmp+0, 1
$A652	$0E03	    			MOVLW	@_getRequest+21
$A654	$6FAD	    			MOVWF	FARG_memcmp+1, 1
$A656	$0E22	    			MOVLW	_txt_status
$A658	$6FAE	    			MOVWF	FARG_memcmp+2, 1
$A65A	$0E04	    			MOVLW	@_txt_status
$A65C	$6FAF	    			MOVWF	FARG_memcmp+3, 1
$A65E	$0E04	    			MOVLW	4
$A660	$6FB0	    			MOVWF	FARG_memcmp+4, 1
$A662	$0E00	    			MOVLW	0
$A664	$6FB1	    			MOVWF	FARG_memcmp+5, 1
$A666	$EC23	F021			CALL	_memcmp
$A66A	$5000	    			MOVF	STACK_0, 0, 0
$A66C	$1001	    			IORWF	STACK_0+1, 0, 0
$A66E	$A4D8	    			BTFSS	STATUS, Z, 0
$A670	$D137	    			BRA	L_Ethernet_UserTCP_100
;ethernet.c,399 :: 			l_w_port(cmd_port_num);   //запись в строку dyna начала строки с номером порта( 7 символов)
$A672	$C437	F6CD			MOVFF	_cmd_port_num, FARG_l_w_port+0
$A676	$ECB7	F044			CALL	_l_w_port
;ethernet.c,401 :: 			if (cmd_port_num > 40) goto ILLEGAL_COMMAND;
$A67A	$0104	    			MOVLB	4
$A67C	$5137	    			MOVF	_cmd_port_num, 0, 1
$A67E	$0828	    			SUBLW	40
$A680	$A0D8	    			BTFSS	STATUS, C, 0
$A682	$D133	    			BRA	___Ethernet_UserTCP_ILLEGAL_COMMAND
$A684	$	L_Ethernet_UserTCP_101:
;ethernet.c,402 :: 			len += putShConstString("&state=ok") ;
$A684	$0EF2	    			MOVLW	#lstr_59_ethernet
$A686	$0106	    			MOVLB	6
$A688	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A68A	$0ED3	    			MOVLW	@#lstr_59_ethernet
$A68C	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A68E	$0E00	    			MOVLW	@@#lstr_59_ethernet
$A690	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A692	$EC68	F042			CALL	_putShConstString
$A696	$5000	    			MOVF	STACK_0, 0, 0
$A698	$0106	    			MOVLB	6
$A69A	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A69C	$5001	    			MOVF	STACK_0+1, 0, 0
$A69E	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,403 :: 			sprintf(tmpBuf,"&cell_%02d=",cmd_port_num);
$A6A0	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A6A2	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$A6A4	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A6A6	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$A6A8	$0EFC	    			MOVLW	#lstr_60_ethernet
$A6AA	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$A6AC	$0ED3	    			MOVLW	@#lstr_60_ethernet
$A6AE	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$A6B0	$0E00	    			MOVLW	@@#lstr_60_ethernet
$A6B2	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$A6B4	$C437	F6D2			MOVFF	_cmd_port_num, FARG_sprintf+5
$A6B8	$ECC1	F042			CALL	_sprintf
;ethernet.c,404 :: 			len += putShString(tmpBuf);
$A6BC	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A6BE	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A6C0	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A6C2	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A6C4	$EC99	F042			CALL	_putShString
$A6C8	$5000	    			MOVF	STACK_0, 0, 0
$A6CA	$0106	    			MOVLB	6
$A6CC	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A6CE	$5001	    			MOVF	STACK_0+1, 0, 0
$A6D0	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,405 :: 			if(cellState[cmd_port_num][4]=='8') {
$A6D2	$C437	F000			MOVFF	_cmd_port_num, STACK_0
$A6D6	$0E00	    			MOVLW	0
$A6D8	$6E01	    			MOVWF	STACK_0+1, 0
$A6DA	$0E05	    			MOVLW	5
$A6DC	$6E04	    			MOVWF	STACK_4, 0
$A6DE	$0E00	    			MOVLW	0
$A6E0	$6E05	    			MOVWF	STACK_4+1, 0
$A6E2	$ECB1	F001			CALL	_mul_16x16_u
$A6E6	$0E3E	    			MOVLW	_cellState
$A6E8	$2600	    			ADDWF	STACK_0, 1, 0
$A6EA	$0E04	    			MOVLW	@_cellState
$A6EC	$2201	    			ADDWFC	STACK_0+1, 1, 0
$A6EE	$0E04	    			MOVLW	4
$A6F0	$2400	    			ADDWF	STACK_0, 0, 0
$A6F2	$6EE9	    			MOVWF	FSR0L, 0
$A6F4	$0E00	    			MOVLW	0
$A6F6	$2001	    			ADDWFC	STACK_0+1, 0, 0
$A6F8	$6EEA	    			MOVWF	FSR0L+1, 0
$A6FA	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$A6FE	$5002	    			MOVF	STACK_2, 0, 0
$A700	$0A38	    			XORLW	56
$A702	$E10F	    			BNZ	L_Ethernet_UserTCP_102
;ethernet.c,406 :: 			len += putShConstString("no\r\n");
$A704	$0E08	    			MOVLW	#lstr_61_ethernet
$A706	$0106	    			MOVLB	6
$A708	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A70A	$0ED4	    			MOVLW	@#lstr_61_ethernet
$A70C	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A70E	$0E00	    			MOVLW	@@#lstr_61_ethernet
$A710	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A712	$EC68	F042			CALL	_putShConstString
$A716	$5000	    			MOVF	STACK_0, 0, 0
$A718	$0106	    			MOVLB	6
$A71A	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A71C	$5001	    			MOVF	STACK_0+1, 0, 0
$A71E	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,407 :: 			}
$A720	$D0DE	    			BRA	L_Ethernet_UserTCP_103
$A722	$	L_Ethernet_UserTCP_102:
;ethernet.c,409 :: 			sprintf(tmpBuf,"%c,",cellState[cmd_port_num][0]);
$A722	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A724	$0106	    			MOVLB	6
$A726	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$A728	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A72A	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$A72C	$0E0E	    			MOVLW	#lstr_62_ethernet
$A72E	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$A730	$0ED4	    			MOVLW	@#lstr_62_ethernet
$A732	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$A734	$0E00	    			MOVLW	@@#lstr_62_ethernet
$A736	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$A738	$C437	F000			MOVFF	_cmd_port_num, STACK_0
$A73C	$0E00	    			MOVLW	0
$A73E	$6E01	    			MOVWF	STACK_0+1, 0
$A740	$0E05	    			MOVLW	5
$A742	$6E04	    			MOVWF	STACK_4, 0
$A744	$0E00	    			MOVLW	0
$A746	$6E05	    			MOVWF	STACK_4+1, 0
$A748	$ECB1	F001			CALL	_mul_16x16_u
$A74C	$0E3E	    			MOVLW	_cellState
$A74E	$2400	    			ADDWF	STACK_0, 0, 0
$A750	$6EE9	    			MOVWF	FSR0L, 0
$A752	$0E04	    			MOVLW	@_cellState
$A754	$2001	    			ADDWFC	STACK_0+1, 0, 0
$A756	$6EEA	    			MOVWF	FSR0L+1, 0
$A758	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$A75C	$ECC1	F042			CALL	_sprintf
;ethernet.c,410 :: 			len += putShString(tmpBuf);
$A760	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A762	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A764	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A766	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A768	$EC99	F042			CALL	_putShString
$A76C	$5000	    			MOVF	STACK_0, 0, 0
$A76E	$0106	    			MOVLB	6
$A770	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A772	$5001	    			MOVF	STACK_0+1, 0, 0
$A774	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,411 :: 			sprintf(tmpBuf,"%c,",cellState[cmd_port_num][1]);
$A776	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A778	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$A77A	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A77C	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$A77E	$0E12	    			MOVLW	#lstr_63_ethernet
$A780	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$A782	$0ED4	    			MOVLW	@#lstr_63_ethernet
$A784	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$A786	$0E00	    			MOVLW	@@#lstr_63_ethernet
$A788	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$A78A	$C437	F000			MOVFF	_cmd_port_num, STACK_0
$A78E	$0E00	    			MOVLW	0
$A790	$6E01	    			MOVWF	STACK_0+1, 0
$A792	$0E05	    			MOVLW	5
$A794	$6E04	    			MOVWF	STACK_4, 0
$A796	$0E00	    			MOVLW	0
$A798	$6E05	    			MOVWF	STACK_4+1, 0
$A79A	$ECB1	F001			CALL	_mul_16x16_u
$A79E	$0E3E	    			MOVLW	_cellState
$A7A0	$2600	    			ADDWF	STACK_0, 1, 0
$A7A2	$0E04	    			MOVLW	@_cellState
$A7A4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$A7A6	$0E01	    			MOVLW	1
$A7A8	$2400	    			ADDWF	STACK_0, 0, 0
$A7AA	$6EE9	    			MOVWF	FSR0L, 0
$A7AC	$0E00	    			MOVLW	0
$A7AE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$A7B0	$6EEA	    			MOVWF	FSR0L+1, 0
$A7B2	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$A7B6	$ECC1	F042			CALL	_sprintf
;ethernet.c,412 :: 			len += putShString(tmpBuf);
$A7BA	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A7BC	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A7BE	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A7C0	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A7C2	$EC99	F042			CALL	_putShString
$A7C6	$5000	    			MOVF	STACK_0, 0, 0
$A7C8	$0106	    			MOVLB	6
$A7CA	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A7CC	$5001	    			MOVF	STACK_0+1, 0, 0
$A7CE	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,413 :: 			sprintf(tmpBuf,"%c,",cellState[cmd_port_num][2]);
$A7D0	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A7D2	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$A7D4	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A7D6	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$A7D8	$0E16	    			MOVLW	#lstr_64_ethernet
$A7DA	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$A7DC	$0ED4	    			MOVLW	@#lstr_64_ethernet
$A7DE	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$A7E0	$0E00	    			MOVLW	@@#lstr_64_ethernet
$A7E2	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$A7E4	$C437	F000			MOVFF	_cmd_port_num, STACK_0
$A7E8	$0E00	    			MOVLW	0
$A7EA	$6E01	    			MOVWF	STACK_0+1, 0
$A7EC	$0E05	    			MOVLW	5
$A7EE	$6E04	    			MOVWF	STACK_4, 0
$A7F0	$0E00	    			MOVLW	0
$A7F2	$6E05	    			MOVWF	STACK_4+1, 0
$A7F4	$ECB1	F001			CALL	_mul_16x16_u
$A7F8	$0E3E	    			MOVLW	_cellState
$A7FA	$2600	    			ADDWF	STACK_0, 1, 0
$A7FC	$0E04	    			MOVLW	@_cellState
$A7FE	$2201	    			ADDWFC	STACK_0+1, 1, 0
$A800	$0E02	    			MOVLW	2
$A802	$2400	    			ADDWF	STACK_0, 0, 0
$A804	$6EE9	    			MOVWF	FSR0L, 0
$A806	$0E00	    			MOVLW	0
$A808	$2001	    			ADDWFC	STACK_0+1, 0, 0
$A80A	$6EEA	    			MOVWF	FSR0L+1, 0
$A80C	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$A810	$ECC1	F042			CALL	_sprintf
;ethernet.c,414 :: 			len += putShString(tmpBuf);
$A814	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A816	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A818	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A81A	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A81C	$EC99	F042			CALL	_putShString
$A820	$5000	    			MOVF	STACK_0, 0, 0
$A822	$0106	    			MOVLB	6
$A824	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A826	$5001	    			MOVF	STACK_0+1, 0, 0
$A828	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,415 :: 			sprintf(tmpBuf,"%c,",cellState[cmd_port_num][3]);
$A82A	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A82C	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$A82E	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A830	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$A832	$0E1A	    			MOVLW	#lstr_65_ethernet
$A834	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$A836	$0ED4	    			MOVLW	@#lstr_65_ethernet
$A838	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$A83A	$0E00	    			MOVLW	@@#lstr_65_ethernet
$A83C	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$A83E	$C437	F000			MOVFF	_cmd_port_num, STACK_0
$A842	$0E00	    			MOVLW	0
$A844	$6E01	    			MOVWF	STACK_0+1, 0
$A846	$0E05	    			MOVLW	5
$A848	$6E04	    			MOVWF	STACK_4, 0
$A84A	$0E00	    			MOVLW	0
$A84C	$6E05	    			MOVWF	STACK_4+1, 0
$A84E	$ECB1	F001			CALL	_mul_16x16_u
$A852	$0E3E	    			MOVLW	_cellState
$A854	$2600	    			ADDWF	STACK_0, 1, 0
$A856	$0E04	    			MOVLW	@_cellState
$A858	$2201	    			ADDWFC	STACK_0+1, 1, 0
$A85A	$0E03	    			MOVLW	3
$A85C	$2400	    			ADDWF	STACK_0, 0, 0
$A85E	$6EE9	    			MOVWF	FSR0L, 0
$A860	$0E00	    			MOVLW	0
$A862	$2001	    			ADDWFC	STACK_0+1, 0, 0
$A864	$6EEA	    			MOVWF	FSR0L+1, 0
$A866	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$A86A	$ECC1	F042			CALL	_sprintf
;ethernet.c,416 :: 			len += putShString(tmpBuf);
$A86E	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A870	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A872	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A874	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A876	$EC99	F042			CALL	_putShString
$A87A	$5000	    			MOVF	STACK_0, 0, 0
$A87C	$0106	    			MOVLB	6
$A87E	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A880	$5001	    			MOVF	STACK_0+1, 0, 0
$A882	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,417 :: 			sprintf(tmpBuf,"%c",cellState[cmd_port_num][4]);
$A884	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A886	$6FCD	    			MOVWF	FARG_sprintf+0, 1
$A888	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A88A	$6FCE	    			MOVWF	FARG_sprintf+1, 1
$A88C	$0E1E	    			MOVLW	#lstr_66_ethernet
$A88E	$6FCF	    			MOVWF	FARG_sprintf+2, 1
$A890	$0ED4	    			MOVLW	@#lstr_66_ethernet
$A892	$6FD0	    			MOVWF	FARG_sprintf+3, 1
$A894	$0E00	    			MOVLW	@@#lstr_66_ethernet
$A896	$6FD1	    			MOVWF	FARG_sprintf+4, 1
$A898	$C437	F000			MOVFF	_cmd_port_num, STACK_0
$A89C	$0E00	    			MOVLW	0
$A89E	$6E01	    			MOVWF	STACK_0+1, 0
$A8A0	$0E05	    			MOVLW	5
$A8A2	$6E04	    			MOVWF	STACK_4, 0
$A8A4	$0E00	    			MOVLW	0
$A8A6	$6E05	    			MOVWF	STACK_4+1, 0
$A8A8	$ECB1	F001			CALL	_mul_16x16_u
$A8AC	$0E3E	    			MOVLW	_cellState
$A8AE	$2600	    			ADDWF	STACK_0, 1, 0
$A8B0	$0E04	    			MOVLW	@_cellState
$A8B2	$2201	    			ADDWFC	STACK_0+1, 1, 0
$A8B4	$0E04	    			MOVLW	4
$A8B6	$2400	    			ADDWF	STACK_0, 0, 0
$A8B8	$6EE9	    			MOVWF	FSR0L, 0
$A8BA	$0E00	    			MOVLW	0
$A8BC	$2001	    			ADDWFC	STACK_0+1, 0, 0
$A8BE	$6EEA	    			MOVWF	FSR0L+1, 0
$A8C0	$CFEE	F6D2			MOVFF	POSTINC0, FARG_sprintf+5
$A8C4	$ECC1	F042			CALL	_sprintf
;ethernet.c,418 :: 			len += putShString(tmpBuf);
$A8C8	$0EB7	    			MOVLW	Ethernet_UserTCP_tmpBuf_L0
$A8CA	$6FCD	    			MOVWF	FARG_putShString+0, 1
$A8CC	$0E06	    			MOVLW	@Ethernet_UserTCP_tmpBuf_L0
$A8CE	$6FCE	    			MOVWF	FARG_putShString+1, 1
$A8D0	$EC99	F042			CALL	_putShString
$A8D4	$5000	    			MOVF	STACK_0, 0, 0
$A8D6	$0106	    			MOVLB	6
$A8D8	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A8DA	$5001	    			MOVF	STACK_0+1, 0, 0
$A8DC	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,419 :: 			}
$A8DE	$	L_Ethernet_UserTCP_103:
;ethernet.c,420 :: 			}  // end  if(!memcmp(getRequest+21, txt_status, 4))    // команда status
$A8DE	$D002	    			BRA	L_Ethernet_UserTCP_104
$A8E0	$	L_Ethernet_UserTCP_100:
;ethernet.c,422 :: 			else   goto ILLEGAL_COMMAND;
$A8E0	$0106	    			MOVLB	6
$A8E2	$D003	    			BRA	___Ethernet_UserTCP_ILLEGAL_COMMAND
$A8E4	$	L_Ethernet_UserTCP_104:
$A8E4	$	L_Ethernet_UserTCP_99:
$A8E4	$	L_Ethernet_UserTCP_94:
;ethernet.c,424 :: 			}  // end  else    // команда для ячейки в стойке
$A8E4	$	L_Ethernet_UserTCP_89:
;ethernet.c,426 :: 			}  // end          if(!memcmp(getRequest+5, txt_port, 4))                          // начало команды:  port
$A8E4	$0106	    			MOVLB	6
$A8E6	$0106	    			MOVLB	6
$A8E8	$D020	    			BRA	L_Ethernet_UserTCP_105
$A8EA	$	L_Ethernet_UserTCP_8:
;ethernet.c,428 :: 			ILLEGAL_COMMAND:   len += putShConstString("result=illegal_command") ;
$A8EA	$	___Ethernet_UserTCP_ILLEGAL_COMMAND:
$A8EA	$0106	    			MOVLB	6
$A8EC	$0E22	    			MOVLW	#lstr_67_ethernet
$A8EE	$0106	    			MOVLB	6
$A8F0	$6FCD	    			MOVWF	FARG_putShConstString+0, 1
$A8F2	$0ED4	    			MOVLW	@#lstr_67_ethernet
$A8F4	$6FCE	    			MOVWF	FARG_putShConstString+1, 1
$A8F6	$0E00	    			MOVLW	@@#lstr_67_ethernet
$A8F8	$6FCF	    			MOVWF	FARG_putShConstString+2, 1
$A8FA	$EC68	F042			CALL	_putShConstString
$A8FE	$5000	    			MOVF	STACK_0, 0, 0
$A900	$0106	    			MOVLB	6
$A902	$27A3	    			ADDWF	Ethernet_UserTCP_len_L0, 1, 1
$A904	$5001	    			MOVF	STACK_0+1, 0, 0
$A906	$23A4	    			ADDWFC	Ethernet_UserTCP_len_L0+1, 1, 1
;ethernet.c,429 :: 			tmp =Set_fnum();
$A908	$EC5D	F021			CALL	_Set_fnum
$A90C	$C000	F6AD			MOVFF	STACK_0, Ethernet_UserTCP_tmp_L0
$A910	$0E00	    			MOVLW	0
$A912	$0106	    			MOVLB	6
$A914	$6FAE	    			MOVWF	Ethernet_UserTCP_tmp_L0+1, 1
;ethernet.c,430 :: 			log_write ( CMD, " illegal_command             ", tmp );   // записать в журнал - команда  (28 символов )
$A916	$0E03	    			MOVLW	3
$A918	$6FCD	    			MOVWF	FARG_log_write+0, 1
$A91A	$0E85	    			MOVLW	lstr68_ethernet
$A91C	$6FCE	    			MOVWF	FARG_log_write+1, 1
$A91E	$0E06	    			MOVLW	@lstr68_ethernet
$A920	$6FCF	    			MOVWF	FARG_log_write+2, 1
$A922	$C6AD	F6D0			MOVFF	Ethernet_UserTCP_tmp_L0, FARG_log_write+3
$A926	$ECC2	F03C			CALL	_log_write
;ethernet.c,431 :: 			}
$A92A	$	L_Ethernet_UserTCP_105:
;ethernet.c,432 :: 			Led_Y  = 1;  // выключить желтый сд
$A92A	$8282	    			BSF	PORTC, 1, 0
;ethernet.c,433 :: 			return(len) ;                                           // return to the library with the number of bytes to transmit
$A92C	$C6A3	F000			MOVFF	Ethernet_UserTCP_len_L0, STACK_0
$A930	$C6A4	F001			MOVFF	Ethernet_UserTCP_len_L0+1, STACK_0+1
;ethernet.c,434 :: 			}
$A934	$0012	    			RETURN
$A936	$	_Ethernet_delay:
$A936	$0106	    			MOVLB	6
$A938	$6B00	    			CLRF	Ethernet_delay_i_L0, 1
$A93A	$	L_Ethernet_delay_235:
$A93A	$0EC8	    			MOVLW	200
$A93C	$0106	    			MOVLB	6
$A93E	$5D00	    			SUBWF	Ethernet_delay_i_L0, 0, 1
$A940	$E207	    			BC	L_Ethernet_delay_236
$A942	$ECF1	F044			CALL	_Delay_500us
$A946	$ECF1	F044			CALL	_Delay_500us
$A94A	$	L_Ethernet_delay_237:
$A94A	$0106	    			MOVLB	6
$A94C	$2B00	    			INCF	Ethernet_delay_i_L0, 1, 1
$A94E	$D7F5	    			BRA	L_Ethernet_delay_235
$A950	$	L_Ethernet_delay_236:
$A950	$0012	    			RETURN
$A952	$	_Ethernet_doARP:
$A952	$0EC4	    			MOVLW	196
$A954	$0108	    			MOVLB	8
$A956	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$A958	$0E19	    			MOVLW	25
$A95A	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$A95C	$ECE2	F007			CALL	_Ethernet_readMem
$A960	$C000	F600			MOVFF	STACK_0, FLOC_Ethernet_doARP+0
$A964	$D0E9	    			BRA	L_Ethernet_doARP_42
$A966	$	L_Ethernet_doARP_44:
$A966	$0ED5	    			MOVLW	213
$A968	$0106	    			MOVLB	6
$A96A	$6F43	    			MOVWF	FARG_Ethernet_memcmp+0, 1
$A96C	$0E19	    			MOVLW	25
$A96E	$6F44	    			MOVWF	FARG_Ethernet_memcmp+1, 1
$A970	$0E76	    			MOVLW	_Ethernet_ipAddr
$A972	$6F45	    			MOVWF	FARG_Ethernet_memcmp+2, 1
$A974	$0E02	    			MOVLW	@_Ethernet_ipAddr
$A976	$6F46	    			MOVWF	FARG_Ethernet_memcmp+3, 1
$A978	$0E04	    			MOVLW	4
$A97A	$6F47	    			MOVWF	FARG_Ethernet_memcmp+4, 1
$A97C	$EC01	F045			CALL	_Ethernet_memcmp
$A980	$5000	    			MOVF	STACK_0, 0, 0
$A982	$0A00	    			XORLW	0
$A984	$E14C	    			BNZ	L_Ethernet_doARP_45
$A986	$0EC4	    			MOVLW	196
$A988	$0108	    			MOVLB	8
$A98A	$6FEB	    			MOVWF	FARG_Ethernet_writeMem+0, 1
$A98C	$0E19	    			MOVLW	25
$A98E	$6FEC	    			MOVWF	FARG_Ethernet_writeMem+1, 1
$A990	$0E02	    			MOVLW	2
$A992	$6FED	    			MOVWF	FARG_Ethernet_writeMem+2, 1
$A994	$ECD1	F007			CALL	_Ethernet_writeMem
$A998	$EC3D	F045			CALL	_Ethernet_MACswap
$A99C	$0ECB	    			MOVLW	203
$A99E	$0108	    			MOVLB	8
$A9A0	$6FD5	    			MOVWF	FARG_Ethernet_RAMcopy+0, 1
$A9A2	$0E19	    			MOVLW	25
$A9A4	$6FD6	    			MOVWF	FARG_Ethernet_RAMcopy+1, 1
$A9A6	$0ECF	    			MOVLW	207
$A9A8	$6FD7	    			MOVWF	FARG_Ethernet_RAMcopy+2, 1
$A9AA	$0E19	    			MOVLW	25
$A9AC	$6FD8	    			MOVWF	FARG_Ethernet_RAMcopy+3, 1
$A9AE	$0ED5	    			MOVLW	213
$A9B0	$6FD9	    			MOVWF	FARG_Ethernet_RAMcopy+4, 1
$A9B2	$0E19	    			MOVLW	25
$A9B4	$6FDA	    			MOVWF	FARG_Ethernet_RAMcopy+5, 1
$A9B6	$6BDB	    			CLRF	FARG_Ethernet_RAMcopy+6, 1
$A9B8	$EC5A	F010			CALL	_Ethernet_RAMcopy
$A9BC	$0ECB	    			MOVLW	203
$A9BE	$0108	    			MOVLB	8
$A9C0	$6FD5	    			MOVWF	FARG_Ethernet_memcpy+0, 1
$A9C2	$0E19	    			MOVLW	25
$A9C4	$6FD6	    			MOVWF	FARG_Ethernet_memcpy+1, 1
$A9C6	$0E76	    			MOVLW	_Ethernet_ipAddr
$A9C8	$6FD7	    			MOVWF	FARG_Ethernet_memcpy+2, 1
$A9CA	$0E02	    			MOVLW	@_Ethernet_ipAddr
$A9CC	$6FD8	    			MOVWF	FARG_Ethernet_memcpy+3, 1
$A9CE	$0E04	    			MOVLW	4
$A9D0	$6FD9	    			MOVWF	FARG_Ethernet_memcpy+4, 1
$A9D2	$ECF1	F00F			CALL	_Ethernet_memcpy
$A9D6	$0EC5	    			MOVLW	197
$A9D8	$0108	    			MOVLB	8
$A9DA	$6FD5	    			MOVWF	FARG_Ethernet_RAMcopy+0, 1
$A9DC	$0E19	    			MOVLW	25
$A9DE	$6FD6	    			MOVWF	FARG_Ethernet_RAMcopy+1, 1
$A9E0	$0ECB	    			MOVLW	203
$A9E2	$6FD7	    			MOVWF	FARG_Ethernet_RAMcopy+2, 1
$A9E4	$0E19	    			MOVLW	25
$A9E6	$6FD8	    			MOVWF	FARG_Ethernet_RAMcopy+3, 1
$A9E8	$0ECF	    			MOVLW	207
$A9EA	$6FD9	    			MOVWF	FARG_Ethernet_RAMcopy+4, 1
$A9EC	$0E19	    			MOVLW	25
$A9EE	$6FDA	    			MOVWF	FARG_Ethernet_RAMcopy+5, 1
$A9F0	$6BDB	    			CLRF	FARG_Ethernet_RAMcopy+6, 1
$A9F2	$EC5A	F010			CALL	_Ethernet_RAMcopy
$A9F6	$0EC5	    			MOVLW	197
$A9F8	$0108	    			MOVLB	8
$A9FA	$6FD5	    			MOVWF	FARG_Ethernet_memcpy+0, 1
$A9FC	$0E19	    			MOVLW	25
$A9FE	$6FD6	    			MOVWF	FARG_Ethernet_memcpy+1, 1
$AA00	$0E70	    			MOVLW	_Ethernet_macAddr
$AA02	$6FD7	    			MOVWF	FARG_Ethernet_memcpy+2, 1
$AA04	$0E02	    			MOVLW	@_Ethernet_macAddr
$AA06	$6FD8	    			MOVWF	FARG_Ethernet_memcpy+3, 1
$AA08	$0E06	    			MOVLW	6
$AA0A	$6FD9	    			MOVWF	FARG_Ethernet_memcpy+4, 1
$AA0C	$ECF1	F00F			CALL	_Ethernet_memcpy
$AA10	$0E3C	    			MOVLW	60
$AA12	$0108	    			MOVLB	8
$AA14	$6FD5	    			MOVWF	FARG_Ethernet_TXpacket+0, 1
$AA16	$0E00	    			MOVLW	0
$AA18	$6FD6	    			MOVWF	FARG_Ethernet_TXpacket+1, 1
$AA1A	$ECEE	F010			CALL	_Ethernet_TXpacket
$AA1E	$	L_Ethernet_doARP_45:
$AA1E	$D095	    			BRA	L_Ethernet_doARP_43
$AA20	$	L_Ethernet_doARP_46:
$AA20	$0EAF	    			MOVLW	175
$AA22	$0106	    			MOVLB	6
$AA24	$6F43	    			MOVWF	FARG_Ethernet_memcmp+0, 1
$AA26	$0E19	    			MOVLW	25
$AA28	$6F44	    			MOVWF	FARG_Ethernet_memcmp+1, 1
$AA2A	$0E70	    			MOVLW	_Ethernet_macAddr
$AA2C	$6F45	    			MOVWF	FARG_Ethernet_memcmp+2, 1
$AA2E	$0E02	    			MOVLW	@_Ethernet_macAddr
$AA30	$6F46	    			MOVWF	FARG_Ethernet_memcmp+3, 1
$AA32	$0E06	    			MOVLW	6
$AA34	$6F47	    			MOVWF	FARG_Ethernet_memcmp+4, 1
$AA36	$EC01	F045			CALL	_Ethernet_memcmp
$AA3A	$5000	    			MOVF	STACK_0, 0, 0
$AA3C	$0A00	    			XORLW	0
$AA3E	$E17A	    			BNZ	L_Ethernet_doARP_49
$AA40	$0ECB	    			MOVLW	203
$AA42	$0106	    			MOVLB	6
$AA44	$6F43	    			MOVWF	FARG_Ethernet_memcmp+0, 1
$AA46	$0E19	    			MOVLW	25
$AA48	$6F44	    			MOVWF	FARG_Ethernet_memcmp+1, 1
$AA4A	$C4BE	F645			MOVFF	eth_j60_ipr, FARG_Ethernet_memcmp+2
$AA4E	$C4BF	F646			MOVFF	eth_j60_ipr+1, FARG_Ethernet_memcmp+3
$AA52	$0E04	    			MOVLW	4
$AA54	$6F47	    			MOVWF	FARG_Ethernet_memcmp+4, 1
$AA56	$EC01	F045			CALL	_Ethernet_memcmp
$AA5A	$5000	    			MOVF	STACK_0, 0, 0
$AA5C	$0A00	    			XORLW	0
$AA5E	$E16A	    			BNZ	L_Ethernet_doARP_49
$AA60	$	L415_ex_L_Ethernet_doARP_49:
$AA60	$C4ED	F000			MOVFF	eth_j60_freeSlot, STACK_0
$AA64	$0E00	    			MOVLW	0
$AA66	$6E01	    			MOVWF	STACK_0+1, 0
$AA68	$0E0F	    			MOVLW	15
$AA6A	$6E04	    			MOVWF	STACK_4, 0
$AA6C	$0E00	    			MOVLW	0
$AA6E	$6E05	    			MOVWF	STACK_4+1, 0
$AA70	$ECB1	F001			CALL	_mul_16x16_u
$AA74	$0EC0	    			MOVLW	_Ethernet_arpCache
$AA76	$2400	    			ADDWF	STACK_0, 0, 0
$AA78	$0108	    			MOVLB	8
$AA7A	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$AA7C	$0E04	    			MOVLW	@_Ethernet_arpCache
$AA7E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$AA80	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$AA82	$0E09	    			MOVLW	9
$AA84	$27AC	    			ADDWF	FARG_Ethernet_getBytes+0, 1, 1
$AA86	$0E00	    			MOVLW	0
$AA88	$23AD	    			ADDWFC	FARG_Ethernet_getBytes+1, 1, 1
$AA8A	$0EC5	    			MOVLW	197
$AA8C	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$AA8E	$0E19	    			MOVLW	25
$AA90	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$AA92	$0E06	    			MOVLW	6
$AA94	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$AA96	$ECD7	F020			CALL	_Ethernet_getBytes
$AA9A	$C4ED	F000			MOVFF	eth_j60_freeSlot, STACK_0
$AA9E	$0E00	    			MOVLW	0
$AAA0	$6E01	    			MOVWF	STACK_0+1, 0
$AAA2	$0E0F	    			MOVLW	15
$AAA4	$6E04	    			MOVWF	STACK_4, 0
$AAA6	$0E00	    			MOVLW	0
$AAA8	$6E05	    			MOVWF	STACK_4+1, 0
$AAAA	$ECB1	F001			CALL	_mul_16x16_u
$AAAE	$0EC0	    			MOVLW	_Ethernet_arpCache
$AAB0	$2400	    			ADDWF	STACK_0, 0, 0
$AAB2	$0108	    			MOVLB	8
$AAB4	$6FAC	    			MOVWF	FARG_memcpy+0, 1
$AAB6	$0E04	    			MOVLW	@_Ethernet_arpCache
$AAB8	$2001	    			ADDWFC	STACK_0+1, 0, 0
$AABA	$6FAD	    			MOVWF	FARG_memcpy+1, 1
$AABC	$0E05	    			MOVLW	5
$AABE	$27AC	    			ADDWF	FARG_memcpy+0, 1, 1
$AAC0	$0E00	    			MOVLW	0
$AAC2	$23AD	    			ADDWFC	FARG_memcpy+1, 1, 1
$AAC4	$C4BE	F8AE			MOVFF	eth_j60_ipr, FARG_memcpy+2
$AAC8	$C4BF	F8AF			MOVFF	eth_j60_ipr+1, FARG_memcpy+3
$AACC	$0E04	    			MOVLW	4
$AACE	$6FB0	    			MOVWF	FARG_memcpy+4, 1
$AAD0	$0E00	    			MOVLW	0
$AAD2	$6FB1	    			MOVWF	FARG_memcpy+5, 1
$AAD4	$ECF9	F020			CALL	_memcpy
$AAD8	$C4ED	F000			MOVFF	eth_j60_freeSlot, STACK_0
$AADC	$0E00	    			MOVLW	0
$AADE	$6E01	    			MOVWF	STACK_0+1, 0
$AAE0	$0E0F	    			MOVLW	15
$AAE2	$6E04	    			MOVWF	STACK_4, 0
$AAE4	$0E00	    			MOVLW	0
$AAE6	$6E05	    			MOVWF	STACK_4+1, 0
$AAE8	$ECB1	F001			CALL	_mul_16x16_u
$AAEC	$0EC0	    			MOVLW	_Ethernet_arpCache
$AAEE	$2400	    			ADDWF	STACK_0, 0, 0
$AAF0	$6EE1	    			MOVWF	FSR1L, 0
$AAF2	$0E04	    			MOVLW	@_Ethernet_arpCache
$AAF4	$2001	    			ADDWFC	STACK_0+1, 0, 0
$AAF6	$6EE2	    			MOVWF	FSR1L+1, 0
$AAF8	$0E01	    			MOVLW	1
$AAFA	$6EE6	    			MOVWF	POSTINC1, 0
$AAFC	$C4ED	F000			MOVFF	eth_j60_freeSlot, STACK_0
$AB00	$0E00	    			MOVLW	0
$AB02	$6E01	    			MOVWF	STACK_0+1, 0
$AB04	$0E0F	    			MOVLW	15
$AB06	$6E04	    			MOVWF	STACK_4, 0
$AB08	$0E00	    			MOVLW	0
$AB0A	$6E05	    			MOVWF	STACK_4+1, 0
$AB0C	$ECB1	F001			CALL	_mul_16x16_u
$AB10	$0EC0	    			MOVLW	_Ethernet_arpCache
$AB12	$2600	    			ADDWF	STACK_0, 1, 0
$AB14	$0E04	    			MOVLW	@_Ethernet_arpCache
$AB16	$2201	    			ADDWFC	STACK_0+1, 1, 0
$AB18	$0E01	    			MOVLW	1
$AB1A	$2400	    			ADDWF	STACK_0, 0, 0
$AB1C	$6EE1	    			MOVWF	FSR1L, 0
$AB1E	$0E00	    			MOVLW	0
$AB20	$2001	    			ADDWFC	STACK_0+1, 0, 0
$AB22	$6EE2	    			MOVWF	FSR1L+1, 0
$AB24	$C38C	FFE6			MOVFF	_Ethernet_userTimerSec, POSTINC1
$AB28	$C38D	FFE6			MOVFF	_Ethernet_userTimerSec+1, POSTINC1
$AB2C	$C38E	FFE6			MOVFF	_Ethernet_userTimerSec+2, POSTINC1
$AB30	$C38F	FFE6			MOVFF	_Ethernet_userTimerSec+3, POSTINC1
$AB34	$	L_Ethernet_doARP_49:
$AB34	$0100	    			MOVLB	0
$AB36	$D009	    			BRA	L_Ethernet_doARP_43
$AB38	$	L_Ethernet_doARP_42:
$AB38	$0106	    			MOVLB	6
$AB3A	$5100	    			MOVF	FLOC_Ethernet_doARP+0, 0, 1
$AB3C	$0A01	    			XORLW	1
$AB3E	$B4D8	    			BTFSC	STATUS, Z, 0
$AB40	$D712	    			BRA	L_Ethernet_doARP_44
$AB42	$5100	    			MOVF	FLOC_Ethernet_doARP+0, 0, 1
$AB44	$0A02	    			XORLW	2
$AB46	$B4D8	    			BTFSC	STATUS, Z, 0
$AB48	$D76B	    			BRA	L_Ethernet_doARP_46
$AB4A	$	L_Ethernet_doARP_43:
$AB4A	$0012	    			RETURN
$AB4C	$	_Ethernet_doUDP:
$AB4C	$C619	F8EB			MOVFF	FARG_Ethernet_doUDP+3, FARG_Ethernet_readMem+0
$AB50	$C61A	F8EC			MOVFF	FARG_Ethernet_doUDP+4, FARG_Ethernet_readMem+1
$AB54	$ECE2	F007			CALL	_Ethernet_readMem
$AB58	$C000	F624			MOVFF	STACK_0, Ethernet_doUDP_remotePort_L0+1
$AB5C	$ECD4	F020			CALL	_Ethernet_getByte
$AB60	$C000	F623			MOVFF	STACK_0, Ethernet_doUDP_remotePort_L0
$AB64	$ECD4	F020			CALL	_Ethernet_getByte
$AB68	$C000	F622			MOVFF	STACK_0, Ethernet_doUDP_dport_L0+1
$AB6C	$ECD4	F020			CALL	_Ethernet_getByte
$AB70	$C000	F621			MOVFF	STACK_0, Ethernet_doUDP_dport_L0
$AB74	$0E00	    			MOVLW	0
$AB76	$0106	    			MOVLB	6
$AB78	$1922	    			XORWF	Ethernet_doUDP_dport_L0+1, 0, 1
$AB7A	$E102	    			BNZ	L_Ethernet_doUDP_253
$AB7C	$0E00	    			MOVLW	0
$AB7E	$1921	    			XORWF	Ethernet_doUDP_dport_L0, 0, 1
$AB80	$	L_Ethernet_doUDP_253:
$AB80	$B4D8	    			BTFSC	STATUS, Z, 0
$AB82	$0012	    			RETURN
$AB84	$	L_Ethernet_doUDP_76:
$AB84	$ECD4	F020			CALL	_Ethernet_getByte
$AB88	$C000	F626			MOVFF	STACK_0, Ethernet_doUDP_len_L0+1
$AB8C	$ECD4	F020			CALL	_Ethernet_getByte
$AB90	$C000	F625			MOVFF	STACK_0, Ethernet_doUDP_len_L0
$AB94	$0E27	    			MOVLW	Ethernet_doUDP_remoteIpAddr_L0
$AB96	$0108	    			MOVLB	8
$AB98	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$AB9A	$0E06	    			MOVLW	@Ethernet_doUDP_remoteIpAddr_L0
$AB9C	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$AB9E	$0EC9	    			MOVLW	201
$ABA0	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$ABA2	$0E19	    			MOVLW	25
$ABA4	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$ABA6	$0E04	    			MOVLW	4
$ABA8	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$ABAA	$ECD7	F020			CALL	_Ethernet_getBytes
$ABAE	$0EE2	    			MOVLW	EWRPT
$ABB0	$0108	    			MOVLB	8
$ABB2	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$ABB4	$0E0E	    			MOVLW	@EWRPT
$ABB6	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$ABB8	$0E08	    			MOVLW	8
$ABBA	$0106	    			MOVLB	6
$ABBC	$2519	    			ADDWF	FARG_Ethernet_doUDP+3, 0, 1
$ABBE	$0108	    			MOVLB	8
$ABC0	$6FFA	    			MOVWF	FARG_Ethernet_writeAddr2+2, 1
$ABC2	$0E00	    			MOVLW	0
$ABC4	$0106	    			MOVLB	6
$ABC6	$211A	    			ADDWFC	FARG_Ethernet_doUDP+4, 0, 1
$ABC8	$0108	    			MOVLB	8
$ABCA	$6FFB	    			MOVWF	FARG_Ethernet_writeAddr2+3, 1
$ABCC	$EC67	F002			CALL	_Ethernet_writeAddr2
$ABD0	$0E0E	    			MOVLW	14
$ABD2	$0106	    			MOVLB	6
$ABD4	$2516	    			ADDWF	FARG_Ethernet_doUDP+0, 0, 1
$ABD6	$6F43	    			MOVWF	FARG_Ethernet_setRxReadAddress+0, 1
$ABD8	$0E00	    			MOVLW	0
$ABDA	$2117	    			ADDWFC	FARG_Ethernet_doUDP+1, 0, 1
$ABDC	$6F44	    			MOVWF	FARG_Ethernet_setRxReadAddress+1, 1
$ABDE	$5118	    			MOVF	FARG_Ethernet_doUDP+2, 0, 1
$ABE0	$2743	    			ADDWF	FARG_Ethernet_setRxReadAddress+0, 1, 1
$ABE2	$B0D8	    			BTFSC	STATUS, C, 0
$ABE4	$2B44	    			INCF	FARG_Ethernet_setRxReadAddress+1, 1, 1
$ABE6	$0E08	    			MOVLW	8
$ABE8	$2743	    			ADDWF	FARG_Ethernet_setRxReadAddress+0, 1, 1
$ABEA	$0E00	    			MOVLW	0
$ABEC	$2344	    			ADDWFC	FARG_Ethernet_setRxReadAddress+1, 1, 1
$ABEE	$EC5B	F045			CALL	_Ethernet_setRxReadAddress
$ABF2	$0E00	    			MOVLW	0
$ABF4	$0106	    			MOVLB	6
$ABF6	$1924	    			XORWF	Ethernet_doUDP_remotePort_L0+1, 0, 1
$ABF8	$E102	    			BNZ	L_Ethernet_doUDP_254
$ABFA	$0E35	    			MOVLW	53
$ABFC	$1923	    			XORWF	Ethernet_doUDP_remotePort_L0, 0, 1
$ABFE	$	L_Ethernet_doUDP_254:
$ABFE	$E103	    			BNZ	L_Ethernet_doUDP_77
$AC00	$EC73	F045			CALL	_Ethernet_doDNS
$AC04	$D04A	    			BRA	L_Ethernet_doUDP_78
$AC06	$	L_Ethernet_doUDP_77:
$AC06	$0E00	    			MOVLW	0
$AC08	$0106	    			MOVLB	6
$AC0A	$1922	    			XORWF	Ethernet_doUDP_dport_L0+1, 0, 1
$AC0C	$E102	    			BNZ	L_Ethernet_doUDP_255
$AC0E	$0E44	    			MOVLW	68
$AC10	$1921	    			XORWF	Ethernet_doUDP_dport_L0, 0, 1
$AC12	$	L_Ethernet_doUDP_255:
$AC12	$E103	    			BNZ	L_Ethernet_doUDP_79
$AC14	$EC06	F046			CALL	_Ethernet_doDHCP
$AC18	$D040	    			BRA	L_Ethernet_doUDP_80
$AC1A	$	L_Ethernet_doUDP_79:
$AC1A	$0E27	    			MOVLW	Ethernet_doUDP_remoteIpAddr_L0
$AC1C	$0106	    			MOVLB	6
$AC1E	$6F43	    			MOVWF	FARG_Ethernet_UserUDP+0, 1
$AC20	$0E06	    			MOVLW	@Ethernet_doUDP_remoteIpAddr_L0
$AC22	$6F44	    			MOVWF	FARG_Ethernet_UserUDP+1, 1
$AC24	$C623	F645			MOVFF	Ethernet_doUDP_remotePort_L0, FARG_Ethernet_UserUDP+2
$AC28	$C624	F646			MOVFF	Ethernet_doUDP_remotePort_L0+1, FARG_Ethernet_UserUDP+3
$AC2C	$C621	F647			MOVFF	Ethernet_doUDP_dport_L0, FARG_Ethernet_UserUDP+4
$AC30	$C622	F648			MOVFF	Ethernet_doUDP_dport_L0+1, FARG_Ethernet_UserUDP+5
$AC34	$0E08	    			MOVLW	8
$AC36	$5D25	    			SUBWF	Ethernet_doUDP_len_L0, 0, 1
$AC38	$6F49	    			MOVWF	FARG_Ethernet_UserUDP+6, 1
$AC3A	$0E00	    			MOVLW	0
$AC3C	$5926	    			SUBWFB	Ethernet_doUDP_len_L0+1, 0, 1
$AC3E	$6F4A	    			MOVWF	FARG_Ethernet_UserUDP+7, 1
$AC40	$ECE3	F046			CALL	_Ethernet_UserUDP
$AC44	$C000	F625			MOVFF	STACK_0, Ethernet_doUDP_len_L0
$AC48	$C001	F626			MOVFF	STACK_0+1, Ethernet_doUDP_len_L0+1
$AC4C	$5000	    			MOVF	STACK_0, 0, 0
$AC4E	$1001	    			IORWF	STACK_0+1, 0, 0
$AC50	$E024	    			BZ	L_Ethernet_doUDP_81
$AC52	$0E1B	    			MOVLW	Ethernet_doUDP_rmtMAC_L1
$AC54	$0108	    			MOVLB	8
$AC56	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$AC58	$0E06	    			MOVLW	@Ethernet_doUDP_rmtMAC_L1
$AC5A	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$AC5C	$0EB5	    			MOVLW	181
$AC5E	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$AC60	$0E19	    			MOVLW	25
$AC62	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$AC64	$0E06	    			MOVLW	6
$AC66	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$AC68	$ECD7	F020			CALL	_Ethernet_getBytes
$AC6C	$0E1B	    			MOVLW	Ethernet_doUDP_rmtMAC_L1
$AC6E	$0108	    			MOVLB	8
$AC70	$6FAC	    			MOVWF	FARG_Ethernet_sendUDP2+0, 1
$AC72	$0E06	    			MOVLW	@Ethernet_doUDP_rmtMAC_L1
$AC74	$6FAD	    			MOVWF	FARG_Ethernet_sendUDP2+1, 1
$AC76	$0E27	    			MOVLW	Ethernet_doUDP_remoteIpAddr_L0
$AC78	$6FAE	    			MOVWF	FARG_Ethernet_sendUDP2+2, 1
$AC7A	$0E06	    			MOVLW	@Ethernet_doUDP_remoteIpAddr_L0
$AC7C	$6FAF	    			MOVWF	FARG_Ethernet_sendUDP2+3, 1
$AC7E	$C621	F8B0			MOVFF	Ethernet_doUDP_dport_L0, FARG_Ethernet_sendUDP2+4
$AC82	$C622	F8B1			MOVFF	Ethernet_doUDP_dport_L0+1, FARG_Ethernet_sendUDP2+5
$AC86	$C623	F8B2			MOVFF	Ethernet_doUDP_remotePort_L0, FARG_Ethernet_sendUDP2+6
$AC8A	$C624	F8B3			MOVFF	Ethernet_doUDP_remotePort_L0+1, FARG_Ethernet_sendUDP2+7
$AC8E	$C625	F8B4			MOVFF	Ethernet_doUDP_len_L0, FARG_Ethernet_sendUDP2+8
$AC92	$C626	F8B5			MOVFF	Ethernet_doUDP_len_L0+1, FARG_Ethernet_sendUDP2+9
$AC96	$ECBF	F01F			CALL	_Ethernet_sendUDP2
$AC9A	$	L_Ethernet_doUDP_81:
$AC9A	$	L_Ethernet_doUDP_80:
$AC9A	$	L_Ethernet_doUDP_78:
$AC9A	$0012	    			RETURN
$AC9C	$	_Ethernet_doTCP:
$AC9C	$C61A	F8EB			MOVFF	FARG_Ethernet_doTCP+4, FARG_Ethernet_readMem+0
$ACA0	$C61B	F8EC			MOVFF	FARG_Ethernet_doTCP+5, FARG_Ethernet_readMem+1
$ACA4	$ECE2	F007			CALL	_Ethernet_readMem
$ACA8	$C000	F62A			MOVFF	STACK_0, Ethernet_doTCP_remotePort_L0+1
$ACAC	$ECD4	F020			CALL	_Ethernet_getByte
$ACB0	$C000	F629			MOVFF	STACK_0, Ethernet_doTCP_remotePort_L0
$ACB4	$ECD4	F020			CALL	_Ethernet_getByte
$ACB8	$C000	F628			MOVFF	STACK_0, Ethernet_doTCP_port_L0+1
$ACBC	$ECD4	F020			CALL	_Ethernet_getByte
$ACC0	$C000	F627			MOVFF	STACK_0, Ethernet_doTCP_port_L0
$ACC4	$0106	    			MOVLB	6
$ACC6	$6B2F	    			CLRF	Ethernet_doTCP_tx_L0, 1
$ACC8	$6B34	    			CLRF	Ethernet_doTCP_transmit_L0, 1
$ACCA	$0E01	    			MOVLW	1
$ACCC	$6F35	    			MOVWF	Ethernet_doTCP_swap_L0, 1
$ACCE	$6B32	    			CLRF	Ethernet_doTCP_replen_L0, 1
$ACD0	$6B33	    			CLRF	Ethernet_doTCP_replen_L0+1, 1
$ACD2	$0E0C	    			MOVLW	12
$ACD4	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$ACD6	$0108	    			MOVLB	8
$ACD8	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$ACDA	$0E00	    			MOVLW	0
$ACDC	$0106	    			MOVLB	6
$ACDE	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$ACE0	$0108	    			MOVLB	8
$ACE2	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$ACE4	$ECE2	F007			CALL	_Ethernet_readMem
$ACE8	$C000	F62D			MOVFF	STACK_0, Ethernet_doTCP_len_L0
$ACEC	$0E00	    			MOVLW	0
$ACEE	$0106	    			MOVLB	6
$ACF0	$6F2E	    			MOVWF	Ethernet_doTCP_len_L0+1, 1
$ACF2	$332D	    			RRCF	Ethernet_doTCP_len_L0, 1, 1
$ACF4	$9F2D	    			BCF	Ethernet_doTCP_len_L0, 7, 1
$ACF6	$332D	    			RRCF	Ethernet_doTCP_len_L0, 1, 1
$ACF8	$9F2D	    			BCF	Ethernet_doTCP_len_L0, 7, 1
$ACFA	$0E00	    			MOVLW	0
$ACFC	$6F2E	    			MOVWF	Ethernet_doTCP_len_L0+1, 1
$ACFE	$0EFC	    			MOVLW	252
$AD00	$172D	    			ANDWF	Ethernet_doTCP_len_L0, 1, 1
$AD02	$0EFF	    			MOVLW	255
$AD04	$172E	    			ANDWF	Ethernet_doTCP_len_L0+1, 1, 1
$AD06	$0E3E	    			MOVLW	Ethernet_doTCP_remoteIpAddr_L0
$AD08	$0108	    			MOVLB	8
$AD0A	$6FAC	    			MOVWF	FARG_Ethernet_getBytes+0, 1
$AD0C	$0E06	    			MOVLW	@Ethernet_doTCP_remoteIpAddr_L0
$AD0E	$6FAD	    			MOVWF	FARG_Ethernet_getBytes+1, 1
$AD10	$0EC9	    			MOVLW	201
$AD12	$6FAE	    			MOVWF	FARG_Ethernet_getBytes+2, 1
$AD14	$0E19	    			MOVLW	25
$AD16	$6FAF	    			MOVWF	FARG_Ethernet_getBytes+3, 1
$AD18	$0E04	    			MOVLW	4
$AD1A	$6FB0	    			MOVWF	FARG_Ethernet_getBytes+4, 1
$AD1C	$ECD7	F020			CALL	_Ethernet_getBytes
$AD20	$0E0D	    			MOVLW	13
$AD22	$0106	    			MOVLB	6
$AD24	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$AD26	$0108	    			MOVLB	8
$AD28	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$AD2A	$0E00	    			MOVLW	0
$AD2C	$0106	    			MOVLB	6
$AD2E	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$AD30	$0108	    			MOVLB	8
$AD32	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$AD34	$ECE2	F007			CALL	_Ethernet_readMem
$AD38	$0E3F	    			MOVLW	63
$AD3A	$1400	    			ANDWF	STACK_0, 0, 0
$AD3C	$0106	    			MOVLB	6
$AD3E	$6F2B	    			MOVWF	Ethernet_doTCP_tcpFlags_L0, 1
$AD40	$6B2C	    			CLRF	Ethernet_doTCP_tcpFlags_L0+1, 1
$AD42	$0E00	    			MOVLW	0
$AD44	$172C	    			ANDWF	Ethernet_doTCP_tcpFlags_L0+1, 1, 1
$AD46	$0E00	    			MOVLW	0
$AD48	$6F2C	    			MOVWF	Ethernet_doTCP_tcpFlags_L0+1, 1
$AD4A	$0E0E	    			MOVLW	14
$AD4C	$0104	    			MOVLB	4
$AD4E	$5DEE	    			SUBWF	_Ethernet_pktLen, 0, 1
$AD50	$0106	    			MOVLB	6
$AD52	$6F30	    			MOVWF	Ethernet_doTCP_datalen_L0, 1
$AD54	$0E00	    			MOVLW	0
$AD56	$0104	    			MOVLB	4
$AD58	$59EF	    			SUBWFB	_Ethernet_pktLen+1, 0, 1
$AD5A	$0106	    			MOVLB	6
$AD5C	$6F31	    			MOVWF	Ethernet_doTCP_datalen_L0+1, 1
$AD5E	$5118	    			MOVF	FARG_Ethernet_doTCP+2, 0, 1
$AD60	$5F30	    			SUBWF	Ethernet_doTCP_datalen_L0, 1, 1
$AD62	$5119	    			MOVF	FARG_Ethernet_doTCP+3, 0, 1
$AD64	$5B31	    			SUBWFB	Ethernet_doTCP_datalen_L0+1, 1, 1
$AD66	$512D	    			MOVF	Ethernet_doTCP_len_L0, 0, 1
$AD68	$5F30	    			SUBWF	Ethernet_doTCP_datalen_L0, 1, 1
$AD6A	$512E	    			MOVF	Ethernet_doTCP_len_L0+1, 0, 1
$AD6C	$5B31	    			SUBWFB	Ethernet_doTCP_datalen_L0+1, 1, 1
$AD6E	$0E02	    			MOVLW	2
$AD70	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$AD72	$0108	    			MOVLB	8
$AD74	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$AD76	$0E00	    			MOVLW	0
$AD78	$0106	    			MOVLB	6
$AD7A	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$AD7C	$0108	    			MOVLB	8
$AD7E	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$AD80	$ECE2	F007			CALL	_Ethernet_readMem
$AD84	$C000	F8ED			MOVFF	STACK_0, FARG_Ethernet_writeMem+2
$AD88	$C61A	F8EB			MOVFF	FARG_Ethernet_doTCP+4, FARG_Ethernet_writeMem+0
$AD8C	$C61B	F8EC			MOVFF	FARG_Ethernet_doTCP+5, FARG_Ethernet_writeMem+1
$AD90	$ECD1	F007			CALL	_Ethernet_writeMem
$AD94	$0E03	    			MOVLW	3
$AD96	$0106	    			MOVLB	6
$AD98	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$AD9A	$0108	    			MOVLB	8
$AD9C	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$AD9E	$0E00	    			MOVLW	0
$ADA0	$0106	    			MOVLB	6
$ADA2	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$ADA4	$0108	    			MOVLB	8
$ADA6	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$ADA8	$ECE2	F007			CALL	_Ethernet_readMem
$ADAC	$C000	F8EB			MOVFF	STACK_0, FARG_Ethernet_putByte+0
$ADB0	$ECDF	F007			CALL	_Ethernet_putByte
$ADB4	$C629	F8D5			MOVFF	Ethernet_doTCP_remotePort_L0, FARG_Ethernet_writeMemory2+0
$ADB8	$C62A	F8D6			MOVFF	Ethernet_doTCP_remotePort_L0+1, FARG_Ethernet_writeMemory2+1
$ADBC	$EC1A	F010			CALL	_Ethernet_writeMemory2
$ADC0	$0E04	    			MOVLW	4
$ADC2	$0106	    			MOVLB	6
$ADC4	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$ADC6	$0108	    			MOVLB	8
$ADC8	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$ADCA	$0E00	    			MOVLW	0
$ADCC	$0106	    			MOVLB	6
$ADCE	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$ADD0	$0108	    			MOVLB	8
$ADD2	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$ADD4	$ECE2	F007			CALL	_Ethernet_readMem
$ADD8	$C000	F639			MOVFF	STACK_0, Ethernet_doTCP_syn_L0+3
$ADDC	$ECD4	F020			CALL	_Ethernet_getByte
$ADE0	$C000	F638			MOVFF	STACK_0, Ethernet_doTCP_syn_L0+2
$ADE4	$ECD4	F020			CALL	_Ethernet_getByte
$ADE8	$C000	F637			MOVFF	STACK_0, Ethernet_doTCP_syn_L0+1
$ADEC	$ECD4	F020			CALL	_Ethernet_getByte
$ADF0	$C000	F636			MOVFF	STACK_0, Ethernet_doTCP_syn_L0+0
$ADF4	$ECD4	F020			CALL	_Ethernet_getByte
$ADF8	$C000	F63D			MOVFF	STACK_0, Ethernet_doTCP_ack_L0+3
$ADFC	$ECD4	F020			CALL	_Ethernet_getByte
$AE00	$C000	F63C			MOVFF	STACK_0, Ethernet_doTCP_ack_L0+2
$AE04	$ECD4	F020			CALL	_Ethernet_getByte
$AE08	$C000	F63B			MOVFF	STACK_0, Ethernet_doTCP_ack_L0+1
$AE0C	$ECD4	F020			CALL	_Ethernet_getByte
$AE10	$C000	F63A			MOVFF	STACK_0, Ethernet_doTCP_ack_L0+0
$AE14	$0E00	    			MOVLW	0
$AE16	$0106	    			MOVLB	6
$AE18	$192C	    			XORWF	Ethernet_doTCP_tcpFlags_L0+1, 0, 1
$AE1A	$E102	    			BNZ	L_Ethernet_doTCP_250
$AE1C	$0E02	    			MOVLW	2
$AE1E	$192B	    			XORWF	Ethernet_doTCP_tcpFlags_L0, 0, 1
$AE20	$	L_Ethernet_doTCP_250:
$AE20	$E140	    			BNZ	L_Ethernet_doTCP_67
$AE22	$0E01	    			MOVLW	1
$AE24	$0106	    			MOVLB	6
$AE26	$2536	    			ADDWF	Ethernet_doTCP_syn_L0+0, 0, 1
$AE28	$6F3A	    			MOVWF	Ethernet_doTCP_ack_L0+0, 1
$AE2A	$0E00	    			MOVLW	0
$AE2C	$2137	    			ADDWFC	Ethernet_doTCP_syn_L0+1, 0, 1
$AE2E	$6F3B	    			MOVWF	Ethernet_doTCP_ack_L0+1, 1
$AE30	$0E00	    			MOVLW	0
$AE32	$2138	    			ADDWFC	Ethernet_doTCP_syn_L0+2, 0, 1
$AE34	$6F3C	    			MOVWF	Ethernet_doTCP_ack_L0+2, 1
$AE36	$0E00	    			MOVLW	0
$AE38	$2139	    			ADDWFC	Ethernet_doTCP_syn_L0+3, 0, 1
$AE3A	$6F3D	    			MOVWF	Ethernet_doTCP_ack_L0+3, 1
$AE3C	$0E12	    			MOVLW	18
$AE3E	$6F2B	    			MOVWF	Ethernet_doTCP_tcpFlags_L0, 1
$AE40	$0E00	    			MOVLW	0
$AE42	$6F2C	    			MOVWF	Ethernet_doTCP_tcpFlags_L0+1, 1
$AE44	$0EEC	    			MOVLW	ERXRDPT
$AE46	$0108	    			MOVLB	8
$AE48	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$AE4A	$0E0E	    			MOVLW	@ERXRDPT
$AE4C	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$AE4E	$ECCA	F007			CALL	_Ethernet_readReg2
$AE52	$C000	F636			MOVFF	STACK_0, Ethernet_doTCP_syn_L0+0
$AE56	$0EED	    			MOVLW	ERXRDPTH
$AE58	$0108	    			MOVLB	8
$AE5A	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$AE5C	$0E0E	    			MOVLW	@ERXRDPTH
$AE5E	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$AE60	$ECCA	F007			CALL	_Ethernet_readReg2
$AE64	$C000	F637			MOVFF	STACK_0, Ethernet_doTCP_syn_L0+1
$AE68	$0E7A	    			MOVLW	ERDPT
$AE6A	$0108	    			MOVLB	8
$AE6C	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$AE6E	$0E0F	    			MOVLW	@ERDPT
$AE70	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$AE72	$ECCA	F007			CALL	_Ethernet_readReg2
$AE76	$C000	F638			MOVFF	STACK_0, Ethernet_doTCP_syn_L0+2
$AE7A	$0E7B	    			MOVLW	ERDPTH
$AE7C	$0108	    			MOVLB	8
$AE7E	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$AE80	$0E0F	    			MOVLW	@ERDPTH
$AE82	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$AE84	$ECCA	F007			CALL	_Ethernet_readReg2
$AE88	$C000	F639			MOVFF	STACK_0, Ethernet_doTCP_syn_L0+3
$AE8C	$0106	    			MOVLB	6
$AE8E	$2B2F	    			INCF	Ethernet_doTCP_tx_L0, 1, 1
$AE90	$0E14	    			MOVLW	20
$AE92	$6F2D	    			MOVWF	Ethernet_doTCP_len_L0, 1
$AE94	$0E00	    			MOVLW	0
$AE96	$6F2E	    			MOVWF	Ethernet_doTCP_len_L0+1, 1
$AE98	$6B32	    			CLRF	Ethernet_doTCP_replen_L0, 1
$AE9A	$6B33	    			CLRF	Ethernet_doTCP_replen_L0+1, 1
$AE9C	$0104	    			MOVLB	4
$AE9E	$6BF0	    			CLRF	_Ethernet_closeTCP, 1
$AEA0	$D05E	    			BRA	L_Ethernet_doTCP_68
$AEA2	$	L_Ethernet_doTCP_67:
$AEA2	$0E00	    			MOVLW	0
$AEA4	$0106	    			MOVLB	6
$AEA6	$192C	    			XORWF	Ethernet_doTCP_tcpFlags_L0+1, 0, 1
$AEA8	$E102	    			BNZ	L_Ethernet_doTCP_251
$AEAA	$0E18	    			MOVLW	24
$AEAC	$192B	    			XORWF	Ethernet_doTCP_tcpFlags_L0, 0, 1
$AEAE	$	L_Ethernet_doTCP_251:
$AEAE	$E128	    			BNZ	L_Ethernet_doTCP_69
$AEB0	$C636	F61C			MOVFF	Ethernet_doTCP_syn_L0+0, Ethernet_doTCP_s_L1+0
$AEB4	$C637	F61D			MOVFF	Ethernet_doTCP_syn_L0+1, Ethernet_doTCP_s_L1+1
$AEB8	$C638	F61E			MOVFF	Ethernet_doTCP_syn_L0+2, Ethernet_doTCP_s_L1+2
$AEBC	$C639	F61F			MOVFF	Ethernet_doTCP_syn_L0+3, Ethernet_doTCP_s_L1+3
$AEC0	$C63A	F636			MOVFF	Ethernet_doTCP_ack_L0+0, Ethernet_doTCP_syn_L0+0
$AEC4	$C63B	F637			MOVFF	Ethernet_doTCP_ack_L0+1, Ethernet_doTCP_syn_L0+1
$AEC8	$C63C	F638			MOVFF	Ethernet_doTCP_ack_L0+2, Ethernet_doTCP_syn_L0+2
$AECC	$C63D	F639			MOVFF	Ethernet_doTCP_ack_L0+3, Ethernet_doTCP_syn_L0+3
$AED0	$0106	    			MOVLB	6
$AED2	$5130	    			MOVF	Ethernet_doTCP_datalen_L0, 0, 1
$AED4	$251C	    			ADDWF	Ethernet_doTCP_s_L1+0, 0, 1
$AED6	$6F3A	    			MOVWF	Ethernet_doTCP_ack_L0+0, 1
$AED8	$5131	    			MOVF	Ethernet_doTCP_datalen_L0+1, 0, 1
$AEDA	$211D	    			ADDWFC	Ethernet_doTCP_s_L1+1, 0, 1
$AEDC	$6F3B	    			MOVWF	Ethernet_doTCP_ack_L0+1, 1
$AEDE	$0E00	    			MOVLW	0
$AEE0	$211E	    			ADDWFC	Ethernet_doTCP_s_L1+2, 0, 1
$AEE2	$6F3C	    			MOVWF	Ethernet_doTCP_ack_L0+2, 1
$AEE4	$0E00	    			MOVLW	0
$AEE6	$211F	    			ADDWFC	Ethernet_doTCP_s_L1+3, 0, 1
$AEE8	$6F3D	    			MOVWF	Ethernet_doTCP_ack_L0+3, 1
$AEEA	$0E10	    			MOVLW	16
$AEEC	$6F2B	    			MOVWF	Ethernet_doTCP_tcpFlags_L0, 1
$AEEE	$0E00	    			MOVLW	0
$AEF0	$6F2C	    			MOVWF	Ethernet_doTCP_tcpFlags_L0+1, 1
$AEF2	$2B2F	    			INCF	Ethernet_doTCP_tx_L0, 1, 1
$AEF4	$0E14	    			MOVLW	20
$AEF6	$6F2D	    			MOVWF	Ethernet_doTCP_len_L0, 1
$AEF8	$0E00	    			MOVLW	0
$AEFA	$6F2E	    			MOVWF	Ethernet_doTCP_len_L0+1, 1
$AEFC	$2B34	    			INCF	Ethernet_doTCP_transmit_L0, 1, 1
$AEFE	$D02F	    			BRA	L_Ethernet_doTCP_70
$AF00	$	L_Ethernet_doTCP_69:
$AF00	$0E00	    			MOVLW	0
$AF02	$0106	    			MOVLB	6
$AF04	$192C	    			XORWF	Ethernet_doTCP_tcpFlags_L0+1, 0, 1
$AF06	$E102	    			BNZ	L_Ethernet_doTCP_252
$AF08	$0E11	    			MOVLW	17
$AF0A	$192B	    			XORWF	Ethernet_doTCP_tcpFlags_L0, 0, 1
$AF0C	$	L_Ethernet_doTCP_252:
$AF0C	$E128	    			BNZ	L_Ethernet_doTCP_71
$AF0E	$C636	F620			MOVFF	Ethernet_doTCP_syn_L0+0, Ethernet_doTCP_l_L1
$AF12	$C637	F621			MOVFF	Ethernet_doTCP_syn_L0+1, Ethernet_doTCP_l_L1+1
$AF16	$C638	F622			MOVFF	Ethernet_doTCP_syn_L0+2, Ethernet_doTCP_l_L1+2
$AF1A	$C639	F623			MOVFF	Ethernet_doTCP_syn_L0+3, Ethernet_doTCP_l_L1+3
$AF1E	$C63A	F636			MOVFF	Ethernet_doTCP_ack_L0+0, Ethernet_doTCP_syn_L0+0
$AF22	$C63B	F637			MOVFF	Ethernet_doTCP_ack_L0+1, Ethernet_doTCP_syn_L0+1
$AF26	$C63C	F638			MOVFF	Ethernet_doTCP_ack_L0+2, Ethernet_doTCP_syn_L0+2
$AF2A	$C63D	F639			MOVFF	Ethernet_doTCP_ack_L0+3, Ethernet_doTCP_syn_L0+3
$AF2E	$0E01	    			MOVLW	1
$AF30	$0106	    			MOVLB	6
$AF32	$2520	    			ADDWF	Ethernet_doTCP_l_L1, 0, 1
$AF34	$6F3A	    			MOVWF	Ethernet_doTCP_ack_L0+0, 1
$AF36	$0E00	    			MOVLW	0
$AF38	$2121	    			ADDWFC	Ethernet_doTCP_l_L1+1, 0, 1
$AF3A	$6F3B	    			MOVWF	Ethernet_doTCP_ack_L0+1, 1
$AF3C	$0E00	    			MOVLW	0
$AF3E	$2122	    			ADDWFC	Ethernet_doTCP_l_L1+2, 0, 1
$AF40	$6F3C	    			MOVWF	Ethernet_doTCP_ack_L0+2, 1
$AF42	$0E00	    			MOVLW	0
$AF44	$2123	    			ADDWFC	Ethernet_doTCP_l_L1+3, 0, 1
$AF46	$6F3D	    			MOVWF	Ethernet_doTCP_ack_L0+3, 1
$AF48	$0E10	    			MOVLW	16
$AF4A	$6F2B	    			MOVWF	Ethernet_doTCP_tcpFlags_L0, 1
$AF4C	$0E00	    			MOVLW	0
$AF4E	$6F2C	    			MOVWF	Ethernet_doTCP_tcpFlags_L0+1, 1
$AF50	$2B2F	    			INCF	Ethernet_doTCP_tx_L0, 1, 1
$AF52	$0E14	    			MOVLW	20
$AF54	$6F2D	    			MOVWF	Ethernet_doTCP_len_L0, 1
$AF56	$0E00	    			MOVLW	0
$AF58	$6F2E	    			MOVWF	Ethernet_doTCP_len_L0+1, 1
$AF5A	$6B32	    			CLRF	Ethernet_doTCP_replen_L0, 1
$AF5C	$6B33	    			CLRF	Ethernet_doTCP_replen_L0+1, 1
$AF5E	$	L_Ethernet_doTCP_71:
$AF5E	$	L_Ethernet_doTCP_70:
$AF5E	$	L_Ethernet_doTCP_68:
$AF5E	$0106	    			MOVLB	6
$AF60	$0106	    			MOVLB	6
$AF62	$532F	    			MOVF	Ethernet_doTCP_tx_L0, 1, 1
$AF64	$B4D8	    			BTFSC	STATUS, Z, 0
$AF66	$D1D6	    			BRA	L_Ethernet_doTCP_72
$AF68	$	___Ethernet_doTCP_MORE2SEND:
$AF68	$0E04	    			MOVLW	4
$AF6A	$0106	    			MOVLB	6
$AF6C	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$AF6E	$0108	    			MOVLB	8
$AF70	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$AF72	$0E00	    			MOVLW	0
$AF74	$0106	    			MOVLB	6
$AF76	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$AF78	$0108	    			MOVLB	8
$AF7A	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$AF7C	$C639	F8D7			MOVFF	Ethernet_doTCP_syn_L0+3, FARG_Ethernet_writeMemory+2
$AF80	$C638	F8D8			MOVFF	Ethernet_doTCP_syn_L0+2, FARG_Ethernet_writeMemory+3
$AF84	$EC4D	F010			CALL	_Ethernet_writeMemory
$AF88	$C637	F8EB			MOVFF	Ethernet_doTCP_syn_L0+1, FARG_Ethernet_putByte+0
$AF8C	$ECDF	F007			CALL	_Ethernet_putByte
$AF90	$C636	F8EB			MOVFF	Ethernet_doTCP_syn_L0+0, FARG_Ethernet_putByte+0
$AF94	$ECDF	F007			CALL	_Ethernet_putByte
$AF98	$C63D	F8EB			MOVFF	Ethernet_doTCP_ack_L0+3, FARG_Ethernet_putByte+0
$AF9C	$ECDF	F007			CALL	_Ethernet_putByte
$AFA0	$C63C	F8EB			MOVFF	Ethernet_doTCP_ack_L0+2, FARG_Ethernet_putByte+0
$AFA4	$ECDF	F007			CALL	_Ethernet_putByte
$AFA8	$C63B	F8EB			MOVFF	Ethernet_doTCP_ack_L0+1, FARG_Ethernet_putByte+0
$AFAC	$ECDF	F007			CALL	_Ethernet_putByte
$AFB0	$C63A	F8EB			MOVFF	Ethernet_doTCP_ack_L0+0, FARG_Ethernet_putByte+0
$AFB4	$ECDF	F007			CALL	_Ethernet_putByte
$AFB8	$0E0C	    			MOVLW	12
$AFBA	$0106	    			MOVLB	6
$AFBC	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$AFBE	$0108	    			MOVLB	8
$AFC0	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$AFC2	$0E00	    			MOVLW	0
$AFC4	$0106	    			MOVLB	6
$AFC6	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$AFC8	$0108	    			MOVLB	8
$AFCA	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$AFCC	$ECE2	F007			CALL	_Ethernet_readMem
$AFD0	$0E0F	    			MOVLW	15
$AFD2	$1400	    			ANDWF	STACK_0, 0, 0
$AFD4	$0108	    			MOVLB	8
$AFD6	$6FED	    			MOVWF	FARG_Ethernet_writeMem+2, 1
$AFD8	$C62D	F000			MOVFF	Ethernet_doTCP_len_L0, STACK_0
$AFDC	$3600	    			RLCF	STACK_0, 1, 0
$AFDE	$9000	    			BCF	STACK_0, 0, 0
$AFE0	$3600	    			RLCF	STACK_0, 1, 0
$AFE2	$9000	    			BCF	STACK_0, 0, 0
$AFE4	$5000	    			MOVF	STACK_0, 0, 0
$AFE6	$13ED	    			IORWF	FARG_Ethernet_writeMem+2, 1, 1
$AFE8	$0E0C	    			MOVLW	12
$AFEA	$0106	    			MOVLB	6
$AFEC	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$AFEE	$0108	    			MOVLB	8
$AFF0	$6FEB	    			MOVWF	FARG_Ethernet_writeMem+0, 1
$AFF2	$0E00	    			MOVLW	0
$AFF4	$0106	    			MOVLB	6
$AFF6	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$AFF8	$0108	    			MOVLB	8
$AFFA	$6FEC	    			MOVWF	FARG_Ethernet_writeMem+1, 1
$AFFC	$ECD1	F007			CALL	_Ethernet_writeMem
$B000	$0E0D	    			MOVLW	13
$B002	$0106	    			MOVLB	6
$B004	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$B006	$0108	    			MOVLB	8
$B008	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$B00A	$0E00	    			MOVLW	0
$B00C	$0106	    			MOVLB	6
$B00E	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$B010	$0108	    			MOVLB	8
$B012	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$B014	$ECE2	F007			CALL	_Ethernet_readMem
$B018	$0EC0	    			MOVLW	192
$B01A	$1400	    			ANDWF	STACK_0, 0, 0
$B01C	$0108	    			MOVLB	8
$B01E	$6FED	    			MOVWF	FARG_Ethernet_writeMem+2, 1
$B020	$0106	    			MOVLB	6
$B022	$512B	    			MOVF	Ethernet_doTCP_tcpFlags_L0, 0, 1
$B024	$0108	    			MOVLB	8
$B026	$13ED	    			IORWF	FARG_Ethernet_writeMem+2, 1, 1
$B028	$0E0D	    			MOVLW	13
$B02A	$0106	    			MOVLB	6
$B02C	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$B02E	$0108	    			MOVLB	8
$B030	$6FEB	    			MOVWF	FARG_Ethernet_writeMem+0, 1
$B032	$0E00	    			MOVLW	0
$B034	$0106	    			MOVLB	6
$B036	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$B038	$0108	    			MOVLB	8
$B03A	$6FEC	    			MOVWF	FARG_Ethernet_writeMem+1, 1
$B03C	$ECD1	F007			CALL	_Ethernet_writeMem
$B040	$0106	    			MOVLB	6
$B042	$5118	    			MOVF	FARG_Ethernet_doTCP+2, 0, 1
$B044	$2532	    			ADDWF	Ethernet_doTCP_replen_L0, 0, 1
$B046	$6F30	    			MOVWF	Ethernet_doTCP_datalen_L0, 1
$B048	$5119	    			MOVF	FARG_Ethernet_doTCP+3, 0, 1
$B04A	$2133	    			ADDWFC	Ethernet_doTCP_replen_L0+1, 0, 1
$B04C	$6F31	    			MOVWF	Ethernet_doTCP_datalen_L0+1, 1
$B04E	$512D	    			MOVF	Ethernet_doTCP_len_L0, 0, 1
$B050	$2730	    			ADDWF	Ethernet_doTCP_datalen_L0, 1, 1
$B052	$512E	    			MOVF	Ethernet_doTCP_len_L0+1, 0, 1
$B054	$2331	    			ADDWFC	Ethernet_doTCP_datalen_L0+1, 1, 1
$B056	$5335	    			MOVF	Ethernet_doTCP_swap_L0, 1, 1
$B058	$E004	    			BZ	L_Ethernet_doTCP_73
$B05A	$EC3D	F045			CALL	_Ethernet_MACswap
$B05E	$ECE6	F046			CALL	_Ethernet_IPswap
$B062	$	L_Ethernet_doTCP_73:
$B062	$0EBF	    			MOVLW	191
$B064	$0108	    			MOVLB	8
$B066	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B068	$0E19	    			MOVLW	25
$B06A	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B06C	$C631	F8D7			MOVFF	Ethernet_doTCP_datalen_L0+1, FARG_Ethernet_writeMemory+2
$B070	$C630	F8D8			MOVFF	Ethernet_doTCP_datalen_L0, FARG_Ethernet_writeMemory+3
$B074	$EC4D	F010			CALL	_Ethernet_writeMemory
$B078	$0EC7	    			MOVLW	199
$B07A	$0108	    			MOVLB	8
$B07C	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B07E	$0E19	    			MOVLW	25
$B080	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B082	$6BD7	    			CLRF	FARG_Ethernet_writeMemory+2, 1
$B084	$6BD8	    			CLRF	FARG_Ethernet_writeMemory+3, 1
$B086	$EC4D	F010			CALL	_Ethernet_writeMemory
$B08A	$0EBD	    			MOVLW	189
$B08C	$0108	    			MOVLB	8
$B08E	$6FD5	    			MOVWF	FARG_Ethernet_checksum+0, 1
$B090	$0E19	    			MOVLW	25
$B092	$6FD6	    			MOVWF	FARG_Ethernet_checksum+1, 1
$B094	$C618	F8D7			MOVFF	FARG_Ethernet_doTCP+2, FARG_Ethernet_checksum+2
$B098	$C619	F8D8			MOVFF	FARG_Ethernet_doTCP+3, FARG_Ethernet_checksum+3
$B09C	$EC21	F010			CALL	_Ethernet_checksum
$B0A0	$0EF6	    			MOVLW	EDMACS
$B0A2	$0108	    			MOVLB	8
$B0A4	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B0A6	$0E0E	    			MOVLW	@EDMACS
$B0A8	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B0AA	$ECCA	F007			CALL	_Ethernet_readReg2
$B0AE	$C000	F642			MOVFF	STACK_0, FLOC_Ethernet_doTCP+38
$B0B2	$0EF7	    			MOVLW	EDMACSH
$B0B4	$0108	    			MOVLB	8
$B0B6	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B0B8	$0E0E	    			MOVLW	@EDMACSH
$B0BA	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B0BC	$ECCA	F007			CALL	_Ethernet_readReg2
$B0C0	$C000	F8D7			MOVFF	STACK_0, FARG_Ethernet_writeMemory+2
$B0C4	$0EC7	    			MOVLW	199
$B0C6	$0108	    			MOVLB	8
$B0C8	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B0CA	$0E19	    			MOVLW	25
$B0CC	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B0CE	$C642	F8D8			MOVFF	FLOC_Ethernet_doTCP+38, FARG_Ethernet_writeMemory+3
$B0D2	$EC4D	F010			CALL	_Ethernet_writeMemory
$B0D6	$0EBD	    			MOVLW	189
$B0D8	$0106	    			MOVLB	6
$B0DA	$2530	    			ADDWF	Ethernet_doTCP_datalen_L0, 0, 1
$B0DC	$6F25	    			MOVWF	Ethernet_doTCP_packetEndAddr_L1, 1
$B0DE	$0E19	    			MOVLW	25
$B0E0	$2131	    			ADDWFC	Ethernet_doTCP_datalen_L0+1, 0, 1
$B0E2	$6F26	    			MOVWF	Ethernet_doTCP_packetEndAddr_L1+1, 1
$B0E4	$0E10	    			MOVLW	16
$B0E6	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$B0E8	$0108	    			MOVLB	8
$B0EA	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B0EC	$0E00	    			MOVLW	0
$B0EE	$0106	    			MOVLB	6
$B0F0	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$B0F2	$0108	    			MOVLB	8
$B0F4	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B0F6	$6BD7	    			CLRF	FARG_Ethernet_writeMemory+2, 1
$B0F8	$6BD8	    			CLRF	FARG_Ethernet_writeMemory+3, 1
$B0FA	$EC4D	F010			CALL	_Ethernet_writeMemory
$B0FE	$0E01	    			MOVLW	1
$B100	$0106	    			MOVLB	6
$B102	$1530	    			ANDWF	Ethernet_doTCP_datalen_L0, 0, 1
$B104	$6F24	    			MOVWF	Ethernet_doTCP_align_L1, 1
$B106	$C625	F8EB			MOVFF	Ethernet_doTCP_packetEndAddr_L1, FARG_Ethernet_writeMem+0
$B10A	$C626	F8EC			MOVFF	Ethernet_doTCP_packetEndAddr_L1+1, FARG_Ethernet_writeMem+1
$B10E	$0108	    			MOVLB	8
$B110	$6BED	    			CLRF	FARG_Ethernet_writeMem+2, 1
$B112	$ECD1	F007			CALL	_Ethernet_writeMem
$B116	$0EC9	    			MOVLW	201
$B118	$0108	    			MOVLB	8
$B11A	$6FD5	    			MOVWF	FARG_Ethernet_RAMcopy+0, 1
$B11C	$0E19	    			MOVLW	25
$B11E	$6FD6	    			MOVWF	FARG_Ethernet_RAMcopy+1, 1
$B120	$0ED1	    			MOVLW	209
$B122	$6FD7	    			MOVWF	FARG_Ethernet_RAMcopy+2, 1
$B124	$0E19	    			MOVLW	25
$B126	$6FD8	    			MOVWF	FARG_Ethernet_RAMcopy+3, 1
$B128	$0106	    			MOVLB	6
$B12A	$5124	    			MOVF	Ethernet_doTCP_align_L1, 0, 1
$B12C	$2525	    			ADDWF	Ethernet_doTCP_packetEndAddr_L1, 0, 1
$B12E	$0108	    			MOVLB	8
$B130	$6FD9	    			MOVWF	FARG_Ethernet_RAMcopy+4, 1
$B132	$0E00	    			MOVLW	0
$B134	$0106	    			MOVLB	6
$B136	$2126	    			ADDWFC	Ethernet_doTCP_packetEndAddr_L1+1, 0, 1
$B138	$0108	    			MOVLB	8
$B13A	$6FDA	    			MOVWF	FARG_Ethernet_RAMcopy+5, 1
$B13C	$6BDB	    			CLRF	FARG_Ethernet_RAMcopy+6, 1
$B13E	$EC5A	F010			CALL	_Ethernet_RAMcopy
$B142	$0E08	    			MOVLW	8
$B144	$0106	    			MOVLB	6
$B146	$2525	    			ADDWF	Ethernet_doTCP_packetEndAddr_L1, 0, 1
$B148	$0108	    			MOVLB	8
$B14A	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B14C	$0E00	    			MOVLW	0
$B14E	$0106	    			MOVLB	6
$B150	$2126	    			ADDWFC	Ethernet_doTCP_packetEndAddr_L1+1, 0, 1
$B152	$0108	    			MOVLB	8
$B154	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B156	$0106	    			MOVLB	6
$B158	$5124	    			MOVF	Ethernet_doTCP_align_L1, 0, 1
$B15A	$0108	    			MOVLB	8
$B15C	$27D5	    			ADDWF	FARG_Ethernet_writeMemory+0, 1, 1
$B15E	$B0D8	    			BTFSC	STATUS, C, 0
$B160	$2BD6	    			INCF	FARG_Ethernet_writeMemory+1, 1, 1
$B162	$6BD7	    			CLRF	FARG_Ethernet_writeMemory+2, 1
$B164	$0E06	    			MOVLW	6
$B166	$6FD8	    			MOVWF	FARG_Ethernet_writeMemory+3, 1
$B168	$EC4D	F010			CALL	_Ethernet_writeMemory
$B16C	$0E0A	    			MOVLW	10
$B16E	$0106	    			MOVLB	6
$B170	$2525	    			ADDWF	Ethernet_doTCP_packetEndAddr_L1, 0, 1
$B172	$0108	    			MOVLB	8
$B174	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B176	$0E00	    			MOVLW	0
$B178	$0106	    			MOVLB	6
$B17A	$2126	    			ADDWFC	Ethernet_doTCP_packetEndAddr_L1+1, 0, 1
$B17C	$0108	    			MOVLB	8
$B17E	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B180	$0106	    			MOVLB	6
$B182	$5124	    			MOVF	Ethernet_doTCP_align_L1, 0, 1
$B184	$0108	    			MOVLB	8
$B186	$27D5	    			ADDWF	FARG_Ethernet_writeMemory+0, 1, 1
$B188	$B0D8	    			BTFSC	STATUS, C, 0
$B18A	$2BD6	    			INCF	FARG_Ethernet_writeMemory+1, 1, 1
$B18C	$0106	    			MOVLB	6
$B18E	$5132	    			MOVF	Ethernet_doTCP_replen_L0, 0, 1
$B190	$252D	    			ADDWF	Ethernet_doTCP_len_L0, 0, 1
$B192	$6E03	    			MOVWF	STACK_3, 0
$B194	$5133	    			MOVF	Ethernet_doTCP_replen_L0+1, 0, 1
$B196	$212E	    			ADDWFC	Ethernet_doTCP_len_L0+1, 0, 1
$B198	$6E04	    			MOVWF	STACK_3+1, 0
$B19A	$C004	F000			MOVFF	STACK_3+1, STACK_0
$B19E	$6A01	    			CLRF	STACK_0+1, 0
$B1A0	$C000	F8D7			MOVFF	STACK_0, FARG_Ethernet_writeMemory+2
$B1A4	$C003	F8D8			MOVFF	STACK_3, FARG_Ethernet_writeMemory+3
$B1A8	$EC4D	F010			CALL	_Ethernet_writeMemory
$B1AC	$C61A	F8D5			MOVFF	FARG_Ethernet_doTCP+4, FARG_Ethernet_checksum+0
$B1B0	$C61B	F8D6			MOVFF	FARG_Ethernet_doTCP+5, FARG_Ethernet_checksum+1
$B1B4	$0106	    			MOVLB	6
$B1B6	$5132	    			MOVF	Ethernet_doTCP_replen_L0, 0, 1
$B1B8	$252D	    			ADDWF	Ethernet_doTCP_len_L0, 0, 1
$B1BA	$0108	    			MOVLB	8
$B1BC	$6FD7	    			MOVWF	FARG_Ethernet_checksum+2, 1
$B1BE	$0106	    			MOVLB	6
$B1C0	$5133	    			MOVF	Ethernet_doTCP_replen_L0+1, 0, 1
$B1C2	$212E	    			ADDWFC	Ethernet_doTCP_len_L0+1, 0, 1
$B1C4	$0108	    			MOVLB	8
$B1C6	$6FD8	    			MOVWF	FARG_Ethernet_checksum+3, 1
$B1C8	$0E0C	    			MOVLW	12
$B1CA	$27D7	    			ADDWF	FARG_Ethernet_checksum+2, 1, 1
$B1CC	$0E00	    			MOVLW	0
$B1CE	$23D8	    			ADDWFC	FARG_Ethernet_checksum+3, 1, 1
$B1D0	$0106	    			MOVLB	6
$B1D2	$5124	    			MOVF	Ethernet_doTCP_align_L1, 0, 1
$B1D4	$0108	    			MOVLB	8
$B1D6	$27D7	    			ADDWF	FARG_Ethernet_checksum+2, 1, 1
$B1D8	$B0D8	    			BTFSC	STATUS, C, 0
$B1DA	$2BD8	    			INCF	FARG_Ethernet_checksum+3, 1, 1
$B1DC	$EC21	F010			CALL	_Ethernet_checksum
$B1E0	$0EF6	    			MOVLW	EDMACS
$B1E2	$0108	    			MOVLB	8
$B1E4	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B1E6	$0E0E	    			MOVLW	@EDMACS
$B1E8	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B1EA	$ECCA	F007			CALL	_Ethernet_readReg2
$B1EE	$C000	F642			MOVFF	STACK_0, FLOC_Ethernet_doTCP+38
$B1F2	$0EF7	    			MOVLW	EDMACSH
$B1F4	$0108	    			MOVLB	8
$B1F6	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B1F8	$0E0E	    			MOVLW	@EDMACSH
$B1FA	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B1FC	$ECCA	F007			CALL	_Ethernet_readReg2
$B200	$C000	F8D7			MOVFF	STACK_0, FARG_Ethernet_writeMemory+2
$B204	$0E10	    			MOVLW	16
$B206	$0106	    			MOVLB	6
$B208	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$B20A	$0108	    			MOVLB	8
$B20C	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B20E	$0E00	    			MOVLW	0
$B210	$0106	    			MOVLB	6
$B212	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$B214	$0108	    			MOVLB	8
$B216	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B218	$C642	F8D8			MOVFF	FLOC_Ethernet_doTCP+38, FARG_Ethernet_writeMemory+3
$B21C	$EC4D	F010			CALL	_Ethernet_writeMemory
$B220	$0E0E	    			MOVLW	14
$B222	$0106	    			MOVLB	6
$B224	$2530	    			ADDWF	Ethernet_doTCP_datalen_L0, 0, 1
$B226	$0108	    			MOVLB	8
$B228	$6FD5	    			MOVWF	FARG_Ethernet_TXpacket+0, 1
$B22A	$0E00	    			MOVLW	0
$B22C	$0106	    			MOVLB	6
$B22E	$2131	    			ADDWFC	Ethernet_doTCP_datalen_L0+1, 0, 1
$B230	$0108	    			MOVLB	8
$B232	$6FD6	    			MOVWF	FARG_Ethernet_TXpacket+1, 1
$B234	$ECEE	F010			CALL	_Ethernet_TXpacket
$B238	$0106	    			MOVLB	6
$B23A	$5334	    			MOVF	Ethernet_doTCP_transmit_L0, 1, 1
$B23C	$E051	    			BZ	L_Ethernet_doTCP_74
$B23E	$0E10	    			MOVLW	16
$B240	$6F2B	    			MOVWF	Ethernet_doTCP_tcpFlags_L0, 1
$B242	$0E00	    			MOVLW	0
$B244	$6F2C	    			MOVWF	Ethernet_doTCP_tcpFlags_L0+1, 1
$B246	$6B34	    			CLRF	Ethernet_doTCP_transmit_L0, 1
$B248	$0104	    			MOVLB	4
$B24A	$2BF0	    			INCF	_Ethernet_closeTCP, 1, 1
$B24C	$0106	    			MOVLB	6
$B24E	$6B35	    			CLRF	Ethernet_doTCP_swap_L0, 1
$B250	$0EE2	    			MOVLW	EWRPT
$B252	$0108	    			MOVLB	8
$B254	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$B256	$0E0E	    			MOVLW	@EWRPT
$B258	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$B25A	$0106	    			MOVLB	6
$B25C	$512D	    			MOVF	Ethernet_doTCP_len_L0, 0, 1
$B25E	$251A	    			ADDWF	FARG_Ethernet_doTCP+4, 0, 1
$B260	$0108	    			MOVLB	8
$B262	$6FFA	    			MOVWF	FARG_Ethernet_writeAddr2+2, 1
$B264	$0106	    			MOVLB	6
$B266	$512E	    			MOVF	Ethernet_doTCP_len_L0+1, 0, 1
$B268	$211B	    			ADDWFC	FARG_Ethernet_doTCP+5, 0, 1
$B26A	$0108	    			MOVLB	8
$B26C	$6FFB	    			MOVWF	FARG_Ethernet_writeAddr2+3, 1
$B26E	$EC67	F002			CALL	_Ethernet_writeAddr2
$B272	$0E0E	    			MOVLW	14
$B274	$0106	    			MOVLB	6
$B276	$2516	    			ADDWF	FARG_Ethernet_doTCP+0, 0, 1
$B278	$6F43	    			MOVWF	FARG_Ethernet_setRxReadAddress+0, 1
$B27A	$0E00	    			MOVLW	0
$B27C	$2117	    			ADDWFC	FARG_Ethernet_doTCP+1, 0, 1
$B27E	$6F44	    			MOVWF	FARG_Ethernet_setRxReadAddress+1, 1
$B280	$5118	    			MOVF	FARG_Ethernet_doTCP+2, 0, 1
$B282	$2743	    			ADDWF	FARG_Ethernet_setRxReadAddress+0, 1, 1
$B284	$5119	    			MOVF	FARG_Ethernet_doTCP+3, 0, 1
$B286	$2344	    			ADDWFC	FARG_Ethernet_setRxReadAddress+1, 1, 1
$B288	$512D	    			MOVF	Ethernet_doTCP_len_L0, 0, 1
$B28A	$2743	    			ADDWF	FARG_Ethernet_setRxReadAddress+0, 1, 1
$B28C	$512E	    			MOVF	Ethernet_doTCP_len_L0+1, 0, 1
$B28E	$2344	    			ADDWFC	FARG_Ethernet_setRxReadAddress+1, 1, 1
$B290	$EC5B	F045			CALL	_Ethernet_setRxReadAddress
$B294	$0E3E	    			MOVLW	Ethernet_doTCP_remoteIpAddr_L0
$B296	$0106	    			MOVLB	6
$B298	$6F43	    			MOVWF	FARG_Ethernet_UserTCP+0, 1
$B29A	$0E06	    			MOVLW	@Ethernet_doTCP_remoteIpAddr_L0
$B29C	$6F44	    			MOVWF	FARG_Ethernet_UserTCP+1, 1
$B29E	$C629	F645			MOVFF	Ethernet_doTCP_remotePort_L0, FARG_Ethernet_UserTCP+2
$B2A2	$C62A	F646			MOVFF	Ethernet_doTCP_remotePort_L0+1, FARG_Ethernet_UserTCP+3
$B2A6	$C627	F647			MOVFF	Ethernet_doTCP_port_L0, FARG_Ethernet_UserTCP+4
$B2AA	$C628	F648			MOVFF	Ethernet_doTCP_port_L0+1, FARG_Ethernet_UserTCP+5
$B2AE	$0E0E	    			MOVLW	14
$B2B0	$0104	    			MOVLB	4
$B2B2	$5DEE	    			SUBWF	_Ethernet_pktLen, 0, 1
$B2B4	$0106	    			MOVLB	6
$B2B6	$6F49	    			MOVWF	FARG_Ethernet_UserTCP+6, 1
$B2B8	$0E00	    			MOVLW	0
$B2BA	$0104	    			MOVLB	4
$B2BC	$59EF	    			SUBWFB	_Ethernet_pktLen+1, 0, 1
$B2BE	$0106	    			MOVLB	6
$B2C0	$6F4A	    			MOVWF	FARG_Ethernet_UserTCP+7, 1
$B2C2	$5118	    			MOVF	FARG_Ethernet_doTCP+2, 0, 1
$B2C4	$5F49	    			SUBWF	FARG_Ethernet_UserTCP+6, 1, 1
$B2C6	$5119	    			MOVF	FARG_Ethernet_doTCP+3, 0, 1
$B2C8	$5B4A	    			SUBWFB	FARG_Ethernet_UserTCP+7, 1, 1
$B2CA	$512D	    			MOVF	Ethernet_doTCP_len_L0, 0, 1
$B2CC	$5F49	    			SUBWF	FARG_Ethernet_UserTCP+6, 1, 1
$B2CE	$512E	    			MOVF	Ethernet_doTCP_len_L0+1, 0, 1
$B2D0	$5B4A	    			SUBWFB	FARG_Ethernet_UserTCP+7, 1, 1
$B2D2	$EC04	F047			CALL	_Ethernet_UserTCP
$B2D6	$C000	F632			MOVFF	STACK_0, Ethernet_doTCP_replen_L0
$B2DA	$C001	F633			MOVFF	STACK_0+1, Ethernet_doTCP_replen_L0+1
$B2DE	$D644	    			BRA	___Ethernet_doTCP_MORE2SEND
$B2E0	$	L_Ethernet_doTCP_74:
$B2E0	$0104	    			MOVLB	4
$B2E2	$53F0	    			MOVF	_Ethernet_closeTCP, 1, 1
$B2E4	$E017	    			BZ	L_Ethernet_doTCP_75
$B2E6	$0106	    			MOVLB	6
$B2E8	$5132	    			MOVF	Ethernet_doTCP_replen_L0, 0, 1
$B2EA	$2736	    			ADDWF	Ethernet_doTCP_syn_L0+0, 1, 1
$B2EC	$5133	    			MOVF	Ethernet_doTCP_replen_L0+1, 0, 1
$B2EE	$2337	    			ADDWFC	Ethernet_doTCP_syn_L0+1, 1, 1
$B2F0	$0E00	    			MOVLW	0
$B2F2	$2338	    			ADDWFC	Ethernet_doTCP_syn_L0+2, 1, 1
$B2F4	$2339	    			ADDWFC	Ethernet_doTCP_syn_L0+3, 1, 1
$B2F6	$0E11	    			MOVLW	17
$B2F8	$6F2B	    			MOVWF	Ethernet_doTCP_tcpFlags_L0, 1
$B2FA	$0E00	    			MOVLW	0
$B2FC	$6F2C	    			MOVWF	Ethernet_doTCP_tcpFlags_L0+1, 1
$B2FE	$0104	    			MOVLB	4
$B300	$6BF0	    			CLRF	_Ethernet_closeTCP, 1
$B302	$0106	    			MOVLB	6
$B304	$6B35	    			CLRF	Ethernet_doTCP_swap_L0, 1
$B306	$0E14	    			MOVLW	20
$B308	$6F2D	    			MOVWF	Ethernet_doTCP_len_L0, 1
$B30A	$0E00	    			MOVLW	0
$B30C	$6F2E	    			MOVWF	Ethernet_doTCP_len_L0+1, 1
$B30E	$6B32	    			CLRF	Ethernet_doTCP_replen_L0, 1
$B310	$6B33	    			CLRF	Ethernet_doTCP_replen_L0+1, 1
$B312	$D62A	    			BRA	___Ethernet_doTCP_MORE2SEND
$B314	$	L_Ethernet_doTCP_75:
$B314	$	L_Ethernet_doTCP_72:
$B314	$0106	    			MOVLB	6
$B316	$0012	    			RETURN
$B318	$	_Ethernet_readPHY:
$B318	$C603	FEB4			MOVFF	FARG_Ethernet_readPHY+0, MIREGADR
$B31C	$EC9B	F054			CALL	_Ethernet_delay
$B320	$0EFF	    			MOVLW	255
$B322	$010E	    			MOVLB	14
$B324	$17B2	    			ANDWF	MICMD, 1, 1
$B326	$0EB6	    			MOVLW	MIWRL
$B328	$0108	    			MOVLB	8
$B32A	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B32C	$0E0E	    			MOVLW	@MIWRL
$B32E	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B330	$ECCA	F007			CALL	_Ethernet_readReg2
$B334	$C606	FFE1			MOVFF	FARG_Ethernet_readPHY+3, FSR1L
$B338	$C607	FFE2			MOVFF	FARG_Ethernet_readPHY+4, FSR1H
$B33C	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$B340	$0EB7	    			MOVLW	MIWRH
$B342	$0108	    			MOVLB	8
$B344	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B346	$0E0E	    			MOVLW	@MIWRH
$B348	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B34A	$ECCA	F007			CALL	_Ethernet_readReg2
$B34E	$C604	FFE1			MOVFF	FARG_Ethernet_readPHY+1, FSR1L
$B352	$C605	FFE2			MOVFF	FARG_Ethernet_readPHY+2, FSR1H
$B356	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$B35A	$0012	    			RETURN
$B35C	$	_Ethernet_writePHY:
$B35C	$C603	FEB4			MOVFF	FARG_Ethernet_writePHY+0, MIREGADR
$B360	$EC9B	F054			CALL	_Ethernet_delay
$B364	$C605	FEB6			MOVFF	FARG_Ethernet_writePHY+2, MIWRL
$B368	$EC9B	F054			CALL	_Ethernet_delay
$B36C	$C604	FEB7			MOVFF	FARG_Ethernet_writePHY+1, MIWRH
$B370	$EC9B	F054			CALL	_Ethernet_delay
$B374	$	L_Ethernet_writePHY_233:
$B374	$0E01	    			MOVLW	1
$B376	$010E	    			MOVLB	14
$B378	$158A	    			ANDWF	MISTAT, 0, 1
$B37A	$6E01	    			MOVWF	STACK_1, 0
$B37C	$5001	    			MOVF	STACK_1, 0, 0
$B37E	$0A00	    			XORLW	0
$B380	$E1F9	    			BNZ	L_Ethernet_writePHY_233
$B382	$	L_Ethernet_writePHY_234:
$B382	$0012	    			RETURN
$B384	$	_Ethernet_readPacket:
$B384	$0E00	    			MOVLW	0
$B386	$0106	    			MOVLB	6
$B388	$6F03	    			MOVWF	lstr1_eth_j60+0, 1
$B38A	$0E01	    			MOVLW	1
$B38C	$6F04	    			MOVWF	lstr1_eth_j60+1, 1
$B38E	$0E08	    			MOVLW	8
$B390	$6F05	    			MOVWF	lstr1_eth_j60+2, 1
$B392	$0E00	    			MOVLW	0
$B394	$6F06	    			MOVWF	lstr1_eth_j60+3, 1
$B396	$0E06	    			MOVLW	6
$B398	$6F07	    			MOVWF	lstr1_eth_j60+4, 1
$B39A	$0E04	    			MOVLW	4
$B39C	$6F08	    			MOVWF	lstr1_eth_j60+5, 1
$B39E	$0E00	    			MOVLW	0
$B3A0	$6F09	    			MOVWF	lstr1_eth_j60+6, 1
$B3A2	$6B0A	    			CLRF	lstr1_eth_j60+7, 1
$B3A4	$6B10	    			CLRF	Ethernet_readPacket_res_L0, 1
$B3A6	$0E7A	    			MOVLW	ERDPT
$B3A8	$0108	    			MOVLB	8
$B3AA	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$B3AC	$0E0F	    			MOVLW	@ERDPT
$B3AE	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$B3B0	$C5CB	F8FA			MOVFF	Ethernet_readPacket_nextPtr_L0, FARG_Ethernet_writeAddr2+2
$B3B4	$C5CC	F8FB			MOVFF	Ethernet_readPacket_nextPtr_L0+1, FARG_Ethernet_writeAddr2+3
$B3B8	$EC67	F002			CALL	_Ethernet_writeAddr2
$B3BC	$CF61	F5CB			MOVFF	EDATA, Ethernet_readPacket_nextPtr_L0
$B3C0	$0000	    			NOP
$B3C2	$0000	    			NOP
$B3C4	$CF61	F5CC			MOVFF	EDATA, Ethernet_readPacket_nextPtr_L0+1
$B3C8	$0000	    			NOP
$B3CA	$0000	    			NOP
$B3CC	$CF61	F4EE			MOVFF	EDATA, _Ethernet_pktLen
$B3D0	$0000	    			NOP
$B3D2	$0000	    			NOP
$B3D4	$CF61	F4EF			MOVFF	EDATA, _Ethernet_pktLen+1
$B3D8	$0000	    			NOP
$B3DA	$0000	    			NOP
$B3DC	$CF61	F613			MOVFF	EDATA, Ethernet_readPacket_frameType_L0
$B3E0	$0000	    			NOP
$B3E2	$0000	    			NOP
$B3E4	$CF61	F614			MOVFF	EDATA, Ethernet_readPacket_frameType_L0+1
$B3E8	$0000	    			NOP
$B3EA	$0000	    			NOP
$B3EC	$0E04	    			MOVLW	4
$B3EE	$0104	    			MOVLB	4
$B3F0	$5FEE	    			SUBWF	_Ethernet_pktLen, 1, 1
$B3F2	$0E00	    			MOVLW	0
$B3F4	$5BEF	    			SUBWFB	_Ethernet_pktLen+1, 1, 1
$B3F6	$0105	    			MOVLB	5
$B3F8	$51CC	    			MOVF	Ethernet_readPacket_nextPtr_L0+1, 0, 1
$B3FA	$0819	    			SUBLW	25
$B3FC	$E102	    			BNZ	L_Ethernet_readPacket_239
$B3FE	$51CB	    			MOVF	Ethernet_readPacket_nextPtr_L0, 0, 1
$B400	$08AD	    			SUBLW	173
$B402	$	L_Ethernet_readPacket_239:
$B402	$E312	    			BNC	L198_ex_L_Ethernet_readPacket_17
$B404	$0E01	    			MOVLW	1
$B406	$0105	    			MOVLB	5
$B408	$15CB	    			ANDWF	Ethernet_readPacket_nextPtr_L0, 0, 1
$B40A	$6E00	    			MOVWF	STACK_0, 0
$B40C	$E10D	    			BNZ	L198_ex_L_Ethernet_readPacket_17
$B40E	$0106	    			MOVLB	6
$B410	$BF14	    			BTFSC	Ethernet_readPacket_frameType_L0+1, 7, 1
$B412	$D00A	    			BRA	L198_ex_L_Ethernet_readPacket_17
$B414	$0104	    			MOVLB	4
$B416	$51EF	    			MOVF	_Ethernet_pktLen+1, 0, 1
$B418	$0805	    			SUBLW	5
$B41A	$E102	    			BNZ	L_Ethernet_readPacket_240
$B41C	$51EE	    			MOVF	_Ethernet_pktLen, 0, 1
$B41E	$08EE	    			SUBLW	238
$B420	$	L_Ethernet_readPacket_240:
$B420	$E303	    			BNC	L198_ex_L_Ethernet_readPacket_17
$B422	$0106	    			MOVLB	6
$B424	$BF13	    			BTFSC	Ethernet_readPacket_frameType_L0, 7, 1
$B426	$D004	    			BRA	L_Ethernet_readPacket_17
$B428	$	L198_ex_L_Ethernet_readPacket_17:
$B428	$0106	    			MOVLB	6
$B42A	$0E01	    			MOVLW	1
$B42C	$6E00	    			MOVWF	STACK_0, 0
$B42E	$0012	    			RETURN
$B430	$	L_Ethernet_readPacket_17:
$B430	$0E7A	    			MOVLW	ERDPT
$B432	$0108	    			MOVLB	8
$B434	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B436	$0E0F	    			MOVLW	@ERDPT
$B438	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B43A	$ECCA	F007			CALL	_Ethernet_readReg2
$B43E	$C000	F611			MOVFF	STACK_0, Ethernet_readPacket_start_L0
$B442	$0E7B	    			MOVLW	ERDPTH
$B444	$0108	    			MOVLB	8
$B446	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B448	$0E0F	    			MOVLW	@ERDPTH
$B44A	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B44C	$ECCA	F007			CALL	_Ethernet_readReg2
$B450	$C000	F612			MOVFF	STACK_0, Ethernet_readPacket_start_L0+1
$B454	$C611	F8D5			MOVFF	Ethernet_readPacket_start_L0, FARG_Ethernet_RAMcopy+0
$B458	$C612	F8D6			MOVFF	Ethernet_readPacket_start_L0+1, FARG_Ethernet_RAMcopy+1
$B45C	$0104	    			MOVLB	4
$B45E	$51EE	    			MOVF	_Ethernet_pktLen, 0, 1
$B460	$0106	    			MOVLB	6
$B462	$2511	    			ADDWF	Ethernet_readPacket_start_L0, 0, 1
$B464	$0108	    			MOVLB	8
$B466	$6FD7	    			MOVWF	FARG_Ethernet_RAMcopy+2, 1
$B468	$0104	    			MOVLB	4
$B46A	$51EF	    			MOVF	_Ethernet_pktLen+1, 0, 1
$B46C	$0106	    			MOVLB	6
$B46E	$2112	    			ADDWFC	Ethernet_readPacket_start_L0+1, 0, 1
$B470	$0108	    			MOVLB	8
$B472	$6FD8	    			MOVWF	FARG_Ethernet_RAMcopy+3, 1
$B474	$0EAF	    			MOVLW	175
$B476	$6FD9	    			MOVWF	FARG_Ethernet_RAMcopy+4, 1
$B478	$0E19	    			MOVLW	25
$B47A	$6FDA	    			MOVWF	FARG_Ethernet_RAMcopy+5, 1
$B47C	$0E01	    			MOVLW	1
$B47E	$6FDB	    			MOVWF	FARG_Ethernet_RAMcopy+6, 1
$B480	$EC5A	F010			CALL	_Ethernet_RAMcopy
$B484	$0EBB	    			MOVLW	187
$B486	$0108	    			MOVLB	8
$B488	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$B48A	$0E19	    			MOVLW	25
$B48C	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$B48E	$ECE2	F007			CALL	_Ethernet_readMem
$B492	$C000	F614			MOVFF	STACK_0, Ethernet_readPacket_frameType_L0+1
$B496	$ECD4	F020			CALL	_Ethernet_getByte
$B49A	$C000	F613			MOVFF	STACK_0, Ethernet_readPacket_frameType_L0
$B49E	$0106	    			MOVLB	6
$B4A0	$5114	    			MOVF	Ethernet_readPacket_frameType_L0+1, 0, 1
$B4A2	$0A08	    			XORLW	8
$B4A4	$E102	    			BNZ	L_Ethernet_readPacket_241
$B4A6	$0E06	    			MOVLW	6
$B4A8	$1913	    			XORWF	Ethernet_readPacket_frameType_L0, 0, 1
$B4AA	$	L_Ethernet_readPacket_241:
$B4AA	$E113	    			BNZ	L_Ethernet_readPacket_18
$B4AC	$0EBD	    			MOVLW	189
$B4AE	$0106	    			MOVLB	6
$B4B0	$6F43	    			MOVWF	FARG_Ethernet_memcmp+0, 1
$B4B2	$0E19	    			MOVLW	25
$B4B4	$6F44	    			MOVWF	FARG_Ethernet_memcmp+1, 1
$B4B6	$0E03	    			MOVLW	lstr1_eth_j60
$B4B8	$6F45	    			MOVWF	FARG_Ethernet_memcmp+2, 1
$B4BA	$0E06	    			MOVLW	@lstr1_eth_j60
$B4BC	$6F46	    			MOVWF	FARG_Ethernet_memcmp+3, 1
$B4BE	$0E07	    			MOVLW	7
$B4C0	$6F47	    			MOVWF	FARG_Ethernet_memcmp+4, 1
$B4C2	$EC01	F045			CALL	_Ethernet_memcmp
$B4C6	$5000	    			MOVF	STACK_0, 0, 0
$B4C8	$0A00	    			XORLW	0
$B4CA	$E102	    			BNZ	L_Ethernet_readPacket_19
$B4CC	$ECA9	F054			CALL	_Ethernet_doARP
$B4D0	$	L_Ethernet_readPacket_19:
$B4D0	$D151	    			BRA	L_Ethernet_readPacket_20
$B4D2	$	L_Ethernet_readPacket_18:
$B4D2	$0106	    			MOVLB	6
$B4D4	$5114	    			MOVF	Ethernet_readPacket_frameType_L0+1, 0, 1
$B4D6	$0A08	    			XORLW	8
$B4D8	$E102	    			BNZ	L_Ethernet_readPacket_242
$B4DA	$0E00	    			MOVLW	0
$B4DC	$1913	    			XORWF	Ethernet_readPacket_frameType_L0, 0, 1
$B4DE	$	L_Ethernet_readPacket_242:
$B4DE	$A4D8	    			BTFSS	STATUS, Z, 0
$B4E0	$D146	    			BRA	L_Ethernet_readPacket_21
$B4E2	$0ECD	    			MOVLW	205
$B4E4	$0106	    			MOVLB	6
$B4E6	$6F43	    			MOVWF	FARG_Ethernet_memcmp+0, 1
$B4E8	$0E19	    			MOVLW	25
$B4EA	$6F44	    			MOVWF	FARG_Ethernet_memcmp+1, 1
$B4EC	$0E76	    			MOVLW	_Ethernet_ipAddr
$B4EE	$6F45	    			MOVWF	FARG_Ethernet_memcmp+2, 1
$B4F0	$0E02	    			MOVLW	@_Ethernet_ipAddr
$B4F2	$6F46	    			MOVWF	FARG_Ethernet_memcmp+3, 1
$B4F4	$0E04	    			MOVLW	4
$B4F6	$6F47	    			MOVWF	FARG_Ethernet_memcmp+4, 1
$B4F8	$EC01	F045			CALL	_Ethernet_memcmp
$B4FC	$5200	    			MOVF	STACK_0, 1, 0
$B4FE	$E014	    			BZ	L_Ethernet_readPacket_24
$B500	$0ECD	    			MOVLW	205
$B502	$0106	    			MOVLB	6
$B504	$6F43	    			MOVWF	FARG_Ethernet_memcmp+0, 1
$B506	$0E19	    			MOVLW	25
$B508	$6F44	    			MOVWF	FARG_Ethernet_memcmp+1, 1
$B50A	$0E51	    			MOVLW	_Ethernet_ff
$B50C	$6F45	    			MOVWF	FARG_Ethernet_memcmp+2, 1
$B50E	$0E03	    			MOVLW	@_Ethernet_ff
$B510	$6F46	    			MOVWF	FARG_Ethernet_memcmp+3, 1
$B512	$0E04	    			MOVLW	4
$B514	$6F47	    			MOVWF	FARG_Ethernet_memcmp+4, 1
$B516	$EC01	F045			CALL	_Ethernet_memcmp
$B51A	$5000	    			MOVF	STACK_0, 0, 0
$B51C	$0A00	    			XORLW	0
$B51E	$E004	    			BZ	L_Ethernet_readPacket_24
$B520	$	L250_ex_L_Ethernet_readPacket_24:
$B520	$0E02	    			MOVLW	2
$B522	$0106	    			MOVLB	6
$B524	$6F10	    			MOVWF	Ethernet_readPacket_res_L0, 1
$B526	$D122	    			BRA	L_Ethernet_readPacket_25
$B528	$	L_Ethernet_readPacket_24:
$B528	$0EBD	    			MOVLW	189
$B52A	$0108	    			MOVLB	8
$B52C	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$B52E	$0E19	    			MOVLW	25
$B530	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$B532	$ECE2	F007			CALL	_Ethernet_readMem
$B536	$0EF0	    			MOVLW	240
$B538	$1400	    			ANDWF	STACK_0, 0, 0
$B53A	$6E01	    			MOVWF	STACK_1, 0
$B53C	$5001	    			MOVF	STACK_1, 0, 0
$B53E	$0A40	    			XORLW	64
$B540	$E004	    			BZ	L_Ethernet_readPacket_26
$B542	$0E03	    			MOVLW	3
$B544	$0106	    			MOVLB	6
$B546	$6F10	    			MOVWF	Ethernet_readPacket_res_L0, 1
$B548	$D111	    			BRA	L_Ethernet_readPacket_27
$B54A	$	L_Ethernet_readPacket_26:
$B54A	$0EBD	    			MOVLW	189
$B54C	$0108	    			MOVLB	8
$B54E	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$B550	$0E19	    			MOVLW	25
$B552	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$B554	$ECE2	F007			CALL	_Ethernet_readMem
$B558	$C000	F60E			MOVFF	STACK_0, Ethernet_readPacket_ipHeaderLen_L2
$B55C	$0E00	    			MOVLW	0
$B55E	$0106	    			MOVLB	6
$B560	$6F0F	    			MOVWF	Ethernet_readPacket_ipHeaderLen_L2+1, 1
$B562	$0E0F	    			MOVLW	15
$B564	$150E	    			ANDWF	Ethernet_readPacket_ipHeaderLen_L2, 0, 1
$B566	$6E01	    			MOVWF	STACK_1, 0
$B568	$C60F	F002			MOVFF	Ethernet_readPacket_ipHeaderLen_L2+1, STACK_1+1
$B56C	$0E00	    			MOVLW	0
$B56E	$1602	    			ANDWF	STACK_1+1, 1, 0
$B570	$C001	F60E			MOVFF	STACK_1, Ethernet_readPacket_ipHeaderLen_L2
$B574	$C002	F60F			MOVFF	STACK_1+1, Ethernet_readPacket_ipHeaderLen_L2+1
$B578	$C001	F60E			MOVFF	STACK_1, Ethernet_readPacket_ipHeaderLen_L2
$B57C	$C002	F60F			MOVFF	STACK_1+1, Ethernet_readPacket_ipHeaderLen_L2+1
$B580	$370E	    			RLCF	Ethernet_readPacket_ipHeaderLen_L2, 1, 1
$B582	$910E	    			BCF	Ethernet_readPacket_ipHeaderLen_L2, 0, 1
$B584	$370F	    			RLCF	Ethernet_readPacket_ipHeaderLen_L2+1, 1, 1
$B586	$370E	    			RLCF	Ethernet_readPacket_ipHeaderLen_L2, 1, 1
$B588	$910E	    			BCF	Ethernet_readPacket_ipHeaderLen_L2, 0, 1
$B58A	$370F	    			RLCF	Ethernet_readPacket_ipHeaderLen_L2+1, 1, 1
$B58C	$0EC3	    			MOVLW	195
$B58E	$0108	    			MOVLB	8
$B590	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$B592	$0E19	    			MOVLW	25
$B594	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$B596	$ECE2	F007			CALL	_Ethernet_readMem
$B59A	$0EBF	    			MOVLW	191
$B59C	$1400	    			ANDWF	STACK_0, 0, 0
$B59E	$6E01	    			MOVWF	STACK_1, 0
$B5A0	$5001	    			MOVF	STACK_1, 0, 0
$B5A2	$0A00	    			XORLW	0
$B5A4	$A4D8	    			BTFSS	STATUS, Z, 0
$B5A6	$D0E2	    			BRA	L_Ethernet_readPacket_30
$B5A8	$0EC4	    			MOVLW	196
$B5AA	$0108	    			MOVLB	8
$B5AC	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$B5AE	$0E19	    			MOVLW	25
$B5B0	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$B5B2	$ECE2	F007			CALL	_Ethernet_readMem
$B5B6	$5000	    			MOVF	STACK_0, 0, 0
$B5B8	$0A00	    			XORLW	0
$B5BA	$A4D8	    			BTFSS	STATUS, Z, 0
$B5BC	$D0D7	    			BRA	L_Ethernet_readPacket_30
$B5BE	$	L285_ex_L_Ethernet_readPacket_30:
$B5BE	$0EBD	    			MOVLW	189
$B5C0	$0106	    			MOVLB	6
$B5C2	$250E	    			ADDWF	Ethernet_readPacket_ipHeaderLen_L2, 0, 1
$B5C4	$6F0C	    			MOVWF	Ethernet_readPacket_payloadAddr_L3, 1
$B5C6	$0E19	    			MOVLW	25
$B5C8	$210F	    			ADDWFC	Ethernet_readPacket_ipHeaderLen_L2+1, 0, 1
$B5CA	$6F0D	    			MOVWF	Ethernet_readPacket_payloadAddr_L3+1, 1
$B5CC	$0EC6	    			MOVLW	198
$B5CE	$0108	    			MOVLB	8
$B5D0	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$B5D2	$0E19	    			MOVLW	25
$B5D4	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$B5D6	$ECE2	F007			CALL	_Ethernet_readMem
$B5DA	$C000	F60B			MOVFF	STACK_0, Ethernet_readPacket_proto_L3
$B5DE	$5000	    			MOVF	STACK_0, 0, 0
$B5E0	$0A01	    			XORLW	1
$B5E2	$A4D8	    			BTFSS	STATUS, Z, 0
$B5E4	$D0A0	    			BRA	L_Ethernet_readPacket_31
$B5E6	$C60C	F8EB			MOVFF	Ethernet_readPacket_payloadAddr_L3, FARG_Ethernet_readMem+0
$B5EA	$C60D	F8EC			MOVFF	Ethernet_readPacket_payloadAddr_L3+1, FARG_Ethernet_readMem+1
$B5EE	$ECE2	F007			CALL	_Ethernet_readMem
$B5F2	$5000	    			MOVF	STACK_0, 0, 0
$B5F4	$0A08	    			XORLW	8
$B5F6	$A4D8	    			BTFSS	STATUS, Z, 0
$B5F8	$D095	    			BRA	L_Ethernet_readPacket_34
$B5FA	$0E01	    			MOVLW	1
$B5FC	$0106	    			MOVLB	6
$B5FE	$250C	    			ADDWF	Ethernet_readPacket_payloadAddr_L3, 0, 1
$B600	$0108	    			MOVLB	8
$B602	$6FEB	    			MOVWF	FARG_Ethernet_readMem+0, 1
$B604	$0E00	    			MOVLW	0
$B606	$0106	    			MOVLB	6
$B608	$210D	    			ADDWFC	Ethernet_readPacket_payloadAddr_L3+1, 0, 1
$B60A	$0108	    			MOVLB	8
$B60C	$6FEC	    			MOVWF	FARG_Ethernet_readMem+1, 1
$B60E	$ECE2	F007			CALL	_Ethernet_readMem
$B612	$5000	    			MOVF	STACK_0, 0, 0
$B614	$0A00	    			XORLW	0
$B616	$A4D8	    			BTFSS	STATUS, Z, 0
$B618	$D085	    			BRA	L_Ethernet_readPacket_34
$B61A	$	L308_ex_L_Ethernet_readPacket_34:
$B61A	$C60C	F8EB			MOVFF	Ethernet_readPacket_payloadAddr_L3, FARG_Ethernet_writeMem+0
$B61E	$C60D	F8EC			MOVFF	Ethernet_readPacket_payloadAddr_L3+1, FARG_Ethernet_writeMem+1
$B622	$0108	    			MOVLB	8
$B624	$6BED	    			CLRF	FARG_Ethernet_writeMem+2, 1
$B626	$ECD1	F007			CALL	_Ethernet_writeMem
$B62A	$EC3D	F045			CALL	_Ethernet_MACswap
$B62E	$ECE6	F046			CALL	_Ethernet_IPswap
$B632	$0EC7	    			MOVLW	199
$B634	$0108	    			MOVLB	8
$B636	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B638	$0E19	    			MOVLW	25
$B63A	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B63C	$6BD7	    			CLRF	FARG_Ethernet_writeMemory+2, 1
$B63E	$6BD8	    			CLRF	FARG_Ethernet_writeMemory+3, 1
$B640	$EC4D	F010			CALL	_Ethernet_writeMemory
$B644	$0EBD	    			MOVLW	189
$B646	$0108	    			MOVLB	8
$B648	$6FD5	    			MOVWF	FARG_Ethernet_checksum+0, 1
$B64A	$0E19	    			MOVLW	25
$B64C	$6FD6	    			MOVWF	FARG_Ethernet_checksum+1, 1
$B64E	$C60E	F8D7			MOVFF	Ethernet_readPacket_ipHeaderLen_L2, FARG_Ethernet_checksum+2
$B652	$C60F	F8D8			MOVFF	Ethernet_readPacket_ipHeaderLen_L2+1, FARG_Ethernet_checksum+3
$B656	$EC21	F010			CALL	_Ethernet_checksum
$B65A	$0EF6	    			MOVLW	EDMACS
$B65C	$0108	    			MOVLB	8
$B65E	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B660	$0E0E	    			MOVLW	@EDMACS
$B662	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B664	$ECCA	F007			CALL	_Ethernet_readReg2
$B668	$C000	F615			MOVFF	STACK_0, FLOC_Ethernet_readPacket+18
$B66C	$0EF7	    			MOVLW	EDMACSH
$B66E	$0108	    			MOVLB	8
$B670	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B672	$0E0E	    			MOVLW	@EDMACSH
$B674	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B676	$ECCA	F007			CALL	_Ethernet_readReg2
$B67A	$C000	F8D7			MOVFF	STACK_0, FARG_Ethernet_writeMemory+2
$B67E	$0EC7	    			MOVLW	199
$B680	$0108	    			MOVLB	8
$B682	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B684	$0E19	    			MOVLW	25
$B686	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B688	$C615	F8D8			MOVFF	FLOC_Ethernet_readPacket+18, FARG_Ethernet_writeMemory+3
$B68C	$EC4D	F010			CALL	_Ethernet_writeMemory
$B690	$0E02	    			MOVLW	2
$B692	$0106	    			MOVLB	6
$B694	$250C	    			ADDWF	Ethernet_readPacket_payloadAddr_L3, 0, 1
$B696	$0108	    			MOVLB	8
$B698	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B69A	$0E00	    			MOVLW	0
$B69C	$0106	    			MOVLB	6
$B69E	$210D	    			ADDWFC	Ethernet_readPacket_payloadAddr_L3+1, 0, 1
$B6A0	$0108	    			MOVLB	8
$B6A2	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B6A4	$6BD7	    			CLRF	FARG_Ethernet_writeMemory+2, 1
$B6A6	$6BD8	    			CLRF	FARG_Ethernet_writeMemory+3, 1
$B6A8	$EC4D	F010			CALL	_Ethernet_writeMemory
$B6AC	$C60C	F8D5			MOVFF	Ethernet_readPacket_payloadAddr_L3, FARG_Ethernet_checksum+0
$B6B0	$C60D	F8D6			MOVFF	Ethernet_readPacket_payloadAddr_L3+1, FARG_Ethernet_checksum+1
$B6B4	$0106	    			MOVLB	6
$B6B6	$510E	    			MOVF	Ethernet_readPacket_ipHeaderLen_L2, 0, 1
$B6B8	$0104	    			MOVLB	4
$B6BA	$5DEE	    			SUBWF	_Ethernet_pktLen, 0, 1
$B6BC	$0108	    			MOVLB	8
$B6BE	$6FD7	    			MOVWF	FARG_Ethernet_checksum+2, 1
$B6C0	$0106	    			MOVLB	6
$B6C2	$510F	    			MOVF	Ethernet_readPacket_ipHeaderLen_L2+1, 0, 1
$B6C4	$0104	    			MOVLB	4
$B6C6	$59EF	    			SUBWFB	_Ethernet_pktLen+1, 0, 1
$B6C8	$0108	    			MOVLB	8
$B6CA	$6FD8	    			MOVWF	FARG_Ethernet_checksum+3, 1
$B6CC	$0E0E	    			MOVLW	14
$B6CE	$5FD7	    			SUBWF	FARG_Ethernet_checksum+2, 1, 1
$B6D0	$0E00	    			MOVLW	0
$B6D2	$5BD8	    			SUBWFB	FARG_Ethernet_checksum+3, 1, 1
$B6D4	$EC21	F010			CALL	_Ethernet_checksum
$B6D8	$0EF6	    			MOVLW	EDMACS
$B6DA	$0108	    			MOVLB	8
$B6DC	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B6DE	$0E0E	    			MOVLW	@EDMACS
$B6E0	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B6E2	$ECCA	F007			CALL	_Ethernet_readReg2
$B6E6	$C000	F615			MOVFF	STACK_0, FLOC_Ethernet_readPacket+18
$B6EA	$0EF7	    			MOVLW	EDMACSH
$B6EC	$0108	    			MOVLB	8
$B6EE	$6FEB	    			MOVWF	FARG_Ethernet_readReg2+0, 1
$B6F0	$0E0E	    			MOVLW	@EDMACSH
$B6F2	$6FEC	    			MOVWF	FARG_Ethernet_readReg2+1, 1
$B6F4	$ECCA	F007			CALL	_Ethernet_readReg2
$B6F8	$C000	F8D7			MOVFF	STACK_0, FARG_Ethernet_writeMemory+2
$B6FC	$0E02	    			MOVLW	2
$B6FE	$0106	    			MOVLB	6
$B700	$250C	    			ADDWF	Ethernet_readPacket_payloadAddr_L3, 0, 1
$B702	$0108	    			MOVLB	8
$B704	$6FD5	    			MOVWF	FARG_Ethernet_writeMemory+0, 1
$B706	$0E00	    			MOVLW	0
$B708	$0106	    			MOVLB	6
$B70A	$210D	    			ADDWFC	Ethernet_readPacket_payloadAddr_L3+1, 0, 1
$B70C	$0108	    			MOVLB	8
$B70E	$6FD6	    			MOVWF	FARG_Ethernet_writeMemory+1, 1
$B710	$C615	F8D8			MOVFF	FLOC_Ethernet_readPacket+18, FARG_Ethernet_writeMemory+3
$B714	$EC4D	F010			CALL	_Ethernet_writeMemory
$B718	$C4EE	F8D5			MOVFF	_Ethernet_pktLen, FARG_Ethernet_TXpacket+0
$B71C	$C4EF	F8D6			MOVFF	_Ethernet_pktLen+1, FARG_Ethernet_TXpacket+1
$B720	$ECEE	F010			CALL	_Ethernet_TXpacket
$B724	$	L_Ethernet_readPacket_34:
$B724	$D023	    			BRA	L_Ethernet_readPacket_35
$B726	$	L_Ethernet_readPacket_31:
$B726	$0106	    			MOVLB	6
$B728	$510B	    			MOVF	Ethernet_readPacket_proto_L3, 0, 1
$B72A	$0A11	    			XORLW	17
$B72C	$E10D	    			BNZ	L_Ethernet_readPacket_36
$B72E	$C611	F616			MOVFF	Ethernet_readPacket_start_L0, FARG_Ethernet_doUDP+0
$B732	$C612	F617			MOVFF	Ethernet_readPacket_start_L0+1, FARG_Ethernet_doUDP+1
$B736	$C60E	F618			MOVFF	Ethernet_readPacket_ipHeaderLen_L2, FARG_Ethernet_doUDP+2
$B73A	$C60C	F619			MOVFF	Ethernet_readPacket_payloadAddr_L3, FARG_Ethernet_doUDP+3
$B73E	$C60D	F61A			MOVFF	Ethernet_readPacket_payloadAddr_L3+1, FARG_Ethernet_doUDP+4
$B742	$ECA6	F055			CALL	_Ethernet_doUDP
$B746	$D012	    			BRA	L_Ethernet_readPacket_37
$B748	$	L_Ethernet_readPacket_36:
$B748	$0106	    			MOVLB	6
$B74A	$510B	    			MOVF	Ethernet_readPacket_proto_L3, 0, 1
$B74C	$0A06	    			XORLW	6
$B74E	$E10E	    			BNZ	L_Ethernet_readPacket_38
$B750	$C611	F616			MOVFF	Ethernet_readPacket_start_L0, FARG_Ethernet_doTCP+0
$B754	$C612	F617			MOVFF	Ethernet_readPacket_start_L0+1, FARG_Ethernet_doTCP+1
$B758	$C60E	F618			MOVFF	Ethernet_readPacket_ipHeaderLen_L2, FARG_Ethernet_doTCP+2
$B75C	$C60F	F619			MOVFF	Ethernet_readPacket_ipHeaderLen_L2+1, FARG_Ethernet_doTCP+3
$B760	$C60C	F61A			MOVFF	Ethernet_readPacket_payloadAddr_L3, FARG_Ethernet_doTCP+4
$B764	$C60D	F61B			MOVFF	Ethernet_readPacket_payloadAddr_L3+1, FARG_Ethernet_doTCP+5
$B768	$EC4E	F056			CALL	_Ethernet_doTCP
$B76C	$	L_Ethernet_readPacket_38:
$B76C	$	L_Ethernet_readPacket_37:
$B76C	$	L_Ethernet_readPacket_35:
$B76C	$	L_Ethernet_readPacket_30:
$B76C	$	L_Ethernet_readPacket_27:
$B76C	$	L_Ethernet_readPacket_25:
$B76C	$D003	    			BRA	L_Ethernet_readPacket_39
$B76E	$	L_Ethernet_readPacket_21:
$B76E	$0E04	    			MOVLW	4
$B770	$0106	    			MOVLB	6
$B772	$6F10	    			MOVWF	Ethernet_readPacket_res_L0, 1
$B774	$	L_Ethernet_readPacket_39:
$B774	$	L_Ethernet_readPacket_20:
$B774	$0106	    			MOVLB	6
$B776	$010E	    			MOVLB	14
$B778	$8DFE	    			BSF	ECON2, 6, 1
$B77A	$0E01	    			MOVLW	1
$B77C	$0105	    			MOVLB	5
$B77E	$5DCB	    			SUBWF	Ethernet_readPacket_nextPtr_L0, 0, 1
$B780	$6E01	    			MOVWF	STACK_1, 0
$B782	$0E00	    			MOVLW	0
$B784	$59CC	    			SUBWFB	Ethernet_readPacket_nextPtr_L0+1, 0, 1
$B786	$6E02	    			MOVWF	STACK_1+1, 0
$B788	$5002	    			MOVF	STACK_1+1, 0, 0
$B78A	$0819	    			SUBLW	25
$B78C	$E102	    			BNZ	L_Ethernet_readPacket_243
$B78E	$5001	    			MOVF	STACK_1, 0, 0
$B790	$08AD	    			SUBLW	173
$B792	$	L_Ethernet_readPacket_243:
$B792	$E20C	    			BC	L_Ethernet_readPacket_40
$B794	$0EEC	    			MOVLW	ERXRDPT
$B796	$0108	    			MOVLB	8
$B798	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$B79A	$0E0E	    			MOVLW	@ERXRDPT
$B79C	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$B79E	$0EAD	    			MOVLW	173
$B7A0	$6FFA	    			MOVWF	FARG_Ethernet_writeAddr2+2, 1
$B7A2	$0E19	    			MOVLW	25
$B7A4	$6FFB	    			MOVWF	FARG_Ethernet_writeAddr2+3, 1
$B7A6	$EC67	F002			CALL	_Ethernet_writeAddr2
$B7AA	$D011	    			BRA	L_Ethernet_readPacket_41
$B7AC	$	L_Ethernet_readPacket_40:
$B7AC	$0EEC	    			MOVLW	ERXRDPT
$B7AE	$0108	    			MOVLB	8
$B7B0	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$B7B2	$0E0E	    			MOVLW	@ERXRDPT
$B7B4	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$B7B6	$0E01	    			MOVLW	1
$B7B8	$0105	    			MOVLB	5
$B7BA	$5DCB	    			SUBWF	Ethernet_readPacket_nextPtr_L0, 0, 1
$B7BC	$0108	    			MOVLB	8
$B7BE	$6FFA	    			MOVWF	FARG_Ethernet_writeAddr2+2, 1
$B7C0	$0E00	    			MOVLW	0
$B7C2	$0105	    			MOVLB	5
$B7C4	$59CC	    			SUBWFB	Ethernet_readPacket_nextPtr_L0+1, 0, 1
$B7C6	$0108	    			MOVLB	8
$B7C8	$6FFB	    			MOVWF	FARG_Ethernet_writeAddr2+3, 1
$B7CA	$EC67	F002			CALL	_Ethernet_writeAddr2
$B7CE	$	L_Ethernet_readPacket_41:
$B7CE	$C610	F000			MOVFF	Ethernet_readPacket_res_L0, STACK_0
$B7D2	$0012	    			RETURN
$B7D4	$	_ip_read:
;eeprom.c,48 :: 			void ip_read(void)    // чтение IP из EEPROM
;eeprom.c,50 :: 			I2C_Init(100000);         // initialize I2C
$B7D4	$0E3E	    			MOVLW	62
$B7D6	$6EC8	    			MOVWF	SSPADD, 0
$B7D8	$EC44	F008			CALL	_I2C_Init
;eeprom.c,51 :: 			I2C_Start();
$B7DC	$ECF0	F007			CALL	_I2C_Start
;eeprom.c,52 :: 			I2C_Wr(0xA0);                 // Slave address m24c16, write
$B7E0	$0EA0	    			MOVLW	160
$B7E2	$0108	    			MOVLB	8
$B7E4	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$B7E6	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,53 :: 			I2C_Wr(0x00);                 // Byte adress
$B7EA	$0108	    			MOVLB	8
$B7EC	$6BEB	    			CLRF	FARG_I2C_Wr+0, 1
$B7EE	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,54 :: 			I2C_Repeated_Start();
$B7F2	$EC28	F008			CALL	_I2C_Repeated_Start
;eeprom.c,55 :: 			I2C_Wr(0xA1);                 // Slave address m24c16, read
$B7F6	$0EA1	    			MOVLW	161
$B7F8	$0108	    			MOVLB	8
$B7FA	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$B7FC	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,57 :: 			myIpAddr[0] =I2C_Rd(1);         // чтение 1-го байта IP
$B800	$0E01	    			MOVLW	1
$B802	$0108	    			MOVLB	8
$B804	$6FEB	    			MOVWF	FARG_I2C_Rd+0, 1
$B806	$EC2E	F008			CALL	_I2C_Rd
$B80A	$C000	F28F			MOVFF	STACK_0, _myIpAddr
;eeprom.c,58 :: 			myIpAddr[1] =I2C_Rd(1);         //
$B80E	$0E01	    			MOVLW	1
$B810	$0108	    			MOVLB	8
$B812	$6FEB	    			MOVWF	FARG_I2C_Rd+0, 1
$B814	$EC2E	F008			CALL	_I2C_Rd
$B818	$C000	F290			MOVFF	STACK_0, _myIpAddr+1
;eeprom.c,59 :: 			myIpAddr[2] =I2C_Rd(1);         //
$B81C	$0E01	    			MOVLW	1
$B81E	$0108	    			MOVLB	8
$B820	$6FEB	    			MOVWF	FARG_I2C_Rd+0, 1
$B822	$EC2E	F008			CALL	_I2C_Rd
$B826	$C000	F291			MOVFF	STACK_0, _myIpAddr+2
;eeprom.c,60 :: 			myIpAddr[3] =I2C_Rd(0);         //
$B82A	$0108	    			MOVLB	8
$B82C	$6BEB	    			CLRF	FARG_I2C_Rd+0, 1
$B82E	$EC2E	F008			CALL	_I2C_Rd
$B832	$C000	F292			MOVFF	STACK_0, _myIpAddr+3
;eeprom.c,61 :: 			I2C_Stop();
$B836	$EC42	F008			CALL	_I2C_Stop
;eeprom.c,63 :: 			myMacAddr[3] = myIpAddr[1];
$B83A	$C290	F4F4			MOVFF	_myIpAddr+1, _myMacAddr+3
;eeprom.c,64 :: 			myMacAddr[4] = myIpAddr[2];
$B83E	$C291	F4F5			MOVFF	_myIpAddr+2, _myMacAddr+4
;eeprom.c,65 :: 			myMacAddr[5] = myIpAddr[3];
$B842	$C292	F4F6			MOVFF	_myIpAddr+3, _myMacAddr+5
;eeprom.c,66 :: 			}//~
$B846	$0012	    			RETURN
$B848	$	_Ethernet_Init2:
$B848	$0105	    			MOVLB	5
$B84A	$53FF	    			MOVF	FARG_Ethernet_Init2+0, 1, 1
$B84C	$E003	    			BZ	L_Ethernet_Init2_2
$B84E	$0E0D	    			MOVLW	13
$B850	$6E00	    			MOVWF	STACK_0, 0
$B852	$D002	    			BRA	L_Ethernet_Init2_3
$B854	$	L_Ethernet_Init2_2:
$B854	$0E05	    			MOVLW	5
$B856	$6E00	    			MOVWF	STACK_0, 0
$B858	$	L_Ethernet_Init2_3:
$B858	$C000	FEA0			MOVFF	STACK_0, MACON1
$B85C	$0105	    			MOVLB	5
$B85E	$53FF	    			MOVF	FARG_Ethernet_Init2+0, 1, 1
$B860	$E003	    			BZ	L_Ethernet_Init2_4
$B862	$0E31	    			MOVLW	49
$B864	$6E00	    			MOVWF	STACK_0, 0
$B866	$D002	    			BRA	L_Ethernet_Init2_5
$B868	$	L_Ethernet_Init2_4:
$B868	$0E30	    			MOVLW	48
$B86A	$6E00	    			MOVWF	STACK_0, 0
$B86C	$	L_Ethernet_Init2_5:
$B86C	$C000	FEA2			MOVFF	STACK_0, MACON3
$B870	$0EAA	    			MOVLW	MAMXFL
$B872	$0108	    			MOVLB	8
$B874	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$B876	$0E0E	    			MOVLW	@MAMXFL
$B878	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$B87A	$0EEE	    			MOVLW	238
$B87C	$6FFA	    			MOVWF	FARG_Ethernet_writeAddr2+2, 1
$B87E	$0E05	    			MOVLW	5
$B880	$6FFB	    			MOVWF	FARG_Ethernet_writeAddr2+3, 1
$B882	$EC67	F002			CALL	_Ethernet_writeAddr2
$B886	$0105	    			MOVLB	5
$B888	$53FF	    			MOVF	FARG_Ethernet_Init2+0, 1, 1
$B88A	$E003	    			BZ	L_Ethernet_Init2_6
$B88C	$0E15	    			MOVLW	21
$B88E	$6E00	    			MOVWF	STACK_0, 0
$B890	$D002	    			BRA	L_Ethernet_Init2_7
$B892	$	L_Ethernet_Init2_6:
$B892	$0E12	    			MOVLW	18
$B894	$6E00	    			MOVWF	STACK_0, 0
$B896	$	L_Ethernet_Init2_7:
$B896	$C000	FEA4			MOVFF	STACK_0, MABBIPG
$B89A	$0E12	    			MOVLW	18
$B89C	$010E	    			MOVLB	14
$B89E	$6FA6	    			MOVWF	MAIPGL, 1
$B8A0	$0105	    			MOVLB	5
$B8A2	$53FF	    			MOVF	FARG_Ethernet_Init2+0, 1, 1
$B8A4	$E103	    			BNZ	L_Ethernet_Init2_8
$B8A6	$0E0C	    			MOVLW	12
$B8A8	$010E	    			MOVLB	14
$B8AA	$6FA7	    			MOVWF	MAIPGH, 1
$B8AC	$	L_Ethernet_Init2_8:
$B8AC	$C270	FE84			MOVFF	_Ethernet_macAddr, MAADR1
$B8B0	$C271	FE85			MOVFF	_Ethernet_macAddr+1, MAADR2
$B8B4	$C272	FE82			MOVFF	_Ethernet_macAddr+2, MAADR3
$B8B8	$C273	FE83			MOVFF	_Ethernet_macAddr+3, MAADR4
$B8BC	$C274	FE80			MOVFF	_Ethernet_macAddr+4, MAADR5
$B8C0	$C275	FE81			MOVFF	_Ethernet_macAddr+5, MAADR6
$B8C4	$0106	    			MOVLB	6
$B8C6	$6B03	    			CLRF	FARG_Ethernet_readPHY+0, 1
$B8C8	$0E01	    			MOVLW	Ethernet_Init2_h_L0
$B8CA	$6F04	    			MOVWF	FARG_Ethernet_readPHY+1, 1
$B8CC	$0E06	    			MOVLW	@Ethernet_Init2_h_L0
$B8CE	$6F05	    			MOVWF	FARG_Ethernet_readPHY+2, 1
$B8D0	$0E02	    			MOVLW	Ethernet_Init2_l_L0
$B8D2	$6F06	    			MOVWF	FARG_Ethernet_readPHY+3, 1
$B8D4	$0E06	    			MOVLW	@Ethernet_Init2_l_L0
$B8D6	$6F07	    			MOVWF	FARG_Ethernet_readPHY+4, 1
$B8D8	$EC8C	F059			CALL	_Ethernet_readPHY
$B8DC	$0106	    			MOVLB	6
$B8DE	$6B03	    			CLRF	FARG_Ethernet_writePHY+0, 1
$B8E0	$0EFE	    			MOVLW	254
$B8E2	$1501	    			ANDWF	Ethernet_Init2_h_L0, 0, 1
$B8E4	$6F04	    			MOVWF	FARG_Ethernet_writePHY+1, 1
$B8E6	$0105	    			MOVLB	5
$B8E8	$53FF	    			MOVF	FARG_Ethernet_Init2+0, 1, 1
$B8EA	$E004	    			BZ	L_Ethernet_Init2_9
$B8EC	$0E01	    			MOVLW	1
$B8EE	$6E00	    			MOVWF	STACK_0, 0
$B8F0	$EF7B	F05C			GOTO	L_Ethernet_Init2_10
$B8F4	$	L_Ethernet_Init2_9:
$B8F4	$6A00	    			CLRF	STACK_0, 0
$B8F6	$	L_Ethernet_Init2_10:
$B8F6	$5000	    			MOVF	STACK_0, 0, 0
$B8F8	$0106	    			MOVLB	6
$B8FA	$1304	    			IORWF	FARG_Ethernet_writePHY+1, 1, 1
$B8FC	$C602	F605			MOVFF	Ethernet_Init2_l_L0, FARG_Ethernet_writePHY+2
$B900	$ECAE	F059			CALL	_Ethernet_writePHY
$B904	$0E10	    			MOVLW	16
$B906	$0106	    			MOVLB	6
$B908	$6F03	    			MOVWF	FARG_Ethernet_writePHY+0, 1
$B90A	$0E01	    			MOVLW	1
$B90C	$6F04	    			MOVWF	FARG_Ethernet_writePHY+1, 1
$B90E	$0E10	    			MOVLW	16
$B910	$6F05	    			MOVWF	FARG_Ethernet_writePHY+2, 1
$B912	$ECAE	F059			CALL	_Ethernet_writePHY
$B916	$84D2	    			BSF	ECON1, 2, 0
$B918	$EC9B	F054			CALL	_Ethernet_delay
$B91C	$0EC0	    			MOVLW	_Ethernet_arpCache
$B91E	$0106	    			MOVLB	6
$B920	$6FCD	    			MOVWF	FARG_memset+0, 1
$B922	$0E04	    			MOVLW	@_Ethernet_arpCache
$B924	$6FCE	    			MOVWF	FARG_memset+1, 1
$B926	$6BCF	    			CLRF	FARG_memset+2, 1
$B928	$0E2D	    			MOVLW	45
$B92A	$6FD0	    			MOVWF	FARG_memset+3, 1
$B92C	$0E00	    			MOVLW	0
$B92E	$6FD1	    			MOVWF	FARG_memset+4, 1
$B930	$EC87	F039			CALL	_memset
$B934	$0012	    			RETURN
$B936	$	_Ethernet_doPacket:
$B936	$0105	    			MOVLB	5
$B938	$6BFF	    			CLRF	Ethernet_doPacket_res_L0, 1
$B93A	$AC60	    			BTFSS	EIR, 6, 0
$B93C	$D004	    			BRA	L_Ethernet_doPacket_14
$B93E	$ECC2	F059			CALL	_Ethernet_readPacket
$B942	$C000	F5FF			MOVFF	STACK_0, Ethernet_doPacket_res_L0
$B946	$	L_Ethernet_doPacket_14:
$B946	$C5FF	F000			MOVFF	Ethernet_doPacket_res_L0, STACK_0
$B94A	$0012	    			RETURN
$B94C	$	_ip_write:
;eeprom.c,17 :: 			void ip_write(void)    // запись IP в EEPROM
;eeprom.c,20 :: 			I2C_Init(100000);      // initialize full master mode
$B94C	$0E3E	    			MOVLW	62
$B94E	$6EC8	    			MOVWF	SSPADD, 0
$B950	$EC44	F008			CALL	_I2C_Init
;eeprom.c,21 :: 			I2C_Start();          // issue start signal
$B954	$ECF0	F007			CALL	_I2C_Start
;eeprom.c,22 :: 			I2C_Wr(0xA0);         // Slave address m24c16, write
$B958	$0EA0	    			MOVLW	160
$B95A	$0108	    			MOVLB	8
$B95C	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$B95E	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,23 :: 			I2C_Wr(0x00);         // Byte adress
$B962	$0108	    			MOVLB	8
$B964	$6BEB	    			CLRF	FARG_I2C_Wr+0, 1
$B966	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,25 :: 			I2C_Wr(myIpAddr[0]);            // запись 1-го байта IP
$B96A	$C28F	F8EB			MOVFF	_myIpAddr, FARG_I2C_Wr+0
$B96E	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,26 :: 			I2C_Wr(myIpAddr[1]);         // 2
$B972	$C290	F8EB			MOVFF	_myIpAddr+1, FARG_I2C_Wr+0
$B976	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,27 :: 			I2C_Wr(myIpAddr[2]);         // 3
$B97A	$C291	F8EB			MOVFF	_myIpAddr+2, FARG_I2C_Wr+0
$B97E	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,28 :: 			I2C_Wr(myIpAddr[3]);         // 4
$B982	$C292	F8EB			MOVFF	_myIpAddr+3, FARG_I2C_Wr+0
$B986	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,29 :: 			I2C_Stop();           // issue stop signal
$B98A	$EC42	F008			CALL	_I2C_Stop
;eeprom.c,31 :: 			I2C_Start();          // issue start signal
$B98E	$ECF0	F007			CALL	_I2C_Start
;eeprom.c,32 :: 			I2C_Wr(0xA0);         // Slave address m24c16, write
$B992	$0EA0	    			MOVLW	160
$B994	$0108	    			MOVLB	8
$B996	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$B998	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,33 :: 			I2C_Wr(0x01);         // Byte adress
$B99C	$0E01	    			MOVLW	1
$B99E	$0108	    			MOVLB	8
$B9A0	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$B9A2	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,35 :: 			I2C_Wr('E');            // запись 1-го символа
$B9A6	$0E45	    			MOVLW	69
$B9A8	$0108	    			MOVLB	8
$B9AA	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$B9AC	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,36 :: 			I2C_Wr('E');         // 2
$B9B0	$0E45	    			MOVLW	69
$B9B2	$0108	    			MOVLB	8
$B9B4	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$B9B6	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,37 :: 			I2C_Wr('E');         // 3
$B9BA	$0E45	    			MOVLW	69
$B9BC	$0108	    			MOVLB	8
$B9BE	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$B9C0	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,38 :: 			I2C_Wr('E');         // 4
$B9C4	$0E45	    			MOVLW	69
$B9C6	$0108	    			MOVLB	8
$B9C8	$6FEB	    			MOVWF	FARG_I2C_Wr+0, 1
$B9CA	$EC15	F008			CALL	_I2C_Wr
;eeprom.c,39 :: 			I2C_Stop();           // issue stop signal
$B9CE	$EC42	F008			CALL	_I2C_Stop
;eeprom.c,41 :: 			myMacAddr[3] = myIpAddr[1];
$B9D2	$C290	F4F4			MOVFF	_myIpAddr+1, _myMacAddr+3
;eeprom.c,42 :: 			myMacAddr[4] = myIpAddr[2];
$B9D6	$C291	F4F5			MOVFF	_myIpAddr+2, _myMacAddr+4
;eeprom.c,43 :: 			myMacAddr[5] = myIpAddr[3];
$B9DA	$C292	F4F6			MOVFF	_myIpAddr+3, _myMacAddr+5
;eeprom.c,44 :: 			}//~
$B9DE	$0012	    			RETURN
$B9E0	$	_InitPort:
;test18f97.c,10 :: 			void InitPort(void)
;test18f97.c,12 :: 			ADCON1 = 0x0F ;         //  АЦП отключены
$B9E0	$0E0F	    			MOVLW	15
$B9E2	$6EC1	    			MOVWF	ADCON1, 0
;test18f97.c,13 :: 			CMCON  = 0x07 ;         //  внутренние компараторы отключены
$B9E4	$0E07	    			MOVLW	7
$B9E6	$6EB4	    			MOVWF	CMCON, 0
;test18f97.c,14 :: 			PORTA.F7 = 1;           //  RA7=1 PJPU ,
$B9E8	$8E80	    			BSF	PORTA, 7, 0
;test18f97.c,15 :: 			LATA =0b00000000;       //  LATA7=1 PDPU ,  LATA6=1 PEPU ,
$B9EA	$6A89	    			CLRF	LATA, 0
;test18f97.c,16 :: 			TRISA=0b11111100;       // RA5 <- FB_B, RA4 <- FB_A
$B9EC	$0EFC	    			MOVLW	252
$B9EE	$6E92	    			MOVWF	TRISA, 0
;test18f97.c,18 :: 			LATB =0b00000000;
$B9F0	$6A8A	    			CLRF	LATB, 0
;test18f97.c,19 :: 			TRISB=0b00110001;       // RB3 -> RCLK, RB2 -> SRCLK, RB1 -> SIN, RB0 <- SOUT
$B9F2	$0E31	    			MOVLW	49
$B9F4	$6E93	    			MOVWF	TRISB, 0
;test18f97.c,21 :: 			LATC =0b00011111;       //  LEDS - G, R, Y - OFF
$B9F6	$0E1F	    			MOVLW	31
$B9F8	$6E8B	    			MOVWF	LATC, 0
;test18f97.c,22 :: 			TRISC=0b10111000;       // RC2..0 -> LEDS - G, R, Y - OUTPUT, RC4..3 <- INPUTs for I2C
$B9FA	$0EB8	    			MOVLW	184
$B9FC	$6E94	    			MOVWF	TRISC, 0
;test18f97.c,24 :: 			LATD =0b00000000;
$B9FE	$6A8C	    			CLRF	LATD, 0
;test18f97.c,25 :: 			TRISD=0b10100000;       // RD7 <-  TERMO,  RD6 -> VLO_CTL, RD5 <- CP_OUT, RD4 -> VSW_CTL,
$BA00	$0EA0	    			MOVLW	160
$BA02	$6E95	    			MOVWF	TRISD, 0
;test18f97.c,27 :: 			LATE =0b00000000;
$BA04	$6A8D	    			CLRF	LATE, 0
;test18f97.c,28 :: 			TRISE=0b11111111;       //
$BA06	$0EFF	    			MOVLW	255
$BA08	$6E96	    			MOVWF	TRISE, 0
;test18f97.c,30 :: 			LATF =0b01101100;       // выбран шлейф 1
$BA0A	$0E6C	    			MOVLW	108
$BA0C	$6E8E	    			MOVWF	LATF, 0
;test18f97.c,31 :: 			TRISF=0b00000011;       // RF7..2 -> FBS
$BA0E	$0E03	    			MOVLW	3
$BA10	$6E97	    			MOVWF	TRISF, 0
;test18f97.c,33 :: 			LATG =0b11011111;       //                 RG6 -> REN_=1, RG5 -> SRCLR_=0
$BA12	$0EDF	    			MOVLW	223
$BA14	$6E8F	    			MOVWF	LATG, 0
;test18f97.c,34 :: 			TRISG=0b10011111;       // RG7 <- VLO_OK,  RG6 -> REN_, RG5 -> SRCLR_
$BA16	$0E9F	    			MOVLW	159
$BA18	$6E98	    			MOVWF	TRISG, 0
;test18f97.c,36 :: 			LATH =0b00000000;
$BA1A	$6A90	    			CLRF	LATH, 0
;test18f97.c,37 :: 			TRISH=0b11111111;       //
$BA1C	$0EFF	    			MOVLW	255
$BA1E	$6E99	    			MOVWF	TRISH, 0
;test18f97.c,39 :: 			LATJ =0b00000000;
$BA20	$6A91	    			CLRF	LATJ, 0
;test18f97.c,40 :: 			TRISJ=0b11111111;       // RJ7 <- VHI_OK,  RJ5 <- SW2, RJ4 <- SW3, RJ1 <- SW0, RJ0 <- SW1
$BA22	$0EFF	    			MOVLW	255
$BA24	$6E9A	    			MOVWF	TRISJ, 0
;test18f97.c,41 :: 			}
$BA26	$0012	    			RETURN
$BA28	$	_InitBoard:
;test18f97.c,44 :: 			void InitBoard(void)
;test18f97.c,48 :: 			for (i=0; i<15; i++)
$BA28	$0105	    			MOVLB	5
$BA2A	$6BE0	    			CLRF	InitBoard_i_L0, 1
$BA2C	$	L_InitBoard_0:
$BA2C	$0E0F	    			MOVLW	15
$BA2E	$0105	    			MOVLB	5
$BA30	$5DE0	    			SUBWF	InitBoard_i_L0, 0, 1
$BA32	$B0D8	    			BTFSC	STATUS, C, 0
$BA34	$D0F4	    			BRA	L_InitBoard_1
;test18f97.c,50 :: 			cellState[i][0]=cellState[i][1]=cellState[i][2]=cellState[i][3]=cellState[i][4]= 0;
$BA36	$C5E0	F000			MOVFF	InitBoard_i_L0, STACK_0
$BA3A	$0E00	    			MOVLW	0
$BA3C	$6E01	    			MOVWF	STACK_0+1, 0
$BA3E	$0E05	    			MOVLW	5
$BA40	$6E04	    			MOVWF	STACK_4, 0
$BA42	$0E00	    			MOVLW	0
$BA44	$6E05	    			MOVWF	STACK_4+1, 0
$BA46	$ECB1	F001			CALL	_mul_16x16_u
$BA4A	$0E3E	    			MOVLW	_cellState
$BA4C	$2600	    			ADDWF	STACK_0, 1, 0
$BA4E	$0E04	    			MOVLW	@_cellState
$BA50	$2201	    			ADDWFC	STACK_0+1, 1, 0
$BA52	$C000	F008			MOVFF	STACK_0, STACK_8
$BA56	$C001	F009			MOVFF	STACK_0+1, STACK_8+1
$BA5A	$0E01	    			MOVLW	1
$BA5C	$2400	    			ADDWF	STACK_0, 0, 0
$BA5E	$6E06	    			MOVWF	STACK_6, 0
$BA60	$0E00	    			MOVLW	0
$BA62	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BA64	$6E07	    			MOVWF	STACK_6+1, 0
$BA66	$0E02	    			MOVLW	2
$BA68	$2400	    			ADDWF	STACK_0, 0, 0
$BA6A	$6E04	    			MOVWF	STACK_4, 0
$BA6C	$0E00	    			MOVLW	0
$BA6E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BA70	$6E05	    			MOVWF	STACK_4+1, 0
$BA72	$0E03	    			MOVLW	3
$BA74	$2400	    			ADDWF	STACK_0, 0, 0
$BA76	$6E02	    			MOVWF	STACK_2, 0
$BA78	$0E00	    			MOVLW	0
$BA7A	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BA7C	$6E03	    			MOVWF	STACK_2+1, 0
$BA7E	$0E04	    			MOVLW	4
$BA80	$2600	    			ADDWF	STACK_0, 1, 0
$BA82	$0E00	    			MOVLW	0
$BA84	$2201	    			ADDWFC	STACK_0+1, 1, 0
$BA86	$C000	FFE1			MOVFF	STACK_0, FSR1L
$BA8A	$C001	FFE2			MOVFF	STACK_0+1, FSR1H
$BA8E	$6AE6	    			CLRF	POSTINC1, 0
$BA90	$C000	FFE9			MOVFF	STACK_0, FSR0L
$BA94	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$BA98	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BA9C	$C002	FFE1			MOVFF	STACK_2, FSR1L
$BAA0	$C003	FFE2			MOVFF	STACK_2+1, FSR1H
$BAA4	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$BAA8	$C002	FFE9			MOVFF	STACK_2, FSR0L
$BAAC	$C003	FFEA			MOVFF	STACK_2+1, FSR0H
$BAB0	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BAB4	$C004	FFE1			MOVFF	STACK_4, FSR1L
$BAB8	$C005	FFE2			MOVFF	STACK_4+1, FSR1H
$BABC	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$BAC0	$C004	FFE9			MOVFF	STACK_4, FSR0L
$BAC4	$C005	FFEA			MOVFF	STACK_4+1, FSR0H
$BAC8	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BACC	$C006	FFE1			MOVFF	STACK_6, FSR1L
$BAD0	$C007	FFE2			MOVFF	STACK_6+1, FSR1H
$BAD4	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$BAD8	$C006	FFE9			MOVFF	STACK_6, FSR0L
$BADC	$C007	FFEA			MOVFF	STACK_6+1, FSR0H
$BAE0	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BAE4	$C008	FFE1			MOVFF	STACK_8, FSR1L
$BAE8	$C009	FFE2			MOVFF	STACK_8+1, FSR1H
$BAEC	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;test18f97.c,51 :: 			prevCellState[i][0]=prevCellState[i][1]=prevCellState[i][2]=prevCellState[i][3]=prevCellState[i][4]= 0;
$BAF0	$C5E0	F000			MOVFF	InitBoard_i_L0, STACK_0
$BAF4	$0E00	    			MOVLW	0
$BAF6	$6E01	    			MOVWF	STACK_0+1, 0
$BAF8	$0E05	    			MOVLW	5
$BAFA	$6E04	    			MOVWF	STACK_4, 0
$BAFC	$0E00	    			MOVLW	0
$BAFE	$6E05	    			MOVWF	STACK_4+1, 0
$BB00	$ECB1	F001			CALL	_mul_16x16_u
$BB04	$0EF7	    			MOVLW	_prevCellState
$BB06	$2600	    			ADDWF	STACK_0, 1, 0
$BB08	$0E04	    			MOVLW	@_prevCellState
$BB0A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$BB0C	$C000	F008			MOVFF	STACK_0, STACK_8
$BB10	$C001	F009			MOVFF	STACK_0+1, STACK_8+1
$BB14	$0E01	    			MOVLW	1
$BB16	$2400	    			ADDWF	STACK_0, 0, 0
$BB18	$6E06	    			MOVWF	STACK_6, 0
$BB1A	$0E00	    			MOVLW	0
$BB1C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BB1E	$6E07	    			MOVWF	STACK_6+1, 0
$BB20	$0E02	    			MOVLW	2
$BB22	$2400	    			ADDWF	STACK_0, 0, 0
$BB24	$6E04	    			MOVWF	STACK_4, 0
$BB26	$0E00	    			MOVLW	0
$BB28	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BB2A	$6E05	    			MOVWF	STACK_4+1, 0
$BB2C	$0E03	    			MOVLW	3
$BB2E	$2400	    			ADDWF	STACK_0, 0, 0
$BB30	$6E02	    			MOVWF	STACK_2, 0
$BB32	$0E00	    			MOVLW	0
$BB34	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BB36	$6E03	    			MOVWF	STACK_2+1, 0
$BB38	$0E04	    			MOVLW	4
$BB3A	$2600	    			ADDWF	STACK_0, 1, 0
$BB3C	$0E00	    			MOVLW	0
$BB3E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$BB40	$C000	FFE1			MOVFF	STACK_0, FSR1L
$BB44	$C001	FFE2			MOVFF	STACK_0+1, FSR1H
$BB48	$6AE6	    			CLRF	POSTINC1, 0
$BB4A	$C000	FFE9			MOVFF	STACK_0, FSR0L
$BB4E	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$BB52	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BB56	$C002	FFE1			MOVFF	STACK_2, FSR1L
$BB5A	$C003	FFE2			MOVFF	STACK_2+1, FSR1H
$BB5E	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$BB62	$C002	FFE9			MOVFF	STACK_2, FSR0L
$BB66	$C003	FFEA			MOVFF	STACK_2+1, FSR0H
$BB6A	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BB6E	$C004	FFE1			MOVFF	STACK_4, FSR1L
$BB72	$C005	FFE2			MOVFF	STACK_4+1, FSR1H
$BB76	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$BB7A	$C004	FFE9			MOVFF	STACK_4, FSR0L
$BB7E	$C005	FFEA			MOVFF	STACK_4+1, FSR0H
$BB82	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BB86	$C006	FFE1			MOVFF	STACK_6, FSR1L
$BB8A	$C007	FFE2			MOVFF	STACK_6+1, FSR1H
$BB8E	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$BB92	$C006	FFE9			MOVFF	STACK_6, FSR0L
$BB96	$C007	FFEA			MOVFF	STACK_6+1, FSR0H
$BB9A	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BB9E	$C008	FFE1			MOVFF	STACK_8, FSR1L
$BBA2	$C009	FFE2			MOVFF	STACK_8+1, FSR1H
$BBA6	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;test18f97.c,52 :: 			chkSum1[i] = chkSum2[i] = 0;
$BBAA	$0E01	    			MOVLW	1
$BBAC	$6E04	    			MOVWF	STACK_4, 0
$BBAE	$C5E0	F000			MOVFF	InitBoard_i_L0, STACK_0
$BBB2	$0E00	    			MOVLW	0
$BBB4	$6E01	    			MOVWF	STACK_0+1, 0
$BBB6	$5004	    			MOVF	STACK_4, 0, 0
$BBB8	$	L_InitBoard_63:
$BBB8	$0100	    			MOVLB	0
$BBBA	$E005	    			BZ	L_InitBoard_64
$BBBC	$3600	    			RLCF	STACK_0, 1, 0
$BBBE	$9000	    			BCF	STACK_0, 0, 0
$BBC0	$3601	    			RLCF	STACK_0+1, 1, 0
$BBC2	$0FFF	    			ADDLW	255
$BBC4	$D7F9	    			BRA	L_InitBoard_63
$BBC6	$	L_InitBoard_64:
$BBC6	$0E42	    			MOVLW	_chkSum1
$BBC8	$2400	    			ADDWF	STACK_0, 0, 0
$BBCA	$6E02	    			MOVWF	STACK_2, 0
$BBCC	$0E05	    			MOVLW	@_chkSum1
$BBCE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BBD0	$6E03	    			MOVWF	STACK_2+1, 0
$BBD2	$0E60	    			MOVLW	_chkSum2
$BBD4	$2600	    			ADDWF	STACK_0, 1, 0
$BBD6	$0E05	    			MOVLW	@_chkSum2
$BBD8	$2201	    			ADDWFC	STACK_0+1, 1, 0
$BBDA	$C000	FFE1			MOVFF	STACK_0, FSR1L
$BBDE	$C001	FFE2			MOVFF	STACK_0+1, FSR1H
$BBE2	$6AE6	    			CLRF	POSTINC1, 0
$BBE4	$6AE6	    			CLRF	POSTINC1, 0
$BBE6	$C000	FFE9			MOVFF	STACK_0, FSR0L
$BBEA	$C001	FFEA			MOVFF	STACK_0+1, FSR0H
$BBEE	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BBF2	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$BBF6	$C002	FFE1			MOVFF	STACK_2, FSR1L
$BBFA	$C003	FFE2			MOVFF	STACK_2+1, FSR1H
$BBFE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$BC02	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
;test18f97.c,53 :: 			cellCommand[i] = 0;
$BC06	$0E74	    			MOVLW	_cellCommand
$BC08	$6EE1	    			MOVWF	FSR1L, 0
$BC0A	$0E03	    			MOVLW	@_cellCommand
$BC0C	$6EE2	    			MOVWF	FSR1L+1, 0
$BC0E	$0105	    			MOVLB	5
$BC10	$51E0	    			MOVF	InitBoard_i_L0, 0, 1
$BC12	$26E1	    			ADDWF	FSR1L, 1, 0
$BC14	$B0D8	    			BTFSC	STATUS, C, 0
$BC16	$2AE2	    			INCF	FSR1L+1, 1, 0
$BC18	$6AE6	    			CLRF	POSTINC1, 0
;test18f97.c,54 :: 			}
$BC1A	$	L_InitBoard_2:
;test18f97.c,48 :: 			for (i=0; i<15; i++)
$BC1A	$2BE0	    			INCF	InitBoard_i_L0, 1, 1
;test18f97.c,54 :: 			}
$BC1C	$D707	    			BRA	L_InitBoard_0
$BC1E	$	L_InitBoard_1:
;test18f97.c,55 :: 			rxBuf[0]='8';rxBuf[1]='8';rxBuf[2]='8';rxBuf[3]='8';rxBuf[4]='8';rxBuf[5]='8';
$BC1E	$0E38	    			MOVLW	56
$BC20	$6E16	    			MOVWF	_rxBuf, 0
$BC22	$0E38	    			MOVLW	56
$BC24	$6E17	    			MOVWF	_rxBuf+1, 0
$BC26	$0E38	    			MOVLW	56
$BC28	$6E18	    			MOVWF	_rxBuf+2, 0
$BC2A	$0E38	    			MOVLW	56
$BC2C	$6E19	    			MOVWF	_rxBuf+3, 0
$BC2E	$0E38	    			MOVLW	56
$BC30	$6E1A	    			MOVWF	_rxBuf+4, 0
$BC32	$0E38	    			MOVLW	56
$BC34	$6E1B	    			MOVWF	_rxBuf+5, 0
;test18f97.c,57 :: 			REN_ = 1;  // TURN ON/OFF CMOS VENTILES  =0/1
$BC36	$8C86	    			BSF	PORTG, 6, 0
;test18f97.c,58 :: 			Delay_us(1);  /* 1 microsecond pause */
$BC38	$0E01	    			MOVLW	1
$BC3A	$6E0A	    			MOVWF	STACK_10, 0
$BC3C	$2E0A	    			DECFSZ	STACK_10, F, 0
$BC3E	$D7FE	    			BRA	$-1
$BC40	$0000	    			NOP
$BC42	$0000	    			NOP
;test18f97.c,59 :: 			SRCLR_= 0;   // RESET REGISTERS
$BC44	$9A86	    			BCF	PORTG, 5, 0
;test18f97.c,60 :: 			Delay_us(1);  /* 1 microsecond pause */
$BC46	$0E01	    			MOVLW	1
$BC48	$6E0A	    			MOVWF	STACK_10, 0
$BC4A	$2E0A	    			DECFSZ	STACK_10, F, 0
$BC4C	$D7FE	    			BRA	$-1
$BC4E	$0000	    			NOP
$BC50	$0000	    			NOP
;test18f97.c,61 :: 			SRCLR_= 1;
$BC52	$8A86	    			BSF	PORTG, 5, 0
;test18f97.c,62 :: 			Delay_us(1);  /* 1 microsecond pause */
$BC54	$0E01	    			MOVLW	1
$BC56	$6E0A	    			MOVWF	STACK_10, 0
$BC58	$2E0A	    			DECFSZ	STACK_10, F, 0
$BC5A	$D7FE	    			BRA	$-1
$BC5C	$0000	    			NOP
$BC5E	$0000	    			NOP
;test18f97.c,63 :: 			Delay_us(1);  /* 1 microsecond pause */
$BC60	$0E01	    			MOVLW	1
$BC62	$6E0A	    			MOVWF	STACK_10, 0
$BC64	$2E0A	    			DECFSZ	STACK_10, F, 0
$BC66	$D7FE	    			BRA	$-1
$BC68	$0000	    			NOP
$BC6A	$0000	    			NOP
;test18f97.c,64 :: 			REN_ = 0;  // // TURN ON/OFF CMOS VENTILES  =0/1
$BC6C	$9C86	    			BCF	PORTG, 6, 0
;test18f97.c,66 :: 			CP_CTL0=1; //  установка порога сраб защиты по току
$BC6E	$8283	    			BSF	PORTD, 1, 0
;test18f97.c,67 :: 			CP_CTL1=1; //
$BC70	$8483	    			BSF	PORTD, 2, 0
;test18f97.c,68 :: 			CP_CTL2=1; //
$BC72	$8683	    			BSF	PORTD, 3, 0
;test18f97.c,69 :: 			CP_RST_=1; //  сброс защелки  защиты по току
$BC74	$8083	    			BSF	PORTD, 0, 0
;test18f97.c,70 :: 			while(i<100) i++;  // задержка
$BC76	$	L_InitBoard_3:
$BC76	$0E64	    			MOVLW	100
$BC78	$5DE0	    			SUBWF	InitBoard_i_L0, 0, 1
$BC7A	$E202	    			BC	L_InitBoard_4
$BC7C	$2BE0	    			INCF	InitBoard_i_L0, 1, 1
$BC7E	$D7FB	    			BRA	L_InitBoard_3
$BC80	$	L_InitBoard_4:
;test18f97.c,71 :: 			CP_RST_=0; //
$BC80	$9083	    			BCF	PORTD, 0, 0
;test18f97.c,72 :: 			VLO_CTL = 1;     // 12вольт
$BC82	$8C83	    			BSF	PORTD, 6, 0
;test18f97.c,74 :: 			PIR1=0;                                  //Очистили флаги прерываний
$BC84	$6A9E	    			CLRF	PIR1, 0
;test18f97.c,75 :: 			PIR2=0;
$BC86	$6AA1	    			CLRF	PIR2, 0
;test18f97.c,76 :: 			PIR3=0;
$BC88	$6AA4	    			CLRF	PIR3, 0
;test18f97.c,77 :: 			PIE1=0b00000001;                         //Разрешили прерывания от TMR1
$BC8A	$0E01	    			MOVLW	1
$BC8C	$6E9D	    			MOVWF	PIE1, 0
;test18f97.c,78 :: 			PIE2=0;                                  //Остальные запретили
$BC8E	$6AA0	    			CLRF	PIE2, 0
;test18f97.c,79 :: 			PIE3=0;                                  //Инициализация TCP-IP пусть сама себе разрешает
$BC90	$6AA3	    			CLRF	PIE3, 0
;test18f97.c,80 :: 			IPR1.RC1IP = 1;                          //Прерывания по RX USART1 имеют высокий приоритет
$BC92	$8A9F	    			BSF	IPR1, 5, 0
;test18f97.c,81 :: 			IPR2.ETHIP = 1;                          //Ethernet модуль имеет высокий приоритет
$BC94	$8AA2	    			BSF	IPR2, 5, 0
;test18f97.c,82 :: 			}
$BC96	$0012	    			RETURN
$BC98	$	_MyInitUsart1_115200:
;USART.c,12 :: 			void MyInitUsart1_115200(void)
;USART.c,14 :: 			TRISC.F7=1;
$BC98	$8E94	    			BSF	TRISC, 7, 0
;USART.c,15 :: 			TRISC.F6=0;
$BC9A	$9C94	    			BCF	TRISC, 6, 0
;USART.c,17 :: 			TXSTA1.TXEN = 1;
$BC9C	$8AAC	    			BSF	TXSTA1, 5, 0
;USART.c,18 :: 			TXSTA1.SYNC = 0;
$BC9E	$98AC	    			BCF	TXSTA1, 4, 0
;USART.c,19 :: 			TXSTA1.BRGH = 1;
$BCA0	$84AC	    			BSF	TXSTA1, 2, 0
;USART.c,20 :: 			RCSTA1.SPEN=1;
$BCA2	$8EAB	    			BSF	RCSTA1, 7, 0
;USART.c,21 :: 			RCSTA1.CREN=1;
$BCA4	$88AB	    			BSF	RCSTA1, 4, 0
;USART.c,22 :: 			BAUDCON1.BRG16 = 1;
$BCA6	$867E	    			BSF	BAUDCON1, 3, 0
;USART.c,23 :: 			SPBRGH1 = 0;
$BCA8	$6A7F	    			CLRF	SPBRGH1, 0
;USART.c,24 :: 			SPBRG1 = 53;
$BCAA	$0E35	    			MOVLW	53
$BCAC	$6EAF	    			MOVWF	SPBRG1, 0
;USART.c,26 :: 			PIR1.RC1IF = 0;
$BCAE	$9A9E	    			BCF	PIR1, 5, 0
;USART.c,27 :: 			IPR1.RC1IP = 0;
$BCB0	$9A9F	    			BCF	IPR1, 5, 0
;USART.c,28 :: 			PIE1.RC1IE = 1;
$BCB2	$8A9D	    			BSF	PIE1, 5, 0
;USART.c,30 :: 			INTCON.GIE = 1;
$BCB4	$8EF2	    			BSF	INTCON, 7, 0
;USART.c,31 :: 			INTCON.PEIE = 1;
$BCB6	$8CF2	    			BSF	INTCON, 6, 0
;USART.c,32 :: 			}
$BCB8	$0012	    			RETURN
$BCBA	$	_ip_get:
;ip_set.c,27 :: 			void ip_get( void)                 // чтение IP из EEPROM  при включении питания или после перезапуска
;ip_set.c,29 :: 			ip_read();    // чтение IP из EEPROM
$BCBA	$ECEA	F05B			CALL	_ip_read
;ip_set.c,31 :: 			}
$BCBE	$0012	    			RETURN
$BCC0	$	_Ethernet_Init:
$BCC0	$EC9B	F054			CALL	_Ethernet_delay
$BCC4	$010E	    			MOVLB	14
$BCC6	$9BFE	    			BCF	ECON2, 5, 1
$BCC8	$91FD	    			BCF	ESTAT, 0, 1
$BCCA	$EC9B	F054			CALL	_Ethernet_delay
$BCCE	$010E	    			MOVLB	14
$BCD0	$8BFE	    			BSF	ECON2, 5, 1
$BCD2	$	L_Ethernet_Init_0:
$BCD2	$010E	    			MOVLB	14
$BCD4	$A1FD	    			BTFSS	ESTAT, 0, 1
$BCD6	$D7FD	    			BRA	L_Ethernet_Init_0
$BCD8	$	L_Ethernet_Init_1:
$BCD8	$0E70	    			MOVLW	_Ethernet_macAddr
$BCDA	$0108	    			MOVLB	8
$BCDC	$6FAC	    			MOVWF	FARG_memcpy+0, 1
$BCDE	$0E02	    			MOVLW	@_Ethernet_macAddr
$BCE0	$6FAD	    			MOVWF	FARG_memcpy+1, 1
$BCE2	$C5E0	F8AE			MOVFF	FARG_Ethernet_Init+0, FARG_memcpy+2
$BCE6	$C5E1	F8AF			MOVFF	FARG_Ethernet_Init+1, FARG_memcpy+3
$BCEA	$0E06	    			MOVLW	6
$BCEC	$6FB0	    			MOVWF	FARG_memcpy+4, 1
$BCEE	$0E00	    			MOVLW	0
$BCF0	$6FB1	    			MOVWF	FARG_memcpy+5, 1
$BCF2	$ECF9	F020			CALL	_memcpy
$BCF6	$0E76	    			MOVLW	_Ethernet_ipAddr
$BCF8	$0108	    			MOVLB	8
$BCFA	$6FAC	    			MOVWF	FARG_memcpy+0, 1
$BCFC	$0E02	    			MOVLW	@_Ethernet_ipAddr
$BCFE	$6FAD	    			MOVWF	FARG_memcpy+1, 1
$BD00	$C5E2	F8AE			MOVFF	FARG_Ethernet_Init+2, FARG_memcpy+2
$BD04	$C5E3	F8AF			MOVFF	FARG_Ethernet_Init+3, FARG_memcpy+3
$BD08	$0E04	    			MOVLW	4
$BD0A	$6FB0	    			MOVWF	FARG_memcpy+4, 1
$BD0C	$0E00	    			MOVLW	0
$BD0E	$6FB1	    			MOVWF	FARG_memcpy+5, 1
$BD10	$ECF9	F020			CALL	_memcpy
$BD14	$0EE8	    			MOVLW	ERXST
$BD16	$0108	    			MOVLB	8
$BD18	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$BD1A	$0E0E	    			MOVLW	@ERXST
$BD1C	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$BD1E	$6BFA	    			CLRF	FARG_Ethernet_writeAddr2+2, 1
$BD20	$6BFB	    			CLRF	FARG_Ethernet_writeAddr2+3, 1
$BD22	$EC67	F002			CALL	_Ethernet_writeAddr2
$BD26	$0EEA	    			MOVLW	ERXND
$BD28	$0108	    			MOVLB	8
$BD2A	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$BD2C	$0E0E	    			MOVLW	@ERXND
$BD2E	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$BD30	$0EAD	    			MOVLW	173
$BD32	$6FFA	    			MOVWF	FARG_Ethernet_writeAddr2+2, 1
$BD34	$0E19	    			MOVLW	25
$BD36	$6FFB	    			MOVWF	FARG_Ethernet_writeAddr2+3, 1
$BD38	$EC67	F002			CALL	_Ethernet_writeAddr2
$BD3C	$0EEC	    			MOVLW	ERXRDPT
$BD3E	$0108	    			MOVLB	8
$BD40	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$BD42	$0E0E	    			MOVLW	@ERXRDPT
$BD44	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$BD46	$0EAD	    			MOVLW	173
$BD48	$6FFA	    			MOVWF	FARG_Ethernet_writeAddr2+2, 1
$BD4A	$0E19	    			MOVLW	25
$BD4C	$6FFB	    			MOVWF	FARG_Ethernet_writeAddr2+3, 1
$BD4E	$EC67	F002			CALL	_Ethernet_writeAddr2
$BD52	$0E7A	    			MOVLW	ERDPT
$BD54	$0108	    			MOVLB	8
$BD56	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$BD58	$0E0F	    			MOVLW	@ERDPT
$BD5A	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$BD5C	$6BFA	    			CLRF	FARG_Ethernet_writeAddr2+2, 1
$BD5E	$6BFB	    			CLRF	FARG_Ethernet_writeAddr2+3, 1
$BD60	$EC67	F002			CALL	_Ethernet_writeAddr2
$BD64	$0EE4	    			MOVLW	ETXST
$BD66	$0108	    			MOVLB	8
$BD68	$6FF8	    			MOVWF	FARG_Ethernet_writeAddr2+0, 1
$BD6A	$0E0E	    			MOVLW	@ETXST
$BD6C	$6FF9	    			MOVWF	FARG_Ethernet_writeAddr2+1, 1
$BD6E	$0EAE	    			MOVLW	174
$BD70	$6FFA	    			MOVWF	FARG_Ethernet_writeAddr2+2, 1
$BD72	$0E19	    			MOVLW	25
$BD74	$6FFB	    			MOVWF	FARG_Ethernet_writeAddr2+3, 1
$BD76	$EC67	F002			CALL	_Ethernet_writeAddr2
$BD7A	$C5E4	F5FF			MOVFF	FARG_Ethernet_Init+4, FARG_Ethernet_Init2+0
$BD7E	$EC24	F05C			CALL	_Ethernet_Init2
$BD82	$0012	    			RETURN
$BD84	$	_ip_set:
;ip_set.c,35 :: 			void ip_set( void)                 // запись IP в EEPROM
;ip_set.c,40 :: 			while(1)                        // do forever
$BD84	$	L_ip_set_0:
;ip_set.c,42 :: 			Ethernet_doPacket() ;   // process incoming Ethernet packets
$BD84	$EC9B	F05C			CALL	_Ethernet_doPacket
;ip_set.c,44 :: 			asm CLRWDT;        // сброс сторожевого таймера
$BD88	$0004	    			CLRWDT
;ip_set.c,45 :: 			if (!ip_new_flag) break;     // выход в основной режим
$BD8A	$0104	    			MOVLB	4
$BD8C	$5338	    			MOVF	_ip_new_flag, 1, 1
$BD8E	$E031	    			BZ	L_ip_set_1
$BD90	$	L_ip_set_2:
;ip_set.c,47 :: 			if (cntr_1  <= 6400 )  cntr_1++ ;
$BD90	$0105	    			MOVLB	5
$BD92	$51E1	    			MOVF	ip_set_cntr_1_L0+1, 0, 1
$BD94	$0819	    			SUBLW	25
$BD96	$E102	    			BNZ	L_ip_set_7
$BD98	$51E0	    			MOVF	ip_set_cntr_1_L0, 0, 1
$BD9A	$0800	    			SUBLW	0
$BD9C	$	L_ip_set_7:
$BD9C	$E304	    			BNC	L_ip_set_3
$BD9E	$0105	    			MOVLB	5
$BDA0	$4BE0	    			INFSNZ	ip_set_cntr_1_L0, 1, 1
$BDA2	$2BE1	    			INCF	ip_set_cntr_1_L0+1, 1, 1
$BDA4	$D00D	    			BRA	L_ip_set_4
$BDA6	$	L_ip_set_3:
;ip_set.c,49 :: 			cntr_1 =0;
$BDA6	$0105	    			MOVLB	5
$BDA8	$6BE0	    			CLRF	ip_set_cntr_1_L0, 1
$BDAA	$6BE1	    			CLRF	ip_set_cntr_1_L0+1, 1
;ip_set.c,50 :: 			Led_G  = !Led_G;     //
$BDAC	$0E01	    			MOVLW	1
$BDAE	$B482	    			BTFSC	PORTC, 2, 0
$BDB0	$0E00	    			MOVLW	0
$BDB2	$6E00	    			MOVWF	STACK_0, 0
$BDB4	$0E00	    			MOVLW	0
$BDB6	$B000	    			BTFSC	STACK_0, 0, 0
$BDB8	$0E04	    			MOVLW	4
$BDBA	$1882	    			XORWF	PORTC, 0, 0
$BDBC	$0B04	    			ANDLW	4
$BDBE	$1A82	    			XORWF	PORTC, 1, 0
;ip_set.c,51 :: 			}
$BDC0	$	L_ip_set_4:
;ip_set.c,53 :: 			if (cntr_2  <= 640 )  cntr_2++ ;
$BDC0	$0105	    			MOVLB	5
$BDC2	$51E3	    			MOVF	ip_set_cntr_2_L0+1, 0, 1
$BDC4	$0802	    			SUBLW	2
$BDC6	$E102	    			BNZ	L_ip_set_8
$BDC8	$51E2	    			MOVF	ip_set_cntr_2_L0, 0, 1
$BDCA	$0880	    			SUBLW	128
$BDCC	$	L_ip_set_8:
$BDCC	$E304	    			BNC	L_ip_set_5
$BDCE	$0105	    			MOVLB	5
$BDD0	$4BE2	    			INFSNZ	ip_set_cntr_2_L0, 1, 1
$BDD2	$2BE3	    			INCF	ip_set_cntr_2_L0+1, 1, 1
$BDD4	$D00D	    			BRA	L_ip_set_6
$BDD6	$	L_ip_set_5:
;ip_set.c,55 :: 			cntr_2 =0;
$BDD6	$0105	    			MOVLB	5
$BDD8	$6BE2	    			CLRF	ip_set_cntr_2_L0, 1
$BDDA	$6BE3	    			CLRF	ip_set_cntr_2_L0+1, 1
;ip_set.c,56 :: 			Led_Y  = !Led_Y;     //
$BDDC	$0E01	    			MOVLW	1
$BDDE	$B282	    			BTFSC	PORTC, 1, 0
$BDE0	$0E00	    			MOVLW	0
$BDE2	$6E00	    			MOVWF	STACK_0, 0
$BDE4	$0E00	    			MOVLW	0
$BDE6	$B000	    			BTFSC	STACK_0, 0, 0
$BDE8	$0E02	    			MOVLW	2
$BDEA	$1882	    			XORWF	PORTC, 0, 0
$BDEC	$0B02	    			ANDLW	2
$BDEE	$1A82	    			XORWF	PORTC, 1, 0
;ip_set.c,57 :: 			}
$BDF0	$	L_ip_set_6:
;ip_set.c,58 :: 			}  // end   while(1)
$BDF0	$D7C9	    			BRA	L_ip_set_0
$BDF2	$	L_ip_set_1:
;ip_set.c,59 :: 			ip_write();    // запись IP в EEPROM
$BDF2	$0105	    			MOVLB	5
$BDF4	$ECA6	F05C			CALL	_ip_write
;ip_set.c,60 :: 			}
$BDF8	$0012	    			RETURN
$BDFA	$	_SendCommandToCell:
;USART.c,53 :: 			void SendCommandToCell(unsigned char number)
;USART.c,55 :: 			SET_RS485_OUT;
$BDFA	$8C81	    			BSF	PORTB, 6, 0
$BDFC	$8E81	    			BSF	PORTB, 7, 0
;USART.c,56 :: 			Ethernet_doPacket();
$BDFE	$EC9B	F05C			CALL	_Ethernet_doPacket
;USART.c,57 :: 			delay_us(10);
$BE02	$0E14	    			MOVLW	20
$BE04	$6E0A	    			MOVWF	STACK_10, 0
$BE06	$2E0A	    			DECFSZ	STACK_10, F, 0
$BE08	$D7FE	    			BRA	$-1
$BE0A	$0000	    			NOP
;USART.c,58 :: 			Ethernet_doPacket();
$BE0C	$EC9B	F05C			CALL	_Ethernet_doPacket
;USART.c,59 :: 			while(TXSTA1.TRMT==0)
$BE10	$	L_SendCommandToCell_4:
$BE10	$6A01	    			CLRF	STACK_1, 0
$BE12	$B2AC	    			BTFSC	TXSTA1, 1, 0
$BE14	$2A01	    			INCF	STACK_1, 1, 0
$BE16	$5001	    			MOVF	STACK_1, 0, 0
$BE18	$0A00	    			XORLW	0
$BE1A	$E103	    			BNZ	L_SendCommandToCell_5
;USART.c,61 :: 			Ethernet_doPacket();
$BE1C	$EC9B	F05C			CALL	_Ethernet_doPacket
;USART.c,62 :: 			}
$BE20	$D7F7	    			BRA	L_SendCommandToCell_4
$BE22	$	L_SendCommandToCell_5:
;USART.c,63 :: 			TXREG1 = 0x02;                             //  байт №1  - признак начала пакета
$BE22	$0E02	    			MOVLW	2
$BE24	$6EAD	    			MOVWF	TXREG1, 0
;USART.c,64 :: 			Ethernet_doPacket();
$BE26	$EC9B	F05C			CALL	_Ethernet_doPacket
;USART.c,65 :: 			while(TXSTA1.TRMT==0)
$BE2A	$	L_SendCommandToCell_6:
$BE2A	$6A01	    			CLRF	STACK_1, 0
$BE2C	$B2AC	    			BTFSC	TXSTA1, 1, 0
$BE2E	$2A01	    			INCF	STACK_1, 1, 0
$BE30	$5001	    			MOVF	STACK_1, 0, 0
$BE32	$0A00	    			XORLW	0
$BE34	$E103	    			BNZ	L_SendCommandToCell_7
;USART.c,67 :: 			Ethernet_doPacket();
$BE36	$EC9B	F05C			CALL	_Ethernet_doPacket
;USART.c,68 :: 			}
$BE3A	$D7F7	    			BRA	L_SendCommandToCell_6
$BE3C	$	L_SendCommandToCell_7:
;USART.c,69 :: 			TXREG1 = 0x30+number/10;                   //  байт №2   - десятки от номера ячейки (dec)
$BE3C	$0E0A	    			MOVLW	10
$BE3E	$6E04	    			MOVWF	STACK_4, 0
$BE40	$C5E0	F000			MOVFF	FARG_SendCommandToCell+0, STACK_0
$BE44	$EC5D	F006			CALL	_div_8x8_u
$BE48	$5000	    			MOVF	STACK_0, 0, 0
$BE4A	$0F30	    			ADDLW	48
$BE4C	$6EAD	    			MOVWF	TXREG1, 0
;USART.c,70 :: 			Ethernet_doPacket();
$BE4E	$EC9B	F05C			CALL	_Ethernet_doPacket
;USART.c,71 :: 			while(TXSTA1.TRMT==0)
$BE52	$	L_SendCommandToCell_8:
$BE52	$6A01	    			CLRF	STACK_1, 0
$BE54	$B2AC	    			BTFSC	TXSTA1, 1, 0
$BE56	$2A01	    			INCF	STACK_1, 1, 0
$BE58	$5001	    			MOVF	STACK_1, 0, 0
$BE5A	$0A00	    			XORLW	0
$BE5C	$E103	    			BNZ	L_SendCommandToCell_9
;USART.c,73 :: 			Ethernet_doPacket();
$BE5E	$EC9B	F05C			CALL	_Ethernet_doPacket
;USART.c,74 :: 			}
$BE62	$D7F7	    			BRA	L_SendCommandToCell_8
$BE64	$	L_SendCommandToCell_9:
;USART.c,75 :: 			TXREG1 = 0x30+number%10;                   //  байт №3   - единицы номера (dec)
$BE64	$0E0A	    			MOVLW	10
$BE66	$6E04	    			MOVWF	STACK_4, 0
$BE68	$C5E0	F000			MOVFF	FARG_SendCommandToCell+0, STACK_0
$BE6C	$EC5D	F006			CALL	_div_8x8_u
$BE70	$C008	F000			MOVFF	STACK_8, STACK_0
$BE74	$5000	    			MOVF	STACK_0, 0, 0
$BE76	$0F30	    			ADDLW	48
$BE78	$6EAD	    			MOVWF	TXREG1, 0
;USART.c,76 :: 			Ethernet_doPacket();
$BE7A	$EC9B	F05C			CALL	_Ethernet_doPacket
;USART.c,77 :: 			while(TXSTA1.TRMT==0)
$BE7E	$	L_SendCommandToCell_10:
$BE7E	$6A01	    			CLRF	STACK_1, 0
$BE80	$B2AC	    			BTFSC	TXSTA1, 1, 0
$BE82	$2A01	    			INCF	STACK_1, 1, 0
$BE84	$5001	    			MOVF	STACK_1, 0, 0
$BE86	$0A00	    			XORLW	0
$BE88	$E103	    			BNZ	L_SendCommandToCell_11
;USART.c,79 :: 			Ethernet_doPacket();
$BE8A	$EC9B	F05C			CALL	_Ethernet_doPacket
;USART.c,80 :: 			}
$BE8E	$D7F7	    			BRA	L_SendCommandToCell_10
$BE90	$	L_SendCommandToCell_11:
;USART.c,81 :: 			TXREG1 = '0' + cellCommand[number];       //  байт №4   - состояние, в которое нужно привести соленоид (в соответствии с командой по  Ethernet)
$BE90	$0E74	    			MOVLW	_cellCommand
$BE92	$6EE9	    			MOVWF	FSR0L, 0
$BE94	$0E03	    			MOVLW	@_cellCommand
$BE96	$6EEA	    			MOVWF	FSR0L+1, 0
$BE98	$0105	    			MOVLB	5
$BE9A	$51E0	    			MOVF	FARG_SendCommandToCell+0, 0, 1
$BE9C	$26E9	    			ADDWF	FSR0L, 1, 0
$BE9E	$B0D8	    			BTFSC	STATUS, C, 0
$BEA0	$2AEA	    			INCF	FSR0L+1, 1, 0
$BEA2	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$BEA6	$5000	    			MOVF	STACK_0, 0, 0
$BEA8	$0F30	    			ADDLW	48
$BEAA	$6EAD	    			MOVWF	TXREG1, 0
;USART.c,82 :: 			while(TXSTA1.TRMT==0);                    // ждем пока не освободится передатчик USART
$BEAC	$	L_SendCommandToCell_12:
$BEAC	$0105	    			MOVLB	5
$BEAE	$6A01	    			CLRF	STACK_1, 0
$BEB0	$B2AC	    			BTFSC	TXSTA1, 1, 0
$BEB2	$2A01	    			INCF	STACK_1, 1, 0
$BEB4	$5001	    			MOVF	STACK_1, 0, 0
$BEB6	$0A00	    			XORLW	0
$BEB8	$E0F9	    			BZ	L_SendCommandToCell_12
$BEBA	$	L_SendCommandToCell_13:
;USART.c,83 :: 			SET_RS485_IN;
$BEBA	$9C81	    			BCF	PORTB, 6, 0
$BEBC	$9E81	    			BCF	PORTB, 7, 0
;USART.c,84 :: 			delay_us(3);
$BEBE	$0E05	    			MOVLW	5
$BEC0	$6E0A	    			MOVWF	STACK_10, 0
$BEC2	$2E0A	    			DECFSZ	STACK_10, F, 0
$BEC4	$D7FE	    			BRA	$-1
$BEC6	$0000	    			NOP
$BEC8	$0000	    			NOP
$BECA	$0000	    			NOP
;USART.c,85 :: 			RCSTA1.CREN=0;                            // очистим ошибки фрейминга, возникшие из-за переключения ADM3485
$BECC	$98AB	    			BCF	RCSTA1, 4, 0
;USART.c,86 :: 			RCSTA1.CREN=1;
$BECE	$88AB	    			BSF	RCSTA1, 4, 0
;USART.c,87 :: 			rxBuf[0]='8';rxBuf[1]='8';rxBuf[2]='8';rxBuf[3]='8';rxBuf[4]='8';rxBuf[5]='8'; // испортим содержимое приемного буфера чтобы потом знать, пришло что-то новое или нет
$BED0	$0E38	    			MOVLW	56
$BED2	$6E16	    			MOVWF	_rxBuf, 0
$BED4	$0E38	    			MOVLW	56
$BED6	$6E17	    			MOVWF	_rxBuf+1, 0
$BED8	$0E38	    			MOVLW	56
$BEDA	$6E18	    			MOVWF	_rxBuf+2, 0
$BEDC	$0E38	    			MOVLW	56
$BEDE	$6E19	    			MOVWF	_rxBuf+3, 0
$BEE0	$0E38	    			MOVLW	56
$BEE2	$6E1A	    			MOVWF	_rxBuf+4, 0
$BEE4	$0E38	    			MOVLW	56
$BEE6	$6E1B	    			MOVWF	_rxBuf+5, 0
;USART.c,88 :: 			rxReadyFlag = 0;                          // сброс флага готовности приемного буфера
$BEE8	$6A20	    			CLRF	_rxReadyFlag, 0
;USART.c,89 :: 			}
$BEEA	$0012	    			RETURN
$BEEC	$	_SetTimer100us:
;test18f97.c,86 :: 			void SetTimer100us(unsigned int value)
;test18f97.c,90 :: 			T1CON=0b00000100;
$BEEC	$0E04	    			MOVLW	4
$BEEE	$6ECD	    			MOVWF	T1CON, 0
;test18f97.c,91 :: 			tmp = 65535 - value*624;
$BEF0	$C5E0	F000			MOVFF	FARG_SetTimer100us+0, STACK_0
$BEF4	$C5E1	F001			MOVFF	FARG_SetTimer100us+1, STACK_0+1
$BEF8	$0E70	    			MOVLW	112
$BEFA	$6E04	    			MOVWF	STACK_4, 0
$BEFC	$0E02	    			MOVLW	2
$BEFE	$6E05	    			MOVWF	STACK_4+1, 0
$BF00	$ECB1	F001			CALL	_mul_16x16_u
$BF04	$5000	    			MOVF	STACK_0, 0, 0
$BF06	$08FF	    			SUBLW	255
$BF08	$6E03	    			MOVWF	STACK_3, 0
$BF0A	$C001	F004			MOVFF	STACK_0+1, STACK_3+1
$BF0E	$0EFF	    			MOVLW	255
$BF10	$5604	    			SUBFWB	STACK_3+1, 1, 0
;test18f97.c,92 :: 			TMR1H=(unsigned char) (tmp>>8);
$BF12	$C004	F000			MOVFF	STACK_3+1, STACK_0
$BF16	$6A01	    			CLRF	STACK_0+1, 0
$BF18	$C000	FFCF			MOVFF	STACK_0, TMR1H
;test18f97.c,93 :: 			TMR1L=(unsigned char) tmp;
$BF1C	$C003	FFCE			MOVFF	STACK_3, TMR1L
;test18f97.c,94 :: 			timer1Flag=0;
$BF20	$6A21	    			CLRF	_timer1Flag, 0
;test18f97.c,95 :: 			T1CON.TMR1ON=1; // Запускаем таймер 1
$BF22	$80CD	    			BSF	T1CON, 0, 0
;test18f97.c,96 :: 			}
$BF24	$0012	    			RETURN
$BF26	$	_SaveCellState:
;test18f97.c,101 :: 			void SaveCellState(unsigned char number)
;test18f97.c,103 :: 			chkSum1[number] = rxBuf[1] + rxBuf[2] + rxBuf[3] + rxBuf[4] + rxBuf[5];   // контрольная сумма
$BF26	$0E01	    			MOVLW	1
$BF28	$6E04	    			MOVWF	STACK_4, 0
$BF2A	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$BF2E	$0E00	    			MOVLW	0
$BF30	$6E01	    			MOVWF	STACK_0+1, 0
$BF32	$5004	    			MOVF	STACK_4, 0, 0
$BF34	$	L_SaveCellState_65:
$BF34	$E005	    			BZ	L_SaveCellState_66
$BF36	$3600	    			RLCF	STACK_0, 1, 0
$BF38	$9000	    			BCF	STACK_0, 0, 0
$BF3A	$3601	    			RLCF	STACK_0+1, 1, 0
$BF3C	$0FFF	    			ADDLW	255
$BF3E	$D7FA	    			BRA	L_SaveCellState_65
$BF40	$	L_SaveCellState_66:
$BF40	$0E42	    			MOVLW	_chkSum1
$BF42	$2400	    			ADDWF	STACK_0, 0, 0
$BF44	$6EE1	    			MOVWF	FSR1L, 0
$BF46	$0E05	    			MOVLW	@_chkSum1
$BF48	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BF4A	$6EE2	    			MOVWF	FSR1L+1, 0
$BF4C	$5018	    			MOVF	_rxBuf+2, 0, 0
$BF4E	$2417	    			ADDWF	_rxBuf+1, 0, 0
$BF50	$6E00	    			MOVWF	STACK_0, 0
$BF52	$6A01	    			CLRF	STACK_0+1, 0
$BF54	$0E00	    			MOVLW	0
$BF56	$2201	    			ADDWFC	STACK_0+1, 1, 0
$BF58	$5019	    			MOVF	_rxBuf+3, 0, 0
$BF5A	$2600	    			ADDWF	STACK_0, 1, 0
$BF5C	$B0D8	    			BTFSC	STATUS, C, 0
$BF5E	$2A01	    			INCF	STACK_0+1, 1, 0
$BF60	$501A	    			MOVF	_rxBuf+4, 0, 0
$BF62	$2600	    			ADDWF	STACK_0, 1, 0
$BF64	$B0D8	    			BTFSC	STATUS, C, 0
$BF66	$2A01	    			INCF	STACK_0+1, 1, 0
$BF68	$501B	    			MOVF	_rxBuf+5, 0, 0
$BF6A	$2600	    			ADDWF	STACK_0, 1, 0
$BF6C	$B0D8	    			BTFSC	STATUS, C, 0
$BF6E	$2A01	    			INCF	STACK_0+1, 1, 0
$BF70	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$BF74	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
;test18f97.c,104 :: 			if(chkSum1[number]==chkSum2[number]) {                                    // если в прошлый раз контрольная сумма была такой же
$BF78	$0E01	    			MOVLW	1
$BF7A	$6E04	    			MOVWF	STACK_4, 0
$BF7C	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$BF80	$0E00	    			MOVLW	0
$BF82	$6E01	    			MOVWF	STACK_0+1, 0
$BF84	$5004	    			MOVF	STACK_4, 0, 0
$BF86	$	L_SaveCellState_67:
$BF86	$E005	    			BZ	L_SaveCellState_68
$BF88	$3600	    			RLCF	STACK_0, 1, 0
$BF8A	$9000	    			BCF	STACK_0, 0, 0
$BF8C	$3601	    			RLCF	STACK_0+1, 1, 0
$BF8E	$0FFF	    			ADDLW	255
$BF90	$D7FA	    			BRA	L_SaveCellState_67
$BF92	$	L_SaveCellState_68:
$BF92	$0E42	    			MOVLW	_chkSum1
$BF94	$2400	    			ADDWF	STACK_0, 0, 0
$BF96	$6EE9	    			MOVWF	FSR0L, 0
$BF98	$0E05	    			MOVLW	@_chkSum1
$BF9A	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BF9C	$6EEA	    			MOVWF	FSR0L+1, 0
$BF9E	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$BFA2	$CFEE	F005			MOVFF	POSTINC0, STACK_4+1
$BFA6	$0E60	    			MOVLW	_chkSum2
$BFA8	$2400	    			ADDWF	STACK_0, 0, 0
$BFAA	$6EE9	    			MOVWF	FSR0L, 0
$BFAC	$0E05	    			MOVLW	@_chkSum2
$BFAE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BFB0	$6EEA	    			MOVWF	FSR0L+1, 0
$BFB2	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$BFB6	$CFEE	F003			MOVFF	POSTINC0, STACK_2+1
$BFBA	$5005	    			MOVF	STACK_4+1, 0, 0
$BFBC	$1803	    			XORWF	STACK_2+1, 0, 0
$BFBE	$E102	    			BNZ	L_SaveCellState_69
$BFC0	$5002	    			MOVF	STACK_2, 0, 0
$BFC2	$1804	    			XORWF	STACK_4, 0, 0
$BFC4	$	L_SaveCellState_69:
$BFC4	$A4D8	    			BTFSS	STATUS, Z, 0
$BFC6	$D149	    			BRA	L_SaveCellState_5
;test18f97.c,105 :: 			if (number == 14)        //особые условия для 14 ячейки
$BFC8	$0105	    			MOVLB	5
$BFCA	$51E0	    			MOVF	FARG_SaveCellState+0, 0, 1
$BFCC	$0A0E	    			XORLW	14
$BFCE	$A4D8	    			BTFSS	STATUS, Z, 0
$BFD0	$D0A1	    			BRA	L_SaveCellState_6
;test18f97.c,107 :: 			cellState[number][0] = rxBuf[1];
$BFD2	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$BFD6	$0E00	    			MOVLW	0
$BFD8	$6E01	    			MOVWF	STACK_0+1, 0
$BFDA	$0E05	    			MOVLW	5
$BFDC	$6E04	    			MOVWF	STACK_4, 0
$BFDE	$0E00	    			MOVLW	0
$BFE0	$6E05	    			MOVWF	STACK_4+1, 0
$BFE2	$ECB1	F001			CALL	_mul_16x16_u
$BFE6	$0E3E	    			MOVLW	_cellState
$BFE8	$2400	    			ADDWF	STACK_0, 0, 0
$BFEA	$6EE1	    			MOVWF	FSR1L, 0
$BFEC	$0E04	    			MOVLW	@_cellState
$BFEE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$BFF0	$6EE2	    			MOVWF	FSR1L+1, 0
$BFF2	$C017	FFE6			MOVFF	_rxBuf+1, POSTINC1
;test18f97.c,108 :: 			cellState[number][1] = rxBuf[2];  //боковая крышка, если равно 2, то теряется связь со стойкой. если равно 0, то на мнемосхеме открыта, если равна 1, то в логе открыта
$BFF6	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$BFFA	$0E00	    			MOVLW	0
$BFFC	$6E01	    			MOVWF	STACK_0+1, 0
$BFFE	$0E05	    			MOVLW	5
$C000	$6E04	    			MOVWF	STACK_4, 0
$C002	$0E00	    			MOVLW	0
$C004	$6E05	    			MOVWF	STACK_4+1, 0
$C006	$ECB1	F001			CALL	_mul_16x16_u
$C00A	$0E3E	    			MOVLW	_cellState
$C00C	$2600	    			ADDWF	STACK_0, 1, 0
$C00E	$0E04	    			MOVLW	@_cellState
$C010	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C012	$0E01	    			MOVLW	1
$C014	$2400	    			ADDWF	STACK_0, 0, 0
$C016	$6EE1	    			MOVWF	FSR1L, 0
$C018	$0E00	    			MOVLW	0
$C01A	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C01C	$6EE2	    			MOVWF	FSR1L+1, 0
$C01E	$C018	FFE6			MOVFF	_rxBuf+2, POSTINC1
;test18f97.c,110 :: 			if (rxBuf[3] == '1')              //концевик двери , если 1, то верхняя крышка открыта в логе, если 0, то на мнемосхеме открыта
$C022	$5019	    			MOVF	_rxBuf+3, 0, 0
$C024	$0A31	    			XORLW	49
$C026	$E117	    			BNZ	L_SaveCellState_7
;test18f97.c,111 :: 			cellState[number][2] =  '0';
$C028	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C02C	$0E00	    			MOVLW	0
$C02E	$6E01	    			MOVWF	STACK_0+1, 0
$C030	$0E05	    			MOVLW	5
$C032	$6E04	    			MOVWF	STACK_4, 0
$C034	$0E00	    			MOVLW	0
$C036	$6E05	    			MOVWF	STACK_4+1, 0
$C038	$ECB1	F001			CALL	_mul_16x16_u
$C03C	$0E3E	    			MOVLW	_cellState
$C03E	$2600	    			ADDWF	STACK_0, 1, 0
$C040	$0E04	    			MOVLW	@_cellState
$C042	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C044	$0E02	    			MOVLW	2
$C046	$2400	    			ADDWF	STACK_0, 0, 0
$C048	$6EE1	    			MOVWF	FSR1L, 0
$C04A	$0E00	    			MOVLW	0
$C04C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C04E	$6EE2	    			MOVWF	FSR1L+1, 0
$C050	$0E30	    			MOVLW	48
$C052	$6EE6	    			MOVWF	POSTINC1, 0
$C054	$D031	    			BRA	L_SaveCellState_8
$C056	$	L_SaveCellState_7:
;test18f97.c,114 :: 			if (rxBuf[3] == '0')
$C056	$5019	    			MOVF	_rxBuf+3, 0, 0
$C058	$0A30	    			XORLW	48
$C05A	$E117	    			BNZ	L_SaveCellState_9
;test18f97.c,115 :: 			cellState[number][2] =  '1';
$C05C	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C060	$0E00	    			MOVLW	0
$C062	$6E01	    			MOVWF	STACK_0+1, 0
$C064	$0E05	    			MOVLW	5
$C066	$6E04	    			MOVWF	STACK_4, 0
$C068	$0E00	    			MOVLW	0
$C06A	$6E05	    			MOVWF	STACK_4+1, 0
$C06C	$ECB1	F001			CALL	_mul_16x16_u
$C070	$0E3E	    			MOVLW	_cellState
$C072	$2600	    			ADDWF	STACK_0, 1, 0
$C074	$0E04	    			MOVLW	@_cellState
$C076	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C078	$0E02	    			MOVLW	2
$C07A	$2400	    			ADDWF	STACK_0, 0, 0
$C07C	$6EE1	    			MOVWF	FSR1L, 0
$C07E	$0E00	    			MOVLW	0
$C080	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C082	$6EE2	    			MOVWF	FSR1L+1, 0
$C084	$0E31	    			MOVLW	49
$C086	$6EE6	    			MOVWF	POSTINC1, 0
$C088	$D017	    			BRA	L_SaveCellState_10
$C08A	$	L_SaveCellState_9:
;test18f97.c,117 :: 			cellState[number][2] = rxBuf[3];
$C08A	$0100	    			MOVLB	0
$C08C	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C090	$0E00	    			MOVLW	0
$C092	$6E01	    			MOVWF	STACK_0+1, 0
$C094	$0E05	    			MOVLW	5
$C096	$6E04	    			MOVWF	STACK_4, 0
$C098	$0E00	    			MOVLW	0
$C09A	$6E05	    			MOVWF	STACK_4+1, 0
$C09C	$ECB1	F001			CALL	_mul_16x16_u
$C0A0	$0E3E	    			MOVLW	_cellState
$C0A2	$2600	    			ADDWF	STACK_0, 1, 0
$C0A4	$0E04	    			MOVLW	@_cellState
$C0A6	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C0A8	$0E02	    			MOVLW	2
$C0AA	$2400	    			ADDWF	STACK_0, 0, 0
$C0AC	$6EE1	    			MOVWF	FSR1L, 0
$C0AE	$0E00	    			MOVLW	0
$C0B0	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C0B2	$6EE2	    			MOVWF	FSR1L+1, 0
$C0B4	$C019	FFE6			MOVFF	_rxBuf+3, POSTINC1
$C0B8	$	L_SaveCellState_10:
;test18f97.c,118 :: 			}
$C0B8	$	L_SaveCellState_8:
;test18f97.c,121 :: 			cellState[number][3] = rxBuf[4];    //мастер ключ
$C0B8	$0100	    			MOVLB	0
$C0BA	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C0BE	$0E00	    			MOVLW	0
$C0C0	$6E01	    			MOVWF	STACK_0+1, 0
$C0C2	$0E05	    			MOVLW	5
$C0C4	$6E04	    			MOVWF	STACK_4, 0
$C0C6	$0E00	    			MOVLW	0
$C0C8	$6E05	    			MOVWF	STACK_4+1, 0
$C0CA	$ECB1	F001			CALL	_mul_16x16_u
$C0CE	$0E3E	    			MOVLW	_cellState
$C0D0	$2600	    			ADDWF	STACK_0, 1, 0
$C0D2	$0E04	    			MOVLW	@_cellState
$C0D4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C0D6	$0E03	    			MOVLW	3
$C0D8	$2400	    			ADDWF	STACK_0, 0, 0
$C0DA	$6EE1	    			MOVWF	FSR1L, 0
$C0DC	$0E00	    			MOVLW	0
$C0DE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C0E0	$6EE2	    			MOVWF	FSR1L+1, 0
$C0E2	$C01A	FFE6			MOVFF	_rxBuf+4, POSTINC1
;test18f97.c,122 :: 			cellState[number][4] = rxBuf[5];
$C0E6	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C0EA	$0E00	    			MOVLW	0
$C0EC	$6E01	    			MOVWF	STACK_0+1, 0
$C0EE	$0E05	    			MOVLW	5
$C0F0	$6E04	    			MOVWF	STACK_4, 0
$C0F2	$0E00	    			MOVLW	0
$C0F4	$6E05	    			MOVWF	STACK_4+1, 0
$C0F6	$ECB1	F001			CALL	_mul_16x16_u
$C0FA	$0E3E	    			MOVLW	_cellState
$C0FC	$2600	    			ADDWF	STACK_0, 1, 0
$C0FE	$0E04	    			MOVLW	@_cellState
$C100	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C102	$0E04	    			MOVLW	4
$C104	$2400	    			ADDWF	STACK_0, 0, 0
$C106	$6EE1	    			MOVWF	FSR1L, 0
$C108	$0E00	    			MOVLW	0
$C10A	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C10C	$6EE2	    			MOVWF	FSR1L+1, 0
$C10E	$C01B	FFE6			MOVFF	_rxBuf+5, POSTINC1
;test18f97.c,123 :: 			}
$C112	$D0A3	    			BRA	L_SaveCellState_11
$C114	$	L_SaveCellState_6:
;test18f97.c,126 :: 			cellState[number][0] = rxBuf[1];
$C114	$0100	    			MOVLB	0
$C116	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C11A	$0E00	    			MOVLW	0
$C11C	$6E01	    			MOVWF	STACK_0+1, 0
$C11E	$0E05	    			MOVLW	5
$C120	$6E04	    			MOVWF	STACK_4, 0
$C122	$0E00	    			MOVLW	0
$C124	$6E05	    			MOVWF	STACK_4+1, 0
$C126	$ECB1	F001			CALL	_mul_16x16_u
$C12A	$0E3E	    			MOVLW	_cellState
$C12C	$2400	    			ADDWF	STACK_0, 0, 0
$C12E	$6EE1	    			MOVWF	FSR1L, 0
$C130	$0E04	    			MOVLW	@_cellState
$C132	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C134	$6EE2	    			MOVWF	FSR1L+1, 0
$C136	$C017	FFE6			MOVFF	_rxBuf+1, POSTINC1
;test18f97.c,127 :: 			if(rxBuf[2]=='0')            //инверсия, если получен '0' и '1' // 20200929 - перепутали NO/NC у микрика B1. Приходится исправлять программно
$C13A	$5018	    			MOVF	_rxBuf+2, 0, 0
$C13C	$0A30	    			XORLW	48
$C13E	$E117	    			BNZ	L_SaveCellState_12
;test18f97.c,128 :: 			{cellState[number][1] = '1';}
$C140	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C144	$0E00	    			MOVLW	0
$C146	$6E01	    			MOVWF	STACK_0+1, 0
$C148	$0E05	    			MOVLW	5
$C14A	$6E04	    			MOVWF	STACK_4, 0
$C14C	$0E00	    			MOVLW	0
$C14E	$6E05	    			MOVWF	STACK_4+1, 0
$C150	$ECB1	F001			CALL	_mul_16x16_u
$C154	$0E3E	    			MOVLW	_cellState
$C156	$2600	    			ADDWF	STACK_0, 1, 0
$C158	$0E04	    			MOVLW	@_cellState
$C15A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C15C	$0E01	    			MOVLW	1
$C15E	$2400	    			ADDWF	STACK_0, 0, 0
$C160	$6EE1	    			MOVWF	FSR1L, 0
$C162	$0E00	    			MOVLW	0
$C164	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C166	$6EE2	    			MOVWF	FSR1L+1, 0
$C168	$0E31	    			MOVLW	49
$C16A	$6EE6	    			MOVWF	POSTINC1, 0
$C16C	$D032	    			BRA	L_SaveCellState_13
$C16E	$	L_SaveCellState_12:
;test18f97.c,131 :: 			if(rxBuf[2]=='1')
$C16E	$0100	    			MOVLB	0
$C170	$5018	    			MOVF	_rxBuf+2, 0, 0
$C172	$0A31	    			XORLW	49
$C174	$E117	    			BNZ	L_SaveCellState_14
;test18f97.c,132 :: 			{cellState[number][1] = '0';}
$C176	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C17A	$0E00	    			MOVLW	0
$C17C	$6E01	    			MOVWF	STACK_0+1, 0
$C17E	$0E05	    			MOVLW	5
$C180	$6E04	    			MOVWF	STACK_4, 0
$C182	$0E00	    			MOVLW	0
$C184	$6E05	    			MOVWF	STACK_4+1, 0
$C186	$ECB1	F001			CALL	_mul_16x16_u
$C18A	$0E3E	    			MOVLW	_cellState
$C18C	$2600	    			ADDWF	STACK_0, 1, 0
$C18E	$0E04	    			MOVLW	@_cellState
$C190	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C192	$0E01	    			MOVLW	1
$C194	$2400	    			ADDWF	STACK_0, 0, 0
$C196	$6EE1	    			MOVWF	FSR1L, 0
$C198	$0E00	    			MOVLW	0
$C19A	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C19C	$6EE2	    			MOVWF	FSR1L+1, 0
$C19E	$0E30	    			MOVLW	48
$C1A0	$6EE6	    			MOVWF	POSTINC1, 0
$C1A2	$D017	    			BRA	L_SaveCellState_15
$C1A4	$	L_SaveCellState_14:
;test18f97.c,134 :: 			{cellState[number][1] = rxBuf[2];} //если получена '2', то оставляем
$C1A4	$0100	    			MOVLB	0
$C1A6	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C1AA	$0E00	    			MOVLW	0
$C1AC	$6E01	    			MOVWF	STACK_0+1, 0
$C1AE	$0E05	    			MOVLW	5
$C1B0	$6E04	    			MOVWF	STACK_4, 0
$C1B2	$0E00	    			MOVLW	0
$C1B4	$6E05	    			MOVWF	STACK_4+1, 0
$C1B6	$ECB1	F001			CALL	_mul_16x16_u
$C1BA	$0E3E	    			MOVLW	_cellState
$C1BC	$2600	    			ADDWF	STACK_0, 1, 0
$C1BE	$0E04	    			MOVLW	@_cellState
$C1C0	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C1C2	$0E01	    			MOVLW	1
$C1C4	$2400	    			ADDWF	STACK_0, 0, 0
$C1C6	$6EE1	    			MOVWF	FSR1L, 0
$C1C8	$0E00	    			MOVLW	0
$C1CA	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C1CC	$6EE2	    			MOVWF	FSR1L+1, 0
$C1CE	$C018	FFE6			MOVFF	_rxBuf+2, POSTINC1
$C1D2	$	L_SaveCellState_15:
;test18f97.c,135 :: 			}
$C1D2	$	L_SaveCellState_13:
;test18f97.c,136 :: 			cellState[number][2] = rxBuf[3];
$C1D2	$0100	    			MOVLB	0
$C1D4	$0100	    			MOVLB	0
$C1D6	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C1DA	$0E00	    			MOVLW	0
$C1DC	$6E01	    			MOVWF	STACK_0+1, 0
$C1DE	$0E05	    			MOVLW	5
$C1E0	$6E04	    			MOVWF	STACK_4, 0
$C1E2	$0E00	    			MOVLW	0
$C1E4	$6E05	    			MOVWF	STACK_4+1, 0
$C1E6	$ECB1	F001			CALL	_mul_16x16_u
$C1EA	$0E3E	    			MOVLW	_cellState
$C1EC	$2600	    			ADDWF	STACK_0, 1, 0
$C1EE	$0E04	    			MOVLW	@_cellState
$C1F0	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C1F2	$0E02	    			MOVLW	2
$C1F4	$2400	    			ADDWF	STACK_0, 0, 0
$C1F6	$6EE1	    			MOVWF	FSR1L, 0
$C1F8	$0E00	    			MOVLW	0
$C1FA	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C1FC	$6EE2	    			MOVWF	FSR1L+1, 0
$C1FE	$C019	FFE6			MOVFF	_rxBuf+3, POSTINC1
;test18f97.c,137 :: 			cellState[number][3] = rxBuf[4];
$C202	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C206	$0E00	    			MOVLW	0
$C208	$6E01	    			MOVWF	STACK_0+1, 0
$C20A	$0E05	    			MOVLW	5
$C20C	$6E04	    			MOVWF	STACK_4, 0
$C20E	$0E00	    			MOVLW	0
$C210	$6E05	    			MOVWF	STACK_4+1, 0
$C212	$ECB1	F001			CALL	_mul_16x16_u
$C216	$0E3E	    			MOVLW	_cellState
$C218	$2600	    			ADDWF	STACK_0, 1, 0
$C21A	$0E04	    			MOVLW	@_cellState
$C21C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C21E	$0E03	    			MOVLW	3
$C220	$2400	    			ADDWF	STACK_0, 0, 0
$C222	$6EE1	    			MOVWF	FSR1L, 0
$C224	$0E00	    			MOVLW	0
$C226	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C228	$6EE2	    			MOVWF	FSR1L+1, 0
$C22A	$C01A	FFE6			MOVFF	_rxBuf+4, POSTINC1
;test18f97.c,138 :: 			cellState[number][4] = rxBuf[5];
$C22E	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C232	$0E00	    			MOVLW	0
$C234	$6E01	    			MOVWF	STACK_0+1, 0
$C236	$0E05	    			MOVLW	5
$C238	$6E04	    			MOVWF	STACK_4, 0
$C23A	$0E00	    			MOVLW	0
$C23C	$6E05	    			MOVWF	STACK_4+1, 0
$C23E	$ECB1	F001			CALL	_mul_16x16_u
$C242	$0E3E	    			MOVLW	_cellState
$C244	$2600	    			ADDWF	STACK_0, 1, 0
$C246	$0E04	    			MOVLW	@_cellState
$C248	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C24A	$0E04	    			MOVLW	4
$C24C	$2400	    			ADDWF	STACK_0, 0, 0
$C24E	$6EE1	    			MOVWF	FSR1L, 0
$C250	$0E00	    			MOVLW	0
$C252	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C254	$6EE2	    			MOVWF	FSR1L+1, 0
$C256	$C01B	FFE6			MOVFF	_rxBuf+5, POSTINC1
;test18f97.c,139 :: 			}
$C25A	$	L_SaveCellState_11:
;test18f97.c,140 :: 			}
$C25A	$	L_SaveCellState_5:
;test18f97.c,141 :: 			chkSum2[number] = chkSum1[number];
$C25A	$0100	    			MOVLB	0
$C25C	$0100	    			MOVLB	0
$C25E	$0E01	    			MOVLW	1
$C260	$6E04	    			MOVWF	STACK_4, 0
$C262	$C5E0	F000			MOVFF	FARG_SaveCellState+0, STACK_0
$C266	$0E00	    			MOVLW	0
$C268	$6E01	    			MOVWF	STACK_0+1, 0
$C26A	$5004	    			MOVF	STACK_4, 0, 0
$C26C	$	L_SaveCellState_70:
$C26C	$0100	    			MOVLB	0
$C26E	$E005	    			BZ	L_SaveCellState_71
$C270	$3600	    			RLCF	STACK_0, 1, 0
$C272	$9000	    			BCF	STACK_0, 0, 0
$C274	$3601	    			RLCF	STACK_0+1, 1, 0
$C276	$0FFF	    			ADDLW	255
$C278	$D7F9	    			BRA	L_SaveCellState_70
$C27A	$	L_SaveCellState_71:
$C27A	$0E60	    			MOVLW	_chkSum2
$C27C	$2400	    			ADDWF	STACK_0, 0, 0
$C27E	$6EE1	    			MOVWF	FSR1L, 0
$C280	$0E05	    			MOVLW	@_chkSum2
$C282	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C284	$6EE2	    			MOVWF	FSR1L+1, 0
$C286	$0E42	    			MOVLW	_chkSum1
$C288	$2400	    			ADDWF	STACK_0, 0, 0
$C28A	$6EE9	    			MOVWF	FSR0L, 0
$C28C	$0E05	    			MOVLW	@_chkSum1
$C28E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C290	$6EEA	    			MOVWF	FSR0L+1, 0
$C292	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$C296	$CFEE	F001			MOVFF	POSTINC0, STACK_0+1
$C29A	$C000	FFE6			MOVFF	STACK_0, POSTINC1
$C29E	$C001	FFE6			MOVFF	STACK_0+1, POSTINC1
;test18f97.c,142 :: 			}
$C2A2	$0012	    			RETURN
$C2A4	$	_WriteChangesLog:
;test18f97.c,145 :: 			void WriteChangesLog(unsigned char cell)                  // если текущее состояние ячейки отличается от предыдущего, запишем это в лоХ
;test18f97.c,149 :: 			if(cell>14) {return;}
$C2A4	$0105	    			MOVLB	5
$C2A6	$51E0	    			MOVF	FARG_WriteChangesLog+0, 0, 1
$C2A8	$080E	    			SUBLW	14
$C2AA	$A0D8	    			BTFSS	STATUS, C, 0
$C2AC	$0012	    			RETURN
$C2AE	$	L_WriteChangesLog_16:
;test18f97.c,155 :: 			(prevCellState[cell][4]!=cellState[cell][4]))  {
$C2AE	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C2B2	$0E00	    			MOVLW	0
$C2B4	$6E01	    			MOVWF	STACK_0+1, 0
$C2B6	$0E05	    			MOVLW	5
$C2B8	$6E04	    			MOVWF	STACK_4, 0
$C2BA	$0E00	    			MOVLW	0
$C2BC	$6E05	    			MOVWF	STACK_4+1, 0
$C2BE	$ECB1	F001			CALL	_mul_16x16_u
$C2C2	$0EF7	    			MOVLW	_prevCellState
$C2C4	$2400	    			ADDWF	STACK_0, 0, 0
$C2C6	$6EE9	    			MOVWF	FSR0L, 0
$C2C8	$0E04	    			MOVLW	@_prevCellState
$C2CA	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C2CC	$6EEA	    			MOVWF	FSR0L+1, 0
$C2CE	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$C2D2	$0E3E	    			MOVLW	_cellState
$C2D4	$2400	    			ADDWF	STACK_0, 0, 0
$C2D6	$6EE9	    			MOVWF	FSR0L, 0
$C2D8	$0E04	    			MOVLW	@_cellState
$C2DA	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C2DC	$6EEA	    			MOVWF	FSR0L+1, 0
$C2DE	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C2E2	$5004	    			MOVF	STACK_4, 0, 0
$C2E4	$1802	    			XORWF	STACK_2, 0, 0
$C2E6	$A4D8	    			BTFSS	STATUS, Z, 0
$C2E8	$D09D	    			BRA	L286_ex_L_WriteChangesLog_19
$C2EA	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C2EE	$0E00	    			MOVLW	0
$C2F0	$6E01	    			MOVWF	STACK_0+1, 0
$C2F2	$0E05	    			MOVLW	5
$C2F4	$6E04	    			MOVWF	STACK_4, 0
$C2F6	$0E00	    			MOVLW	0
$C2F8	$6E05	    			MOVWF	STACK_4+1, 0
$C2FA	$ECB1	F001			CALL	_mul_16x16_u
$C2FE	$0EF7	    			MOVLW	_prevCellState
$C300	$2400	    			ADDWF	STACK_0, 0, 0
$C302	$6E02	    			MOVWF	STACK_2, 0
$C304	$0E04	    			MOVLW	@_prevCellState
$C306	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C308	$6E03	    			MOVWF	STACK_2+1, 0
$C30A	$0E01	    			MOVLW	1
$C30C	$2402	    			ADDWF	STACK_2, 0, 0
$C30E	$6EE9	    			MOVWF	FSR0L, 0
$C310	$0E00	    			MOVLW	0
$C312	$2003	    			ADDWFC	STACK_2+1, 0, 0
$C314	$6EEA	    			MOVWF	FSR0L+1, 0
$C316	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$C31A	$0E3E	    			MOVLW	_cellState
$C31C	$2600	    			ADDWF	STACK_0, 1, 0
$C31E	$0E04	    			MOVLW	@_cellState
$C320	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C322	$0E01	    			MOVLW	1
$C324	$2400	    			ADDWF	STACK_0, 0, 0
$C326	$6EE9	    			MOVWF	FSR0L, 0
$C328	$0E00	    			MOVLW	0
$C32A	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C32C	$6EEA	    			MOVWF	FSR0L+1, 0
$C32E	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C332	$5004	    			MOVF	STACK_4, 0, 0
$C334	$1802	    			XORWF	STACK_2, 0, 0
$C336	$E176	    			BNZ	L286_ex_L_WriteChangesLog_19
$C338	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C33C	$0E00	    			MOVLW	0
$C33E	$6E01	    			MOVWF	STACK_0+1, 0
$C340	$0E05	    			MOVLW	5
$C342	$6E04	    			MOVWF	STACK_4, 0
$C344	$0E00	    			MOVLW	0
$C346	$6E05	    			MOVWF	STACK_4+1, 0
$C348	$ECB1	F001			CALL	_mul_16x16_u
$C34C	$0EF7	    			MOVLW	_prevCellState
$C34E	$2400	    			ADDWF	STACK_0, 0, 0
$C350	$6E02	    			MOVWF	STACK_2, 0
$C352	$0E04	    			MOVLW	@_prevCellState
$C354	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C356	$6E03	    			MOVWF	STACK_2+1, 0
$C358	$0E02	    			MOVLW	2
$C35A	$2402	    			ADDWF	STACK_2, 0, 0
$C35C	$6EE9	    			MOVWF	FSR0L, 0
$C35E	$0E00	    			MOVLW	0
$C360	$2003	    			ADDWFC	STACK_2+1, 0, 0
$C362	$6EEA	    			MOVWF	FSR0L+1, 0
$C364	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$C368	$0E3E	    			MOVLW	_cellState
$C36A	$2600	    			ADDWF	STACK_0, 1, 0
$C36C	$0E04	    			MOVLW	@_cellState
$C36E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C370	$0E02	    			MOVLW	2
$C372	$2400	    			ADDWF	STACK_0, 0, 0
$C374	$6EE9	    			MOVWF	FSR0L, 0
$C376	$0E00	    			MOVLW	0
$C378	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C37A	$6EEA	    			MOVWF	FSR0L+1, 0
$C37C	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C380	$5004	    			MOVF	STACK_4, 0, 0
$C382	$1802	    			XORWF	STACK_2, 0, 0
$C384	$E14F	    			BNZ	L286_ex_L_WriteChangesLog_19
$C386	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C38A	$0E00	    			MOVLW	0
$C38C	$6E01	    			MOVWF	STACK_0+1, 0
$C38E	$0E05	    			MOVLW	5
$C390	$6E04	    			MOVWF	STACK_4, 0
$C392	$0E00	    			MOVLW	0
$C394	$6E05	    			MOVWF	STACK_4+1, 0
$C396	$ECB1	F001			CALL	_mul_16x16_u
$C39A	$0EF7	    			MOVLW	_prevCellState
$C39C	$2400	    			ADDWF	STACK_0, 0, 0
$C39E	$6E02	    			MOVWF	STACK_2, 0
$C3A0	$0E04	    			MOVLW	@_prevCellState
$C3A2	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C3A4	$6E03	    			MOVWF	STACK_2+1, 0
$C3A6	$0E03	    			MOVLW	3
$C3A8	$2402	    			ADDWF	STACK_2, 0, 0
$C3AA	$6EE9	    			MOVWF	FSR0L, 0
$C3AC	$0E00	    			MOVLW	0
$C3AE	$2003	    			ADDWFC	STACK_2+1, 0, 0
$C3B0	$6EEA	    			MOVWF	FSR0L+1, 0
$C3B2	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$C3B6	$0E3E	    			MOVLW	_cellState
$C3B8	$2600	    			ADDWF	STACK_0, 1, 0
$C3BA	$0E04	    			MOVLW	@_cellState
$C3BC	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C3BE	$0E03	    			MOVLW	3
$C3C0	$2400	    			ADDWF	STACK_0, 0, 0
$C3C2	$6EE9	    			MOVWF	FSR0L, 0
$C3C4	$0E00	    			MOVLW	0
$C3C6	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C3C8	$6EEA	    			MOVWF	FSR0L+1, 0
$C3CA	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C3CE	$5004	    			MOVF	STACK_4, 0, 0
$C3D0	$1802	    			XORWF	STACK_2, 0, 0
$C3D2	$E128	    			BNZ	L286_ex_L_WriteChangesLog_19
$C3D4	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C3D8	$0E00	    			MOVLW	0
$C3DA	$6E01	    			MOVWF	STACK_0+1, 0
$C3DC	$0E05	    			MOVLW	5
$C3DE	$6E04	    			MOVWF	STACK_4, 0
$C3E0	$0E00	    			MOVLW	0
$C3E2	$6E05	    			MOVWF	STACK_4+1, 0
$C3E4	$ECB1	F001			CALL	_mul_16x16_u
$C3E8	$0EF7	    			MOVLW	_prevCellState
$C3EA	$2400	    			ADDWF	STACK_0, 0, 0
$C3EC	$6E02	    			MOVWF	STACK_2, 0
$C3EE	$0E04	    			MOVLW	@_prevCellState
$C3F0	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C3F2	$6E03	    			MOVWF	STACK_2+1, 0
$C3F4	$0E04	    			MOVLW	4
$C3F6	$2402	    			ADDWF	STACK_2, 0, 0
$C3F8	$6EE9	    			MOVWF	FSR0L, 0
$C3FA	$0E00	    			MOVLW	0
$C3FC	$2003	    			ADDWFC	STACK_2+1, 0, 0
$C3FE	$6EEA	    			MOVWF	FSR0L+1, 0
$C400	$CFEE	F004			MOVFF	POSTINC0, STACK_4
$C404	$0E3E	    			MOVLW	_cellState
$C406	$2600	    			ADDWF	STACK_0, 1, 0
$C408	$0E04	    			MOVLW	@_cellState
$C40A	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C40C	$0E04	    			MOVLW	4
$C40E	$2400	    			ADDWF	STACK_0, 0, 0
$C410	$6EE9	    			MOVWF	FSR0L, 0
$C412	$0E00	    			MOVLW	0
$C414	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C416	$6EEA	    			MOVWF	FSR0L+1, 0
$C418	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C41C	$5004	    			MOVF	STACK_4, 0, 0
$C41E	$1802	    			XORWF	STACK_2, 0, 0
$C420	$B4D8	    			BTFSC	STATUS, Z, 0
$C422	$D1C9	    			BRA	L_WriteChangesLog_19
$C424	$	L286_ex_L_WriteChangesLog_19:
;test18f97.c,157 :: 			if(cellState[cell][4]!='8') {
$C424	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C428	$0E00	    			MOVLW	0
$C42A	$6E01	    			MOVWF	STACK_0+1, 0
$C42C	$0E05	    			MOVLW	5
$C42E	$6E04	    			MOVWF	STACK_4, 0
$C430	$0E00	    			MOVLW	0
$C432	$6E05	    			MOVWF	STACK_4+1, 0
$C434	$ECB1	F001			CALL	_mul_16x16_u
$C438	$0E3E	    			MOVLW	_cellState
$C43A	$2600	    			ADDWF	STACK_0, 1, 0
$C43C	$0E04	    			MOVLW	@_cellState
$C43E	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C440	$0E04	    			MOVLW	4
$C442	$2400	    			ADDWF	STACK_0, 0, 0
$C444	$6EE9	    			MOVWF	FSR0L, 0
$C446	$0E00	    			MOVLW	0
$C448	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C44A	$6EEA	    			MOVWF	FSR0L+1, 0
$C44C	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C450	$5002	    			MOVF	STACK_2, 0, 0
$C452	$0A38	    			XORLW	56
$C454	$B4D8	    			BTFSC	STATUS, Z, 0
$C456	$D1AF	    			BRA	L_WriteChangesLog_20
;test18f97.c,158 :: 			tmpBuf[0] = '_';                                 // в этом чертовом microC нестабильно работает sprintf();
$C458	$0E5F	    			MOVLW	95
$C45A	$0105	    			MOVLB	5
$C45C	$6FE1	    			MOVWF	WriteChangesLog_tmpBuf_L0, 1
;test18f97.c,159 :: 			tmpBuf[1] = '_';
$C45E	$0E5F	    			MOVLW	95
$C460	$6FE2	    			MOVWF	WriteChangesLog_tmpBuf_L0+1, 1
;test18f97.c,160 :: 			tmpBuf[2] = 'c';
$C462	$0E63	    			MOVLW	99
$C464	$6FE3	    			MOVWF	WriteChangesLog_tmpBuf_L0+2, 1
;test18f97.c,161 :: 			tmpBuf[3] = 'e';
$C466	$0E65	    			MOVLW	101
$C468	$6FE4	    			MOVWF	WriteChangesLog_tmpBuf_L0+3, 1
;test18f97.c,162 :: 			tmpBuf[4] = 'l';
$C46A	$0E6C	    			MOVLW	108
$C46C	$6FE5	    			MOVWF	WriteChangesLog_tmpBuf_L0+4, 1
;test18f97.c,163 :: 			tmpBuf[5] = 'l';
$C46E	$0E6C	    			MOVLW	108
$C470	$6FE6	    			MOVWF	WriteChangesLog_tmpBuf_L0+5, 1
;test18f97.c,164 :: 			tmpBuf[6] = '_';
$C472	$0E5F	    			MOVLW	95
$C474	$6FE7	    			MOVWF	WriteChangesLog_tmpBuf_L0+6, 1
;test18f97.c,165 :: 			tmpBuf[7] = '0'+(cell/10);
$C476	$0E0A	    			MOVLW	10
$C478	$6E04	    			MOVWF	STACK_4, 0
$C47A	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C47E	$EC5D	F006			CALL	_div_8x8_u
$C482	$5000	    			MOVF	STACK_0, 0, 0
$C484	$0F30	    			ADDLW	48
$C486	$0105	    			MOVLB	5
$C488	$6FE8	    			MOVWF	WriteChangesLog_tmpBuf_L0+7, 1
;test18f97.c,166 :: 			tmpBuf[8] = '0'+(cell%10);
$C48A	$0E0A	    			MOVLW	10
$C48C	$6E04	    			MOVWF	STACK_4, 0
$C48E	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C492	$EC5D	F006			CALL	_div_8x8_u
$C496	$C008	F000			MOVFF	STACK_8, STACK_0
$C49A	$5000	    			MOVF	STACK_0, 0, 0
$C49C	$0F30	    			ADDLW	48
$C49E	$0105	    			MOVLB	5
$C4A0	$6FE9	    			MOVWF	WriteChangesLog_tmpBuf_L0+8, 1
;test18f97.c,167 :: 			tmpBuf[9] = '=';
$C4A2	$0E3D	    			MOVLW	61
$C4A4	$6FEA	    			MOVWF	WriteChangesLog_tmpBuf_L0+9, 1
;test18f97.c,169 :: 			if((cellState[cell][0]>='0')&&(cellState[cell][0]<'5')) { tmpBuf[10] = cellState[cell][0];}
$C4A6	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C4AA	$0E00	    			MOVLW	0
$C4AC	$6E01	    			MOVWF	STACK_0+1, 0
$C4AE	$0E05	    			MOVLW	5
$C4B0	$6E04	    			MOVWF	STACK_4, 0
$C4B2	$0E00	    			MOVLW	0
$C4B4	$6E05	    			MOVWF	STACK_4+1, 0
$C4B6	$ECB1	F001			CALL	_mul_16x16_u
$C4BA	$0E3E	    			MOVLW	_cellState
$C4BC	$2400	    			ADDWF	STACK_0, 0, 0
$C4BE	$6EE9	    			MOVWF	FSR0L, 0
$C4C0	$0E04	    			MOVLW	@_cellState
$C4C2	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C4C4	$6EEA	    			MOVWF	FSR0L+1, 0
$C4C6	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C4CA	$0E30	    			MOVLW	48
$C4CC	$5C02	    			SUBWF	STACK_2, 0, 0
$C4CE	$E328	    			BNC	L_WriteChangesLog_23
$C4D0	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C4D4	$0E00	    			MOVLW	0
$C4D6	$6E01	    			MOVWF	STACK_0+1, 0
$C4D8	$0E05	    			MOVLW	5
$C4DA	$6E04	    			MOVWF	STACK_4, 0
$C4DC	$0E00	    			MOVLW	0
$C4DE	$6E05	    			MOVWF	STACK_4+1, 0
$C4E0	$ECB1	F001			CALL	_mul_16x16_u
$C4E4	$0E3E	    			MOVLW	_cellState
$C4E6	$2400	    			ADDWF	STACK_0, 0, 0
$C4E8	$6EE9	    			MOVWF	FSR0L, 0
$C4EA	$0E04	    			MOVLW	@_cellState
$C4EC	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C4EE	$6EEA	    			MOVWF	FSR0L+1, 0
$C4F0	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C4F4	$0E35	    			MOVLW	53
$C4F6	$5C02	    			SUBWF	STACK_2, 0, 0
$C4F8	$E213	    			BC	L_WriteChangesLog_23
$C4FA	$	L323_ex_L_WriteChangesLog_23:
$C4FA	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C4FE	$0E00	    			MOVLW	0
$C500	$6E01	    			MOVWF	STACK_0+1, 0
$C502	$0E05	    			MOVLW	5
$C504	$6E04	    			MOVWF	STACK_4, 0
$C506	$0E00	    			MOVLW	0
$C508	$6E05	    			MOVWF	STACK_4+1, 0
$C50A	$ECB1	F001			CALL	_mul_16x16_u
$C50E	$0E3E	    			MOVLW	_cellState
$C510	$2400	    			ADDWF	STACK_0, 0, 0
$C512	$6EE9	    			MOVWF	FSR0L, 0
$C514	$0E04	    			MOVLW	@_cellState
$C516	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C518	$6EEA	    			MOVWF	FSR0L+1, 0
$C51A	$CFEE	F5EB			MOVFF	POSTINC0, WriteChangesLog_tmpBuf_L0+10
$C51E	$D003	    			BRA	L_WriteChangesLog_24
$C520	$	L_WriteChangesLog_23:
;test18f97.c,170 :: 			else {tmpBuf[10] = '5';}
$C520	$0E35	    			MOVLW	53
$C522	$0105	    			MOVLB	5
$C524	$6FEB	    			MOVWF	WriteChangesLog_tmpBuf_L0+10, 1
$C526	$	L_WriteChangesLog_24:
;test18f97.c,171 :: 			tmpBuf[11] =  ',';
$C526	$0105	    			MOVLB	5
$C528	$0E2C	    			MOVLW	44
$C52A	$6FEC	    			MOVWF	WriteChangesLog_tmpBuf_L0+11, 1
;test18f97.c,172 :: 			if((cellState[cell][1]>='0')&&(cellState[cell][1]<'5')) { tmpBuf[12] = cellState[cell][1];}
$C52C	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C530	$0E00	    			MOVLW	0
$C532	$6E01	    			MOVWF	STACK_0+1, 0
$C534	$0E05	    			MOVLW	5
$C536	$6E04	    			MOVWF	STACK_4, 0
$C538	$0E00	    			MOVLW	0
$C53A	$6E05	    			MOVWF	STACK_4+1, 0
$C53C	$ECB1	F001			CALL	_mul_16x16_u
$C540	$0E3E	    			MOVLW	_cellState
$C542	$2600	    			ADDWF	STACK_0, 1, 0
$C544	$0E04	    			MOVLW	@_cellState
$C546	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C548	$0E01	    			MOVLW	1
$C54A	$2400	    			ADDWF	STACK_0, 0, 0
$C54C	$6EE9	    			MOVWF	FSR0L, 0
$C54E	$0E00	    			MOVLW	0
$C550	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C552	$6EEA	    			MOVWF	FSR0L+1, 0
$C554	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C558	$0E30	    			MOVLW	48
$C55A	$5C02	    			SUBWF	STACK_2, 0, 0
$C55C	$E330	    			BNC	L_WriteChangesLog_27
$C55E	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C562	$0E00	    			MOVLW	0
$C564	$6E01	    			MOVWF	STACK_0+1, 0
$C566	$0E05	    			MOVLW	5
$C568	$6E04	    			MOVWF	STACK_4, 0
$C56A	$0E00	    			MOVLW	0
$C56C	$6E05	    			MOVWF	STACK_4+1, 0
$C56E	$ECB1	F001			CALL	_mul_16x16_u
$C572	$0E3E	    			MOVLW	_cellState
$C574	$2600	    			ADDWF	STACK_0, 1, 0
$C576	$0E04	    			MOVLW	@_cellState
$C578	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C57A	$0E01	    			MOVLW	1
$C57C	$2400	    			ADDWF	STACK_0, 0, 0
$C57E	$6EE9	    			MOVWF	FSR0L, 0
$C580	$0E00	    			MOVLW	0
$C582	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C584	$6EEA	    			MOVWF	FSR0L+1, 0
$C586	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C58A	$0E35	    			MOVLW	53
$C58C	$5C02	    			SUBWF	STACK_2, 0, 0
$C58E	$E217	    			BC	L_WriteChangesLog_27
$C590	$	L351_ex_L_WriteChangesLog_27:
$C590	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C594	$0E00	    			MOVLW	0
$C596	$6E01	    			MOVWF	STACK_0+1, 0
$C598	$0E05	    			MOVLW	5
$C59A	$6E04	    			MOVWF	STACK_4, 0
$C59C	$0E00	    			MOVLW	0
$C59E	$6E05	    			MOVWF	STACK_4+1, 0
$C5A0	$ECB1	F001			CALL	_mul_16x16_u
$C5A4	$0E3E	    			MOVLW	_cellState
$C5A6	$2600	    			ADDWF	STACK_0, 1, 0
$C5A8	$0E04	    			MOVLW	@_cellState
$C5AA	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C5AC	$0E01	    			MOVLW	1
$C5AE	$2400	    			ADDWF	STACK_0, 0, 0
$C5B0	$6EE9	    			MOVWF	FSR0L, 0
$C5B2	$0E00	    			MOVLW	0
$C5B4	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C5B6	$6EEA	    			MOVWF	FSR0L+1, 0
$C5B8	$CFEE	F5ED			MOVFF	POSTINC0, WriteChangesLog_tmpBuf_L0+12
$C5BC	$D003	    			BRA	L_WriteChangesLog_28
$C5BE	$	L_WriteChangesLog_27:
;test18f97.c,173 :: 			else {tmpBuf[12] = '5';}
$C5BE	$0E35	    			MOVLW	53
$C5C0	$0105	    			MOVLB	5
$C5C2	$6FED	    			MOVWF	WriteChangesLog_tmpBuf_L0+12, 1
$C5C4	$	L_WriteChangesLog_28:
;test18f97.c,174 :: 			tmpBuf[13] =  ',';
$C5C4	$0105	    			MOVLB	5
$C5C6	$0E2C	    			MOVLW	44
$C5C8	$6FEE	    			MOVWF	WriteChangesLog_tmpBuf_L0+13, 1
;test18f97.c,175 :: 			if((cellState[cell][2]>='0')&&(cellState[cell][2]<'5')) { tmpBuf[14] = cellState[cell][2];}
$C5CA	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C5CE	$0E00	    			MOVLW	0
$C5D0	$6E01	    			MOVWF	STACK_0+1, 0
$C5D2	$0E05	    			MOVLW	5
$C5D4	$6E04	    			MOVWF	STACK_4, 0
$C5D6	$0E00	    			MOVLW	0
$C5D8	$6E05	    			MOVWF	STACK_4+1, 0
$C5DA	$ECB1	F001			CALL	_mul_16x16_u
$C5DE	$0E3E	    			MOVLW	_cellState
$C5E0	$2600	    			ADDWF	STACK_0, 1, 0
$C5E2	$0E04	    			MOVLW	@_cellState
$C5E4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C5E6	$0E02	    			MOVLW	2
$C5E8	$2400	    			ADDWF	STACK_0, 0, 0
$C5EA	$6EE9	    			MOVWF	FSR0L, 0
$C5EC	$0E00	    			MOVLW	0
$C5EE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C5F0	$6EEA	    			MOVWF	FSR0L+1, 0
$C5F2	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C5F6	$0E30	    			MOVLW	48
$C5F8	$5C02	    			SUBWF	STACK_2, 0, 0
$C5FA	$E330	    			BNC	L_WriteChangesLog_31
$C5FC	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C600	$0E00	    			MOVLW	0
$C602	$6E01	    			MOVWF	STACK_0+1, 0
$C604	$0E05	    			MOVLW	5
$C606	$6E04	    			MOVWF	STACK_4, 0
$C608	$0E00	    			MOVLW	0
$C60A	$6E05	    			MOVWF	STACK_4+1, 0
$C60C	$ECB1	F001			CALL	_mul_16x16_u
$C610	$0E3E	    			MOVLW	_cellState
$C612	$2600	    			ADDWF	STACK_0, 1, 0
$C614	$0E04	    			MOVLW	@_cellState
$C616	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C618	$0E02	    			MOVLW	2
$C61A	$2400	    			ADDWF	STACK_0, 0, 0
$C61C	$6EE9	    			MOVWF	FSR0L, 0
$C61E	$0E00	    			MOVLW	0
$C620	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C622	$6EEA	    			MOVWF	FSR0L+1, 0
$C624	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C628	$0E35	    			MOVLW	53
$C62A	$5C02	    			SUBWF	STACK_2, 0, 0
$C62C	$E217	    			BC	L_WriteChangesLog_31
$C62E	$	L380_ex_L_WriteChangesLog_31:
$C62E	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C632	$0E00	    			MOVLW	0
$C634	$6E01	    			MOVWF	STACK_0+1, 0
$C636	$0E05	    			MOVLW	5
$C638	$6E04	    			MOVWF	STACK_4, 0
$C63A	$0E00	    			MOVLW	0
$C63C	$6E05	    			MOVWF	STACK_4+1, 0
$C63E	$ECB1	F001			CALL	_mul_16x16_u
$C642	$0E3E	    			MOVLW	_cellState
$C644	$2600	    			ADDWF	STACK_0, 1, 0
$C646	$0E04	    			MOVLW	@_cellState
$C648	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C64A	$0E02	    			MOVLW	2
$C64C	$2400	    			ADDWF	STACK_0, 0, 0
$C64E	$6EE9	    			MOVWF	FSR0L, 0
$C650	$0E00	    			MOVLW	0
$C652	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C654	$6EEA	    			MOVWF	FSR0L+1, 0
$C656	$CFEE	F5EF			MOVFF	POSTINC0, WriteChangesLog_tmpBuf_L0+14
$C65A	$D003	    			BRA	L_WriteChangesLog_32
$C65C	$	L_WriteChangesLog_31:
;test18f97.c,176 :: 			else {tmpBuf[14] = '5';}
$C65C	$0E35	    			MOVLW	53
$C65E	$0105	    			MOVLB	5
$C660	$6FEF	    			MOVWF	WriteChangesLog_tmpBuf_L0+14, 1
$C662	$	L_WriteChangesLog_32:
;test18f97.c,177 :: 			tmpBuf[15] =  ',';
$C662	$0105	    			MOVLB	5
$C664	$0E2C	    			MOVLW	44
$C666	$6FF0	    			MOVWF	WriteChangesLog_tmpBuf_L0+15, 1
;test18f97.c,178 :: 			if((cellState[cell][3]>='0')&&(cellState[cell][3]<'5')) { tmpBuf[16] = cellState[cell][3];}
$C668	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C66C	$0E00	    			MOVLW	0
$C66E	$6E01	    			MOVWF	STACK_0+1, 0
$C670	$0E05	    			MOVLW	5
$C672	$6E04	    			MOVWF	STACK_4, 0
$C674	$0E00	    			MOVLW	0
$C676	$6E05	    			MOVWF	STACK_4+1, 0
$C678	$ECB1	F001			CALL	_mul_16x16_u
$C67C	$0E3E	    			MOVLW	_cellState
$C67E	$2600	    			ADDWF	STACK_0, 1, 0
$C680	$0E04	    			MOVLW	@_cellState
$C682	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C684	$0E03	    			MOVLW	3
$C686	$2400	    			ADDWF	STACK_0, 0, 0
$C688	$6EE9	    			MOVWF	FSR0L, 0
$C68A	$0E00	    			MOVLW	0
$C68C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C68E	$6EEA	    			MOVWF	FSR0L+1, 0
$C690	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C694	$0E30	    			MOVLW	48
$C696	$5C02	    			SUBWF	STACK_2, 0, 0
$C698	$E330	    			BNC	L_WriteChangesLog_35
$C69A	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C69E	$0E00	    			MOVLW	0
$C6A0	$6E01	    			MOVWF	STACK_0+1, 0
$C6A2	$0E05	    			MOVLW	5
$C6A4	$6E04	    			MOVWF	STACK_4, 0
$C6A6	$0E00	    			MOVLW	0
$C6A8	$6E05	    			MOVWF	STACK_4+1, 0
$C6AA	$ECB1	F001			CALL	_mul_16x16_u
$C6AE	$0E3E	    			MOVLW	_cellState
$C6B0	$2600	    			ADDWF	STACK_0, 1, 0
$C6B2	$0E04	    			MOVLW	@_cellState
$C6B4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C6B6	$0E03	    			MOVLW	3
$C6B8	$2400	    			ADDWF	STACK_0, 0, 0
$C6BA	$6EE9	    			MOVWF	FSR0L, 0
$C6BC	$0E00	    			MOVLW	0
$C6BE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C6C0	$6EEA	    			MOVWF	FSR0L+1, 0
$C6C2	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C6C6	$0E35	    			MOVLW	53
$C6C8	$5C02	    			SUBWF	STACK_2, 0, 0
$C6CA	$E217	    			BC	L_WriteChangesLog_35
$C6CC	$	L409_ex_L_WriteChangesLog_35:
$C6CC	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C6D0	$0E00	    			MOVLW	0
$C6D2	$6E01	    			MOVWF	STACK_0+1, 0
$C6D4	$0E05	    			MOVLW	5
$C6D6	$6E04	    			MOVWF	STACK_4, 0
$C6D8	$0E00	    			MOVLW	0
$C6DA	$6E05	    			MOVWF	STACK_4+1, 0
$C6DC	$ECB1	F001			CALL	_mul_16x16_u
$C6E0	$0E3E	    			MOVLW	_cellState
$C6E2	$2600	    			ADDWF	STACK_0, 1, 0
$C6E4	$0E04	    			MOVLW	@_cellState
$C6E6	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C6E8	$0E03	    			MOVLW	3
$C6EA	$2400	    			ADDWF	STACK_0, 0, 0
$C6EC	$6EE9	    			MOVWF	FSR0L, 0
$C6EE	$0E00	    			MOVLW	0
$C6F0	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C6F2	$6EEA	    			MOVWF	FSR0L+1, 0
$C6F4	$CFEE	F5F1			MOVFF	POSTINC0, WriteChangesLog_tmpBuf_L0+16
$C6F8	$D003	    			BRA	L_WriteChangesLog_36
$C6FA	$	L_WriteChangesLog_35:
;test18f97.c,179 :: 			else {tmpBuf[16] = '5';}
$C6FA	$0E35	    			MOVLW	53
$C6FC	$0105	    			MOVLB	5
$C6FE	$6FF1	    			MOVWF	WriteChangesLog_tmpBuf_L0+16, 1
$C700	$	L_WriteChangesLog_36:
;test18f97.c,180 :: 			tmpBuf[17] =  ',';
$C700	$0105	    			MOVLB	5
$C702	$0E2C	    			MOVLW	44
$C704	$6FF2	    			MOVWF	WriteChangesLog_tmpBuf_L0+17, 1
;test18f97.c,181 :: 			if((cellState[cell][4]>='0')&&(cellState[cell][4]<'5')) { tmpBuf[18] = cellState[cell][4];}
$C706	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C70A	$0E00	    			MOVLW	0
$C70C	$6E01	    			MOVWF	STACK_0+1, 0
$C70E	$0E05	    			MOVLW	5
$C710	$6E04	    			MOVWF	STACK_4, 0
$C712	$0E00	    			MOVLW	0
$C714	$6E05	    			MOVWF	STACK_4+1, 0
$C716	$ECB1	F001			CALL	_mul_16x16_u
$C71A	$0E3E	    			MOVLW	_cellState
$C71C	$2600	    			ADDWF	STACK_0, 1, 0
$C71E	$0E04	    			MOVLW	@_cellState
$C720	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C722	$0E04	    			MOVLW	4
$C724	$2400	    			ADDWF	STACK_0, 0, 0
$C726	$6EE9	    			MOVWF	FSR0L, 0
$C728	$0E00	    			MOVLW	0
$C72A	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C72C	$6EEA	    			MOVWF	FSR0L+1, 0
$C72E	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C732	$0E30	    			MOVLW	48
$C734	$5C02	    			SUBWF	STACK_2, 0, 0
$C736	$E330	    			BNC	L_WriteChangesLog_39
$C738	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C73C	$0E00	    			MOVLW	0
$C73E	$6E01	    			MOVWF	STACK_0+1, 0
$C740	$0E05	    			MOVLW	5
$C742	$6E04	    			MOVWF	STACK_4, 0
$C744	$0E00	    			MOVLW	0
$C746	$6E05	    			MOVWF	STACK_4+1, 0
$C748	$ECB1	F001			CALL	_mul_16x16_u
$C74C	$0E3E	    			MOVLW	_cellState
$C74E	$2600	    			ADDWF	STACK_0, 1, 0
$C750	$0E04	    			MOVLW	@_cellState
$C752	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C754	$0E04	    			MOVLW	4
$C756	$2400	    			ADDWF	STACK_0, 0, 0
$C758	$6EE9	    			MOVWF	FSR0L, 0
$C75A	$0E00	    			MOVLW	0
$C75C	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C75E	$6EEA	    			MOVWF	FSR0L+1, 0
$C760	$CFEE	F002			MOVFF	POSTINC0, STACK_2
$C764	$0E35	    			MOVLW	53
$C766	$5C02	    			SUBWF	STACK_2, 0, 0
$C768	$E217	    			BC	L_WriteChangesLog_39
$C76A	$	L438_ex_L_WriteChangesLog_39:
$C76A	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C76E	$0E00	    			MOVLW	0
$C770	$6E01	    			MOVWF	STACK_0+1, 0
$C772	$0E05	    			MOVLW	5
$C774	$6E04	    			MOVWF	STACK_4, 0
$C776	$0E00	    			MOVLW	0
$C778	$6E05	    			MOVWF	STACK_4+1, 0
$C77A	$ECB1	F001			CALL	_mul_16x16_u
$C77E	$0E3E	    			MOVLW	_cellState
$C780	$2600	    			ADDWF	STACK_0, 1, 0
$C782	$0E04	    			MOVLW	@_cellState
$C784	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C786	$0E04	    			MOVLW	4
$C788	$2400	    			ADDWF	STACK_0, 0, 0
$C78A	$6EE9	    			MOVWF	FSR0L, 0
$C78C	$0E00	    			MOVLW	0
$C78E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C790	$6EEA	    			MOVWF	FSR0L+1, 0
$C792	$CFEE	F5F3			MOVFF	POSTINC0, WriteChangesLog_tmpBuf_L0+18
$C796	$D003	    			BRA	L_WriteChangesLog_40
$C798	$	L_WriteChangesLog_39:
;test18f97.c,182 :: 			else {tmpBuf[18] = '5';}
$C798	$0E35	    			MOVLW	53
$C79A	$0105	    			MOVLB	5
$C79C	$6FF3	    			MOVWF	WriteChangesLog_tmpBuf_L0+18, 1
$C79E	$	L_WriteChangesLog_40:
;test18f97.c,183 :: 			tmpBuf[19] =  0;
$C79E	$0105	    			MOVLB	5
$C7A0	$6BF4	    			CLRF	WriteChangesLog_tmpBuf_L0+19, 1
;test18f97.c,185 :: 			log_write(PORT___,tmpBuf,0);                         // 20 байт
$C7A2	$0E04	    			MOVLW	4
$C7A4	$0106	    			MOVLB	6
$C7A6	$6FCD	    			MOVWF	FARG_log_write+0, 1
$C7A8	$0EE1	    			MOVLW	WriteChangesLog_tmpBuf_L0
$C7AA	$6FCE	    			MOVWF	FARG_log_write+1, 1
$C7AC	$0E05	    			MOVLW	@WriteChangesLog_tmpBuf_L0
$C7AE	$6FCF	    			MOVWF	FARG_log_write+2, 1
$C7B0	$6BD0	    			CLRF	FARG_log_write+3, 1
$C7B2	$ECC2	F03C			CALL	_log_write
;test18f97.c,186 :: 			}
$C7B6	$	L_WriteChangesLog_20:
;test18f97.c,187 :: 			}
$C7B6	$	L_WriteChangesLog_19:
;test18f97.c,188 :: 			prevCellState[cell][0] = cellState[cell][0];            // сохраним для следующего раза
$C7B6	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C7BA	$0E00	    			MOVLW	0
$C7BC	$6E01	    			MOVWF	STACK_0+1, 0
$C7BE	$0E05	    			MOVLW	5
$C7C0	$6E04	    			MOVWF	STACK_4, 0
$C7C2	$0E00	    			MOVLW	0
$C7C4	$6E05	    			MOVWF	STACK_4+1, 0
$C7C6	$ECB1	F001			CALL	_mul_16x16_u
$C7CA	$0EF7	    			MOVLW	_prevCellState
$C7CC	$2400	    			ADDWF	STACK_0, 0, 0
$C7CE	$6EE1	    			MOVWF	FSR1L, 0
$C7D0	$0E04	    			MOVLW	@_prevCellState
$C7D2	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C7D4	$6EE2	    			MOVWF	FSR1L+1, 0
$C7D6	$0E3E	    			MOVLW	_cellState
$C7D8	$2400	    			ADDWF	STACK_0, 0, 0
$C7DA	$6EE9	    			MOVWF	FSR0L, 0
$C7DC	$0E04	    			MOVLW	@_cellState
$C7DE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C7E0	$6EEA	    			MOVWF	FSR0L+1, 0
$C7E2	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$C7E6	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;test18f97.c,189 :: 			prevCellState[cell][1] = cellState[cell][1];
$C7EA	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C7EE	$0E00	    			MOVLW	0
$C7F0	$6E01	    			MOVWF	STACK_0+1, 0
$C7F2	$0E05	    			MOVLW	5
$C7F4	$6E04	    			MOVWF	STACK_4, 0
$C7F6	$0E00	    			MOVLW	0
$C7F8	$6E05	    			MOVWF	STACK_4+1, 0
$C7FA	$ECB1	F001			CALL	_mul_16x16_u
$C7FE	$0EF7	    			MOVLW	_prevCellState
$C800	$2400	    			ADDWF	STACK_0, 0, 0
$C802	$6E02	    			MOVWF	STACK_2, 0
$C804	$0E04	    			MOVLW	@_prevCellState
$C806	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C808	$6E03	    			MOVWF	STACK_2+1, 0
$C80A	$0E01	    			MOVLW	1
$C80C	$2402	    			ADDWF	STACK_2, 0, 0
$C80E	$6EE1	    			MOVWF	FSR1L, 0
$C810	$0E00	    			MOVLW	0
$C812	$2003	    			ADDWFC	STACK_2+1, 0, 0
$C814	$6EE2	    			MOVWF	FSR1L+1, 0
$C816	$0E3E	    			MOVLW	_cellState
$C818	$2600	    			ADDWF	STACK_0, 1, 0
$C81A	$0E04	    			MOVLW	@_cellState
$C81C	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C81E	$0E01	    			MOVLW	1
$C820	$2400	    			ADDWF	STACK_0, 0, 0
$C822	$6EE9	    			MOVWF	FSR0L, 0
$C824	$0E00	    			MOVLW	0
$C826	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C828	$6EEA	    			MOVWF	FSR0L+1, 0
$C82A	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$C82E	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;test18f97.c,190 :: 			prevCellState[cell][2] = cellState[cell][2];
$C832	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C836	$0E00	    			MOVLW	0
$C838	$6E01	    			MOVWF	STACK_0+1, 0
$C83A	$0E05	    			MOVLW	5
$C83C	$6E04	    			MOVWF	STACK_4, 0
$C83E	$0E00	    			MOVLW	0
$C840	$6E05	    			MOVWF	STACK_4+1, 0
$C842	$ECB1	F001			CALL	_mul_16x16_u
$C846	$0EF7	    			MOVLW	_prevCellState
$C848	$2400	    			ADDWF	STACK_0, 0, 0
$C84A	$6E02	    			MOVWF	STACK_2, 0
$C84C	$0E04	    			MOVLW	@_prevCellState
$C84E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C850	$6E03	    			MOVWF	STACK_2+1, 0
$C852	$0E02	    			MOVLW	2
$C854	$2402	    			ADDWF	STACK_2, 0, 0
$C856	$6EE1	    			MOVWF	FSR1L, 0
$C858	$0E00	    			MOVLW	0
$C85A	$2003	    			ADDWFC	STACK_2+1, 0, 0
$C85C	$6EE2	    			MOVWF	FSR1L+1, 0
$C85E	$0E3E	    			MOVLW	_cellState
$C860	$2600	    			ADDWF	STACK_0, 1, 0
$C862	$0E04	    			MOVLW	@_cellState
$C864	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C866	$0E02	    			MOVLW	2
$C868	$2400	    			ADDWF	STACK_0, 0, 0
$C86A	$6EE9	    			MOVWF	FSR0L, 0
$C86C	$0E00	    			MOVLW	0
$C86E	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C870	$6EEA	    			MOVWF	FSR0L+1, 0
$C872	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$C876	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;test18f97.c,191 :: 			prevCellState[cell][3] = cellState[cell][3];
$C87A	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C87E	$0E00	    			MOVLW	0
$C880	$6E01	    			MOVWF	STACK_0+1, 0
$C882	$0E05	    			MOVLW	5
$C884	$6E04	    			MOVWF	STACK_4, 0
$C886	$0E00	    			MOVLW	0
$C888	$6E05	    			MOVWF	STACK_4+1, 0
$C88A	$ECB1	F001			CALL	_mul_16x16_u
$C88E	$0EF7	    			MOVLW	_prevCellState
$C890	$2400	    			ADDWF	STACK_0, 0, 0
$C892	$6E02	    			MOVWF	STACK_2, 0
$C894	$0E04	    			MOVLW	@_prevCellState
$C896	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C898	$6E03	    			MOVWF	STACK_2+1, 0
$C89A	$0E03	    			MOVLW	3
$C89C	$2402	    			ADDWF	STACK_2, 0, 0
$C89E	$6EE1	    			MOVWF	FSR1L, 0
$C8A0	$0E00	    			MOVLW	0
$C8A2	$2003	    			ADDWFC	STACK_2+1, 0, 0
$C8A4	$6EE2	    			MOVWF	FSR1L+1, 0
$C8A6	$0E3E	    			MOVLW	_cellState
$C8A8	$2600	    			ADDWF	STACK_0, 1, 0
$C8AA	$0E04	    			MOVLW	@_cellState
$C8AC	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C8AE	$0E03	    			MOVLW	3
$C8B0	$2400	    			ADDWF	STACK_0, 0, 0
$C8B2	$6EE9	    			MOVWF	FSR0L, 0
$C8B4	$0E00	    			MOVLW	0
$C8B6	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C8B8	$6EEA	    			MOVWF	FSR0L+1, 0
$C8BA	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$C8BE	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;test18f97.c,192 :: 			prevCellState[cell][4] = cellState[cell][4];
$C8C2	$C5E0	F000			MOVFF	FARG_WriteChangesLog+0, STACK_0
$C8C6	$0E00	    			MOVLW	0
$C8C8	$6E01	    			MOVWF	STACK_0+1, 0
$C8CA	$0E05	    			MOVLW	5
$C8CC	$6E04	    			MOVWF	STACK_4, 0
$C8CE	$0E00	    			MOVLW	0
$C8D0	$6E05	    			MOVWF	STACK_4+1, 0
$C8D2	$ECB1	F001			CALL	_mul_16x16_u
$C8D6	$0EF7	    			MOVLW	_prevCellState
$C8D8	$2400	    			ADDWF	STACK_0, 0, 0
$C8DA	$6E02	    			MOVWF	STACK_2, 0
$C8DC	$0E04	    			MOVLW	@_prevCellState
$C8DE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C8E0	$6E03	    			MOVWF	STACK_2+1, 0
$C8E2	$0E04	    			MOVLW	4
$C8E4	$2402	    			ADDWF	STACK_2, 0, 0
$C8E6	$6EE1	    			MOVWF	FSR1L, 0
$C8E8	$0E00	    			MOVLW	0
$C8EA	$2003	    			ADDWFC	STACK_2+1, 0, 0
$C8EC	$6EE2	    			MOVWF	FSR1L+1, 0
$C8EE	$0E3E	    			MOVLW	_cellState
$C8F0	$2600	    			ADDWF	STACK_0, 1, 0
$C8F2	$0E04	    			MOVLW	@_cellState
$C8F4	$2201	    			ADDWFC	STACK_0+1, 1, 0
$C8F6	$0E04	    			MOVLW	4
$C8F8	$2400	    			ADDWF	STACK_0, 0, 0
$C8FA	$6EE9	    			MOVWF	FSR0L, 0
$C8FC	$0E00	    			MOVLW	0
$C8FE	$2001	    			ADDWFC	STACK_0+1, 0, 0
$C900	$6EEA	    			MOVWF	FSR0L+1, 0
$C902	$CFEE	F000			MOVFF	POSTINC0, STACK_0
$C906	$C000	FFE6			MOVFF	STACK_0, POSTINC1
;test18f97.c,193 :: 			}
$C90A	$0012	    			RETURN
$C90C	$	GlobalInitest18f97:
$C90C	$0E00	    			MOVLW	0
$C90E	$0103	    			MOVLB	3
$C910	$6F73	    			MOVWF	_fMasterKey+0, 1
;test18f97.c,8 :: 			unsigned char fMasterKey = 0;         // флаг = 1 когда повернут мастер ключ. Блокируем управление соленоидами по Ethernet
$C912	$0012	    			RETURN
$C914	$	GlobalIniethernet:
$C914	$0E00	    			MOVLW	0
$C916	$0104	    			MOVLB	4
$C918	$6FF1	    			MOVWF	_myMacAddr+0, 1
$C91A	$0E14	    			MOVLW	20
$C91C	$6FF2	    			MOVWF	_myMacAddr+1, 1
$C91E	$0EA5	    			MOVLW	165
$C920	$6FF3	    			MOVWF	_myMacAddr+2, 1
$C922	$0E01	    			MOVLW	1
$C924	$6FF4	    			MOVWF	_myMacAddr+3, 1
$C926	$0E01	    			MOVLW	1
$C928	$6FF5	    			MOVWF	_myMacAddr+4, 1
$C92A	$0E01	    			MOVLW	1
$C92C	$6FF6	    			MOVWF	_myMacAddr+5, 1
$C92E	$0EC0	    			MOVLW	192
$C930	$0102	    			MOVLB	2
$C932	$6F8F	    			MOVWF	_myIpAddr+0, 1
$C934	$0E01	    			MOVLW	1
$C936	$6F90	    			MOVWF	_myIpAddr+1, 1
$C938	$0E01	    			MOVLW	1
$C93A	$6F91	    			MOVWF	_myIpAddr+2, 1
$C93C	$0E01	    			MOVLW	1
$C93E	$6F92	    			MOVWF	_myIpAddr+3, 1
$C940	$0EC0	    			MOVLW	192
$C942	$0105	    			MOVLB	5
$C944	$6F7E	    			MOVWF	_gwIpAddr+0, 1
$C946	$0E01	    			MOVLW	1
$C948	$6F7F	    			MOVWF	_gwIpAddr+1, 1
$C94A	$0E02	    			MOVLW	2
$C94C	$6F80	    			MOVWF	_gwIpAddr+2, 1
$C94E	$0E01	    			MOVLW	1
$C950	$6F81	    			MOVWF	_gwIpAddr+3, 1
$C952	$0EFF	    			MOVLW	255
$C954	$6F82	    			MOVWF	_ipMask+0, 1
$C956	$0E00	    			MOVLW	0
$C958	$6F83	    			MOVWF	_ipMask+1, 1
$C95A	$0E00	    			MOVLW	0
$C95C	$6F84	    			MOVWF	_ipMask+2, 1
$C95E	$0E00	    			MOVLW	0
$C960	$6F85	    			MOVWF	_ipMask+3, 1
$C962	$0EC0	    			MOVLW	192
$C964	$6F86	    			MOVWF	_dnsIpAddr+0, 1
$C966	$0E01	    			MOVLW	1
$C968	$6F87	    			MOVWF	_dnsIpAddr+1, 1
$C96A	$0E02	    			MOVLW	2
$C96C	$6F88	    			MOVWF	_dnsIpAddr+2, 1
$C96E	$0E01	    			MOVLW	1
$C970	$6F89	    			MOVWF	_dnsIpAddr+3, 1
$C972	$0E47	    			MOVLW	71
$C974	$0104	    			MOVLB	4
$C976	$6F11	    			MOVWF	_httpMethod+0, 1
$C978	$0E45	    			MOVLW	69
$C97A	$6F12	    			MOVWF	_httpMethod+1, 1
$C97C	$0E54	    			MOVLW	84
$C97E	$6F13	    			MOVWF	_httpMethod+2, 1
$C980	$0E20	    			MOVLW	32
$C982	$6F14	    			MOVWF	_httpMethod+3, 1
$C984	$0E2F	    			MOVLW	47
$C986	$6F15	    			MOVWF	_httpMethod+4, 1
$C988	$6B16	    			CLRF	_httpMethod+5, 1
$C98A	$0E3F	    			MOVLW	63
$C98C	$6F29	    			MOVWF	_txt_command+0, 1
$C98E	$0E63	    			MOVLW	99
$C990	$6F2A	    			MOVWF	_txt_command+1, 1
$C992	$0E6F	    			MOVLW	111
$C994	$6F2B	    			MOVWF	_txt_command+2, 1
$C996	$0E6D	    			MOVLW	109
$C998	$6F2C	    			MOVWF	_txt_command+3, 1
$C99A	$0E6D	    			MOVLW	109
$C99C	$6F2D	    			MOVWF	_txt_command+4, 1
$C99E	$0E61	    			MOVLW	97
$C9A0	$6F2E	    			MOVWF	_txt_command+5, 1
$C9A2	$0E6E	    			MOVLW	110
$C9A4	$6F2F	    			MOVWF	_txt_command+6, 1
$C9A6	$0E64	    			MOVLW	100
$C9A8	$6F30	    			MOVWF	_txt_command+7, 1
$C9AA	$0E3D	    			MOVLW	61
$C9AC	$6F31	    			MOVWF	_txt_command+8, 1
$C9AE	$0E70	    			MOVLW	112
$C9B0	$6F32	    			MOVWF	_txt_command+9, 1
$C9B2	$0E6F	    			MOVLW	111
$C9B4	$6F33	    			MOVWF	_txt_command+10, 1
$C9B6	$0E72	    			MOVLW	114
$C9B8	$6F34	    			MOVWF	_txt_command+11, 1
$C9BA	$0E74	    			MOVLW	116
$C9BC	$6F35	    			MOVWF	_txt_command+12, 1
$C9BE	$6B36	    			CLRF	_txt_command+13, 1
$C9C0	$0E70	    			MOVLW	112
$C9C2	$0105	    			MOVLB	5
$C9C4	$6F8A	    			MOVWF	_txt_port+0, 1
$C9C6	$0E6F	    			MOVLW	111
$C9C8	$6F8B	    			MOVWF	_txt_port+1, 1
$C9CA	$0E72	    			MOVLW	114
$C9CC	$6F8C	    			MOVWF	_txt_port+2, 1
$C9CE	$0E74	    			MOVLW	116
$C9D0	$6F8D	    			MOVWF	_txt_port+3, 1
$C9D2	$6B8E	    			CLRF	_txt_port+4, 1
$C9D4	$0E6F	    			MOVLW	111
$C9D6	$0104	    			MOVLB	4
$C9D8	$6FB3	    			MOVWF	_txt_open+0, 1
$C9DA	$0E70	    			MOVLW	112
$C9DC	$6FB4	    			MOVWF	_txt_open+1, 1
$C9DE	$0E65	    			MOVLW	101
$C9E0	$6FB5	    			MOVWF	_txt_open+2, 1
$C9E2	$0E6E	    			MOVLW	110
$C9E4	$6FB6	    			MOVWF	_txt_open+3, 1
$C9E6	$6BB7	    			CLRF	_txt_open+4, 1
$C9E8	$0E63	    			MOVLW	99
$C9EA	$6FB8	    			MOVWF	_txt_close+0, 1
$C9EC	$0E6C	    			MOVLW	108
$C9EE	$6FB9	    			MOVWF	_txt_close+1, 1
$C9F0	$0E6F	    			MOVLW	111
$C9F2	$6FBA	    			MOVWF	_txt_close+2, 1
$C9F4	$0E73	    			MOVLW	115
$C9F6	$6FBB	    			MOVWF	_txt_close+3, 1
$C9F8	$0E65	    			MOVLW	101
$C9FA	$6FBC	    			MOVWF	_txt_close+4, 1
$C9FC	$6BBD	    			CLRF	_txt_close+5, 1
$C9FE	$0E73	    			MOVLW	115
$CA00	$6F22	    			MOVWF	_txt_status+0, 1
$CA02	$0E74	    			MOVLW	116
$CA04	$6F23	    			MOVWF	_txt_status+1, 1
$CA06	$0E61	    			MOVLW	97
$CA08	$6F24	    			MOVWF	_txt_status+2, 1
$CA0A	$0E74	    			MOVLW	116
$CA0C	$6F25	    			MOVWF	_txt_status+3, 1
$CA0E	$0E75	    			MOVLW	117
$CA10	$6F26	    			MOVWF	_txt_status+4, 1
$CA12	$0E73	    			MOVLW	115
$CA14	$6F27	    			MOVWF	_txt_status+5, 1
$CA16	$6B28	    			CLRF	_txt_status+6, 1
$CA18	$0E73	    			MOVLW	115
$CA1A	$0105	    			MOVLB	5
$CA1C	$6F8F	    			MOVWF	_txt_st22+0, 1
$CA1E	$0E74	    			MOVLW	116
$CA20	$6F90	    			MOVWF	_txt_st22+1, 1
$CA22	$0E32	    			MOVLW	50
$CA24	$6F91	    			MOVWF	_txt_st22+2, 1
$CA26	$0E32	    			MOVLW	50
$CA28	$6F92	    			MOVWF	_txt_st22+3, 1
$CA2A	$6B93	    			CLRF	_txt_st22+4, 1
$CA2C	$0E63	    			MOVLW	99
$CA2E	$6F94	    			MOVWF	_txt_clear+0, 1
$CA30	$0E6C	    			MOVLW	108
$CA32	$6F95	    			MOVWF	_txt_clear+1, 1
$CA34	$0E65	    			MOVLW	101
$CA36	$6F96	    			MOVWF	_txt_clear+2, 1
$CA38	$0E61	    			MOVLW	97
$CA3A	$6F97	    			MOVWF	_txt_clear+3, 1
$CA3C	$0E72	    			MOVLW	114
$CA3E	$6F98	    			MOVWF	_txt_clear+4, 1
$CA40	$6B99	    			CLRF	_txt_clear+5, 1
$CA42	$0E6C	    			MOVLW	108
$CA44	$6F9A	    			MOVWF	_txt_lim_vent+0, 1
$CA46	$0E69	    			MOVLW	105
$CA48	$6F9B	    			MOVWF	_txt_lim_vent+1, 1
$CA4A	$0E6D	    			MOVLW	109
$CA4C	$6F9C	    			MOVWF	_txt_lim_vent+2, 1
$CA4E	$0E5F	    			MOVLW	95
$CA50	$6F9D	    			MOVWF	_txt_lim_vent+3, 1
$CA52	$0E76	    			MOVLW	118
$CA54	$6F9E	    			MOVWF	_txt_lim_vent+4, 1
$CA56	$0E65	    			MOVLW	101
$CA58	$6F9F	    			MOVWF	_txt_lim_vent+5, 1
$CA5A	$0E6E	    			MOVLW	110
$CA5C	$6FA0	    			MOVWF	_txt_lim_vent+6, 1
$CA5E	$0E74	    			MOVLW	116
$CA60	$6FA1	    			MOVWF	_txt_lim_vent+7, 1
$CA62	$6BA2	    			CLRF	_txt_lim_vent+8, 1
$CA64	$0E61	    			MOVLW	97
$CA66	$6FA3	    			MOVWF	_txt_ass0+0, 1
$CA68	$0E73	    			MOVLW	115
$CA6A	$6FA4	    			MOVWF	_txt_ass0+1, 1
$CA6C	$0E73	    			MOVLW	115
$CA6E	$6FA5	    			MOVWF	_txt_ass0+2, 1
$CA70	$0E30	    			MOVLW	48
$CA72	$6FA6	    			MOVWF	_txt_ass0+3, 1
$CA74	$6BA7	    			CLRF	_txt_ass0+4, 1
$CA76	$0E61	    			MOVLW	97
$CA78	$6FA8	    			MOVWF	_txt_assA+0, 1
$CA7A	$0E73	    			MOVLW	115
$CA7C	$6FA9	    			MOVWF	_txt_assA+1, 1
$CA7E	$0E73	    			MOVLW	115
$CA80	$6FAA	    			MOVWF	_txt_assA+2, 1
$CA82	$0E41	    			MOVLW	65
$CA84	$6FAB	    			MOVWF	_txt_assA+3, 1
$CA86	$6BAC	    			CLRF	_txt_assA+4, 1
$CA88	$0E72	    			MOVLW	114
$CA8A	$6FAD	    			MOVWF	_txt_reset+0, 1
$CA8C	$0E65	    			MOVLW	101
$CA8E	$6FAE	    			MOVWF	_txt_reset+1, 1
$CA90	$0E73	    			MOVLW	115
$CA92	$6FAF	    			MOVWF	_txt_reset+2, 1
$CA94	$0E65	    			MOVLW	101
$CA96	$6FB0	    			MOVWF	_txt_reset+3, 1
$CA98	$0E74	    			MOVLW	116
$CA9A	$6FB1	    			MOVWF	_txt_reset+4, 1
$CA9C	$6BB2	    			CLRF	_txt_reset+5, 1
$CA9E	$0E61	    			MOVLW	97
$CAA0	$6FB3	    			MOVWF	_txt_append+0, 1
$CAA2	$0E70	    			MOVLW	112
$CAA4	$6FB4	    			MOVWF	_txt_append+1, 1
$CAA6	$0E70	    			MOVLW	112
$CAA8	$6FB5	    			MOVWF	_txt_append+2, 1
$CAAA	$0E65	    			MOVLW	101
$CAAC	$6FB6	    			MOVWF	_txt_append+3, 1
$CAAE	$0E6E	    			MOVLW	110
$CAB0	$6FB7	    			MOVWF	_txt_append+4, 1
$CAB2	$0E64	    			MOVLW	100
$CAB4	$6FB8	    			MOVWF	_txt_append+5, 1
$CAB6	$6BB9	    			CLRF	_txt_append+6, 1
$CAB8	$0E72	    			MOVLW	114
$CABA	$6FBA	    			MOVWF	_txt_rewrite+0, 1
$CABC	$0E65	    			MOVLW	101
$CABE	$6FBB	    			MOVWF	_txt_rewrite+1, 1
$CAC0	$0E77	    			MOVLW	119
$CAC2	$6FBC	    			MOVWF	_txt_rewrite+2, 1
$CAC4	$0E72	    			MOVLW	114
$CAC6	$6FBD	    			MOVWF	_txt_rewrite+3, 1
$CAC8	$0E69	    			MOVLW	105
$CACA	$6FBE	    			MOVWF	_txt_rewrite+4, 1
$CACC	$0E74	    			MOVLW	116
$CACE	$6FBF	    			MOVWF	_txt_rewrite+5, 1
$CAD0	$0E65	    			MOVLW	101
$CAD2	$6FC0	    			MOVWF	_txt_rewrite+6, 1
$CAD4	$6BC1	    			CLRF	_txt_rewrite+7, 1
$CAD6	$0E72	    			MOVLW	114
$CAD8	$0104	    			MOVLB	4
$CADA	$6F1D	    			MOVWF	_txt_read+0, 1
$CADC	$0E65	    			MOVLW	101
$CADE	$6F1E	    			MOVWF	_txt_read+1, 1
$CAE0	$0E61	    			MOVLW	97
$CAE2	$6F1F	    			MOVWF	_txt_read+2, 1
$CAE4	$0E64	    			MOVLW	100
$CAE6	$6F20	    			MOVWF	_txt_read+3, 1
$CAE8	$6B21	    			CLRF	_txt_read+4, 1
$CAEA	$0E30	    			MOVLW	48
$CAEC	$6F17	    			MOVWF	_txt_0read+0, 1
$CAEE	$0E72	    			MOVLW	114
$CAF0	$6F18	    			MOVWF	_txt_0read+1, 1
$CAF2	$0E65	    			MOVLW	101
$CAF4	$6F19	    			MOVWF	_txt_0read+2, 1
$CAF6	$0E61	    			MOVLW	97
$CAF8	$6F1A	    			MOVWF	_txt_0read+3, 1
$CAFA	$0E64	    			MOVLW	100
$CAFC	$6F1B	    			MOVWF	_txt_0read+4, 1
$CAFE	$6B1C	    			CLRF	_txt_0read+5, 1
$CB00	$0E63	    			MOVLW	99
$CB02	$6FAE	    			MOVWF	_txt_cf_d+0, 1
$CB04	$0E66	    			MOVLW	102
$CB06	$6FAF	    			MOVWF	_txt_cf_d+1, 1
$CB08	$0E5F	    			MOVLW	95
$CB0A	$6FB0	    			MOVWF	_txt_cf_d+2, 1
$CB0C	$0E64	    			MOVLW	100
$CB0E	$6FB1	    			MOVWF	_txt_cf_d+3, 1
$CB10	$6BB2	    			CLRF	_txt_cf_d+4, 1
$CB12	$0E72	    			MOVLW	114
$CB14	$6F89	    			MOVWF	_txt_rtcr+0, 1
$CB16	$0E74	    			MOVLW	116
$CB18	$6F8A	    			MOVWF	_txt_rtcr+1, 1
$CB1A	$0E63	    			MOVLW	99
$CB1C	$6F8B	    			MOVWF	_txt_rtcr+2, 1
$CB1E	$0E72	    			MOVLW	114
$CB20	$6F8C	    			MOVWF	_txt_rtcr+3, 1
$CB22	$6B8D	    			CLRF	_txt_rtcr+4, 1
$CB24	$0E72	    			MOVLW	114
$CB26	$6F8E	    			MOVWF	_txt_rtds+0, 1
$CB28	$0E74	    			MOVLW	116
$CB2A	$6F8F	    			MOVWF	_txt_rtds+1, 1
$CB2C	$0E64	    			MOVLW	100
$CB2E	$6F90	    			MOVWF	_txt_rtds+2, 1
$CB30	$0E73	    			MOVLW	115
$CB32	$6F91	    			MOVWF	_txt_rtds+3, 1
$CB34	$6B92	    			CLRF	_txt_rtds+4, 1
$CB36	$0E72	    			MOVLW	114
$CB38	$6F93	    			MOVWF	_txt_rtss+0, 1
$CB3A	$0E74	    			MOVLW	116
$CB3C	$6F94	    			MOVWF	_txt_rtss+1, 1
$CB3E	$0E73	    			MOVLW	115
$CB40	$6F95	    			MOVWF	_txt_rtss+2, 1
$CB42	$0E73	    			MOVLW	115
$CB44	$6F96	    			MOVWF	_txt_rtss+3, 1
$CB46	$6B97	    			CLRF	_txt_rtss+4, 1
$CB48	$0E69	    			MOVLW	105
$CB4A	$6F39	    			MOVWF	_txt_iset+0, 1
$CB4C	$0E73	    			MOVLW	115
$CB4E	$6F3A	    			MOVWF	_txt_iset+1, 1
$CB50	$0E65	    			MOVLW	101
$CB52	$6F3B	    			MOVWF	_txt_iset+2, 1
$CB54	$0E74	    			MOVLW	116
$CB56	$6F3C	    			MOVWF	_txt_iset+3, 1
$CB58	$6B3D	    			CLRF	_txt_iset+4, 1
$CB5A	$0E26	    			MOVLW	38
$CB5C	$0105	    			MOVLB	5
$CB5E	$6FC2	    			MOVWF	_txt_ip__+0, 1
$CB60	$0E69	    			MOVLW	105
$CB62	$6FC3	    			MOVWF	_txt_ip__+1, 1
$CB64	$0E70	    			MOVLW	112
$CB66	$6FC4	    			MOVWF	_txt_ip__+2, 1
$CB68	$0E3D	    			MOVLW	61
$CB6A	$6FC5	    			MOVWF	_txt_ip__+3, 1
$CB6C	$6BC6	    			CLRF	_txt_ip__+4, 1
$CB6E	$0E74	    			MOVLW	116
$CB70	$0104	    			MOVLB	4
$CB72	$6F98	    			MOVWF	_txt_term+0, 1
$CB74	$0E65	    			MOVLW	101
$CB76	$6F99	    			MOVWF	_txt_term+1, 1
$CB78	$0E72	    			MOVLW	114
$CB7A	$6F9A	    			MOVWF	_txt_term+2, 1
$CB7C	$0E6D	    			MOVLW	109
$CB7E	$6F9B	    			MOVWF	_txt_term+3, 1
$CB80	$6B9C	    			CLRF	_txt_term+4, 1
$CB82	$0E00	    			MOVLW	0
$CB84	$0105	    			MOVLB	5
$CB86	$6FC7	    			MOVWF	_httpCounter+0, 1
$CB88	$0E00	    			MOVLW	0
$CB8A	$6FC8	    			MOVWF	_httpCounter+1, 1
$CB8C	$0E00	    			MOVLW	0
$CB8E	$6FC9	    			MOVWF	_httpCounter+2, 1
$CB90	$0E00	    			MOVLW	0
$CB92	$6FCA	    			MOVWF	_httpCounter+3, 1
$CB94	$0E4C	    			MOVLW	76
$CB96	$0104	    			MOVLB	4
$CB98	$6FA1	    			MOVWF	_LOG_TXT+0, 1
$CB9A	$0E4F	    			MOVLW	79
$CB9C	$6FA2	    			MOVWF	_LOG_TXT+1, 1
$CB9E	$0E47	    			MOVLW	71
$CBA0	$6FA3	    			MOVWF	_LOG_TXT+2, 1
$CBA2	$0E5F	    			MOVLW	95
$CBA4	$6FA4	    			MOVWF	_LOG_TXT+3, 1
$CBA6	$0E5F	    			MOVLW	95
$CBA8	$6FA5	    			MOVWF	_LOG_TXT+4, 1
$CBAA	$0E30	    			MOVLW	48
$CBAC	$6FA6	    			MOVWF	_LOG_TXT+5, 1
$CBAE	$0E30	    			MOVLW	48
$CBB0	$6FA7	    			MOVWF	_LOG_TXT+6, 1
$CBB2	$0E31	    			MOVLW	49
$CBB4	$6FA8	    			MOVWF	_LOG_TXT+7, 1
$CBB6	$0E2E	    			MOVLW	46
$CBB8	$6FA9	    			MOVWF	_LOG_TXT+8, 1
$CBBA	$0E54	    			MOVLW	84
$CBBC	$6FAA	    			MOVWF	_LOG_TXT+9, 1
$CBBE	$0E58	    			MOVLW	88
$CBC0	$6FAB	    			MOVWF	_LOG_TXT+10, 1
$CBC2	$0E54	    			MOVLW	84
$CBC4	$6FAC	    			MOVWF	_LOG_TXT+11, 1
$CBC6	$6BAD	    			CLRF	_LOG_TXT+12, 1
$CBC8	$0012	    			RETURN
$CBCA	$	GlobalInilog:
$CBCA	$0E20	    			MOVLW	32
$CBCC	$0102	    			MOVLB	2
$CBCE	$6FBB	    			MOVWF	_date_string+0, 1
$CBD0	$0E30	    			MOVLW	48
$CBD2	$6FBC	    			MOVWF	_date_string+1, 1
$CBD4	$0E30	    			MOVLW	48
$CBD6	$6FBD	    			MOVWF	_date_string+2, 1
$CBD8	$0E2F	    			MOVLW	47
$CBDA	$6FBE	    			MOVWF	_date_string+3, 1
$CBDC	$0E30	    			MOVLW	48
$CBDE	$6FBF	    			MOVWF	_date_string+4, 1
$CBE0	$0E30	    			MOVLW	48
$CBE2	$6FC0	    			MOVWF	_date_string+5, 1
$CBE4	$0E2F	    			MOVLW	47
$CBE6	$6FC1	    			MOVWF	_date_string+6, 1
$CBE8	$0E30	    			MOVLW	48
$CBEA	$6FC2	    			MOVWF	_date_string+7, 1
$CBEC	$0E30	    			MOVLW	48
$CBEE	$6FC3	    			MOVWF	_date_string+8, 1
$CBF0	$6BC4	    			CLRF	_date_string+9, 1
$CBF2	$0E20	    			MOVLW	32
$CBF4	$6FC5	    			MOVWF	_time_string+0, 1
$CBF6	$0E30	    			MOVLW	48
$CBF8	$6FC6	    			MOVWF	_time_string+1, 1
$CBFA	$0E30	    			MOVLW	48
$CBFC	$6FC7	    			MOVWF	_time_string+2, 1
$CBFE	$0E3A	    			MOVLW	58
$CC00	$6FC8	    			MOVWF	_time_string+3, 1
$CC02	$0E30	    			MOVLW	48
$CC04	$6FC9	    			MOVWF	_time_string+4, 1
$CC06	$0E30	    			MOVLW	48
$CC08	$6FCA	    			MOVWF	_time_string+5, 1
$CC0A	$0E3A	    			MOVLW	58
$CC0C	$6FCB	    			MOVWF	_time_string+6, 1
$CC0E	$0E30	    			MOVLW	48
$CC10	$6FCC	    			MOVWF	_time_string+7, 1
$CC12	$0E30	    			MOVLW	48
$CC14	$6FCD	    			MOVWF	_time_string+8, 1
$CC16	$6BCE	    			CLRF	_time_string+9, 1
$CC18	$0E30	    			MOVLW	48
$CC1A	$6F7E	    			MOVWF	_ip_string+0, 1
$CC1C	$0E30	    			MOVLW	48
$CC1E	$6F7F	    			MOVWF	_ip_string+1, 1
$CC20	$0E30	    			MOVLW	48
$CC22	$6F80	    			MOVWF	_ip_string+2, 1
$CC24	$0E2E	    			MOVLW	46
$CC26	$6F81	    			MOVWF	_ip_string+3, 1
$CC28	$0E30	    			MOVLW	48
$CC2A	$6F82	    			MOVWF	_ip_string+4, 1
$CC2C	$0E30	    			MOVLW	48
$CC2E	$6F83	    			MOVWF	_ip_string+5, 1
$CC30	$0E30	    			MOVLW	48
$CC32	$6F84	    			MOVWF	_ip_string+6, 1
$CC34	$0E2E	    			MOVLW	46
$CC36	$6F85	    			MOVWF	_ip_string+7, 1
$CC38	$0E30	    			MOVLW	48
$CC3A	$6F86	    			MOVWF	_ip_string+8, 1
$CC3C	$0E30	    			MOVLW	48
$CC3E	$6F87	    			MOVWF	_ip_string+9, 1
$CC40	$0E30	    			MOVLW	48
$CC42	$6F88	    			MOVWF	_ip_string+10, 1
$CC44	$0E2E	    			MOVLW	46
$CC46	$6F89	    			MOVWF	_ip_string+11, 1
$CC48	$0E30	    			MOVLW	48
$CC4A	$6F8A	    			MOVWF	_ip_string+12, 1
$CC4C	$0E30	    			MOVLW	48
$CC4E	$6F8B	    			MOVWF	_ip_string+13, 1
$CC50	$0E30	    			MOVLW	48
$CC52	$6F8C	    			MOVWF	_ip_string+14, 1
$CC54	$0E2E	    			MOVLW	46
$CC56	$6F8D	    			MOVWF	_ip_string+15, 1
$CC58	$6B8E	    			CLRF	_ip_string+16, 1
;log.c,10 :: 			char ip_string[17] = "000.000.000.000.";
$CC5A	$0012	    			RETURN
$CC5C	$	GlobalIniUSART:
$CC5C	$0E00	    			MOVLW	0
$CC5E	$6E15	    			MOVWF	_rxCounter+0, 0
$CC60	$0E00	    			MOVLW	0
$CC62	$6E20	    			MOVWF	_rxReadyFlag+0, 0
$CC64	$0E00	    			MOVLW	0
$CC66	$6E21	    			MOVWF	_timer1Flag+0, 0
;USART.c,9 :: 			volatile unsigned char timer1Flag = 0;      // флаг того что время вышло
$CC68	$0012	    			RETURN
$CC6A	$	GlobalInieth_j60:
$CC6A	$0EFF	    			MOVLW	255
$CC6C	$0103	    			MOVLB	3
$CC6E	$6F51	    			MOVWF	_Ethernet_ff+0, 1
$CC70	$0EFF	    			MOVLW	255
$CC72	$6F52	    			MOVWF	_Ethernet_ff+1, 1
$CC74	$0EFF	    			MOVLW	255
$CC76	$6F53	    			MOVWF	_Ethernet_ff+2, 1
$CC78	$0EFF	    			MOVLW	255
$CC7A	$6F54	    			MOVWF	_Ethernet_ff+3, 1
$CC7C	$0EFF	    			MOVLW	255
$CC7E	$6F55	    			MOVWF	_Ethernet_ff+4, 1
$CC80	$0EFF	    			MOVLW	255
$CC82	$6F56	    			MOVWF	_Ethernet_ff+5, 1
$CC84	$0E00	    			MOVLW	0
$CC86	$6F8C	    			MOVWF	_Ethernet_userTimerSec+0, 1
$CC88	$0E00	    			MOVLW	0
$CC8A	$6F8D	    			MOVWF	_Ethernet_userTimerSec+1, 1
$CC8C	$0E00	    			MOVLW	0
$CC8E	$6F8E	    			MOVWF	_Ethernet_userTimerSec+2, 1
$CC90	$0E00	    			MOVLW	0
$CC92	$6F8F	    			MOVWF	_Ethernet_userTimerSec+3, 1
$CC94	$0E00	    			MOVLW	0
$CC96	$0104	    			MOVLB	4
$CC98	$6FF0	    			MOVWF	_Ethernet_closeTCP+0, 1
$CC9A	$0E00	    			MOVLW	0
$CC9C	$6FED	    			MOVWF	eth_j60_freeSlot+0, 1
$CC9E	$0E00	    			MOVLW	0
$CCA0	$0103	    			MOVLB	3
$CCA2	$6F87	    			MOVWF	eth_j60_smDHCPState+0, 1
$CCA4	$0E00	    			MOVLW	0
$CCA6	$6F90	    			MOVWF	eth_j60_DHCPrenew+0, 1
$CCA8	$0E00	    			MOVLW	0
$CCAA	$0105	    			MOVLB	5
$CCAC	$6FCB	    			MOVWF	Ethernet_readPacket_nextPtr_L0+0, 1
$CCAE	$0E00	    			MOVLW	0
$CCB0	$6FCC	    			MOVWF	Ethernet_readPacket_nextPtr_L0+1, 1
$CCB2	$0012	    			RETURN
$CCB4	$	_main:
$CCB4	$EC35	F066			CALL	GlobalInieth_j60
$CCB8	$EC2E	F066			CALL	GlobalIniUSART
$CCBC	$ECE5	F065			CALL	GlobalInilog
$CCC0	$EC8A	F064			CALL	GlobalIniethernet
$CCC4	$EC86	F064			CALL	GlobalInitest18f97
$CCC8	$0105	    			MOVLB	5
$CCCA	$6BD4	    			CLRF	lstr1_test18f97+0, 1
;test18f97.c,197 :: 			void    main()
;test18f97.c,200 :: 			unsigned char tmp=0, cnt=0, cnt2=0, cnt3=0, cnt5=0, cnt6=0, cnt7=0;
$CCCC	$6BD9	    			CLRF	main_tmp_L0, 1
$CCCE	$6BDA	    			CLRF	main_cnt_L0, 1
$CCD0	$6BDB	    			CLRF	main_cnt2_L0, 1
$CCD2	$6BDC	    			CLRF	main_cnt3_L0, 1
$CCD4	$6BDD	    			CLRF	main_cnt5_L0, 1
$CCD6	$6BDE	    			CLRF	main_cnt6_L0, 1
$CCD8	$6BDF	    			CLRF	main_cnt7_L0, 1
;test18f97.c,203 :: 			InitPort();
$CCDA	$ECF0	F05C			CALL	_InitPort
;test18f97.c,204 :: 			InitBoard();
$CCDE	$EC14	F05D			CALL	_InitBoard
;test18f97.c,205 :: 			MyInitUsart1_115200();
$CCE2	$EC4C	F05E			CALL	_MyInitUsart1_115200
;test18f97.c,206 :: 			Termo_measure();
$CCE6	$ECBC	F043			CALL	_Termo_measure
;test18f97.c,208 :: 			Led_R=0;  // включить красный сд
$CCEA	$9082	    			BCF	PORTC, 0, 0
;test18f97.c,209 :: 			asm CLRWDT;        // сброс сторожевого таймера
$CCEC	$0004	    			CLRWDT
;test18f97.c,211 :: 			Led_Y=0; delay_ms(100);
$CCEE	$9282	    			BCF	PORTC, 1, 0
$CCF0	$0E04	    			MOVLW	4
$CCF2	$6E0C	    			MOVWF	STACK_12, 0
$CCF4	$0EFF	    			MOVLW	255
$CCF6	$6E0B	    			MOVWF	STACK_11, 0
$CCF8	$0EFF	    			MOVLW	255
$CCFA	$6E0A	    			MOVWF	STACK_10, 0
$CCFC	$2E0C	    			DECFSZ	STACK_12, F, 0
$CCFE	$D001	    			BRA	$+2
$CD00	$D007	    			BRA	$+8
$CD02	$2E0B	    			DECFSZ	STACK_11, F, 0
$CD04	$D001	    			BRA	$+2
$CD06	$D003	    			BRA	$+4
$CD08	$2E0A	    			DECFSZ	STACK_10, F, 0
$CD0A	$D7FE	    			BRA	$-1
$CD0C	$D7FA	    			BRA	$-5
$CD0E	$D7F6	    			BRA	$-9
$CD10	$0E30	    			MOVLW	48
$CD12	$6E0B	    			MOVWF	STACK_11, 0
$CD14	$0EFF	    			MOVLW	255
$CD16	$6E0A	    			MOVWF	STACK_10, 0
$CD18	$2E0B	    			DECFSZ	STACK_11, F, 0
$CD1A	$D001	    			BRA	$+2
$CD1C	$D003	    			BRA	$+4
$CD1E	$2E0A	    			DECFSZ	STACK_10, F, 0
$CD20	$D7FE	    			BRA	$-1
$CD22	$D7FA	    			BRA	$-5
$CD24	$0E88	    			MOVLW	136
$CD26	$6E0A	    			MOVWF	STACK_10, 0
$CD28	$2E0A	    			DECFSZ	STACK_10, F, 0
$CD2A	$D7FE	    			BRA	$-1
$CD2C	$0000	    			NOP
$CD2E	$0000	    			NOP
;test18f97.c,212 :: 			Led_Y=1; delay_ms(100);
$CD30	$8282	    			BSF	PORTC, 1, 0
$CD32	$0E04	    			MOVLW	4
$CD34	$6E0C	    			MOVWF	STACK_12, 0
$CD36	$0EFF	    			MOVLW	255
$CD38	$6E0B	    			MOVWF	STACK_11, 0
$CD3A	$0EFF	    			MOVLW	255
$CD3C	$6E0A	    			MOVWF	STACK_10, 0
$CD3E	$2E0C	    			DECFSZ	STACK_12, F, 0
$CD40	$D001	    			BRA	$+2
$CD42	$D007	    			BRA	$+8
$CD44	$2E0B	    			DECFSZ	STACK_11, F, 0
$CD46	$D001	    			BRA	$+2
$CD48	$D003	    			BRA	$+4
$CD4A	$2E0A	    			DECFSZ	STACK_10, F, 0
$CD4C	$D7FE	    			BRA	$-1
$CD4E	$D7FA	    			BRA	$-5
$CD50	$D7F6	    			BRA	$-9
$CD52	$0E30	    			MOVLW	48
$CD54	$6E0B	    			MOVWF	STACK_11, 0
$CD56	$0EFF	    			MOVLW	255
$CD58	$6E0A	    			MOVWF	STACK_10, 0
$CD5A	$2E0B	    			DECFSZ	STACK_11, F, 0
$CD5C	$D001	    			BRA	$+2
$CD5E	$D003	    			BRA	$+4
$CD60	$2E0A	    			DECFSZ	STACK_10, F, 0
$CD62	$D7FE	    			BRA	$-1
$CD64	$D7FA	    			BRA	$-5
$CD66	$0E88	    			MOVLW	136
$CD68	$6E0A	    			MOVWF	STACK_10, 0
$CD6A	$2E0A	    			DECFSZ	STACK_10, F, 0
$CD6C	$D7FE	    			BRA	$-1
$CD6E	$0000	    			NOP
$CD70	$0000	    			NOP
;test18f97.c,213 :: 			Led_Y=0; delay_ms(100);
$CD72	$9282	    			BCF	PORTC, 1, 0
$CD74	$0E04	    			MOVLW	4
$CD76	$6E0C	    			MOVWF	STACK_12, 0
$CD78	$0EFF	    			MOVLW	255
$CD7A	$6E0B	    			MOVWF	STACK_11, 0
$CD7C	$0EFF	    			MOVLW	255
$CD7E	$6E0A	    			MOVWF	STACK_10, 0
$CD80	$2E0C	    			DECFSZ	STACK_12, F, 0
$CD82	$D001	    			BRA	$+2
$CD84	$D007	    			BRA	$+8
$CD86	$2E0B	    			DECFSZ	STACK_11, F, 0
$CD88	$D001	    			BRA	$+2
$CD8A	$D003	    			BRA	$+4
$CD8C	$2E0A	    			DECFSZ	STACK_10, F, 0
$CD8E	$D7FE	    			BRA	$-1
$CD90	$D7FA	    			BRA	$-5
$CD92	$D7F6	    			BRA	$-9
$CD94	$0E30	    			MOVLW	48
$CD96	$6E0B	    			MOVWF	STACK_11, 0
$CD98	$0EFF	    			MOVLW	255
$CD9A	$6E0A	    			MOVWF	STACK_10, 0
$CD9C	$2E0B	    			DECFSZ	STACK_11, F, 0
$CD9E	$D001	    			BRA	$+2
$CDA0	$D003	    			BRA	$+4
$CDA2	$2E0A	    			DECFSZ	STACK_10, F, 0
$CDA4	$D7FE	    			BRA	$-1
$CDA6	$D7FA	    			BRA	$-5
$CDA8	$0E88	    			MOVLW	136
$CDAA	$6E0A	    			MOVWF	STACK_10, 0
$CDAC	$2E0A	    			DECFSZ	STACK_10, F, 0
$CDAE	$D7FE	    			BRA	$-1
$CDB0	$0000	    			NOP
$CDB2	$0000	    			NOP
;test18f97.c,214 :: 			Led_Y=1; delay_ms(100);
$CDB4	$8282	    			BSF	PORTC, 1, 0
$CDB6	$0E04	    			MOVLW	4
$CDB8	$6E0C	    			MOVWF	STACK_12, 0
$CDBA	$0EFF	    			MOVLW	255
$CDBC	$6E0B	    			MOVWF	STACK_11, 0
$CDBE	$0EFF	    			MOVLW	255
$CDC0	$6E0A	    			MOVWF	STACK_10, 0
$CDC2	$2E0C	    			DECFSZ	STACK_12, F, 0
$CDC4	$D001	    			BRA	$+2
$CDC6	$D007	    			BRA	$+8
$CDC8	$2E0B	    			DECFSZ	STACK_11, F, 0
$CDCA	$D001	    			BRA	$+2
$CDCC	$D003	    			BRA	$+4
$CDCE	$2E0A	    			DECFSZ	STACK_10, F, 0
$CDD0	$D7FE	    			BRA	$-1
$CDD2	$D7FA	    			BRA	$-5
$CDD4	$D7F6	    			BRA	$-9
$CDD6	$0E30	    			MOVLW	48
$CDD8	$6E0B	    			MOVWF	STACK_11, 0
$CDDA	$0EFF	    			MOVLW	255
$CDDC	$6E0A	    			MOVWF	STACK_10, 0
$CDDE	$2E0B	    			DECFSZ	STACK_11, F, 0
$CDE0	$D001	    			BRA	$+2
$CDE2	$D003	    			BRA	$+4
$CDE4	$2E0A	    			DECFSZ	STACK_10, F, 0
$CDE6	$D7FE	    			BRA	$-1
$CDE8	$D7FA	    			BRA	$-5
$CDEA	$0E88	    			MOVLW	136
$CDEC	$6E0A	    			MOVWF	STACK_10, 0
$CDEE	$2E0A	    			DECFSZ	STACK_10, F, 0
$CDF0	$D7FE	    			BRA	$-1
$CDF2	$0000	    			NOP
$CDF4	$0000	    			NOP
;test18f97.c,215 :: 			Led_Y=0; delay_ms(100);
$CDF6	$9282	    			BCF	PORTC, 1, 0
$CDF8	$0E04	    			MOVLW	4
$CDFA	$6E0C	    			MOVWF	STACK_12, 0
$CDFC	$0EFF	    			MOVLW	255
$CDFE	$6E0B	    			MOVWF	STACK_11, 0
$CE00	$0EFF	    			MOVLW	255
$CE02	$6E0A	    			MOVWF	STACK_10, 0
$CE04	$2E0C	    			DECFSZ	STACK_12, F, 0
$CE06	$D001	    			BRA	$+2
$CE08	$D007	    			BRA	$+8
$CE0A	$2E0B	    			DECFSZ	STACK_11, F, 0
$CE0C	$D001	    			BRA	$+2
$CE0E	$D003	    			BRA	$+4
$CE10	$2E0A	    			DECFSZ	STACK_10, F, 0
$CE12	$D7FE	    			BRA	$-1
$CE14	$D7FA	    			BRA	$-5
$CE16	$D7F6	    			BRA	$-9
$CE18	$0E30	    			MOVLW	48
$CE1A	$6E0B	    			MOVWF	STACK_11, 0
$CE1C	$0EFF	    			MOVLW	255
$CE1E	$6E0A	    			MOVWF	STACK_10, 0
$CE20	$2E0B	    			DECFSZ	STACK_11, F, 0
$CE22	$D001	    			BRA	$+2
$CE24	$D003	    			BRA	$+4
$CE26	$2E0A	    			DECFSZ	STACK_10, F, 0
$CE28	$D7FE	    			BRA	$-1
$CE2A	$D7FA	    			BRA	$-5
$CE2C	$0E88	    			MOVLW	136
$CE2E	$6E0A	    			MOVWF	STACK_10, 0
$CE30	$2E0A	    			DECFSZ	STACK_10, F, 0
$CE32	$D7FE	    			BRA	$-1
$CE34	$0000	    			NOP
$CE36	$0000	    			NOP
;test18f97.c,216 :: 			Led_Y=1; delay_ms(100);
$CE38	$8282	    			BSF	PORTC, 1, 0
$CE3A	$0E04	    			MOVLW	4
$CE3C	$6E0C	    			MOVWF	STACK_12, 0
$CE3E	$0EFF	    			MOVLW	255
$CE40	$6E0B	    			MOVWF	STACK_11, 0
$CE42	$0EFF	    			MOVLW	255
$CE44	$6E0A	    			MOVWF	STACK_10, 0
$CE46	$2E0C	    			DECFSZ	STACK_12, F, 0
$CE48	$D001	    			BRA	$+2
$CE4A	$D007	    			BRA	$+8
$CE4C	$2E0B	    			DECFSZ	STACK_11, F, 0
$CE4E	$D001	    			BRA	$+2
$CE50	$D003	    			BRA	$+4
$CE52	$2E0A	    			DECFSZ	STACK_10, F, 0
$CE54	$D7FE	    			BRA	$-1
$CE56	$D7FA	    			BRA	$-5
$CE58	$D7F6	    			BRA	$-9
$CE5A	$0E30	    			MOVLW	48
$CE5C	$6E0B	    			MOVWF	STACK_11, 0
$CE5E	$0EFF	    			MOVLW	255
$CE60	$6E0A	    			MOVWF	STACK_10, 0
$CE62	$2E0B	    			DECFSZ	STACK_11, F, 0
$CE64	$D001	    			BRA	$+2
$CE66	$D003	    			BRA	$+4
$CE68	$2E0A	    			DECFSZ	STACK_10, F, 0
$CE6A	$D7FE	    			BRA	$-1
$CE6C	$D7FA	    			BRA	$-5
$CE6E	$0E88	    			MOVLW	136
$CE70	$6E0A	    			MOVWF	STACK_10, 0
$CE72	$2E0A	    			DECFSZ	STACK_10, F, 0
$CE74	$D7FE	    			BRA	$-1
$CE76	$0000	    			NOP
$CE78	$0000	    			NOP
;test18f97.c,218 :: 			cf_r_ptr = 0;
$CE7A	$0104	    			MOVLB	4
$CE7C	$6B9D	    			CLRF	_cf_r_ptr, 1
$CE7E	$6B9E	    			CLRF	_cf_r_ptr+1, 1
$CE80	$6B9F	    			CLRF	_cf_r_ptr+2, 1
$CE82	$6BA0	    			CLRF	_cf_r_ptr+3, 1
;test18f97.c,219 :: 			file_number = 0;   // номер лог - файла на CF
$CE84	$0102	    			MOVLB	2
$CE86	$6B7B	    			CLRF	_file_number, 1
$CE88	$6B7C	    			CLRF	_file_number+1, 1
;test18f97.c,220 :: 			flag_read_fat = 0;  // FAT в состоянии read =1, иначе 0
$CE8A	$6B7D	    			CLRF	_flag_read_fat, 1
;test18f97.c,222 :: 			ip_get();                            // чтение IP из EEPROM  при включении питания или после перезапуска
$CE8C	$EC5D	F05E			CALL	_ip_get
;test18f97.c,223 :: 			log_write ( POWER, "", tmp );   // записать в журнал - включение
$CE90	$0E01	    			MOVLW	1
$CE92	$0106	    			MOVLB	6
$CE94	$6FCD	    			MOVWF	FARG_log_write+0, 1
$CE96	$0ED4	    			MOVLW	lstr1_test18f97
$CE98	$6FCE	    			MOVWF	FARG_log_write+1, 1
$CE9A	$0E05	    			MOVLW	@lstr1_test18f97
$CE9C	$6FCF	    			MOVWF	FARG_log_write+2, 1
$CE9E	$C5D9	F6D0			MOVFF	main_tmp_L0, FARG_log_write+3
$CEA2	$ECC2	F03C			CALL	_log_write
;test18f97.c,224 :: 			asm CLRWDT;
$CEA6	$0004	    			CLRWDT
;test18f97.c,225 :: 			if ( PORTJ.F1 == 0 ) {   // =0 - ON, =1 - OFF
$CEA8	$6A02	    			CLRF	STACK_2, 0
$CEAA	$B288	    			BTFSC	PORTJ, 1, 0
$CEAC	$2A02	    			INCF	STACK_2, 1, 0
$CEAE	$5002	    			MOVF	STACK_2, 0, 0
$CEB0	$0A00	    			XORLW	0
$CEB2	$E129	    			BNZ	L_main_41
;test18f97.c,226 :: 			myIpAddr[0]  = 192;
$CEB4	$0EC0	    			MOVLW	192
$CEB6	$0102	    			MOVLB	2
$CEB8	$6F8F	    			MOVWF	_myIpAddr, 1
;test18f97.c,227 :: 			myIpAddr[1]  = 168;
$CEBA	$0EA8	    			MOVLW	168
$CEBC	$6F90	    			MOVWF	_myIpAddr+1, 1
;test18f97.c,228 :: 			myIpAddr[2]  = 1;
$CEBE	$0E01	    			MOVLW	1
$CEC0	$6F91	    			MOVWF	_myIpAddr+2, 1
;test18f97.c,229 :: 			myIpAddr[3]  = 60;
$CEC2	$0E3C	    			MOVLW	60
$CEC4	$6F92	    			MOVWF	_myIpAddr+3, 1
;test18f97.c,230 :: 			Ethernet_Init(myMacAddr, myIpAddr, Ethernet_HALFDUPLEX) ;
$CEC6	$0EF1	    			MOVLW	_myMacAddr
$CEC8	$0105	    			MOVLB	5
$CECA	$6FE0	    			MOVWF	FARG_Ethernet_Init+0, 1
$CECC	$0E04	    			MOVLW	@_myMacAddr
$CECE	$6FE1	    			MOVWF	FARG_Ethernet_Init+1, 1
$CED0	$0E8F	    			MOVLW	_myIpAddr
$CED2	$6FE2	    			MOVWF	FARG_Ethernet_Init+2, 1
$CED4	$0E02	    			MOVLW	@_myIpAddr
$CED6	$6FE3	    			MOVWF	FARG_Ethernet_Init+3, 1
$CED8	$6BE4	    			CLRF	FARG_Ethernet_Init+4, 1
$CEDA	$EC60	F05E			CALL	_Ethernet_Init
;test18f97.c,231 :: 			Ethernet_confNetwork(ipMask, gwIpAddr, dnsIpAddr) ;
$CEDE	$0E82	    			MOVLW	_ipMask
$CEE0	$0106	    			MOVLB	6
$CEE2	$6FCD	    			MOVWF	FARG_Ethernet_confNetwork+0, 1
$CEE4	$0E05	    			MOVLW	@_ipMask
$CEE6	$6FCE	    			MOVWF	FARG_Ethernet_confNetwork+1, 1
$CEE8	$0E7E	    			MOVLW	_gwIpAddr
$CEEA	$6FCF	    			MOVWF	FARG_Ethernet_confNetwork+2, 1
$CEEC	$0E05	    			MOVLW	@_gwIpAddr
$CEEE	$6FD0	    			MOVWF	FARG_Ethernet_confNetwork+3, 1
$CEF0	$0E86	    			MOVLW	_dnsIpAddr
$CEF2	$6FD1	    			MOVWF	FARG_Ethernet_confNetwork+4, 1
$CEF4	$0E05	    			MOVLW	@_dnsIpAddr
$CEF6	$6FD2	    			MOVWF	FARG_Ethernet_confNetwork+5, 1
$CEF8	$ECFE	F03B			CALL	_Ethernet_confNetwork
;test18f97.c,232 :: 			ip_new_flag = 1;          // - флаг запуска в режиме установки нового IP (=1)
$CEFC	$0E01	    			MOVLW	1
$CEFE	$0104	    			MOVLB	4
$CF00	$6F38	    			MOVWF	_ip_new_flag, 1
;test18f97.c,233 :: 			ip_set();                 // установка нового IP и запись его в EEPROM
$CF02	$ECC2	F05E			CALL	_ip_set
;test18f97.c,234 :: 			}
$CF06	$	L_main_41:
;test18f97.c,236 :: 			ip_new_flag = 0;          // сброс  - флаг запуска в режиме установки нового IP (=1)
$CF06	$0104	    			MOVLB	4
$CF08	$6B38	    			CLRF	_ip_new_flag, 1
;test18f97.c,238 :: 			Ethernet_Init(myMacAddr, myIpAddr, Ethernet_HALFDUPLEX) ; //Ethernet_Init(myMacAddr, myIpAddr, Ethernet_FULLDUPLEX) ;
$CF0A	$0EF1	    			MOVLW	_myMacAddr
$CF0C	$0105	    			MOVLB	5
$CF0E	$6FE0	    			MOVWF	FARG_Ethernet_Init+0, 1
$CF10	$0E04	    			MOVLW	@_myMacAddr
$CF12	$6FE1	    			MOVWF	FARG_Ethernet_Init+1, 1
$CF14	$0E8F	    			MOVLW	_myIpAddr
$CF16	$6FE2	    			MOVWF	FARG_Ethernet_Init+2, 1
$CF18	$0E02	    			MOVLW	@_myIpAddr
$CF1A	$6FE3	    			MOVWF	FARG_Ethernet_Init+3, 1
$CF1C	$6BE4	    			CLRF	FARG_Ethernet_Init+4, 1
$CF1E	$EC60	F05E			CALL	_Ethernet_Init
;test18f97.c,239 :: 			Ethernet_confNetwork(ipMask, gwIpAddr, dnsIpAddr) ; // dhcp will not be used here, so use preconfigured addresses
$CF22	$0E82	    			MOVLW	_ipMask
$CF24	$0106	    			MOVLB	6
$CF26	$6FCD	    			MOVWF	FARG_Ethernet_confNetwork+0, 1
$CF28	$0E05	    			MOVLW	@_ipMask
$CF2A	$6FCE	    			MOVWF	FARG_Ethernet_confNetwork+1, 1
$CF2C	$0E7E	    			MOVLW	_gwIpAddr
$CF2E	$6FCF	    			MOVWF	FARG_Ethernet_confNetwork+2, 1
$CF30	$0E05	    			MOVLW	@_gwIpAddr
$CF32	$6FD0	    			MOVWF	FARG_Ethernet_confNetwork+3, 1
$CF34	$0E86	    			MOVLW	_dnsIpAddr
$CF36	$6FD1	    			MOVWF	FARG_Ethernet_confNetwork+4, 1
$CF38	$0E05	    			MOVLW	@_dnsIpAddr
$CF3A	$6FD2	    			MOVWF	FARG_Ethernet_confNetwork+5, 1
$CF3C	$ECFE	F03B			CALL	_Ethernet_confNetwork
;test18f97.c,241 :: 			Led_R=1;  // выключить красный сд
$CF40	$8082	    			BSF	PORTC, 0, 0
;test18f97.c,243 :: 			while(1)                                      // do forever
$CF42	$	L_main_42:
;test18f97.c,245 :: 			for(i=1;i<15;i++)
$CF42	$0E01	    			MOVLW	1
$CF44	$0105	    			MOVLB	5
$CF46	$6FD5	    			MOVWF	main_i_L0, 1
$CF48	$0E00	    			MOVLW	0
$CF4A	$6FD6	    			MOVWF	main_i_L0+1, 1
$CF4C	$	L_main_44:
$CF4C	$0E00	    			MOVLW	0
$CF4E	$0105	    			MOVLB	5
$CF50	$5DD6	    			SUBWF	main_i_L0+1, 0, 1
$CF52	$E102	    			BNZ	L_main_72
$CF54	$0E0F	    			MOVLW	15
$CF56	$5DD5	    			SUBWF	main_i_L0, 0, 1
$CF58	$	L_main_72:
$CF58	$E21F	    			BC	L_main_45
;test18f97.c,247 :: 			asm CLRWDT;                               // сброс сторожевого таймера
$CF5A	$0004	    			CLRWDT
;test18f97.c,248 :: 			SendCommandToCell(i);                     // отправка команды ячейке номер i, т.е. включение или отключение соленоида
$CF5C	$C5D5	F5E0			MOVFF	main_i_L0, FARG_sendCommandToCell+0
$CF60	$ECFD	F05E			CALL	_sendCommandToCell
;test18f97.c,249 :: 			SetTimer100us(8);                         // установим таймер на 0.8мс
$CF64	$0E08	    			MOVLW	8
$CF66	$0105	    			MOVLB	5
$CF68	$6FE0	    			MOVWF	FARG_SetTimer100us+0, 1
$CF6A	$0E00	    			MOVLW	0
$CF6C	$6FE1	    			MOVWF	FARG_SetTimer100us+1, 1
$CF6E	$EC76	F05F			CALL	_SetTimer100us
;test18f97.c,250 :: 			while(timer1Flag==0)                      // крутимся пока не закончится время, отведенное на прием с некоторым запасом, 0,8мс
$CF72	$	L_main_47:
$CF72	$0100	    			MOVLB	0
$CF74	$5021	    			MOVF	_timer1Flag, 0, 0
$CF76	$0A00	    			XORLW	0
$CF78	$E103	    			BNZ	L_main_48
;test18f97.c,252 :: 			Ethernet_doPacket() ;                   // process incoming Ethernet packets
$CF7A	$EC9B	F05C			CALL	_Ethernet_doPacket
;test18f97.c,253 :: 			}
$CF7E	$D7F9	    			BRA	L_main_47
$CF80	$	L_main_48:
;test18f97.c,254 :: 			SaveCellState(i);                         // смотрим на содержимое буфера и сохраняем состояние ячейки в масив если она ответила 2 раза одно и то же
$CF80	$C5D5	F5E0			MOVFF	main_i_L0, FARG_SaveCellState+0
$CF84	$EC93	F05F			CALL	_SaveCellState
;test18f97.c,255 :: 			WriteChangesLog(i);                       // запишем все изменения состояний ячеек если таковые имеются (сравним прошлое и текущее состояние)
$CF88	$C5D5	F5E0			MOVFF	main_i_L0, FARG_WriteChangesLog+0
$CF8C	$EC52	F061			CALL	_WriteChangesLog
;test18f97.c,256 :: 			}
$CF90	$	L_main_46:
;test18f97.c,245 :: 			for(i=1;i<15;i++)
$CF90	$0105	    			MOVLB	5
$CF92	$4BD5	    			INFSNZ	main_i_L0, 1, 1
$CF94	$2BD6	    			INCF	main_i_L0+1, 1, 1
;test18f97.c,256 :: 			}
$CF96	$D7DA	    			BRA	L_main_44
$CF98	$	L_main_45:
;test18f97.c,269 :: 			if((cellState[14][3] == '1')&&(cellState[14][4]!='8')) {    // если повернули мастер ключ (b3=1), начну разблокировать ячейки
$CF98	$0104	    			MOVLB	4
$CF9A	$5187	    			MOVF	_cellState+73, 0, 1
$CF9C	$0A31	    			XORLW	49
$CF9E	$E137	    			BNZ	L_main_51
$CFA0	$5188	    			MOVF	_cellState+74, 0, 1
$CFA2	$0A38	    			XORLW	56
$CFA4	$E034	    			BZ	L_main_51
$CFA6	$	L729_ex_L_main_51:
;test18f97.c,270 :: 			cnt6=0, cnt7=0;
$CFA6	$0105	    			MOVLB	5
$CFA8	$6BDE	    			CLRF	main_cnt6_L0, 1
$CFAA	$6BDF	    			CLRF	main_cnt7_L0, 1
;test18f97.c,271 :: 			fMasterKey = 1;
$CFAC	$0E01	    			MOVLW	1
$CFAE	$0103	    			MOVLB	3
$CFB0	$6F73	    			MOVWF	_fMasterKey, 1
;test18f97.c,272 :: 			cnt2++;
$CFB2	$0105	    			MOVLB	5
$CFB4	$2BDB	    			INCF	main_cnt2_L0, 1, 1
;test18f97.c,273 :: 			if (cnt2>20)  {
$CFB6	$51DB	    			MOVF	main_cnt2_L0, 0, 1
$CFB8	$0814	    			SUBLW	20
$CFBA	$E228	    			BC	L_main_52
;test18f97.c,274 :: 			cnt2=0;
$CFBC	$6BDB	    			CLRF	main_cnt2_L0, 1
;test18f97.c,275 :: 			if(cnt3<13) {
$CFBE	$0E0D	    			MOVLW	13
$CFC0	$5DDC	    			SUBWF	main_cnt3_L0, 0, 1
$CFC2	$E20B	    			BC	L_main_53
;test18f97.c,276 :: 			cnt3++;
$CFC4	$2BDC	    			INCF	main_cnt3_L0, 1, 1
;test18f97.c,277 :: 			cellCommand[cnt3] = 1;
$CFC6	$0E74	    			MOVLW	_cellCommand
$CFC8	$6EE1	    			MOVWF	FSR1L, 0
$CFCA	$0E03	    			MOVLW	@_cellCommand
$CFCC	$6EE2	    			MOVWF	FSR1L+1, 0
$CFCE	$51DC	    			MOVF	main_cnt3_L0, 0, 1
$CFD0	$26E1	    			ADDWF	FSR1L, 1, 0
$CFD2	$B0D8	    			BTFSC	STATUS, C, 0
$CFD4	$2AE2	    			INCF	FSR1L+1, 1, 0
$CFD6	$0E01	    			MOVLW	1
$CFD8	$6EE6	    			MOVWF	POSTINC1, 0
;test18f97.c,278 :: 			}
$CFDA	$	L_main_53:
;test18f97.c,279 :: 			if(cnt4<200) {cnt4++;}                  // если закончился тайм аут (1 минута), начну снова блокировать ячейки для экономии заряда аккумулятора
$CFDA	$0E00	    			MOVLW	0
$CFDC	$0105	    			MOVLB	5
$CFDE	$5DD8	    			SUBWF	main_cnt4_L0+1, 0, 1
$CFE0	$E102	    			BNZ	L_main_73
$CFE2	$0EC8	    			MOVLW	200
$CFE4	$5DD7	    			SUBWF	main_cnt4_L0, 0, 1
$CFE6	$	L_main_73:
$CFE6	$E204	    			BC	L_main_54
$CFE8	$0105	    			MOVLB	5
$CFEA	$4BD7	    			INFSNZ	main_cnt4_L0, 1, 1
$CFEC	$2BD8	    			INCF	main_cnt4_L0+1, 1, 1
$CFEE	$D00E	    			BRA	L_main_55
$CFF0	$	L_main_54:
;test18f97.c,281 :: 			if(cnt5<13) {
$CFF0	$0E0D	    			MOVLW	13
$CFF2	$0105	    			MOVLB	5
$CFF4	$5DDD	    			SUBWF	main_cnt5_L0, 0, 1
$CFF6	$E20A	    			BC	L_main_56
;test18f97.c,282 :: 			cnt5++;
$CFF8	$2BDD	    			INCF	main_cnt5_L0, 1, 1
;test18f97.c,283 :: 			cellCommand[cnt5] = 0;
$CFFA	$0E74	    			MOVLW	_cellCommand
$CFFC	$6EE1	    			MOVWF	FSR1L, 0
$CFFE	$0E03	    			MOVLW	@_cellCommand
$D000	$6EE2	    			MOVWF	FSR1L+1, 0
$D002	$51DD	    			MOVF	main_cnt5_L0, 0, 1
$D004	$26E1	    			ADDWF	FSR1L, 1, 0
$D006	$B0D8	    			BTFSC	STATUS, C, 0
$D008	$2AE2	    			INCF	FSR1L+1, 1, 0
$D00A	$6AE6	    			CLRF	POSTINC1, 0
;test18f97.c,284 :: 			}
$D00C	$	L_main_56:
;test18f97.c,285 :: 			}
$D00C	$	L_main_55:
;test18f97.c,286 :: 			}
$D00C	$	L_main_52:
;test18f97.c,287 :: 			}
$D00C	$D020	    			BRA	L_main_57
$D00E	$	L_main_51:
;test18f97.c,289 :: 			cnt2=cnt3=cnt4=cnt5=0;
$D00E	$0105	    			MOVLB	5
$D010	$6BDD	    			CLRF	main_cnt5_L0, 1
$D012	$6BD7	    			CLRF	main_cnt4_L0, 1
$D014	$6BD8	    			CLRF	main_cnt4_L0+1, 1
$D016	$6BDC	    			CLRF	main_cnt3_L0, 1
$D018	$6BDB	    			CLRF	main_cnt2_L0, 1
;test18f97.c,290 :: 			if(fMasterKey==1) {                       // но был только что установлен,
$D01A	$0103	    			MOVLB	3
$D01C	$5173	    			MOVF	_fMasterKey, 0, 1
$D01E	$0A01	    			XORLW	1
$D020	$E116	    			BNZ	L_main_58
;test18f97.c,291 :: 			cnt7++;
$D022	$0105	    			MOVLB	5
$D024	$2BDF	    			INCF	main_cnt7_L0, 1, 1
;test18f97.c,292 :: 			if (cnt7>20)  {
$D026	$51DF	    			MOVF	main_cnt7_L0, 0, 1
$D028	$0814	    			SUBLW	20
$D02A	$E211	    			BC	L_main_59
;test18f97.c,293 :: 			cnt7=0;
$D02C	$6BDF	    			CLRF	main_cnt7_L0, 1
;test18f97.c,294 :: 			if(cnt6<13) {
$D02E	$0E0D	    			MOVLW	13
$D030	$5DDE	    			SUBWF	main_cnt6_L0, 0, 1
$D032	$E20B	    			BC	L_main_60
;test18f97.c,295 :: 			cnt6++;
$D034	$2BDE	    			INCF	main_cnt6_L0, 1, 1
;test18f97.c,296 :: 			cellCommand[cnt6] = 0;             // блокируем все ячейки
$D036	$0E74	    			MOVLW	_cellCommand
$D038	$6EE1	    			MOVWF	FSR1L, 0
$D03A	$0E03	    			MOVLW	@_cellCommand
$D03C	$6EE2	    			MOVWF	FSR1L+1, 0
$D03E	$51DE	    			MOVF	main_cnt6_L0, 0, 1
$D040	$26E1	    			ADDWF	FSR1L, 1, 0
$D042	$B0D8	    			BTFSC	STATUS, C, 0
$D044	$2AE2	    			INCF	FSR1L+1, 1, 0
$D046	$6AE6	    			CLRF	POSTINC1, 0
;test18f97.c,297 :: 			}
$D048	$D002	    			BRA	L_main_61
$D04A	$	L_main_60:
;test18f97.c,298 :: 			else { fMasterKey = 0; }
$D04A	$0103	    			MOVLB	3
$D04C	$6B73	    			CLRF	_fMasterKey, 1
$D04E	$	L_main_61:
;test18f97.c,299 :: 			}
$D04E	$	L_main_59:
;test18f97.c,300 :: 			}
$D04E	$	L_main_58:
;test18f97.c,301 :: 			}
$D04E	$	L_main_57:
;test18f97.c,303 :: 			cnt++;                                     // моргаем светодиодом
$D04E	$0103	    			MOVLB	3
$D050	$0103	    			MOVLB	3
$D052	$0105	    			MOVLB	5
$D054	$2BDA	    			INCF	main_cnt_L0, 1, 1
;test18f97.c,304 :: 			if(cnt>10) {
$D056	$51DA	    			MOVF	main_cnt_L0, 0, 1
$D058	$080A	    			SUBLW	10
$D05A	$E20B	    			BC	L_main_62
;test18f97.c,305 :: 			Led_G = !Led_G;
$D05C	$0E01	    			MOVLW	1
$D05E	$B482	    			BTFSC	PORTC, 2, 0
$D060	$0E00	    			MOVLW	0
$D062	$6E00	    			MOVWF	STACK_0, 0
$D064	$0E00	    			MOVLW	0
$D066	$B000	    			BTFSC	STACK_0, 0, 0
$D068	$0E04	    			MOVLW	4
$D06A	$1882	    			XORWF	PORTC, 0, 0
$D06C	$0B04	    			ANDLW	4
$D06E	$1A82	    			XORWF	PORTC, 1, 0
;test18f97.c,306 :: 			cnt=0;
$D070	$6BDA	    			CLRF	main_cnt_L0, 1
;test18f97.c,307 :: 			}
$D072	$	L_main_62:
;test18f97.c,308 :: 			}
$D072	$D767	    			BRA	L_main_42
;test18f97.c,309 :: 			}
$D074	$D7FF	    			BRA	$
$D076	$0000	    			DATA	DATA doprntf__npowers_
$D078	$7F00	    			DATA	DATA doprntf__npowers_
$D07A	$CCCD	    			DATA	DATA doprntf__npowers_
$D07C	$7B4C	    			DATA	DATA doprntf__npowers_
$D07E	$D70A	    			DATA	DATA doprntf__npowers_
$D080	$7823	    			DATA	DATA doprntf__npowers_
$D082	$126F	    			DATA	DATA doprntf__npowers_
$D084	$7503	    			DATA	DATA doprntf__npowers_
$D086	$B717	    			DATA	DATA doprntf__npowers_
$D088	$7151	    			DATA	DATA doprntf__npowers_
$D08A	$C5AC	    			DATA	DATA doprntf__npowers_
$D08C	$6E27	    			DATA	DATA doprntf__npowers_
$D08E	$37BD	    			DATA	DATA doprntf__npowers_
$D090	$6B06	    			DATA	DATA doprntf__npowers_
$D092	$BF95	    			DATA	DATA doprntf__npowers_
$D094	$6756	    			DATA	DATA doprntf__npowers_
$D096	$CC77	    			DATA	DATA doprntf__npowers_
$D098	$642B	    			DATA	DATA doprntf__npowers_
$D09A	$705F	    			DATA	DATA doprntf__npowers_
$D09C	$6109	    			DATA	DATA doprntf__npowers_
$D09E	$E6FF	    			DATA	DATA doprntf__npowers_
$D0A0	$5D5B	    			DATA	DATA doprntf__npowers_
$D0A2	$E508	    			DATA	DATA doprntf__npowers_
$D0A4	$3C3C	    			DATA	DATA doprntf__npowers_
$D0A6	$4260	    			DATA	DATA doprntf__npowers_
$D0A8	$1B22	    			DATA	DATA doprntf__npowers_
$D0AA	$0000	    			DATA	DATA doprntf__powers_
$D0AC	$7F00	    			DATA	DATA doprntf__powers_
$D0AE	$0000	    			DATA	DATA doprntf__powers_
$D0B0	$8220	    			DATA	DATA doprntf__powers_
$D0B2	$0000	    			DATA	DATA doprntf__powers_
$D0B4	$8548	    			DATA	DATA doprntf__powers_
$D0B6	$0000	    			DATA	DATA doprntf__powers_
$D0B8	$887A	    			DATA	DATA doprntf__powers_
$D0BA	$4000	    			DATA	DATA doprntf__powers_
$D0BC	$8C1C	    			DATA	DATA doprntf__powers_
$D0BE	$5000	    			DATA	DATA doprntf__powers_
$D0C0	$8F43	    			DATA	DATA doprntf__powers_
$D0C2	$2400	    			DATA	DATA doprntf__powers_
$D0C4	$9274	    			DATA	DATA doprntf__powers_
$D0C6	$9680	    			DATA	DATA doprntf__powers_
$D0C8	$9618	    			DATA	DATA doprntf__powers_
$D0CA	$BC20	    			DATA	DATA doprntf__powers_
$D0CC	$993E	    			DATA	DATA doprntf__powers_
$D0CE	$6B28	    			DATA	DATA doprntf__powers_
$D0D0	$9C6E	    			DATA	DATA doprntf__powers_
$D0D2	$02F9	    			DATA	DATA doprntf__powers_
$D0D4	$A015	    			DATA	DATA doprntf__powers_
$D0D6	$78EC	    			DATA	DATA doprntf__powers_
$D0D8	$C12D	    			DATA	DATA doprntf__powers_
$D0DA	$F2CA	    			DATA	DATA doprntf__powers_
$D0DC	$E249	    			DATA	DATA doprntf__powers_
$D0DE	$0000	    			DATA	DATA _pred_sum
$D0E0	$001F	    			DATA	DATA _pred_sum
$D0E2	$003B	    			DATA	DATA _pred_sum
$D0E4	$005A	    			DATA	DATA _pred_sum
$D0E6	$0078	    			DATA	DATA _pred_sum
$D0E8	$0097	    			DATA	DATA _pred_sum
$D0EA	$00B5	    			DATA	DATA _pred_sum
$D0EC	$00D4	    			DATA	DATA _pred_sum
$D0EE	$00F3	    			DATA	DATA _pred_sum
$D0F0	$0111	    			DATA	DATA _pred_sum
$D0F2	$0130	    			DATA	DATA _pred_sum
$D0F4	$014E	    			DATA	DATA _pred_sum
$D0F6	$0000	    			DATA	DATA _pred_sum
$D0F8	$001F	    			DATA	DATA _pred_sum
$D0FA	$003C	    			DATA	DATA _pred_sum
$D0FC	$005B	    			DATA	DATA _pred_sum
$D0FE	$0079	    			DATA	DATA _pred_sum
$D100	$0098	    			DATA	DATA _pred_sum
$D102	$00B6	    			DATA	DATA _pred_sum
$D104	$00D5	    			DATA	DATA _pred_sum
$D106	$00F4	    			DATA	DATA _pred_sum
$D108	$0112	    			DATA	DATA _pred_sum
$D10A	$0131	    			DATA	DATA _pred_sum
$D10C	$014F	    			DATA	DATA _pred_sum
$D10E	$0001	    			DATA	DATA doprntf_dpowers
$D110	$0000	    			DATA	DATA doprntf_dpowers
$D112	$000A	    			DATA	DATA doprntf_dpowers
$D114	$0000	    			DATA	DATA doprntf_dpowers
$D116	$0064	    			DATA	DATA doprntf_dpowers
$D118	$0000	    			DATA	DATA doprntf_dpowers
$D11A	$03E8	    			DATA	DATA doprntf_dpowers
$D11C	$0000	    			DATA	DATA doprntf_dpowers
$D11E	$2710	    			DATA	DATA doprntf_dpowers
$D120	$0000	    			DATA	DATA doprntf_dpowers
$D122	$86A0	    			DATA	DATA doprntf_dpowers
$D124	$0001	    			DATA	DATA doprntf_dpowers
$D126	$4240	    			DATA	DATA doprntf_dpowers
$D128	$000F	    			DATA	DATA doprntf_dpowers
$D12A	$9680	    			DATA	DATA doprntf_dpowers
$D12C	$0098	    			DATA	DATA doprntf_dpowers
$D12E	$E100	    			DATA	DATA doprntf_dpowers
$D130	$05F5	    			DATA	DATA doprntf_dpowers
$D132	$CA00	    			DATA	DATA doprntf_dpowers
$D134	$3B9A	    			DATA	DATA doprntf_dpowers
$D136	$0001	    			DATA	DATA doprntf_hexpowers
$D138	$0000	    			DATA	DATA doprntf_hexpowers
$D13A	$0010	    			DATA	DATA doprntf_hexpowers
$D13C	$0000	    			DATA	DATA doprntf_hexpowers
$D13E	$0100	    			DATA	DATA doprntf_hexpowers
$D140	$0000	    			DATA	DATA doprntf_hexpowers
$D142	$1000	    			DATA	DATA doprntf_hexpowers
$D144	$0000	    			DATA	DATA doprntf_hexpowers
$D146	$0000	    			DATA	DATA doprntf_hexpowers
$D148	$0001	    			DATA	DATA doprntf_hexpowers
$D14A	$0000	    			DATA	DATA doprntf_hexpowers
$D14C	$0010	    			DATA	DATA doprntf_hexpowers
$D14E	$0000	    			DATA	DATA doprntf_hexpowers
$D150	$0100	    			DATA	DATA doprntf_hexpowers
$D152	$0000	    			DATA	DATA doprntf_hexpowers
$D154	$1000	    			DATA	DATA doprntf_hexpowers
$D156	$0001	    			DATA	DATA doprntf_octpowers
$D158	$0000	    			DATA	DATA doprntf_octpowers
$D15A	$0008	    			DATA	DATA doprntf_octpowers
$D15C	$0000	    			DATA	DATA doprntf_octpowers
$D15E	$0040	    			DATA	DATA doprntf_octpowers
$D160	$0000	    			DATA	DATA doprntf_octpowers
$D162	$0200	    			DATA	DATA doprntf_octpowers
$D164	$0000	    			DATA	DATA doprntf_octpowers
$D166	$1000	    			DATA	DATA doprntf_octpowers
$D168	$0000	    			DATA	DATA doprntf_octpowers
$D16A	$8000	    			DATA	DATA doprntf_octpowers
$D16C	$0000	    			DATA	DATA doprntf_octpowers
$D16E	$0000	    			DATA	DATA doprntf_octpowers
$D170	$0004	    			DATA	DATA doprntf_octpowers
$D172	$0000	    			DATA	DATA doprntf_octpowers
$D174	$0020	    			DATA	DATA doprntf_octpowers
$D176	$0000	    			DATA	DATA doprntf_octpowers
$D178	$0100	    			DATA	DATA doprntf_octpowers
$D17A	$0000	    			DATA	DATA doprntf_octpowers
$D17C	$0800	    			DATA	DATA doprntf_octpowers
$D17E	$0000	    			DATA	DATA doprntf_octpowers
$D180	$4000	    			DATA	DATA doprntf_octpowers
$D182	$0000	    			DATA	DATA doprntf_octpowers
$D184	$0000	    			DATA	DATA doprntf_octpowers
$D186	$3130	    			DATA	DATA doprntf_hexb
$D188	$3332	    			DATA	DATA doprntf_hexb
$D18A	$3534	    			DATA	DATA doprntf_hexb
$D18C	$3736	    			DATA	DATA doprntf_hexb
$D18E	$3938	    			DATA	DATA doprntf_hexb
$D190	$4241	    			DATA	DATA doprntf_hexb
$D192	$4443	    			DATA	DATA doprntf_hexb
$D194	$4645	    			DATA	DATA doprntf_hexb
$D196	$FF00	    			DATA	DATA
$D198	$3130	    			DATA	DATA doprntf_hexs
$D19A	$3332	    			DATA	DATA doprntf_hexs
$D19C	$3534	    			DATA	DATA doprntf_hexs
$D19E	$3736	    			DATA	DATA doprntf_hexs
$D1A0	$3938	    			DATA	DATA doprntf_hexs
$D1A2	$6261	    			DATA	DATA doprntf_hexs
$D1A4	$6463	    			DATA	DATA doprntf_hexs
$D1A6	$6665	    			DATA	DATA doprntf_hexs
$D1A8	$FF00	    			DATA	DATA
$D1AA	$0101	    			DATA	DATA eth_j60_dhcp_pkt_1
$D1AC	$0006	    			DATA	DATA eth_j60_dhcp_pkt_1
$D1AE	$2312	    			DATA	DATA eth_j60_dhcp_pkt_1
$D1B0	$4534	    			DATA	DATA eth_j60_dhcp_pkt_1
$D1B2	$0000	    			DATA	DATA eth_j60_dhcp_pkt_1
$D1B4	$0080	    			DATA	DATA eth_j60_dhcp_pkt_1
$D1B6	$8263	    			DATA	DATA eth_j60_dhcp_pkt_2
$D1B8	$6353	    			DATA	DATA eth_j60_dhcp_pkt_2
$D1BA	$0135	    			DATA	DATA eth_j60_dhcp_pkt_2
$D1BC	$0337	    			DATA	DATA eth_j60_dhcp_pkt_3
$D1BE	$0301	    			DATA	DATA eth_j60_dhcp_pkt_3
$D1C0	$FF06	    			DATA	DATA
$D1C2	$5448	    			DATA	DATA _httpHeader
$D1C4	$5054	    			DATA	DATA _httpHeader
$D1C6	$312F	    			DATA	DATA _httpHeader
$D1C8	$312E	    			DATA	DATA _httpHeader
$D1CA	$3220	    			DATA	DATA _httpHeader
$D1CC	$3030	    			DATA	DATA _httpHeader
$D1CE	$4F20	    			DATA	DATA _httpHeader
$D1D0	$0A4B	    			DATA	DATA _httpHeader
$D1D2	$6F43	    			DATA	DATA _httpHeader
$D1D4	$746E	    			DATA	DATA _httpHeader
$D1D6	$6E65	    			DATA	DATA _httpHeader
$D1D8	$2D74	    			DATA	DATA _httpHeader
$D1DA	$7974	    			DATA	DATA _httpHeader
$D1DC	$6570	    			DATA	DATA _httpHeader
$D1DE	$203A	    			DATA	DATA _httpHeader
$D1E0	$FF00	    			DATA	DATA
$D1E2	$6574	    			DATA	DATA _httpMimeTypeScript
$D1E4	$7478	    			DATA	DATA _httpMimeTypeScript
$D1E6	$702F	    			DATA	DATA _httpMimeTypeScript
$D1E8	$616C	    			DATA	DATA _httpMimeTypeScript
$D1EA	$6E69	    			DATA	DATA _httpMimeTypeScript
$D1EC	$0A0A	    			DATA	DATA _httpMimeTypeScript
$D1EE	$FF00	    			DATA	DATA
$D1F0	$7473	    			DATA	DATA lstr_1_ethernet
$D1F2	$696F	    			DATA	DATA lstr_1_ethernet
$D1F4	$616B	    			DATA	DATA lstr_1_ethernet
$D1F6	$003D	    			DATA	DATA lstr_1_ethernet
$D1F8	$002E	    			DATA	DATA lstr_2_ethernet
$D1FA	$002E	    			DATA	DATA lstr_3_ethernet
$D1FC	$002E	    			DATA	DATA lstr_4_ethernet
$D1FE	$6572	    			DATA	DATA lstr_6_ethernet
$D200	$7573	    			DATA	DATA lstr_6_ethernet
$D202	$746C	    			DATA	DATA lstr_6_ethernet
$D204	$613D	    			DATA	DATA lstr_6_ethernet
$D206	$6363	    			DATA	DATA lstr_6_ethernet
$D208	$7065	    			DATA	DATA lstr_6_ethernet
$D20A	$6574	    			DATA	DATA lstr_6_ethernet
$D20C	$0064	    			DATA	DATA lstr_6_ethernet
$D20E	$6572	    			DATA	DATA lstr_7_ethernet
$D210	$7573	    			DATA	DATA lstr_7_ethernet
$D212	$746C	    			DATA	DATA lstr_7_ethernet
$D214	$653D	    			DATA	DATA lstr_7_ethernet
$D216	$7272	    			DATA	DATA lstr_7_ethernet
$D218	$726F	    			DATA	DATA lstr_7_ethernet
$D21A	$695F	    			DATA	DATA lstr_7_ethernet
$D21C	$5F70	    			DATA	DATA lstr_7_ethernet
$D21E	$6F63	    			DATA	DATA lstr_7_ethernet
$D220	$6D6D	    			DATA	DATA lstr_7_ethernet
$D222	$6E61	    			DATA	DATA lstr_7_ethernet
$D224	$0064	    			DATA	DATA lstr_7_ethernet
$D226	$7326	    			DATA	DATA lstr_9_ethernet
$D228	$6174	    			DATA	DATA lstr_9_ethernet
$D22A	$6574	    			DATA	DATA lstr_9_ethernet
$D22C	$4F3D	    			DATA	DATA lstr_9_ethernet
$D22E	$0D4B	    			DATA	DATA lstr_9_ethernet
$D230	$000A	    			DATA	DATA lstr_9_ethernet
$D232	$6563	    			DATA	DATA lstr_10_ethernet
$D234	$6C6C	    			DATA	DATA lstr_10_ethernet
$D236	$255F	    			DATA	DATA lstr_10_ethernet
$D238	$3230	    			DATA	DATA lstr_10_ethernet
$D23A	$3D64	    			DATA	DATA lstr_10_ethernet
$D23C	$FF00	    			DATA	DATA
$D23E	$6F6E	    			DATA	DATA lstr_11_ethernet
$D240	$0A0D	    			DATA	DATA lstr_11_ethernet
$D242	$FF00	    			DATA	DATA
$D244	$6325	    			DATA	DATA lstr_12_ethernet
$D246	$002C	    			DATA	DATA lstr_12_ethernet
$D248	$6325	    			DATA	DATA lstr_13_ethernet
$D24A	$002C	    			DATA	DATA lstr_13_ethernet
$D24C	$6325	    			DATA	DATA lstr_14_ethernet
$D24E	$002C	    			DATA	DATA lstr_14_ethernet
$D250	$6325	    			DATA	DATA lstr_15_ethernet
$D252	$002C	    			DATA	DATA lstr_15_ethernet
$D254	$6325	    			DATA	DATA lstr_16_ethernet
$D256	$002C	    			DATA	DATA lstr_16_ethernet
$D258	$6325	    			DATA	DATA lstr_17_ethernet
$D25A	$002C	    			DATA	DATA lstr_17_ethernet
$D25C	$6325	    			DATA	DATA lstr_18_ethernet
$D25E	$002C	    			DATA	DATA lstr_18_ethernet
$D260	$6325	    			DATA	DATA lstr_19_ethernet
$D262	$002C	    			DATA	DATA lstr_19_ethernet
$D264	$6325	    			DATA	DATA lstr_20_ethernet
$D266	$0A0D	    			DATA	DATA lstr_20_ethernet
$D268	$FF00	    			DATA	DATA
$D26A	$6325	    			DATA	DATA lstr_21_ethernet
$D26C	$002C	    			DATA	DATA lstr_21_ethernet
$D26E	$6325	    			DATA	DATA lstr_22_ethernet
$D270	$002C	    			DATA	DATA lstr_22_ethernet
$D272	$6325	    			DATA	DATA lstr_23_ethernet
$D274	$002C	    			DATA	DATA lstr_23_ethernet
$D276	$6325	    			DATA	DATA lstr_24_ethernet
$D278	$002C	    			DATA	DATA lstr_24_ethernet
$D27A	$6325	    			DATA	DATA lstr_25_ethernet
$D27C	$0A0D	    			DATA	DATA lstr_25_ethernet
$D27E	$FF00	    			DATA	DATA
$D280	$7226	    			DATA	DATA lstr_26_ethernet
$D282	$6374	    			DATA	DATA lstr_26_ethernet
$D284	$3D72	    			DATA	DATA lstr_26_ethernet
$D286	$FF00	    			DATA	DATA
$D288	$7226	    			DATA	DATA lstr_27_ethernet
$D28A	$6474	    			DATA	DATA lstr_27_ethernet
$D28C	$3D73	    			DATA	DATA lstr_27_ethernet
$D28E	$FF00	    			DATA	DATA
$D290	$7265	    			DATA	DATA lstr_28_ethernet
$D292	$6F72	    			DATA	DATA lstr_28_ethernet
$D294	$0072	    			DATA	DATA lstr_28_ethernet
$D296	$7265	    			DATA	DATA lstr_29_ethernet
$D298	$6F72	    			DATA	DATA lstr_29_ethernet
$D29A	$0072	    			DATA	DATA lstr_29_ethernet
$D29C	$7265	    			DATA	DATA lstr_30_ethernet
$D29E	$6F72	    			DATA	DATA lstr_30_ethernet
$D2A0	$0072	    			DATA	DATA lstr_30_ethernet
$D2A2	$7226	    			DATA	DATA lstr_31_ethernet
$D2A4	$7374	    			DATA	DATA lstr_31_ethernet
$D2A6	$3D73	    			DATA	DATA lstr_31_ethernet
$D2A8	$FF00	    			DATA	DATA
$D2AA	$7265	    			DATA	DATA lstr_32_ethernet
$D2AC	$6F72	    			DATA	DATA lstr_32_ethernet
$D2AE	$0072	    			DATA	DATA lstr_32_ethernet
$D2B0	$7265	    			DATA	DATA lstr_33_ethernet
$D2B2	$6F72	    			DATA	DATA lstr_33_ethernet
$D2B4	$0072	    			DATA	DATA lstr_33_ethernet
$D2B6	$7265	    			DATA	DATA lstr_34_ethernet
$D2B8	$6F72	    			DATA	DATA lstr_34_ethernet
$D2BA	$0072	    			DATA	DATA lstr_34_ethernet
$D2BC	$7426	    			DATA	DATA lstr_35_ethernet
$D2BE	$7265	    			DATA	DATA lstr_35_ethernet
$D2C0	$3D6D	    			DATA	DATA lstr_35_ethernet
$D2C2	$FF00	    			DATA	DATA
$D2C4	$6326	    			DATA	DATA lstr_36_ethernet
$D2C6	$5F66	    			DATA	DATA lstr_36_ethernet
$D2C8	$6166	    			DATA	DATA lstr_36_ethernet
$D2CA	$5F74	    			DATA	DATA lstr_36_ethernet
$D2CC	$7230	    			DATA	DATA lstr_36_ethernet
$D2CE	$6165	    			DATA	DATA lstr_36_ethernet
$D2D0	$3D64	    			DATA	DATA lstr_36_ethernet
$D2D2	$6B6F	    			DATA	DATA lstr_36_ethernet
$D2D4	$FF00	    			DATA	DATA
$D2D6	$6626	    			DATA	DATA lstr_37_ethernet
$D2D8	$6C69	    			DATA	DATA lstr_37_ethernet
$D2DA	$5F65	    			DATA	DATA lstr_37_ethernet
$D2DC	$756E	    			DATA	DATA lstr_37_ethernet
$D2DE	$3D6D	    			DATA	DATA lstr_37_ethernet
$D2E0	$FF00	    			DATA	DATA
$D2E2	$6326	    			DATA	DATA lstr_38_ethernet
$D2E4	$5F66	    			DATA	DATA lstr_38_ethernet
$D2E6	$6166	    			DATA	DATA lstr_38_ethernet
$D2E8	$5F74	    			DATA	DATA lstr_38_ethernet
$D2EA	$6E69	    			DATA	DATA lstr_38_ethernet
$D2EC	$7469	    			DATA	DATA lstr_38_ethernet
$D2EE	$003D	    			DATA	DATA lstr_38_ethernet
$D2F0	$6B6F	    			DATA	DATA lstr_39_ethernet
$D2F2	$FF00	    			DATA	DATA
$D2F4	$6326	    			DATA	DATA lstr_40_ethernet
$D2F6	$5F66	    			DATA	DATA lstr_40_ethernet
$D2F8	$6166	    			DATA	DATA lstr_40_ethernet
$D2FA	$5F74	    			DATA	DATA lstr_40_ethernet
$D2FC	$7361	    			DATA	DATA lstr_40_ethernet
$D2FE	$6973	    			DATA	DATA lstr_40_ethernet
$D300	$6E67	    			DATA	DATA lstr_40_ethernet
$D302	$7830	    			DATA	DATA lstr_40_ethernet
$D304	$3030	    			DATA	DATA lstr_40_ethernet
$D306	$003D	    			DATA	DATA lstr_40_ethernet
$D308	$6F6E	    			DATA	DATA lstr_41_ethernet
$D30A	$665F	    			DATA	DATA lstr_41_ethernet
$D30C	$6C69	    			DATA	DATA lstr_41_ethernet
$D30E	$0065	    			DATA	DATA lstr_41_ethernet
$D310	$6966	    			DATA	DATA lstr_42_ethernet
$D312	$656C	    			DATA	DATA lstr_42_ethernet
$D314	$6F5F	    			DATA	DATA lstr_42_ethernet
$D316	$006B	    			DATA	DATA lstr_42_ethernet
$D318	$7326	    			DATA	DATA lstr_43_ethernet
$D31A	$7A69	    			DATA	DATA lstr_43_ethernet
$D31C	$3D65	    			DATA	DATA lstr_43_ethernet
$D31E	$FF00	    			DATA	DATA
$D320	$6326	    			DATA	DATA lstr_44_ethernet
$D322	$5F66	    			DATA	DATA lstr_44_ethernet
$D324	$6166	    			DATA	DATA lstr_44_ethernet
$D326	$5F74	    			DATA	DATA lstr_44_ethernet
$D328	$6572	    			DATA	DATA lstr_44_ethernet
$D32A	$6461	    			DATA	DATA lstr_44_ethernet
$D32C	$0A3D	    			DATA	DATA lstr_44_ethernet
$D32E	$FF00	    			DATA	DATA
$D330	$260A	    			DATA	DATA lstr_45_ethernet
$D332	$6F63	    			DATA	DATA lstr_45_ethernet
$D334	$746E	    			DATA	DATA lstr_45_ethernet
$D336	$6E69	    			DATA	DATA lstr_45_ethernet
$D338	$6575	    			DATA	DATA lstr_45_ethernet
$D33A	$3D64	    			DATA	DATA lstr_45_ethernet
$D33C	$6166	    			DATA	DATA lstr_45_ethernet
$D33E	$736C	    			DATA	DATA lstr_45_ethernet
$D340	$0065	    			DATA	DATA lstr_45_ethernet
$D342	$6326	    			DATA	DATA lstr_46_ethernet
$D344	$6E6F	    			DATA	DATA lstr_46_ethernet
$D346	$6974	    			DATA	DATA lstr_46_ethernet
$D348	$756E	    			DATA	DATA lstr_46_ethernet
$D34A	$6465	    			DATA	DATA lstr_46_ethernet
$D34C	$743D	    			DATA	DATA lstr_46_ethernet
$D34E	$7572	    			DATA	DATA lstr_46_ethernet
$D350	$0065	    			DATA	DATA lstr_46_ethernet
$D352	$260A	    			DATA	DATA lstr_47_ethernet
$D354	$6F63	    			DATA	DATA lstr_47_ethernet
$D356	$746E	    			DATA	DATA lstr_47_ethernet
$D358	$6E69	    			DATA	DATA lstr_47_ethernet
$D35A	$6575	    			DATA	DATA lstr_47_ethernet
$D35C	$3D64	    			DATA	DATA lstr_47_ethernet
$D35E	$7265	    			DATA	DATA lstr_47_ethernet
$D360	$6F72	    			DATA	DATA lstr_47_ethernet
$D362	$0072	    			DATA	DATA lstr_47_ethernet
$D364	$0A26	    			DATA	DATA lstr_48_ethernet
$D366	$6663	    			DATA	DATA lstr_48_ethernet
$D368	$665F	    			DATA	DATA lstr_48_ethernet
$D36A	$7461	    			DATA	DATA lstr_48_ethernet
$D36C	$695F	    			DATA	DATA lstr_48_ethernet
$D36E	$696E	    			DATA	DATA lstr_48_ethernet
$D370	$3D74	    			DATA	DATA lstr_48_ethernet
$D372	$FF00	    			DATA	DATA
$D374	$6F20	    			DATA	DATA lstr_49_ethernet
$D376	$206B	    			DATA	DATA lstr_49_ethernet
$D378	$FF00	    			DATA	DATA
$D37A	$630A	    			DATA	DATA lstr_50_ethernet
$D37C	$5F66	    			DATA	DATA lstr_50_ethernet
$D37E	$6166	    			DATA	DATA lstr_50_ethernet
$D380	$5F74	    			DATA	DATA lstr_50_ethernet
$D382	$7361	    			DATA	DATA lstr_50_ethernet
$D384	$6973	    			DATA	DATA lstr_50_ethernet
$D386	$6E67	    			DATA	DATA lstr_50_ethernet
$D388	$7830	    			DATA	DATA lstr_50_ethernet
$D38A	$3030	    			DATA	DATA lstr_50_ethernet
$D38C	$003D	    			DATA	DATA lstr_50_ethernet
$D38E	$6F6E	    			DATA	DATA lstr_51_ethernet
$D390	$6620	    			DATA	DATA lstr_51_ethernet
$D392	$6C69	    			DATA	DATA lstr_51_ethernet
$D394	$0065	    			DATA	DATA lstr_51_ethernet
$D396	$6966	    			DATA	DATA lstr_52_ethernet
$D398	$656C	    			DATA	DATA lstr_52_ethernet
$D39A	$6F20	    			DATA	DATA lstr_52_ethernet
$D39C	$006B	    			DATA	DATA lstr_52_ethernet
$D39E	$630A	    			DATA	DATA lstr_53_ethernet
$D3A0	$5F66	    			DATA	DATA lstr_53_ethernet
$D3A2	$6166	    			DATA	DATA lstr_53_ethernet
$D3A4	$5F74	    			DATA	DATA lstr_53_ethernet
$D3A6	$6564	    			DATA	DATA lstr_53_ethernet
$D3A8	$656C	    			DATA	DATA lstr_53_ethernet
$D3AA	$6574	    			DATA	DATA lstr_53_ethernet
$D3AC	$003D	    			DATA	DATA lstr_53_ethernet
$D3AE	$6F20	    			DATA	DATA lstr_54_ethernet
$D3B0	$206B	    			DATA	DATA lstr_54_ethernet
$D3B2	$FF00	    			DATA	DATA
$D3B4	$6F26	    			DATA	DATA lstr_55_ethernet
$D3B6	$6570	    			DATA	DATA lstr_55_ethernet
$D3B8	$5F6E	    			DATA	DATA lstr_55_ethernet
$D3BA	$6F70	    			DATA	DATA lstr_55_ethernet
$D3BC	$7472	    			DATA	DATA lstr_55_ethernet
$D3BE	$003D	    			DATA	DATA lstr_55_ethernet
$D3C0	$7226	    			DATA	DATA lstr_56_ethernet
$D3C2	$7365	    			DATA	DATA lstr_56_ethernet
$D3C4	$6C75	    			DATA	DATA lstr_56_ethernet
$D3C6	$3D74	    			DATA	DATA lstr_56_ethernet
$D3C8	$6361	    			DATA	DATA lstr_56_ethernet
$D3CA	$6563	    			DATA	DATA lstr_56_ethernet
$D3CC	$7470	    			DATA	DATA lstr_56_ethernet
$D3CE	$6465	    			DATA	DATA lstr_56_ethernet
$D3D0	$FF00	    			DATA	DATA
$D3D2	$6326	    			DATA	DATA lstr_57_ethernet
$D3D4	$6F6C	    			DATA	DATA lstr_57_ethernet
$D3D6	$6573	    			DATA	DATA lstr_57_ethernet
$D3D8	$705F	    			DATA	DATA lstr_57_ethernet
$D3DA	$726F	    			DATA	DATA lstr_57_ethernet
$D3DC	$3D74	    			DATA	DATA lstr_57_ethernet
$D3DE	$FF00	    			DATA	DATA
$D3E0	$7226	    			DATA	DATA lstr_58_ethernet
$D3E2	$7365	    			DATA	DATA lstr_58_ethernet
$D3E4	$6C75	    			DATA	DATA lstr_58_ethernet
$D3E6	$3D74	    			DATA	DATA lstr_58_ethernet
$D3E8	$6361	    			DATA	DATA lstr_58_ethernet
$D3EA	$6563	    			DATA	DATA lstr_58_ethernet
$D3EC	$7470	    			DATA	DATA lstr_58_ethernet
$D3EE	$6465	    			DATA	DATA lstr_58_ethernet
$D3F0	$FF00	    			DATA	DATA
$D3F2	$7326	    			DATA	DATA lstr_59_ethernet
$D3F4	$6174	    			DATA	DATA lstr_59_ethernet
$D3F6	$6574	    			DATA	DATA lstr_59_ethernet
$D3F8	$6F3D	    			DATA	DATA lstr_59_ethernet
$D3FA	$006B	    			DATA	DATA lstr_59_ethernet
$D3FC	$6326	    			DATA	DATA lstr_60_ethernet
$D3FE	$6C65	    			DATA	DATA lstr_60_ethernet
$D400	$5F6C	    			DATA	DATA lstr_60_ethernet
$D402	$3025	    			DATA	DATA lstr_60_ethernet
$D404	$6432	    			DATA	DATA lstr_60_ethernet
$D406	$003D	    			DATA	DATA lstr_60_ethernet
$D408	$6F6E	    			DATA	DATA lstr_61_ethernet
$D40A	$0A0D	    			DATA	DATA lstr_61_ethernet
$D40C	$FF00	    			DATA	DATA
$D40E	$6325	    			DATA	DATA lstr_62_ethernet
$D410	$002C	    			DATA	DATA lstr_62_ethernet
$D412	$6325	    			DATA	DATA lstr_63_ethernet
$D414	$002C	    			DATA	DATA lstr_63_ethernet
$D416	$6325	    			DATA	DATA lstr_64_ethernet
$D418	$002C	    			DATA	DATA lstr_64_ethernet
$D41A	$6325	    			DATA	DATA lstr_65_ethernet
$D41C	$002C	    			DATA	DATA lstr_65_ethernet
$D41E	$6325	    			DATA	DATA lstr_66_ethernet
$D420	$FF00	    			DATA	DATA
$D422	$6572	    			DATA	DATA lstr_67_ethernet
$D424	$7573	    			DATA	DATA lstr_67_ethernet
$D426	$746C	    			DATA	DATA lstr_67_ethernet
$D428	$693D	    			DATA	DATA lstr_67_ethernet
$D42A	$6C6C	    			DATA	DATA lstr_67_ethernet
$D42C	$6765	    			DATA	DATA lstr_67_ethernet
$D42E	$6C61	    			DATA	DATA lstr_67_ethernet
$D430	$635F	    			DATA	DATA lstr_67_ethernet
$D432	$6D6F	    			DATA	DATA lstr_67_ethernet
$D434	$616D	    			DATA	DATA lstr_67_ethernet
$D436	$646E	    			DATA	DATA lstr_67_ethernet
$D438	$FF00	    			DATA	DATA
$D43A	$6574	    			DATA	DATA _httpMimeTypeHTML
$D43C	$7478	    			DATA	DATA _httpMimeTypeHTML
$D43E	$682F	    			DATA	DATA _httpMimeTypeHTML
$D440	$6D74	    			DATA	DATA _httpMimeTypeHTML
$D442	$0A6C	    			DATA	DATA _httpMimeTypeHTML
$D444	$000A	    			DATA	DATA _httpMimeTypeHTML
$D446	$5F8C	    			DATA	DATA _key_arr
$D448	$C237	    			DATA	DATA _key_arr
$D44A	$E3BB	    			DATA	DATA _key_arr
$D44C	$8A3C	    			DATA	DATA _key_arr
$D44E	$5720	    			DATA	DATA _key_arr
$D450	$BBC3	    			DATA	DATA _key_arr
$D452	$24EE	    			DATA	DATA _key_arr
$D454	$78B2	    			DATA	DATA _key_arr
$D456	$B4AB	    			DATA	DATA _key_arr
$D458	$EB13	    			DATA	DATA _key_arr
$D45A	$3E8D	    			DATA	DATA _key_arr
$D45C	$508F	    			DATA	DATA _key_arr
$D45E	$3BC9	    			DATA	DATA _key_arr
$D460	$8D65	    			DATA	DATA _key_arr
$D462	$5A49	    			DATA	DATA _key_arr
$D464	$F3BD	    			DATA	DATA _key_arr
$D466	$096E	    			DATA	DATA _key_arr
$D468	$57E7	    			DATA	DATA _key_arr
$D46A	$62F4	    			DATA	DATA _key_arr
$D46C	$57EE	    			DATA	DATA _key_arr
$D46E	$35B9	    			DATA	DATA _key_arr
$D470	$D1DE	    			DATA	DATA _key_arr
$D472	$C479	    			DATA	DATA _key_arr
$D474	$500F	    			DATA	DATA _key_arr
$D476	$F0E5	    			DATA	DATA _key_arr
$D478	$E114	    			DATA	DATA _key_arr
$D47A	$836F	    			DATA	DATA _key_arr
$D47C	$9277	    			DATA	DATA _key_arr
$D47E	$46B5	    			DATA	DATA _key_arr
$D480	$459B	    			DATA	DATA _key_arr
$D482	$CA23	    			DATA	DATA _key_arr
$D484	$24F2	    			DATA	DATA _key_arr
$D486	$969A	    			DATA	DATA _key_arr
$D488	$9677	    			DATA	DATA _key_arr
$D48A	$0868	    			DATA	DATA _key_arr
$D48C	$4423	    			DATA	DATA _key_arr
$D48E	$2B52	    			DATA	DATA _key_arr
$D490	$28EF	    			DATA	DATA _key_arr
$D492	$5B20	    			DATA	DATA _key_arr
$D494	$65D7	    			DATA	DATA _key_arr
$D496	$E003	    			DATA	DATA _key_arr
$D498	$7714	    			DATA	DATA _key_arr
$D49A	$7D58	    			DATA	DATA _key_arr
$D49C	$485F	    			DATA	DATA _key_arr
$D49E	$9F4C	    			DATA	DATA _key_arr
$D4A0	$8C5F	    			DATA	DATA _key_arr
$D4A2	$4577	    			DATA	DATA _key_arr
$D4A4	$3C7F	    			DATA	DATA _key_arr
$D4A6	$D57E	    			DATA	DATA _key_arr
$D4A8	$1355	    			DATA	DATA _key_arr
$D4AA	$7CC9	    			DATA	DATA _key_arr
$D4AC	$B4A9	    			DATA	DATA _key_arr
$D4AE	$F2C9	    			DATA	DATA _key_arr
$D4B0	$9CC3	    			DATA	DATA _key_arr
$D4B2	$4770	    			DATA	DATA _key_arr
$D4B4	$83A0	    			DATA	DATA _key_arr
$D4B6	$ADDD	    			DATA	DATA _key_arr
$D4B8	$0F21	    			DATA	DATA _key_arr
$D4BA	$64A8	    			DATA	DATA _key_arr
$D4BC	$EEC2	    			DATA	DATA _key_arr
$D4BE	$68F7	    			DATA	DATA _key_arr
$D4C0	$E315	    			DATA	DATA _key_arr
$D4C2	$130E	    			DATA	DATA _key_arr
$D4C4	$71CE	    			DATA	DATA _key_arr
$D4C6	$8A95	    			DATA	DATA _key_arr
$D4C8	$3711	    			DATA	DATA _key_arr
$D4CA	$9992	    			DATA	DATA _key_arr
$D4CC	$C357	    			DATA	DATA _key_arr
$D4CE	$B19A	    			DATA	DATA _key_arr
$D4D0	$C768	    			DATA	DATA _key_arr
$D4D2	$F266	    			DATA	DATA _key_arr
$D4D4	$E130	    			DATA	DATA _key_arr
$D4D6	$8A57	    			DATA	DATA _key_arr
$D4D8	$67D9	    			DATA	DATA _key_arr
$D4DA	$EDF2	    			DATA	DATA _key_arr
$D4DC	$EE9C	    			DATA	DATA _key_arr
$D4DE	$1B1B	    			DATA	DATA _key_arr
$D4E0	$7DCF	    			DATA	DATA _key_arr
$D4E2	$1E8A	    			DATA	DATA _key_arr
$D4E4	$7176	    			DATA	DATA _key_arr
$D4E6	$3C53	    			DATA	DATA _key_arr
$D4E8	$4FEC	    			DATA	DATA _key_arr
$D4EA	$D9AE	    			DATA	DATA _key_arr
$D4EC	$ADD4	    			DATA	DATA _key_arr
$D4EE	$7D94	    			DATA	DATA _key_arr
$D4F0	$5EE8	    			DATA	DATA _key_arr
$D4F2	$6662	    			DATA	DATA _key_arr
$D4F4	$787E	    			DATA	DATA _key_arr
$D4F6	$2B26	    			DATA	DATA _key_arr
$D4F8	$6EC1	    			DATA	DATA _key_arr
$D4FA	$7876	    			DATA	DATA _key_arr
$D4FC	$BD02	    			DATA	DATA _key_arr
$D4FE	$87A8	    			DATA	DATA _key_arr
$D500	$1F4F	    			DATA	DATA _key_arr
$D502	$0F9E	    			DATA	DATA _key_arr
$D504	$D2BF	    			DATA	DATA _key_arr
$D506	$CCB8	    			DATA	DATA _key_arr
$D508	$38D3	    			DATA	DATA _key_arr
$D50A	$3F93	    			DATA	DATA _key_arr
$D50C	$ACAA	    			DATA	DATA _key_arr
$D50E	$FA26	    			DATA	DATA _key_arr
$D510	$17DC	    			DATA	DATA _key_arr
$D512	$5FE6	    			DATA	DATA _key_arr
$D514	$8EE7	    			DATA	DATA _key_arr
$D516	$0622	    			DATA	DATA _key_arr
$D518	$0E15	    			DATA	DATA _key_arr
$D51A	$84D4	    			DATA	DATA _key_arr
$D51C	$211A	    			DATA	DATA _key_arr
$D51E	$91D5	    			DATA	DATA _key_arr
$D520	$20C2	    			DATA	DATA _key_arr
$D522	$5B56	    			DATA	DATA _key_arr
$D524	$7D20	    			DATA	DATA _key_arr
$D526	$4952	    			DATA	DATA _key_arr
$D528	$1477	    			DATA	DATA _key_arr
$D52A	$3EAC	    			DATA	DATA _key_arr
$D52C	$8EED	    			DATA	DATA _key_arr
$D52E	$90E4	    			DATA	DATA _key_arr
$D530	$8579	    			DATA	DATA _key_arr
$D532	$3B90	    			DATA	DATA _key_arr
$D534	$7998	    			DATA	DATA _key_arr
$D536	$75B2	    			DATA	DATA _key_arr
$D538	$6447	    			DATA	DATA _key_arr
$D53A	$52A4	    			DATA	DATA _key_arr
$D53C	$79A3	    			DATA	DATA _key_arr
$D53E	$E4A7	    			DATA	DATA _key_arr
$D540	$6F3F	    			DATA	DATA _key_arr
$D542	$796E	    			DATA	DATA _key_arr
$D544	$FFE7	    			DATA	DATA _key_arr
$D546	$4579	    			DATA	DATA _key_arr
$D548	$29DE	    			DATA	DATA _key_arr
$D54A	$84CA	    			DATA	DATA _key_arr
$D54C	$AB68	    			DATA	DATA _key_arr
$D54E	$DD81	    			DATA	DATA _key_arr
$D550	$DE68	    			DATA	DATA _key_arr
$D552	$C2A9	    			DATA	DATA _key_arr
$D554	$364A	    			DATA	DATA _key_arr
$D556	$D539	    			DATA	DATA _key_arr
$D558	$8C44	    			DATA	DATA _key_arr
$D55A	$D677	    			DATA	DATA _key_arr
$D55C	$FA8E	    			DATA	DATA _key_arr
$D55E	$A91A	    			DATA	DATA _key_arr
$D560	$A294	    			DATA	DATA _key_arr
$D562	$96C8	    			DATA	DATA _key_arr
$D564	$AFB0	    			DATA	DATA _key_arr
$D566	$AAA3	    			DATA	DATA _key_arr
$D568	$CCBE	    			DATA	DATA _key_arr
$D56A	$10C7	    			DATA	DATA _key_arr
$D56C	$9564	    			DATA	DATA _key_arr
$D56E	$0A0D	    			DATA	DATA _key_arr
$D570	$5701	    			DATA	DATA _key_arr
$D572	$BBCF	    			DATA	DATA _key_arr
$D574	$BE55	    			DATA	DATA _key_arr
$D576	$EB3A	    			DATA	DATA _key_arr
$D578	$BCEB	    			DATA	DATA _key_arr
$D57A	$EEF3	    			DATA	DATA _key_arr
$D57C	$6720	    			DATA	DATA _key_arr
$D57E	$6D3C	    			DATA	DATA _key_arr
$D580	$A15F	    			DATA	DATA _key_arr
$D582	$5F35	    			DATA	DATA _key_arr
$D584	$3CCB	    			DATA	DATA _key_arr
$D586	$2FF3	    			DATA	DATA _key_arr
$D588	$0487	    			DATA	DATA _key_arr
$D58A	$BC2E	    			DATA	DATA _key_arr
$D58C	$85C3	    			DATA	DATA _key_arr
$D58E	$1DDE	    			DATA	DATA _key_arr
$D590	$CEF1	    			DATA	DATA _key_arr
$D592	$479F	    			DATA	DATA _key_arr
$D594	$0E95	    			DATA	DATA _key_arr
$D596	$0D57	    			DATA	DATA _key_arr
$D598	$730A	    			DATA	DATA _key_arr
$D59A	$AB3E	    			DATA	DATA _key_arr
$D59C	$FF20	    			DATA	DATA _key_arr
$D59E	$725E	    			DATA	DATA _key_arr
$D5A0	$323E	    			DATA	DATA _key_arr
$D5A2	$3CB1	    			DATA	DATA _key_arr
$D5A4	$0213	    			DATA	DATA _key_arr
$D5A6	$3148	    			DATA	DATA _key_arr
$D5A8	$E6C8	    			DATA	DATA _key_arr
$D5AA	$F9C0	    			DATA	DATA _key_arr
$D5AC	$5361	    			DATA	DATA _key_arr
$D5AE	$342E	    			DATA	DATA _key_arr
$D5B0	$A952	    			DATA	DATA _key_arr
$D5B2	$F16B	    			DATA	DATA _key_arr
$D5B4	$48AE	    			DATA	DATA _key_arr
$D5B6	$B534	    			DATA	DATA _key_arr
$D5B8	$3BDC	    			DATA	DATA _key_arr
$D5BA	$AD45	    			DATA	DATA _key_arr
$D5BC	$63BC	    			DATA	DATA _key_arr
$D5BE	$3BE0	    			DATA	DATA _key_arr
$D5C0	$2151	    			DATA	DATA _key_arr
$D5C2	$6A83	    			DATA	DATA _key_arr
$D5C4	$D6DA	    			DATA	DATA _key_arr
$D5C6	$AC50	    			DATA	DATA _key_arr
$D5C8	$66BE	    			DATA	DATA _key_arr
$D5CA	$E312	    			DATA	DATA _key_arr
$D5CC	$761D	    			DATA	DATA _key_arr
$D5CE	$84BD	    			DATA	DATA _key_arr
$D5D0	$3FDB	    			DATA	DATA _key_arr
$D5D2	$79FC	    			DATA	DATA _key_arr
$D5D4	$4B64	    			DATA	DATA _key_arr
$D5D6	$EF18	    			DATA	DATA _key_arr
$D5D8	$34F4	    			DATA	DATA _key_arr
$D5DA	$E619	    			DATA	DATA _key_arr
$D5DC	$087E	    			DATA	DATA _key_arr
$D5DE	$4AB2	    			DATA	DATA _key_arr
$D5E0	$8085	    			DATA	DATA _key_arr
$D5E2	$C11B	    			DATA	DATA _key_arr
$D5E4	$CC3B	    			DATA	DATA _key_arr
$D5E6	$EF63	    			DATA	DATA _key_arr
$D5E8	$4BBC	    			DATA	DATA _key_arr
$D5EA	$E362	    			DATA	DATA _key_arr
$D5EC	$5D89	    			DATA	DATA _key_arr
$D5EE	$A760	    			DATA	DATA _key_arr
$D5F0	$41A1	    			DATA	DATA _key_arr
$D5F2	$25AB	    			DATA	DATA _key_arr
$D5F4	$F849	    			DATA	DATA _key_arr
$D5F6	$FCCB	    			DATA	DATA _key_arr
$D5F8	$5E12	    			DATA	DATA _key_arr
$D5FA	$E312	    			DATA	DATA _key_arr
$D5FC	$BA5D	    			DATA	DATA _key_arr
$D5FE	$655F	    			DATA	DATA _key_arr
$D600	$8D51	    			DATA	DATA _key_arr
$D602	$7F0F	    			DATA	DATA _key_arr
$D604	$5954	    			DATA	DATA _key_arr
$D606	$EB4D	    			DATA	DATA _key_arr
$D608	$CFB6	    			DATA	DATA _key_arr
$D60A	$D53B	    			DATA	DATA _key_arr
$D60C	$64A9	    			DATA	DATA _key_arr
$D60E	$6B63	    			DATA	DATA _key_arr
$D610	$743F	    			DATA	DATA _key_arr
$D612	$FAD8	    			DATA	DATA _key_arr
$D614	$CCAF	    			DATA	DATA _key_arr
$D616	$7CA6	    			DATA	DATA _key_arr
$D618	$398E	    			DATA	DATA _key_arr
$D61A	$343F	    			DATA	DATA _key_arr
$D61C	$C8B2	    			DATA	DATA _key_arr
$D61E	$58F9	    			DATA	DATA _key_arr
$D620	$84D3	    			DATA	DATA _key_arr
$D622	$99E5	    			DATA	DATA _key_arr
$D624	$4010	    			DATA	DATA _key_arr
$D626	$12F3	    			DATA	DATA _key_arr
$D628	$54EF	    			DATA	DATA _key_arr
$D62A	$7C26	    			DATA	DATA _key_arr
$D62C	$BC1B	    			DATA	DATA _key_arr
$D62E	$1E7B	    			DATA	DATA _key_arr
$D630	$30F6	    			DATA	DATA _key_arr
$D632	$CC5F	    			DATA	DATA _key_arr
$D634	$E6DE	    			DATA	DATA _key_arr
$D636	$7915	    			DATA	DATA _key_arr
$D638	$2137	    			DATA	DATA _key_arr
$D63A	$6AF5	    			DATA	DATA _key_arr
$D63C	$7418	    			DATA	DATA _key_arr
$D63E	$5B4A	    			DATA	DATA _key_arr
$D640	$6B54	    			DATA	DATA _key_arr
$D642	$70FD	    			DATA	DATA _key_arr
$D644	$877D	    			DATA	DATA _key_arr
$D646	$42D5	    			DATA	DATA _key_arr
$D648	$CDDE	    			DATA	DATA _key_arr
$D64A	$1987	    			DATA	DATA _key_arr
$D64C	$7F21	    			DATA	DATA _key_arr
$D64E	$DB62	    			DATA	DATA _key_arr
$D650	$EC35	    			DATA	DATA _key_arr
$D652	$1E6D	    			DATA	DATA _key_arr
$D654	$4827	    			DATA	DATA _key_arr
$D656	$499E	    			DATA	DATA _key_arr
$D658	$9042	    			DATA	DATA _key_arr
$D65A	$2A55	    			DATA	DATA _key_arr
$D65C	$5C04	    			DATA	DATA _key_arr
$D65E	$EF13	    			DATA	DATA _key_arr
$D660	$1E54	    			DATA	DATA _key_arr
$D662	$C05B	    			DATA	DATA _key_arr
$D664	$BD11	    			DATA	DATA _key_arr
$D666	$AEF3	    			DATA	DATA _key_arr
$D668	$74A8	    			DATA	DATA _key_arr
$D66A	$71A9	    			DATA	DATA _key_arr
$D66C	$6C31	    			DATA	DATA _key_arr
$D66E	$A58B	    			DATA	DATA _key_arr
$D670	$0D6F	    			DATA	DATA _key_arr
$D672	$8B0A	    			DATA	DATA _key_arr
$D674	$F41F	    			DATA	DATA _key_arr
$D676	$58FE	    			DATA	DATA _key_arr
$D678	$E5A6	    			DATA	DATA _key_arr
$D67A	$ED90	    			DATA	DATA _key_arr
$D67C	$BA31	    			DATA	DATA _key_arr
$D67E	$72C4	    			DATA	DATA _key_arr
$D680	$F3FA	    			DATA	DATA _key_arr
$D682	$5CC5	    			DATA	DATA _key_arr
$D684	$2BC5	    			DATA	DATA _key_arr
$D686	$ABAA	    			DATA	DATA _key_arr
$D688	$C8B3	    			DATA	DATA _key_arr
$D68A	$6041	    			DATA	DATA _key_arr
$D68C	$AFC3	    			DATA	DATA _key_arr
$D68E	$CC52	    			DATA	DATA _key_arr
$D690	$F582	    			DATA	DATA _key_arr
$D692	$9EBC	    			DATA	DATA _key_arr
$D694	$9877	    			DATA	DATA _key_arr
$D696	$AD8D	    			DATA	DATA _key_arr
$D698	$2C7D	    			DATA	DATA _key_arr
$D69A	$F4A9	    			DATA	DATA _key_arr
$D69C	$CC5F	    			DATA	DATA _key_arr
$D69E	$2662	    			DATA	DATA _key_arr
$D6A0	$5D67	    			DATA	DATA _key_arr
$D6A2	$61CC	    			DATA	DATA _key_arr
$D6A4	$788B	    			DATA	DATA _key_arr
$D6A6	$EF99	    			DATA	DATA _key_arr
$D6A8	$326D	    			DATA	DATA _key_arr
$D6AA	$CAC7	    			DATA	DATA _key_arr
$D6AC	$90FE	    			DATA	DATA _key_arr
$D6AE	$C33C	    			DATA	DATA _key_arr
$D6B0	$83B8	    			DATA	DATA _key_arr
$D6B2	$EE42	    			DATA	DATA _key_arr
$D6B4	$74D0	    			DATA	DATA _key_arr
$D6B6	$191A	    			DATA	DATA _key_arr
$D6B8	$D4A9	    			DATA	DATA _key_arr
$D6BA	$F0BD	    			DATA	DATA _key_arr
$D6BC	$242E	    			DATA	DATA _key_arr
$D6BE	$D694	    			DATA	DATA _key_arr
$D6C0	$79B5	    			DATA	DATA _key_arr
$D6C2	$0957	    			DATA	DATA _key_arr
$D6C4	$13A0	    			DATA	DATA _key_arr
$D6C6	$8B9B	    			DATA	DATA _key_arr
$D6C8	$EB5A	    			DATA	DATA _key_arr
$D6CA	$DE33	    			DATA	DATA _key_arr
$D6CC	$92D9	    			DATA	DATA _key_arr
$D6CE	$3EDE	    			DATA	DATA _key_arr
$D6D0	$F389	    			DATA	DATA _key_arr
$D6D2	$4514	    			DATA	DATA _key_arr
$D6D4	$64B6	    			DATA	DATA _key_arr
$D6D6	$7849	    			DATA	DATA _key_arr
$D6D8	$26C7	    			DATA	DATA _key_arr
$D6DA	$0869	    			DATA	DATA _key_arr
$D6DC	$4AB2	    			DATA	DATA _key_arr
$D6DE	$8085	    			DATA	DATA _key_arr
$D6E0	$E4AB	    			DATA	DATA _key_arr
$D6E2	$315D	    			DATA	DATA _key_arr
$D6E4	$2D89	    			DATA	DATA _key_arr
$D6E6	$8F6E	    			DATA	DATA _key_arr
$D6E8	$6177	    			DATA	DATA _key_arr
$D6EA	$A2C3	    			DATA	DATA _key_arr
$D6EC	$719D	    			DATA	DATA _key_arr
$D6EE	$516D	    			DATA	DATA _key_arr
$D6F0	$E017	    			DATA	DATA _key_arr
$D6F2	$0D9D	    			DATA	DATA _key_arr
$D6F4	$300A	    			DATA	DATA _key_arr
$D6F6	$5CF4	    			DATA	DATA _key_arr
$D6F8	$7A3E	    			DATA	DATA _key_arr
$D6FA	$7E19	    			DATA	DATA _key_arr
$D6FC	$881E	    			DATA	DATA _key_arr
$D6FE	$6F09	    			DATA	DATA _key_arr
$D700	$5956	    			DATA	DATA _key_arr
$D702	$CB98	    			DATA	DATA _key_arr
$D704	$ADCD	    			DATA	DATA _key_arr
$D706	$32CA	    			DATA	DATA _key_arr
$D708	$8F3C	    			DATA	DATA _key_arr
$D70A	$7D9C	    			DATA	DATA _key_arr
$D70C	$E3C9	    			DATA	DATA _key_arr
$D70E	$A297	    			DATA	DATA _key_arr
$D710	$A68A	    			DATA	DATA _key_arr
$D712	$F38A	    			DATA	DATA _key_arr
$D714	$58A8	    			DATA	DATA _key_arr
$D716	$D8AD	    			DATA	DATA _key_arr
$D718	$D17B	    			DATA	DATA _key_arr
$D71A	$F9C3	    			DATA	DATA _key_arr
$D71C	$2070	    			DATA	DATA _key_arr
$D71E	$F09A	    			DATA	DATA _key_arr
$D720	$D8AE	    			DATA	DATA _key_arr
$D722	$FEDC	    			DATA	DATA _key_arr
$D724	$E739	    			DATA	DATA _key_arr
$D726	$8137	    			DATA	DATA _key_arr
$D728	$623B	    			DATA	DATA _key_arr
$D72A	$2679	    			DATA	DATA _key_arr
$D72C	$9004	    			DATA	DATA _key_arr
$D72E	$5062	    			DATA	DATA _key_arr
$D730	$2E11	    			DATA	DATA _key_arr
$D732	$9FD6	    			DATA	DATA _key_arr
$D734	$BAD1	    			DATA	DATA _key_arr
$D736	$EF22	    			DATA	DATA _key_arr
$D738	$A2EC	    			DATA	DATA _key_arr
$D73A	$16EC	    			DATA	DATA _key_arr
$D73C	$1778	    			DATA	DATA _key_arr
$D73E	$2C82	    			DATA	DATA _key_arr
$D740	$1354	    			DATA	DATA _key_arr
$D742	$7C7A	    			DATA	DATA _key_arr
$D744	$AA23	    			DATA	DATA _key_arr
$D746	$8332	    			DATA	DATA _key_arr
$D748	$72D1	    			DATA	DATA _key_arr
$D74A	$DE52	    			DATA	DATA _key_arr
$D74C	$8EA1	    			DATA	DATA _key_arr
$D74E	$49F6	    			DATA	DATA _key_arr
$D750	$CF9C	    			DATA	DATA _key_arr
$D752	$04F3	    			DATA	DATA _key_arr
$D754	$8522	    			DATA	DATA _key_arr
$D756	$CECA	    			DATA	DATA _key_arr
$D758	$7951	    			DATA	DATA _key_arr
$D75A	$905A	    			DATA	DATA _key_arr
$D75C	$2156	    			DATA	DATA _key_arr
$D75E	$2AC8	    			DATA	DATA _key_arr
$D760	$0215	    			DATA	DATA _key_arr
$D762	$9EAE	    			DATA	DATA _key_arr
$D764	$5877	    			DATA	DATA _key_arr
$D766	$8722	    			DATA	DATA _key_arr
$D768	$CEF6	    			DATA	DATA _key_arr
$D76A	$24BB	    			DATA	DATA _key_arr
$D76C	$9E36	    			DATA	DATA _key_arr
$D76E	$05D8	    			DATA	DATA _key_arr
$D770	$1A76	    			DATA	DATA _key_arr
$D772	$541A	    			DATA	DATA _key_arr
$D774	$E9D2	    			DATA	DATA _key_arr
$D776	$3074	    			DATA	DATA _key_arr
$D778	$6188	    			DATA	DATA _key_arr
$D77A	$2296	    			DATA	DATA _key_arr
$D77C	$F9ED	    			DATA	DATA _key_arr
$D77E	$E2F0	    			DATA	DATA _key_arr
$D780	$6768	    			DATA	DATA _key_arr
$D782	$D771	    			DATA	DATA _key_arr
$D784	$91D5	    			DATA	DATA _key_arr
$D786	$7356	    			DATA	DATA _key_arr
$D788	$CE83	    			DATA	DATA _key_arr
$D78A	$5926	    			DATA	DATA _key_arr
$D78C	$D497	    			DATA	DATA _key_arr
$D78E	$8A91	    			DATA	DATA _key_arr
$D790	$8C87	    			DATA	DATA _key_arr
$D792	$AB77	    			DATA	DATA _key_arr
$D794	$14FC	    			DATA	DATA _key_arr
$D796	$81E0	    			DATA	DATA _key_arr
$D798	$A7CC	    			DATA	DATA _key_arr
$D79A	$9DE3	    			DATA	DATA _key_arr
$D79C	$EDCA	    			DATA	DATA _key_arr
$D79E	$C3B3	    			DATA	DATA _key_arr
$D7A0	$0A0D	    			DATA	DATA _key_arr
$D7A2	$A6B7	    			DATA	DATA _key_arr
$D7A4	$34AD	    			DATA	DATA _key_arr
$D7A6	$9854	    			DATA	DATA _key_arr
$D7A8	$6E60	    			DATA	DATA _key_arr
$D7AA	$6D1C	    			DATA	DATA _key_arr
$D7AC	$BCB2	    			DATA	DATA _key_arr
$D7AE	$EA44	    			DATA	DATA _key_arr
$D7B0	$0633	    			DATA	DATA _key_arr
$D7B2	$E321	    			DATA	DATA _key_arr
$D7B4	$2144	    			DATA	DATA _key_arr
$D7B6	$EAC5	    			DATA	DATA _key_arr
$D7B8	$2D75	    			DATA	DATA _key_arr
$D7BA	$F9DE	    			DATA	DATA _key_arr
$D7BC	$5E7F	    			DATA	DATA _key_arr
$D7BE	$779E	    			DATA	DATA _key_arr
$D7C0	$B30E	    			DATA	DATA _key_arr
$D7C2	$514E	    			DATA	DATA _key_arr
$D7C4	$9DC8	    			DATA	DATA _key_arr
$D7C6	$B6FA	    			DATA	DATA _key_arr
$D7C8	$3C45	    			DATA	DATA _key_arr
$D7CA	$ED15	    			DATA	DATA _key_arr
$D7CC	$9D84	    			DATA	DATA _key_arr
$D7CE	$392E	    			DATA	DATA _key_arr
$D7D0	$96EF	    			DATA	DATA _key_arr
$D7D2	$5504	    			DATA	DATA _key_arr
$D7D4	$A85E	    			DATA	DATA _key_arr
$D7D6	$2697	    			DATA	DATA _key_arr
$D7D8	$C84E	    			DATA	DATA _key_arr
$D7DA	$953B	    			DATA	DATA _key_arr
$D7DC	$42BB	    			DATA	DATA _key_arr
$D7DE	$5590	    			DATA	DATA _key_arr
$D7E0	$042A	    			DATA	DATA _key_arr
$D7E2	$08DC	    			DATA	DATA _key_arr
$D7E4	$A1DE	    			DATA	DATA _key_arr
$D7E6	$EF9F	    			DATA	DATA _key_arr
$D7E8	$4BBC	    			DATA	DATA _key_arr
$D7EA	$C672	    			DATA	DATA _key_arr
$D7EC	$F6D3	    			DATA	DATA _key_arr
$D7EE	$5A15	    			DATA	DATA _key_arr
$D7F0	$C2B3	    			DATA	DATA _key_arr
$D7F2	$C2D0	    			DATA	DATA _key_arr
$D7F4	$3972	    			DATA	DATA _key_arr
$D7F6	$E917	    			DATA	DATA _key_arr
$D7F8	$F31F	    			DATA	DATA _key_arr
$D7FA	$7788	    			DATA	DATA _key_arr
$D7FC	$2A5D	    			DATA	DATA _key_arr
$D7FE	$CA93	    			DATA	DATA _key_arr
$D800	$DB8B	    			DATA	DATA _key_arr
$D802	$9DE0	    			DATA	DATA _key_arr
$D804	$9F1D	    			DATA	DATA _key_arr
$D806	$70E5	    			DATA	DATA _key_arr
$D808	$887F	    			DATA	DATA _key_arr
$D80A	$5FB5	    			DATA	DATA _key_arr
$D80C	$E93F	    			DATA	DATA _key_arr
$D80E	$8ED0	    			DATA	DATA _key_arr
$D810	$EF95	    			DATA	DATA _key_arr
$D812	$92F9	    			DATA	DATA _key_arr
$D814	$64EF	    			DATA	DATA _key_arr
$D816	$E6DA	    			DATA	DATA _key_arr
$D818	$7F65	    			DATA	DATA _key_arr
$D81A	$5E58	    			DATA	DATA _key_arr
$D81C	$F522	    			DATA	DATA _key_arr
$D81E	$8319	    			DATA	DATA _key_arr
$D820	$BF9E	    			DATA	DATA _key_arr
$D822	$351F	    			DATA	DATA _key_arr
$D824	$F1FB	    			DATA	DATA _key_arr
$D826	$6939	    			DATA	DATA _key_arr
$D828	$73C4	    			DATA	DATA _key_arr
$D82A	$4C16	    			DATA	DATA _key_arr
$D82C	$E2D7	    			DATA	DATA _key_arr
$D82E	$4BDD	    			DATA	DATA _key_arr
$D830	$F3E3	    			DATA	DATA _key_arr
$D832	$3108	    			DATA	DATA _key_arr
$D834	$26E0	    			DATA	DATA _key_arr
$D836	$5DE2	    			DATA	DATA _key_arr
$D838	$B088	    			DATA	DATA _key_arr
$D83A	$857A	    			DATA	DATA _key_arr
$D83C	$59D0	    			DATA	DATA _key_arr
$D83E	$F356	    			DATA	DATA _key_arr
$D840	$C1CE	    			DATA	DATA _key_arr
$D842	$B593	    			DATA	DATA _key_arr
$D844	$7613	    			DATA	DATA _key_arr
